
Smart Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000e0a8  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000002a4  20000000  0000e0a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000202a4  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000202a4  2**0
                  CONTENTS
  4 .bss          00010aa0  200002a4  0000e34c  000202a4  2**2
                  ALLOC
  5 .stack        00010004  20010d44  0001edec  000202a4  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000202a4  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000202d2  2**0
                  CONTENTS, READONLY
  8 .debug_info   00054c1b  00000000  00000000  0002032b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000751b  00000000  00000000  00074f46  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002805f  00000000  00000000  0007c461  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001b18  00000000  00000000  000a44c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001cd0  00000000  00000000  000a5fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003abc0  00000000  00000000  000a7ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00022ee2  00000000  00000000  000e2868  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00129fdd  00000000  00000000  0010574a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005f48  00000000  00000000  0022f728  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	48 0d 02 20 f1 02 00 00 e7 02 00 00 e9 02 00 00     H.. ............
      10:	eb 02 00 00 ed 02 00 00 ef 02 00 00 00 00 00 00     ................
	...
      2c:	e1 61 00 00 e5 02 00 00 00 00 00 00 81 62 00 00     .a...........b..
      3c:	e5 62 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     .b..............
      4c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      5c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      6c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      7c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      8c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      9c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      ac:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      bc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      cc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      dc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      f4:	5d 0a 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ]...............
     104:	e5 02 00 00 f9 0d 00 00 0d 0e 00 00 21 0e 00 00     ............!...
     114:	35 0e 00 00 49 0e 00 00 5d 0e 00 00 71 0e 00 00     5...I...]...q...
     124:	85 0e 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     134:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     144:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     154:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     164:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     174:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     184:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     194:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1a4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1b4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1c4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1d4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1e4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1f4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     204:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     214:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     224:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     234:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     244:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     254:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200002a4 	.word	0x200002a4
     280:	00000000 	.word	0x00000000
     284:	0000e0a8 	.word	0x0000e0a8

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000e0a8 	.word	0x0000e0a8
     2c4:	200002a8 	.word	0x200002a8
     2c8:	0000e0a8 	.word	0x0000e0a8
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b02      	ldr	r3, [pc, #8]	; (2dc <atmel_start_init+0xc>)
     2d4:	4798      	blx	r3
	stdio_redirect_init();
     2d6:	4b02      	ldr	r3, [pc, #8]	; (2e0 <atmel_start_init+0x10>)
     2d8:	4798      	blx	r3
     2da:	bd08      	pop	{r3, pc}
     2dc:	00000535 	.word	0x00000535
     2e0:	00005ce5 	.word	0x00005ce5

000002e4 <Dummy_Handler>:
}

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void){
     2e4:	e7fe      	b.n	2e4 <Dummy_Handler>

000002e6 <NonMaskableInt_Dummy_Handler>:
	while (1) {
	}
}

void NonMaskableInt_Dummy_Handler(void){
     2e6:	e7fe      	b.n	2e6 <NonMaskableInt_Dummy_Handler>

000002e8 <HardFault_Dummy_Handler>:
        while (1) {
        }
}

void HardFault_Dummy_Handler(void){
     2e8:	e7fe      	b.n	2e8 <HardFault_Dummy_Handler>

000002ea <MemManagement_Dummy_Handler>:
	while (1) {
	}
}

void MemManagement_Dummy_Handler(void){
     2ea:	e7fe      	b.n	2ea <MemManagement_Dummy_Handler>

000002ec <BusFault_Dummy_Handler>:
	while (1) {
	}
}

void BusFault_Dummy_Handler(void){
     2ec:	e7fe      	b.n	2ec <BusFault_Dummy_Handler>

000002ee <UsageFault_Dummy_Handler>:
	while (1) {
	}
}

void UsageFault_Dummy_Handler(void){
     2ee:	e7fe      	b.n	2ee <UsageFault_Dummy_Handler>

000002f0 <Reset_Handler>:
{
     2f0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2f2:	4b15      	ldr	r3, [pc, #84]	; (348 <Reset_Handler+0x58>)
     2f4:	4a15      	ldr	r2, [pc, #84]	; (34c <Reset_Handler+0x5c>)
     2f6:	429a      	cmp	r2, r3
     2f8:	d009      	beq.n	30e <Reset_Handler+0x1e>
     2fa:	4b13      	ldr	r3, [pc, #76]	; (348 <Reset_Handler+0x58>)
     2fc:	4a13      	ldr	r2, [pc, #76]	; (34c <Reset_Handler+0x5c>)
     2fe:	e003      	b.n	308 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     300:	6811      	ldr	r1, [r2, #0]
     302:	6019      	str	r1, [r3, #0]
     304:	3304      	adds	r3, #4
     306:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     308:	4911      	ldr	r1, [pc, #68]	; (350 <Reset_Handler+0x60>)
     30a:	428b      	cmp	r3, r1
     30c:	d3f8      	bcc.n	300 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     30e:	4b11      	ldr	r3, [pc, #68]	; (354 <Reset_Handler+0x64>)
     310:	e002      	b.n	318 <Reset_Handler+0x28>
                *pDest++ = 0;
     312:	2200      	movs	r2, #0
     314:	601a      	str	r2, [r3, #0]
     316:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     318:	4a0f      	ldr	r2, [pc, #60]	; (358 <Reset_Handler+0x68>)
     31a:	4293      	cmp	r3, r2
     31c:	d3f9      	bcc.n	312 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31e:	4b0f      	ldr	r3, [pc, #60]	; (35c <Reset_Handler+0x6c>)
     320:	4a0f      	ldr	r2, [pc, #60]	; (360 <Reset_Handler+0x70>)
     322:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     326:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     328:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     32c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     330:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     334:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     338:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     33c:	4b09      	ldr	r3, [pc, #36]	; (364 <Reset_Handler+0x74>)
     33e:	4798      	blx	r3
        main();
     340:	4b09      	ldr	r3, [pc, #36]	; (368 <Reset_Handler+0x78>)
     342:	4798      	blx	r3
     344:	e7fe      	b.n	344 <Reset_Handler+0x54>
     346:	bf00      	nop
     348:	20000000 	.word	0x20000000
     34c:	0000e0a8 	.word	0x0000e0a8
     350:	200002a4 	.word	0x200002a4
     354:	200002a4 	.word	0x200002a4
     358:	20010d44 	.word	0x20010d44
     35c:	e000ed00 	.word	0xe000ed00
     360:	00000000 	.word	0x00000000
     364:	000087d5 	.word	0x000087d5
     368:	00005325 	.word	0x00005325

0000036c <SERCOM_1_UART_PORT_init>:
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     36c:	4b10      	ldr	r3, [pc, #64]	; (3b0 <SERCOM_1_UART_PORT_init+0x44>)
     36e:	f893 2156 	ldrb.w	r2, [r3, #342]	; 0x156
	tmp &= ~PORT_PINCFG_PMUXEN;
     372:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     376:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     37a:	f883 2156 	strb.w	r2, [r3, #342]	; 0x156
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     37e:	f893 213b 	ldrb.w	r2, [r3, #315]	; 0x13b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     382:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     386:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     38a:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     38e:	f893 2157 	ldrb.w	r2, [r3, #343]	; 0x157
	tmp &= ~PORT_PINCFG_PMUXEN;
     392:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     396:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     39a:	f883 2157 	strb.w	r2, [r3, #343]	; 0x157
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     39e:	f893 213b 	ldrb.w	r2, [r3, #315]	; 0x13b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3a2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     3a6:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3aa:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
     3ae:	4770      	bx	lr
     3b0:	41008000 	.word	0x41008000

000003b4 <SERCOM_1_UART_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     3b4:	4b06      	ldr	r3, [pc, #24]	; (3d0 <SERCOM_1_UART_CLOCK_init+0x1c>)
     3b6:	2240      	movs	r2, #64	; 0x40
     3b8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
     3bc:	2243      	movs	r2, #67	; 0x43
     3be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     3c2:	4a04      	ldr	r2, [pc, #16]	; (3d4 <SERCOM_1_UART_CLOCK_init+0x20>)
     3c4:	6953      	ldr	r3, [r2, #20]
     3c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     3ca:	6153      	str	r3, [r2, #20]
     3cc:	4770      	bx	lr
     3ce:	bf00      	nop
     3d0:	40001c00 	.word	0x40001c00
     3d4:	40000800 	.word	0x40000800

000003d8 <SERCOM_1_UART_init>:

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
}

void SERCOM_1_UART_init(void)
{
     3d8:	b530      	push	{r4, r5, lr}
     3da:	b083      	sub	sp, #12
	SERCOM_1_UART_CLOCK_init();
     3dc:	4b14      	ldr	r3, [pc, #80]	; (430 <SERCOM_1_UART_init+0x58>)
     3de:	4798      	blx	r3
	uint32_t irq = SERCOM1_0_IRQn;
	for (uint32_t i = 0; i < 4; i++) {
     3e0:	2000      	movs	r0, #0
	uint32_t irq = SERCOM1_0_IRQn;
     3e2:	2332      	movs	r3, #50	; 0x32
	for (uint32_t i = 0; i < 4; i++) {
     3e4:	e00a      	b.n	3fc <SERCOM_1_UART_init+0x24>
		NVIC_SetPriority((IRQn_Type)irq, PERIPHERAL_INTERRUPT_PRIORITY);
     3e6:	b21a      	sxth	r2, r3
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
     3e8:	2a00      	cmp	r2, #0
     3ea:	da19      	bge.n	420 <SERCOM_1_UART_init+0x48>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     3ec:	f003 010f 	and.w	r1, r3, #15
     3f0:	4a10      	ldr	r2, [pc, #64]	; (434 <SERCOM_1_UART_init+0x5c>)
     3f2:	440a      	add	r2, r1
     3f4:	21c0      	movs	r1, #192	; 0xc0
     3f6:	7611      	strb	r1, [r2, #24]
		irq++;
     3f8:	3301      	adds	r3, #1
	for (uint32_t i = 0; i < 4; i++) {
     3fa:	3001      	adds	r0, #1
     3fc:	2803      	cmp	r0, #3
     3fe:	d9f2      	bls.n	3e6 <SERCOM_1_UART_init+0xe>
	}
	usart_os_init(&SERCOM_1_UART, SERCOM1, SERCOM_1_UART_buffer, SERCOM_1_UART_BUFFER_SIZE, (void *)NULL);
     400:	4c0d      	ldr	r4, [pc, #52]	; (438 <SERCOM_1_UART_init+0x60>)
     402:	2300      	movs	r3, #0
     404:	9300      	str	r3, [sp, #0]
     406:	2310      	movs	r3, #16
     408:	4a0c      	ldr	r2, [pc, #48]	; (43c <SERCOM_1_UART_init+0x64>)
     40a:	490d      	ldr	r1, [pc, #52]	; (440 <SERCOM_1_UART_init+0x68>)
     40c:	4620      	mov	r0, r4
     40e:	4d0d      	ldr	r5, [pc, #52]	; (444 <SERCOM_1_UART_init+0x6c>)
     410:	47a8      	blx	r5
	usart_os_enable(&SERCOM_1_UART);
     412:	4620      	mov	r0, r4
     414:	4b0c      	ldr	r3, [pc, #48]	; (448 <SERCOM_1_UART_init+0x70>)
     416:	4798      	blx	r3
	SERCOM_1_UART_PORT_init();
     418:	4b0c      	ldr	r3, [pc, #48]	; (44c <SERCOM_1_UART_init+0x74>)
     41a:	4798      	blx	r3
}
     41c:	b003      	add	sp, #12
     41e:	bd30      	pop	{r4, r5, pc}
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     420:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
     424:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
     428:	21c0      	movs	r1, #192	; 0xc0
     42a:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
     42e:	e7e3      	b.n	3f8 <SERCOM_1_UART_init+0x20>
     430:	000003b5 	.word	0x000003b5
     434:	e000ecfc 	.word	0xe000ecfc
     438:	20010ce4 	.word	0x20010ce4
     43c:	20010cd4 	.word	0x20010cd4
     440:	40003400 	.word	0x40003400
     444:	00000739 	.word	0x00000739
     448:	00000835 	.word	0x00000835
     44c:	0000036d 	.word	0x0000036d

00000450 <TARGET_IO_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     450:	4b10      	ldr	r3, [pc, #64]	; (494 <TARGET_IO_PORT_init+0x44>)
     452:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
     456:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     45a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     45e:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     462:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     466:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     46a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     46e:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     472:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
     476:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     47a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     47e:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     482:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     486:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     48a:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     48e:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
     492:	4770      	bx	lr
     494:	41008000 	.word	0x41008000

00000498 <TARGET_IO_CLOCK_init>:
     498:	4b06      	ldr	r3, [pc, #24]	; (4b4 <TARGET_IO_CLOCK_init+0x1c>)
     49a:	2240      	movs	r2, #64	; 0x40
     49c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
     4a0:	2243      	movs	r2, #67	; 0x43
     4a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBBMASK_SERCOM2_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     4a6:	4a04      	ldr	r2, [pc, #16]	; (4b8 <TARGET_IO_CLOCK_init+0x20>)
     4a8:	6993      	ldr	r3, [r2, #24]
     4aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     4ae:	6193      	str	r3, [r2, #24]
     4b0:	4770      	bx	lr
     4b2:	bf00      	nop
     4b4:	40001c00 	.word	0x40001c00
     4b8:	40000800 	.word	0x40000800

000004bc <TARGET_IO_init>:

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
}

void TARGET_IO_init(void)
{
     4bc:	b530      	push	{r4, r5, lr}
     4be:	b083      	sub	sp, #12

	TARGET_IO_CLOCK_init();
     4c0:	4b14      	ldr	r3, [pc, #80]	; (514 <TARGET_IO_init+0x58>)
     4c2:	4798      	blx	r3
	uint32_t irq = SERCOM2_0_IRQn;
	for (uint32_t i = 0; i < 4; i++) {
     4c4:	2000      	movs	r0, #0
	uint32_t irq = SERCOM2_0_IRQn;
     4c6:	2336      	movs	r3, #54	; 0x36
	for (uint32_t i = 0; i < 4; i++) {
     4c8:	e00a      	b.n	4e0 <TARGET_IO_init+0x24>
		NVIC_SetPriority((IRQn_Type)irq, PERIPHERAL_INTERRUPT_PRIORITY);
     4ca:	b21a      	sxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
     4cc:	2a00      	cmp	r2, #0
     4ce:	da19      	bge.n	504 <TARGET_IO_init+0x48>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     4d0:	f003 010f 	and.w	r1, r3, #15
     4d4:	4a10      	ldr	r2, [pc, #64]	; (518 <TARGET_IO_init+0x5c>)
     4d6:	440a      	add	r2, r1
     4d8:	21c0      	movs	r1, #192	; 0xc0
     4da:	7611      	strb	r1, [r2, #24]
		irq++;
     4dc:	3301      	adds	r3, #1
	for (uint32_t i = 0; i < 4; i++) {
     4de:	3001      	adds	r0, #1
     4e0:	2803      	cmp	r0, #3
     4e2:	d9f2      	bls.n	4ca <TARGET_IO_init+0xe>
	}
	usart_os_init(&TARGET_IO, SERCOM2, TARGET_IO_buffer, TARGET_IO_BUFFER_SIZE, (void *)NULL);
     4e4:	4c0d      	ldr	r4, [pc, #52]	; (51c <TARGET_IO_init+0x60>)
     4e6:	2300      	movs	r3, #0
     4e8:	9300      	str	r3, [sp, #0]
     4ea:	2310      	movs	r3, #16
     4ec:	4a0c      	ldr	r2, [pc, #48]	; (520 <TARGET_IO_init+0x64>)
     4ee:	490d      	ldr	r1, [pc, #52]	; (524 <TARGET_IO_init+0x68>)
     4f0:	4620      	mov	r0, r4
     4f2:	4d0d      	ldr	r5, [pc, #52]	; (528 <TARGET_IO_init+0x6c>)
     4f4:	47a8      	blx	r5
	usart_os_enable(&TARGET_IO);
     4f6:	4620      	mov	r0, r4
     4f8:	4b0c      	ldr	r3, [pc, #48]	; (52c <TARGET_IO_init+0x70>)
     4fa:	4798      	blx	r3
	TARGET_IO_PORT_init();
     4fc:	4b0c      	ldr	r3, [pc, #48]	; (530 <TARGET_IO_init+0x74>)
     4fe:	4798      	blx	r3
}
     500:	b003      	add	sp, #12
     502:	bd30      	pop	{r4, r5, pc}
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     504:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
     508:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
     50c:	21c0      	movs	r1, #192	; 0xc0
     50e:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
     512:	e7e3      	b.n	4dc <TARGET_IO_init+0x20>
     514:	00000499 	.word	0x00000499
     518:	e000ecfc 	.word	0xe000ecfc
     51c:	20010c78 	.word	0x20010c78
     520:	20010cc4 	.word	0x20010cc4
     524:	41012000 	.word	0x41012000
     528:	00000739 	.word	0x00000739
     52c:	00000835 	.word	0x00000835
     530:	00000451 	.word	0x00000451

00000534 <system_init>:

void system_init(void)
{
     534:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     536:	4b03      	ldr	r3, [pc, #12]	; (544 <system_init+0x10>)
     538:	4798      	blx	r3
	init_mcu();

	SERCOM_1_UART_init();
     53a:	4b03      	ldr	r3, [pc, #12]	; (548 <system_init+0x14>)
     53c:	4798      	blx	r3

	TARGET_IO_init();
     53e:	4b03      	ldr	r3, [pc, #12]	; (54c <system_init+0x18>)
     540:	4798      	blx	r3
     542:	bd08      	pop	{r3, pc}
     544:	000009bd 	.word	0x000009bd
     548:	000003d9 	.word	0x000003d9
     54c:	000004bd 	.word	0x000004bd

00000550 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     550:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     554:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     556:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     558:	f3bf 8f5f 	dmb	sy
     55c:	4770      	bx	lr

0000055e <atomic_leave_critical>:
     55e:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     562:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     564:	f383 8810 	msr	PRIMASK, r3
     568:	4770      	bx	lr
	...

0000056c <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     56c:	b570      	push	{r4, r5, r6, lr}
     56e:	460d      	mov	r5, r1
     570:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     572:	4604      	mov	r4, r0
     574:	b168      	cbz	r0, 592 <io_write+0x26>
     576:	b151      	cbz	r1, 58e <io_write+0x22>
     578:	2001      	movs	r0, #1
     57a:	2234      	movs	r2, #52	; 0x34
     57c:	4906      	ldr	r1, [pc, #24]	; (598 <io_write+0x2c>)
     57e:	4b07      	ldr	r3, [pc, #28]	; (59c <io_write+0x30>)
     580:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     582:	6823      	ldr	r3, [r4, #0]
     584:	4632      	mov	r2, r6
     586:	4629      	mov	r1, r5
     588:	4620      	mov	r0, r4
     58a:	4798      	blx	r3
}
     58c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     58e:	2000      	movs	r0, #0
     590:	e7f3      	b.n	57a <io_write+0xe>
     592:	2000      	movs	r0, #0
     594:	e7f1      	b.n	57a <io_write+0xe>
     596:	bf00      	nop
     598:	00009ad4 	.word	0x00009ad4
     59c:	0000088d 	.word	0x0000088d

000005a0 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     5a0:	b570      	push	{r4, r5, r6, lr}
     5a2:	460d      	mov	r5, r1
     5a4:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     5a6:	4604      	mov	r4, r0
     5a8:	b168      	cbz	r0, 5c6 <io_read+0x26>
     5aa:	b151      	cbz	r1, 5c2 <io_read+0x22>
     5ac:	2001      	movs	r0, #1
     5ae:	223d      	movs	r2, #61	; 0x3d
     5b0:	4906      	ldr	r1, [pc, #24]	; (5cc <io_read+0x2c>)
     5b2:	4b07      	ldr	r3, [pc, #28]	; (5d0 <io_read+0x30>)
     5b4:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     5b6:	6863      	ldr	r3, [r4, #4]
     5b8:	4632      	mov	r2, r6
     5ba:	4629      	mov	r1, r5
     5bc:	4620      	mov	r0, r4
     5be:	4798      	blx	r3
}
     5c0:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     5c2:	2000      	movs	r0, #0
     5c4:	e7f3      	b.n	5ae <io_read+0xe>
     5c6:	2000      	movs	r0, #0
     5c8:	e7f1      	b.n	5ae <io_read+0xe>
     5ca:	bf00      	nop
     5cc:	00009ad4 	.word	0x00009ad4
     5d0:	0000088d 	.word	0x0000088d

000005d4 <usart_os_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_os_error(struct _usart_async_device *device)
{
     5d4:	b508      	push	{r3, lr}
	struct usart_os_descriptor *descr = CONTAINER_OF(device, struct usart_os_descriptor, device);

	sem_up(&descr->rx_sem);
     5d6:	303c      	adds	r0, #60	; 0x3c
     5d8:	4b01      	ldr	r3, [pc, #4]	; (5e0 <usart_os_error+0xc>)
     5da:	4798      	blx	r3
     5dc:	bd08      	pop	{r3, pc}
     5de:	bf00      	nop
     5e0:	00005d3d 	.word	0x00005d3d

000005e4 <usart_os_transmission_complete>:
{
     5e4:	b508      	push	{r3, lr}
	sem_up(&descr->tx_sem);
     5e6:	3040      	adds	r0, #64	; 0x40
     5e8:	4b01      	ldr	r3, [pc, #4]	; (5f0 <usart_os_transmission_complete+0xc>)
     5ea:	4798      	blx	r3
     5ec:	bd08      	pop	{r3, pc}
     5ee:	bf00      	nop
     5f0:	00005d3d 	.word	0x00005d3d

000005f4 <usart_os_fill_rx_buffer>:
{
     5f4:	b510      	push	{r4, lr}
	if (descr->rx_buffer == NULL) {
     5f6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
     5f8:	b143      	cbz	r3, 60c <usart_os_fill_rx_buffer+0x18>
		descr->rx_buffer[descr->rx_size++] = data;
     5fa:	8e02      	ldrh	r2, [r0, #48]	; 0x30
     5fc:	1c54      	adds	r4, r2, #1
     5fe:	8604      	strh	r4, [r0, #48]	; 0x30
     600:	5499      	strb	r1, [r3, r2]
		if (descr->rx_size >= descr->rx_length) {
     602:	8e02      	ldrh	r2, [r0, #48]	; 0x30
     604:	8e43      	ldrh	r3, [r0, #50]	; 0x32
     606:	429a      	cmp	r2, r3
     608:	d204      	bcs.n	614 <usart_os_fill_rx_buffer+0x20>
     60a:	bd10      	pop	{r4, pc}
		ringbuffer_put(&descr->rx, data);
     60c:	301c      	adds	r0, #28
     60e:	4b04      	ldr	r3, [pc, #16]	; (620 <usart_os_fill_rx_buffer+0x2c>)
     610:	4798      	blx	r3
     612:	bd10      	pop	{r4, pc}
			descr->rx_buffer = NULL;
     614:	2300      	movs	r3, #0
     616:	62c3      	str	r3, [r0, #44]	; 0x2c
			sem_up(&descr->rx_sem);
     618:	303c      	adds	r0, #60	; 0x3c
     61a:	4b02      	ldr	r3, [pc, #8]	; (624 <usart_os_fill_rx_buffer+0x30>)
     61c:	4798      	blx	r3
}
     61e:	e7f4      	b.n	60a <usart_os_fill_rx_buffer+0x16>
     620:	00000921 	.word	0x00000921
     624:	00005d3d 	.word	0x00005d3d

00000628 <usart_os_process_byte_sent>:
{
     628:	b510      	push	{r4, lr}
     62a:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
     62c:	8f03      	ldrh	r3, [r0, #56]	; 0x38
     62e:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
     630:	4293      	cmp	r3, r2
     632:	d009      	beq.n	648 <usart_os_process_byte_sent+0x20>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
     634:	6b42      	ldr	r2, [r0, #52]	; 0x34
     636:	1c59      	adds	r1, r3, #1
     638:	8701      	strh	r1, [r0, #56]	; 0x38
     63a:	5cd1      	ldrb	r1, [r2, r3]
     63c:	4b04      	ldr	r3, [pc, #16]	; (650 <usart_os_process_byte_sent+0x28>)
     63e:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
     640:	4620      	mov	r0, r4
     642:	4b04      	ldr	r3, [pc, #16]	; (654 <usart_os_process_byte_sent+0x2c>)
     644:	4798      	blx	r3
     646:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
     648:	4b03      	ldr	r3, [pc, #12]	; (658 <usart_os_process_byte_sent+0x30>)
     64a:	4798      	blx	r3
     64c:	bd10      	pop	{r4, pc}
     64e:	bf00      	nop
     650:	00000d71 	.word	0x00000d71
     654:	00000d77 	.word	0x00000d77
     658:	00000d7f 	.word	0x00000d7f

0000065c <usart_os_write>:
{
     65c:	b538      	push	{r3, r4, r5, lr}
     65e:	4604      	mov	r4, r0
     660:	4615      	mov	r5, r2
	descr->tx_buffer        = (uint8_t *)buf;
     662:	63c1      	str	r1, [r0, #60]	; 0x3c
	descr->tx_buffer_length = length;
     664:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
	descr->tx_por           = 0;
     668:	2300      	movs	r3, #0
     66a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
	_usart_async_enable_byte_sent_irq(&descr->device);
     66e:	3008      	adds	r0, #8
     670:	4b06      	ldr	r3, [pc, #24]	; (68c <usart_os_write+0x30>)
     672:	4798      	blx	r3
	return sem_down(&descr->tx_sem, ~0) == 0 ? length : ERR_TIMEOUT;
     674:	f04f 31ff 	mov.w	r1, #4294967295
     678:	f104 0048 	add.w	r0, r4, #72	; 0x48
     67c:	4b04      	ldr	r3, [pc, #16]	; (690 <usart_os_write+0x34>)
     67e:	4798      	blx	r3
     680:	b908      	cbnz	r0, 686 <usart_os_write+0x2a>
     682:	4628      	mov	r0, r5
     684:	bd38      	pop	{r3, r4, r5, pc}
     686:	f06f 0007 	mvn.w	r0, #7
}
     68a:	bd38      	pop	{r3, r4, r5, pc}
     68c:	00000d77 	.word	0x00000d77
     690:	00005d81 	.word	0x00005d81

00000694 <usart_os_read>:
{
     694:	b5f0      	push	{r4, r5, r6, r7, lr}
     696:	b083      	sub	sp, #12
     698:	4604      	mov	r4, r0
     69a:	4616      	mov	r6, r2
	ASSERT(buf);
     69c:	460f      	mov	r7, r1
     69e:	1c08      	adds	r0, r1, #0
     6a0:	bf18      	it	ne
     6a2:	2001      	movne	r0, #1
     6a4:	f44f 7292 	mov.w	r2, #292	; 0x124
     6a8:	491c      	ldr	r1, [pc, #112]	; (71c <usart_os_read+0x88>)
     6aa:	4b1d      	ldr	r3, [pc, #116]	; (720 <usart_os_read+0x8c>)
     6ac:	4798      	blx	r3
	if (ringbuffer_num(&descr->rx) < length) {
     6ae:	f104 0524 	add.w	r5, r4, #36	; 0x24
     6b2:	4628      	mov	r0, r5
     6b4:	4b1b      	ldr	r3, [pc, #108]	; (724 <usart_os_read+0x90>)
     6b6:	4798      	blx	r3
     6b8:	42b0      	cmp	r0, r6
     6ba:	d301      	bcc.n	6c0 <usart_os_read+0x2c>
     6bc:	2100      	movs	r1, #0
     6be:	e027      	b.n	710 <usart_os_read+0x7c>
		CRITICAL_SECTION_ENTER()
     6c0:	a801      	add	r0, sp, #4
     6c2:	4b19      	ldr	r3, [pc, #100]	; (728 <usart_os_read+0x94>)
     6c4:	4798      	blx	r3
		descr->rx_size   = 0;
     6c6:	2300      	movs	r3, #0
     6c8:	8723      	strh	r3, [r4, #56]	; 0x38
		descr->rx_length = length;
     6ca:	8766      	strh	r6, [r4, #58]	; 0x3a
		descr->rx_buffer = buf;
     6cc:	6367      	str	r7, [r4, #52]	; 0x34
		while (ringbuffer_num(&descr->rx) > 0) {
     6ce:	e007      	b.n	6e0 <usart_os_read+0x4c>
			ringbuffer_get(&descr->rx, &descr->rx_buffer[descr->rx_size++]);
     6d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
     6d2:	8f23      	ldrh	r3, [r4, #56]	; 0x38
     6d4:	1c5a      	adds	r2, r3, #1
     6d6:	8722      	strh	r2, [r4, #56]	; 0x38
     6d8:	4419      	add	r1, r3
     6da:	4628      	mov	r0, r5
     6dc:	4b13      	ldr	r3, [pc, #76]	; (72c <usart_os_read+0x98>)
     6de:	4798      	blx	r3
		while (ringbuffer_num(&descr->rx) > 0) {
     6e0:	4628      	mov	r0, r5
     6e2:	4b10      	ldr	r3, [pc, #64]	; (724 <usart_os_read+0x90>)
     6e4:	4798      	blx	r3
     6e6:	2800      	cmp	r0, #0
     6e8:	d1f2      	bne.n	6d0 <usart_os_read+0x3c>
		CRITICAL_SECTION_LEAVE()
     6ea:	a801      	add	r0, sp, #4
     6ec:	4b10      	ldr	r3, [pc, #64]	; (730 <usart_os_read+0x9c>)
     6ee:	4798      	blx	r3
		if (sem_down(&descr->rx_sem, timeout) != 0) {
     6f0:	2100      	movs	r1, #0
     6f2:	f104 0044 	add.w	r0, r4, #68	; 0x44
     6f6:	4b0f      	ldr	r3, [pc, #60]	; (734 <usart_os_read+0xa0>)
     6f8:	4798      	blx	r3
     6fa:	b158      	cbz	r0, 714 <usart_os_read+0x80>
			return ERR_TIMEOUT;
     6fc:	f06f 0007 	mvn.w	r0, #7
     700:	e009      	b.n	716 <usart_os_read+0x82>
			ringbuffer_get(&descr->rx, &buf[was_read++]);
     702:	1c4c      	adds	r4, r1, #1
     704:	b2a4      	uxth	r4, r4
     706:	4439      	add	r1, r7
     708:	4628      	mov	r0, r5
     70a:	4b08      	ldr	r3, [pc, #32]	; (72c <usart_os_read+0x98>)
     70c:	4798      	blx	r3
     70e:	4621      	mov	r1, r4
		while (was_read < length) {
     710:	42b1      	cmp	r1, r6
     712:	d3f6      	bcc.n	702 <usart_os_read+0x6e>
	return (int32_t)length;
     714:	4630      	mov	r0, r6
}
     716:	b003      	add	sp, #12
     718:	bdf0      	pop	{r4, r5, r6, r7, pc}
     71a:	bf00      	nop
     71c:	00009ae8 	.word	0x00009ae8
     720:	0000088d 	.word	0x0000088d
     724:	00000961 	.word	0x00000961
     728:	00000551 	.word	0x00000551
     72c:	000008d9 	.word	0x000008d9
     730:	0000055f 	.word	0x0000055f
     734:	00005d81 	.word	0x00005d81

00000738 <usart_os_init>:
{
     738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     73c:	460f      	mov	r7, r1
     73e:	4615      	mov	r5, r2
     740:	461e      	mov	r6, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     742:	4604      	mov	r4, r0
     744:	2800      	cmp	r0, #0
     746:	d046      	beq.n	7d6 <usart_os_init+0x9e>
     748:	2900      	cmp	r1, #0
     74a:	d046      	beq.n	7da <usart_os_init+0xa2>
     74c:	2a00      	cmp	r2, #0
     74e:	d046      	beq.n	7de <usart_os_init+0xa6>
     750:	2b00      	cmp	r3, #0
     752:	d146      	bne.n	7e2 <usart_os_init+0xaa>
     754:	2000      	movs	r0, #0
     756:	2240      	movs	r2, #64	; 0x40
     758:	4929      	ldr	r1, [pc, #164]	; (800 <usart_os_init+0xc8>)
     75a:	4b2a      	ldr	r3, [pc, #168]	; (804 <usart_os_init+0xcc>)
     75c:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
     75e:	4632      	mov	r2, r6
     760:	4629      	mov	r1, r5
     762:	f104 0024 	add.w	r0, r4, #36	; 0x24
     766:	4b28      	ldr	r3, [pc, #160]	; (808 <usart_os_init+0xd0>)
     768:	4798      	blx	r3
     76a:	2800      	cmp	r0, #0
     76c:	d145      	bne.n	7fa <usart_os_init+0xc2>
	rc = sem_init(&descr->rx_sem, 0);
     76e:	f104 0644 	add.w	r6, r4, #68	; 0x44
     772:	2100      	movs	r1, #0
     774:	4630      	mov	r0, r6
     776:	4b25      	ldr	r3, [pc, #148]	; (80c <usart_os_init+0xd4>)
     778:	4798      	blx	r3
	if (rc < 0) {
     77a:	1e05      	subs	r5, r0, #0
     77c:	db28      	blt.n	7d0 <usart_os_init+0x98>
	rc = sem_init(&descr->tx_sem, 0);
     77e:	f104 0948 	add.w	r9, r4, #72	; 0x48
     782:	2100      	movs	r1, #0
     784:	4648      	mov	r0, r9
     786:	4b21      	ldr	r3, [pc, #132]	; (80c <usart_os_init+0xd4>)
     788:	4798      	blx	r3
	if (rc < 0) {
     78a:	1e05      	subs	r5, r0, #0
     78c:	db2b      	blt.n	7e6 <usart_os_init+0xae>
	rc = _usart_async_init(&descr->device, hw);
     78e:	f104 0808 	add.w	r8, r4, #8
     792:	4639      	mov	r1, r7
     794:	4640      	mov	r0, r8
     796:	4b1e      	ldr	r3, [pc, #120]	; (810 <usart_os_init+0xd8>)
     798:	4798      	blx	r3
	if (rc) {
     79a:	4605      	mov	r5, r0
     79c:	bb38      	cbnz	r0, 7ee <usart_os_init+0xb6>
	descr->rx_buffer = NULL;
     79e:	2300      	movs	r3, #0
     7a0:	6363      	str	r3, [r4, #52]	; 0x34
	descr->rx_size   = 0;
     7a2:	8723      	strh	r3, [r4, #56]	; 0x38
	descr->rx_length = 0;
     7a4:	8763      	strh	r3, [r4, #58]	; 0x3a
	descr->io.read  = usart_os_read;
     7a6:	4b1b      	ldr	r3, [pc, #108]	; (814 <usart_os_init+0xdc>)
     7a8:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_os_write;
     7aa:	4b1b      	ldr	r3, [pc, #108]	; (818 <usart_os_init+0xe0>)
     7ac:	6023      	str	r3, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_os_process_byte_sent;
     7ae:	4b1b      	ldr	r3, [pc, #108]	; (81c <usart_os_init+0xe4>)
     7b0:	60a3      	str	r3, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_os_fill_rx_buffer;
     7b2:	4b1b      	ldr	r3, [pc, #108]	; (820 <usart_os_init+0xe8>)
     7b4:	60e3      	str	r3, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_os_transmission_complete;
     7b6:	4b1b      	ldr	r3, [pc, #108]	; (824 <usart_os_init+0xec>)
     7b8:	6123      	str	r3, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_os_error;
     7ba:	4b1b      	ldr	r3, [pc, #108]	; (828 <usart_os_init+0xf0>)
     7bc:	6163      	str	r3, [r4, #20]
	_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, true);
     7be:	2201      	movs	r2, #1
     7c0:	4611      	mov	r1, r2
     7c2:	4640      	mov	r0, r8
     7c4:	4c19      	ldr	r4, [pc, #100]	; (82c <usart_os_init+0xf4>)
     7c6:	47a0      	blx	r4
	_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, true);
     7c8:	2201      	movs	r2, #1
     7ca:	2103      	movs	r1, #3
     7cc:	4640      	mov	r0, r8
     7ce:	47a0      	blx	r4
}
     7d0:	4628      	mov	r0, r5
     7d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     7d6:	2000      	movs	r0, #0
     7d8:	e7bd      	b.n	756 <usart_os_init+0x1e>
     7da:	2000      	movs	r0, #0
     7dc:	e7bb      	b.n	756 <usart_os_init+0x1e>
     7de:	2000      	movs	r0, #0
     7e0:	e7b9      	b.n	756 <usart_os_init+0x1e>
     7e2:	2001      	movs	r0, #1
     7e4:	e7b7      	b.n	756 <usart_os_init+0x1e>
		sem_deinit(&descr->tx_sem);
     7e6:	4648      	mov	r0, r9
     7e8:	4b11      	ldr	r3, [pc, #68]	; (830 <usart_os_init+0xf8>)
     7ea:	4798      	blx	r3
		return rc;
     7ec:	e7f0      	b.n	7d0 <usart_os_init+0x98>
		sem_deinit(&descr->tx_sem);
     7ee:	4648      	mov	r0, r9
     7f0:	4c0f      	ldr	r4, [pc, #60]	; (830 <usart_os_init+0xf8>)
     7f2:	47a0      	blx	r4
		sem_deinit(&descr->rx_sem);
     7f4:	4630      	mov	r0, r6
     7f6:	47a0      	blx	r4
		return rc;
     7f8:	e7ea      	b.n	7d0 <usart_os_init+0x98>
		return ERR_INVALID_ARG;
     7fa:	f06f 050c 	mvn.w	r5, #12
     7fe:	e7e7      	b.n	7d0 <usart_os_init+0x98>
     800:	00009ae8 	.word	0x00009ae8
     804:	0000088d 	.word	0x0000088d
     808:	00000895 	.word	0x00000895
     80c:	00005d05 	.word	0x00005d05
     810:	00000cd9 	.word	0x00000cd9
     814:	00000695 	.word	0x00000695
     818:	0000065d 	.word	0x0000065d
     81c:	00000629 	.word	0x00000629
     820:	000005f5 	.word	0x000005f5
     824:	000005e5 	.word	0x000005e5
     828:	000005d5 	.word	0x000005d5
     82c:	00000d89 	.word	0x00000d89
     830:	00005d99 	.word	0x00005d99

00000834 <usart_os_enable>:
{
     834:	b510      	push	{r4, lr}
	ASSERT(descr);
     836:	4604      	mov	r4, r0
     838:	227b      	movs	r2, #123	; 0x7b
     83a:	4906      	ldr	r1, [pc, #24]	; (854 <usart_os_enable+0x20>)
     83c:	3000      	adds	r0, #0
     83e:	bf18      	it	ne
     840:	2001      	movne	r0, #1
     842:	4b05      	ldr	r3, [pc, #20]	; (858 <usart_os_enable+0x24>)
     844:	4798      	blx	r3
	_usart_async_enable(&descr->device);
     846:	f104 0008 	add.w	r0, r4, #8
     84a:	4b04      	ldr	r3, [pc, #16]	; (85c <usart_os_enable+0x28>)
     84c:	4798      	blx	r3
}
     84e:	2000      	movs	r0, #0
     850:	bd10      	pop	{r4, pc}
     852:	bf00      	nop
     854:	00009ae8 	.word	0x00009ae8
     858:	0000088d 	.word	0x0000088d
     85c:	00000d5d 	.word	0x00000d5d

00000860 <usart_os_get_io>:
{
     860:	b538      	push	{r3, r4, r5, lr}
     862:	460c      	mov	r4, r1
	ASSERT(descr && io);
     864:	4605      	mov	r5, r0
     866:	b150      	cbz	r0, 87e <usart_os_get_io+0x1e>
     868:	b139      	cbz	r1, 87a <usart_os_get_io+0x1a>
     86a:	2001      	movs	r0, #1
     86c:	228e      	movs	r2, #142	; 0x8e
     86e:	4905      	ldr	r1, [pc, #20]	; (884 <usart_os_get_io+0x24>)
     870:	4b05      	ldr	r3, [pc, #20]	; (888 <usart_os_get_io+0x28>)
     872:	4798      	blx	r3
	*io = &descr->io;
     874:	6025      	str	r5, [r4, #0]
}
     876:	2000      	movs	r0, #0
     878:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && io);
     87a:	2000      	movs	r0, #0
     87c:	e7f6      	b.n	86c <usart_os_get_io+0xc>
     87e:	2000      	movs	r0, #0
     880:	e7f4      	b.n	86c <usart_os_get_io+0xc>
     882:	bf00      	nop
     884:	00009ae8 	.word	0x00009ae8
     888:	0000088d 	.word	0x0000088d

0000088c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     88c:	b900      	cbnz	r0, 890 <assert+0x4>
		__asm("BKPT #0");
     88e:	be00      	bkpt	0x0000
     890:	4770      	bx	lr
	...

00000894 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
     894:	b570      	push	{r4, r5, r6, lr}
     896:	460e      	mov	r6, r1
     898:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
     89a:	4604      	mov	r4, r0
     89c:	b178      	cbz	r0, 8be <ringbuffer_init+0x2a>
     89e:	b181      	cbz	r1, 8c2 <ringbuffer_init+0x2e>
     8a0:	b98a      	cbnz	r2, 8c6 <ringbuffer_init+0x32>
     8a2:	2000      	movs	r0, #0
     8a4:	2228      	movs	r2, #40	; 0x28
     8a6:	490a      	ldr	r1, [pc, #40]	; (8d0 <ringbuffer_init+0x3c>)
     8a8:	4b0a      	ldr	r3, [pc, #40]	; (8d4 <ringbuffer_init+0x40>)
     8aa:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
     8ac:	1e6b      	subs	r3, r5, #1
     8ae:	421d      	tst	r5, r3
     8b0:	d10b      	bne.n	8ca <ringbuffer_init+0x36>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
     8b2:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
     8b4:	2000      	movs	r0, #0
     8b6:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
     8b8:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
     8ba:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
     8bc:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
     8be:	2000      	movs	r0, #0
     8c0:	e7f0      	b.n	8a4 <ringbuffer_init+0x10>
     8c2:	2000      	movs	r0, #0
     8c4:	e7ee      	b.n	8a4 <ringbuffer_init+0x10>
     8c6:	2001      	movs	r0, #1
     8c8:	e7ec      	b.n	8a4 <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
     8ca:	f06f 000c 	mvn.w	r0, #12
}
     8ce:	bd70      	pop	{r4, r5, r6, pc}
     8d0:	00009b04 	.word	0x00009b04
     8d4:	0000088d 	.word	0x0000088d

000008d8 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
     8d8:	b538      	push	{r3, r4, r5, lr}
     8da:	460d      	mov	r5, r1
	ASSERT(rb && data);
     8dc:	4604      	mov	r4, r0
     8de:	b1a8      	cbz	r0, 90c <ringbuffer_get+0x34>
     8e0:	b191      	cbz	r1, 908 <ringbuffer_get+0x30>
     8e2:	2001      	movs	r0, #1
     8e4:	2240      	movs	r2, #64	; 0x40
     8e6:	490c      	ldr	r1, [pc, #48]	; (918 <ringbuffer_get+0x40>)
     8e8:	4b0c      	ldr	r3, [pc, #48]	; (91c <ringbuffer_get+0x44>)
     8ea:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
     8ec:	68e2      	ldr	r2, [r4, #12]
     8ee:	68a3      	ldr	r3, [r4, #8]
     8f0:	429a      	cmp	r2, r3
     8f2:	d00d      	beq.n	910 <ringbuffer_get+0x38>
		*data = rb->buf[rb->read_index & rb->size];
     8f4:	6822      	ldr	r2, [r4, #0]
     8f6:	6861      	ldr	r1, [r4, #4]
     8f8:	400b      	ands	r3, r1
     8fa:	5cd3      	ldrb	r3, [r2, r3]
     8fc:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
     8fe:	68a3      	ldr	r3, [r4, #8]
     900:	3301      	adds	r3, #1
     902:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
     904:	2000      	movs	r0, #0
     906:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(rb && data);
     908:	2000      	movs	r0, #0
     90a:	e7eb      	b.n	8e4 <ringbuffer_get+0xc>
     90c:	2000      	movs	r0, #0
     90e:	e7e9      	b.n	8e4 <ringbuffer_get+0xc>
	}

	return ERR_NOT_FOUND;
     910:	f06f 0009 	mvn.w	r0, #9
}
     914:	bd38      	pop	{r3, r4, r5, pc}
     916:	bf00      	nop
     918:	00009b04 	.word	0x00009b04
     91c:	0000088d 	.word	0x0000088d

00000920 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
     920:	b538      	push	{r3, r4, r5, lr}
     922:	460d      	mov	r5, r1
	ASSERT(rb);
     924:	4604      	mov	r4, r0
     926:	2251      	movs	r2, #81	; 0x51
     928:	490b      	ldr	r1, [pc, #44]	; (958 <ringbuffer_put+0x38>)
     92a:	3000      	adds	r0, #0
     92c:	bf18      	it	ne
     92e:	2001      	movne	r0, #1
     930:	4b0a      	ldr	r3, [pc, #40]	; (95c <ringbuffer_put+0x3c>)
     932:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
     934:	6822      	ldr	r2, [r4, #0]
     936:	68e3      	ldr	r3, [r4, #12]
     938:	6861      	ldr	r1, [r4, #4]
     93a:	400b      	ands	r3, r1
     93c:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
     93e:	68e3      	ldr	r3, [r4, #12]
     940:	68a2      	ldr	r2, [r4, #8]
     942:	1a9a      	subs	r2, r3, r2
     944:	6861      	ldr	r1, [r4, #4]
     946:	428a      	cmp	r2, r1
     948:	d901      	bls.n	94e <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
     94a:	1a59      	subs	r1, r3, r1
     94c:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
     94e:	3301      	adds	r3, #1
     950:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
     952:	2000      	movs	r0, #0
     954:	bd38      	pop	{r3, r4, r5, pc}
     956:	bf00      	nop
     958:	00009b04 	.word	0x00009b04
     95c:	0000088d 	.word	0x0000088d

00000960 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
     960:	b510      	push	{r4, lr}
	ASSERT(rb);
     962:	4604      	mov	r4, r0
     964:	2267      	movs	r2, #103	; 0x67
     966:	4905      	ldr	r1, [pc, #20]	; (97c <ringbuffer_num+0x1c>)
     968:	3000      	adds	r0, #0
     96a:	bf18      	it	ne
     96c:	2001      	movne	r0, #1
     96e:	4b04      	ldr	r3, [pc, #16]	; (980 <ringbuffer_num+0x20>)
     970:	4798      	blx	r3

	return rb->write_index - rb->read_index;
     972:	68e0      	ldr	r0, [r4, #12]
     974:	68a3      	ldr	r3, [r4, #8]
}
     976:	1ac0      	subs	r0, r0, r3
     978:	bd10      	pop	{r4, pc}
     97a:	bf00      	nop
     97c:	00009b04 	.word	0x00009b04
     980:	0000088d 	.word	0x0000088d

00000984 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     984:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     986:	4a06      	ldr	r2, [pc, #24]	; (9a0 <_sbrk+0x1c>)
     988:	6812      	ldr	r2, [r2, #0]
     98a:	b122      	cbz	r2, 996 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     98c:	4a04      	ldr	r2, [pc, #16]	; (9a0 <_sbrk+0x1c>)
     98e:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     990:	4403      	add	r3, r0
     992:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     994:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     996:	4903      	ldr	r1, [pc, #12]	; (9a4 <_sbrk+0x20>)
     998:	4a01      	ldr	r2, [pc, #4]	; (9a0 <_sbrk+0x1c>)
     99a:	6011      	str	r1, [r2, #0]
     99c:	e7f6      	b.n	98c <_sbrk+0x8>
     99e:	bf00      	nop
     9a0:	200002c0 	.word	0x200002c0
     9a4:	20020d48 	.word	0x20020d48

000009a8 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
     9a8:	f04f 30ff 	mov.w	r0, #4294967295
     9ac:	4770      	bx	lr

000009ae <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
     9ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     9b2:	604b      	str	r3, [r1, #4]

	return 0;
}
     9b4:	2000      	movs	r0, #0
     9b6:	4770      	bx	lr

000009b8 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
     9b8:	2000      	movs	r0, #0
     9ba:	4770      	bx	lr

000009bc <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     9bc:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
     9be:	4a08      	ldr	r2, [pc, #32]	; (9e0 <_init_chip+0x24>)
     9c0:	8813      	ldrh	r3, [r2, #0]
     9c2:	b29b      	uxth	r3, r3
     9c4:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     9c6:	4b07      	ldr	r3, [pc, #28]	; (9e4 <_init_chip+0x28>)
     9c8:	4798      	blx	r3
	_oscctrl_init_sources();
     9ca:	4b07      	ldr	r3, [pc, #28]	; (9e8 <_init_chip+0x2c>)
     9cc:	4798      	blx	r3
	_mclk_init();
     9ce:	4b07      	ldr	r3, [pc, #28]	; (9ec <_init_chip+0x30>)
     9d0:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     9d2:	4b07      	ldr	r3, [pc, #28]	; (9f0 <_init_chip+0x34>)
     9d4:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     9d6:	f640 70ff 	movw	r0, #4095	; 0xfff
     9da:	4b06      	ldr	r3, [pc, #24]	; (9f4 <_init_chip+0x38>)
     9dc:	4798      	blx	r3
     9de:	bd08      	pop	{r3, pc}
     9e0:	41004000 	.word	0x41004000
     9e4:	00000a29 	.word	0x00000a29
     9e8:	00000a3d 	.word	0x00000a3d
     9ec:	00000a1d 	.word	0x00000a1d
     9f0:	00000a59 	.word	0x00000a59
     9f4:	000009f9 	.word	0x000009f9

000009f8 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     9f8:	f010 0f01 	tst.w	r0, #1
     9fc:	d008      	beq.n	a10 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     9fe:	4a05      	ldr	r2, [pc, #20]	; (a14 <_gclk_init_generators_by_fref+0x1c>)
     a00:	4b05      	ldr	r3, [pc, #20]	; (a18 <_gclk_init_generators_by_fref+0x20>)
     a02:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     a04:	4b04      	ldr	r3, [pc, #16]	; (a18 <_gclk_init_generators_by_fref+0x20>)
     a06:	685a      	ldr	r2, [r3, #4]
     a08:	f643 73fd 	movw	r3, #16381	; 0x3ffd
     a0c:	421a      	tst	r2, r3
     a0e:	d1f9      	bne.n	a04 <_gclk_init_generators_by_fref+0xc>
     a10:	4770      	bx	lr
     a12:	bf00      	nop
     a14:	00010101 	.word	0x00010101
     a18:	40001c00 	.word	0x40001c00

00000a1c <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
     a1c:	2201      	movs	r2, #1
     a1e:	4b01      	ldr	r3, [pc, #4]	; (a24 <_mclk_init+0x8>)
     a20:	715a      	strb	r2, [r3, #5]
     a22:	4770      	bx	lr
     a24:	40000800 	.word	0x40000800

00000a28 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     a28:	4b03      	ldr	r3, [pc, #12]	; (a38 <_osc32kctrl_init_sources+0x10>)
     a2a:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
     a2c:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     a30:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     a32:	2201      	movs	r2, #1
     a34:	741a      	strb	r2, [r3, #16]
     a36:	4770      	bx	lr
     a38:	40001400 	.word	0x40001400

00000a3c <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
     a3c:	4a04      	ldr	r2, [pc, #16]	; (a50 <_oscctrl_init_sources+0x14>)
     a3e:	4b05      	ldr	r3, [pc, #20]	; (a54 <_oscctrl_init_sources+0x18>)
     a40:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
     a42:	4b04      	ldr	r3, [pc, #16]	; (a54 <_oscctrl_init_sources+0x18>)
     a44:	691b      	ldr	r3, [r3, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
     a46:	f013 0f02 	tst.w	r3, #2
     a4a:	d0fa      	beq.n	a42 <_oscctrl_init_sources+0x6>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
     a4c:	4770      	bx	lr
     a4e:	bf00      	nop
     a50:	03002606 	.word	0x03002606
     a54:	40001000 	.word	0x40001000

00000a58 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
     a58:	4770      	bx	lr
	...

00000a5c <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
     a5c:	b500      	push	{lr}
     a5e:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
     a60:	4b0d      	ldr	r3, [pc, #52]	; (a98 <RAMECC_Handler+0x3c>)
     a62:	789b      	ldrb	r3, [r3, #2]
     a64:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
     a66:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
     a68:	9b01      	ldr	r3, [sp, #4]
     a6a:	f013 0f02 	tst.w	r3, #2
     a6e:	d006      	beq.n	a7e <RAMECC_Handler+0x22>
     a70:	4b0a      	ldr	r3, [pc, #40]	; (a9c <RAMECC_Handler+0x40>)
     a72:	681b      	ldr	r3, [r3, #0]
     a74:	b11b      	cbz	r3, a7e <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
     a76:	4a08      	ldr	r2, [pc, #32]	; (a98 <RAMECC_Handler+0x3c>)
     a78:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
     a7a:	4798      	blx	r3
     a7c:	e009      	b.n	a92 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
     a7e:	9b01      	ldr	r3, [sp, #4]
     a80:	f013 0f01 	tst.w	r3, #1
     a84:	d005      	beq.n	a92 <RAMECC_Handler+0x36>
     a86:	4b05      	ldr	r3, [pc, #20]	; (a9c <RAMECC_Handler+0x40>)
     a88:	685b      	ldr	r3, [r3, #4]
     a8a:	b113      	cbz	r3, a92 <RAMECC_Handler+0x36>
     a8c:	4a02      	ldr	r2, [pc, #8]	; (a98 <RAMECC_Handler+0x3c>)
     a8e:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
     a90:	4798      	blx	r3
	} else {
		return;
	}
}
     a92:	b003      	add	sp, #12
     a94:	f85d fb04 	ldr.w	pc, [sp], #4
     a98:	41020000 	.word	0x41020000
     a9c:	20010d30 	.word	0x20010d30

00000aa0 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
     aa0:	b470      	push	{r4, r5, r6}
     aa2:	b089      	sub	sp, #36	; 0x24
     aa4:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
     aa6:	466c      	mov	r4, sp
     aa8:	4d0c      	ldr	r5, [pc, #48]	; (adc <_sercom_get_hardware_index+0x3c>)
     aaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     aac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     aae:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
     ab2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     ab6:	2000      	movs	r0, #0
     ab8:	2807      	cmp	r0, #7
     aba:	d80a      	bhi.n	ad2 <_sercom_get_hardware_index+0x32>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
     abc:	ab08      	add	r3, sp, #32
     abe:	eb03 0380 	add.w	r3, r3, r0, lsl #2
     ac2:	f853 3c20 	ldr.w	r3, [r3, #-32]
     ac6:	42b3      	cmp	r3, r6
     ac8:	d001      	beq.n	ace <_sercom_get_hardware_index+0x2e>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     aca:	3001      	adds	r0, #1
     acc:	e7f4      	b.n	ab8 <_sercom_get_hardware_index+0x18>
			return i;
     ace:	b2c0      	uxtb	r0, r0
     ad0:	e000      	b.n	ad4 <_sercom_get_hardware_index+0x34>
		}
	}
	return 0;
     ad2:	2000      	movs	r0, #0
}
     ad4:	b009      	add	sp, #36	; 0x24
     ad6:	bc70      	pop	{r4, r5, r6}
     ad8:	4770      	bx	lr
     ada:	bf00      	nop
     adc:	00009b28 	.word	0x00009b28

00000ae0 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
     ae0:	b510      	push	{r4, lr}
	void *hw = device->hw;
     ae2:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     ae4:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
     ae6:	f013 0f01 	tst.w	r3, #1
     aea:	d003      	beq.n	af4 <_sercom_usart_interrupt_handler+0x14>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
     aec:	7da3      	ldrb	r3, [r4, #22]
     aee:	f013 0f01 	tst.w	r3, #1
     af2:	d112      	bne.n	b1a <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
     af4:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
     af6:	f013 0f02 	tst.w	r3, #2
     afa:	d003      	beq.n	b04 <_sercom_usart_interrupt_handler+0x24>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
     afc:	7da3      	ldrb	r3, [r4, #22]
     afe:	f013 0f02 	tst.w	r3, #2
     b02:	d10f      	bne.n	b24 <_sercom_usart_interrupt_handler+0x44>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     b04:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
     b06:	f013 0f04 	tst.w	r3, #4
     b0a:	d015      	beq.n	b38 <_sercom_usart_interrupt_handler+0x58>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
     b0c:	8b63      	ldrh	r3, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
     b0e:	f003 0337 	and.w	r3, r3, #55	; 0x37
     b12:	b163      	cbz	r3, b2e <_sercom_usart_interrupt_handler+0x4e>
	((Sercom *)hw)->USART.STATUS.reg = mask;
     b14:	23ff      	movs	r3, #255	; 0xff
     b16:	8363      	strh	r3, [r4, #26]
     b18:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
     b1a:	2301      	movs	r3, #1
     b1c:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
     b1e:	6803      	ldr	r3, [r0, #0]
     b20:	4798      	blx	r3
     b22:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
     b24:	2302      	movs	r3, #2
     b26:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
     b28:	6883      	ldr	r3, [r0, #8]
     b2a:	4798      	blx	r3
     b2c:	bd10      	pop	{r4, pc}
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
			return;
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
     b2e:	6843      	ldr	r3, [r0, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
     b30:	6aa1      	ldr	r1, [r4, #40]	; 0x28
     b32:	b2c9      	uxtb	r1, r1
     b34:	4798      	blx	r3
     b36:	bd10      	pop	{r4, pc}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
     b38:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
     b3a:	09db      	lsrs	r3, r3, #7
     b3c:	d100      	bne.n	b40 <_sercom_usart_interrupt_handler+0x60>
     b3e:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
     b40:	2380      	movs	r3, #128	; 0x80
     b42:	7623      	strb	r3, [r4, #24]
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
     b44:	68c3      	ldr	r3, [r0, #12]
     b46:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
     b48:	8b63      	ldrh	r3, [r4, #26]
     b4a:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
     b4c:	8363      	strh	r3, [r4, #26]
     b4e:	e7f6      	b.n	b3e <_sercom_usart_interrupt_handler+0x5e>

00000b50 <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM1) {
     b50:	4b06      	ldr	r3, [pc, #24]	; (b6c <_sercom_init_irq_param+0x1c>)
     b52:	4298      	cmp	r0, r3
     b54:	d003      	beq.n	b5e <_sercom_init_irq_param+0xe>
		_sercom1_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM2) {
     b56:	4b06      	ldr	r3, [pc, #24]	; (b70 <_sercom_init_irq_param+0x20>)
     b58:	4298      	cmp	r0, r3
     b5a:	d003      	beq.n	b64 <_sercom_init_irq_param+0x14>
     b5c:	4770      	bx	lr
		_sercom1_dev = (struct _usart_async_device *)dev;
     b5e:	4b05      	ldr	r3, [pc, #20]	; (b74 <_sercom_init_irq_param+0x24>)
     b60:	6019      	str	r1, [r3, #0]
     b62:	e7f8      	b.n	b56 <_sercom_init_irq_param+0x6>
		_sercom2_dev = (struct _usart_async_device *)dev;
     b64:	4b03      	ldr	r3, [pc, #12]	; (b74 <_sercom_init_irq_param+0x24>)
     b66:	6059      	str	r1, [r3, #4]
	}
}
     b68:	e7f8      	b.n	b5c <_sercom_init_irq_param+0xc>
     b6a:	bf00      	nop
     b6c:	40003400 	.word	0x40003400
     b70:	41012000 	.word	0x41012000
     b74:	200002c4 	.word	0x200002c4

00000b78 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
     b78:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
     b7a:	4b04      	ldr	r3, [pc, #16]	; (b8c <_sercom_get_irq_num+0x14>)
     b7c:	4798      	blx	r3
     b7e:	0080      	lsls	r0, r0, #2
     b80:	b2c0      	uxtb	r0, r0
     b82:	302e      	adds	r0, #46	; 0x2e
}
     b84:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
     b88:	bd08      	pop	{r3, pc}
     b8a:	bf00      	nop
     b8c:	00000aa1 	.word	0x00000aa1

00000b90 <_get_sercom_index>:
{
     b90:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
     b92:	4b0d      	ldr	r3, [pc, #52]	; (bc8 <_get_sercom_index+0x38>)
     b94:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     b96:	2300      	movs	r3, #0
     b98:	2b01      	cmp	r3, #1
     b9a:	d80b      	bhi.n	bb4 <_get_sercom_index+0x24>
		if (_usarts[i].number == sercom_offset) {
     b9c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
     ba0:	00d1      	lsls	r1, r2, #3
     ba2:	4a0a      	ldr	r2, [pc, #40]	; (bcc <_get_sercom_index+0x3c>)
     ba4:	440a      	add	r2, r1
     ba6:	f892 2020 	ldrb.w	r2, [r2, #32]
     baa:	4290      	cmp	r0, r2
     bac:	d009      	beq.n	bc2 <_get_sercom_index+0x32>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     bae:	3301      	adds	r3, #1
     bb0:	b2db      	uxtb	r3, r3
     bb2:	e7f1      	b.n	b98 <_get_sercom_index+0x8>
	ASSERT(false);
     bb4:	f240 226d 	movw	r2, #621	; 0x26d
     bb8:	4905      	ldr	r1, [pc, #20]	; (bd0 <_get_sercom_index+0x40>)
     bba:	2000      	movs	r0, #0
     bbc:	4b05      	ldr	r3, [pc, #20]	; (bd4 <_get_sercom_index+0x44>)
     bbe:	4798      	blx	r3
	return 0;
     bc0:	2300      	movs	r3, #0
}
     bc2:	4618      	mov	r0, r3
     bc4:	bd08      	pop	{r3, pc}
     bc6:	bf00      	nop
     bc8:	00000aa1 	.word	0x00000aa1
     bcc:	00009b28 	.word	0x00009b28
     bd0:	00009bb4 	.word	0x00009bb4
     bd4:	0000088d 	.word	0x0000088d

00000bd8 <_usart_init>:
{
     bd8:	b538      	push	{r3, r4, r5, lr}
     bda:	4604      	mov	r4, r0
	uint8_t i = _get_sercom_index(hw);
     bdc:	4b3c      	ldr	r3, [pc, #240]	; (cd0 <_usart_init+0xf8>)
     bde:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
     be0:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
     be2:	f013 0f01 	tst.w	r3, #1
     be6:	d122      	bne.n	c2e <_usart_init+0x56>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
     be8:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     bec:	00da      	lsls	r2, r3, #3
     bee:	4b39      	ldr	r3, [pc, #228]	; (cd4 <_usart_init+0xfc>)
     bf0:	4413      	add	r3, r2
     bf2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
     bf4:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     bf8:	69e3      	ldr	r3, [r4, #28]
     bfa:	f013 0f03 	tst.w	r3, #3
     bfe:	d1fb      	bne.n	bf8 <_usart_init+0x20>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     c00:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
     c02:	f013 0f02 	tst.w	r3, #2
     c06:	d00b      	beq.n	c20 <_usart_init+0x48>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     c08:	6823      	ldr	r3, [r4, #0]
     c0a:	f023 0302 	bic.w	r3, r3, #2
     c0e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     c10:	69e3      	ldr	r3, [r4, #28]
     c12:	f013 0f03 	tst.w	r3, #3
     c16:	d1fb      	bne.n	c10 <_usart_init+0x38>
     c18:	69e3      	ldr	r3, [r4, #28]
     c1a:	f013 0f02 	tst.w	r3, #2
     c1e:	d1fb      	bne.n	c18 <_usart_init+0x40>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
     c20:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->USART.CTRLA.reg = data;
     c24:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     c26:	69e3      	ldr	r3, [r4, #28]
     c28:	f013 0f03 	tst.w	r3, #3
     c2c:	d1fb      	bne.n	c26 <_usart_init+0x4e>
     c2e:	69e3      	ldr	r3, [r4, #28]
     c30:	f013 0f01 	tst.w	r3, #1
     c34:	d1fb      	bne.n	c2e <_usart_init+0x56>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
     c36:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     c3a:	00da      	lsls	r2, r3, #3
     c3c:	4b25      	ldr	r3, [pc, #148]	; (cd4 <_usart_init+0xfc>)
     c3e:	4413      	add	r3, r2
     c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLA.reg = data;
     c42:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     c44:	69e3      	ldr	r3, [r4, #28]
     c46:	f013 0f03 	tst.w	r3, #3
     c4a:	d1fb      	bne.n	c44 <_usart_init+0x6c>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
     c4c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     c50:	00da      	lsls	r2, r3, #3
     c52:	4b20      	ldr	r3, [pc, #128]	; (cd4 <_usart_init+0xfc>)
     c54:	4413      	add	r3, r2
     c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	((Sercom *)hw)->USART.CTRLB.reg = data;
     c58:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     c5a:	69e3      	ldr	r3, [r4, #28]
     c5c:	f013 0f1f 	tst.w	r3, #31
     c60:	d1fb      	bne.n	c5a <_usart_init+0x82>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
     c62:	0042      	lsls	r2, r0, #1
     c64:	4402      	add	r2, r0
     c66:	00d1      	lsls	r1, r2, #3
     c68:	4b1a      	ldr	r3, [pc, #104]	; (cd4 <_usart_init+0xfc>)
     c6a:	440b      	add	r3, r1
     c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	((Sercom *)hw)->USART.CTRLC.reg = data;
     c6e:	60a2      	str	r2, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
     c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     c72:	f413 5f00 	tst.w	r3, #8192	; 0x2000
     c76:	d10a      	bne.n	c8e <_usart_init+0xb6>
     c78:	f413 4fc0 	tst.w	r3, #24576	; 0x6000
     c7c:	d107      	bne.n	c8e <_usart_init+0xb6>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
     c7e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     c82:	00da      	lsls	r2, r3, #3
     c84:	4b13      	ldr	r3, [pc, #76]	; (cd4 <_usart_init+0xfc>)
     c86:	4413      	add	r3, r2
     c88:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	((Sercom *)hw)->USART.BAUD.reg = data;
     c8a:	81a3      	strh	r3, [r4, #12]
     c8c:	e00f      	b.n	cae <_usart_init+0xd6>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
     c8e:	0042      	lsls	r2, r0, #1
     c90:	4402      	add	r2, r0
     c92:	00d1      	lsls	r1, r2, #3
     c94:	4b0f      	ldr	r3, [pc, #60]	; (cd4 <_usart_init+0xfc>)
     c96:	440b      	add	r3, r1
     c98:	8e19      	ldrh	r1, [r3, #48]	; 0x30
     c9a:	89a2      	ldrh	r2, [r4, #12]
     c9c:	f361 020c 	bfi	r2, r1, #0, #13
     ca0:	81a2      	strh	r2, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
     ca2:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
     ca6:	89a3      	ldrh	r3, [r4, #12]
     ca8:	f362 334f 	bfi	r3, r2, #13, #3
     cac:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
     cae:	4a09      	ldr	r2, [pc, #36]	; (cd4 <_usart_init+0xfc>)
     cb0:	0043      	lsls	r3, r0, #1
     cb2:	181d      	adds	r5, r3, r0
     cb4:	00e9      	lsls	r1, r5, #3
     cb6:	460d      	mov	r5, r1
     cb8:	4411      	add	r1, r2
     cba:	f891 1033 	ldrb.w	r1, [r1, #51]	; 0x33
	((Sercom *)hw)->USART.RXPL.reg = data;
     cbe:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
     cc0:	442a      	add	r2, r5
     cc2:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     cc6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
     cca:	2000      	movs	r0, #0
     ccc:	bd38      	pop	{r3, r4, r5, pc}
     cce:	bf00      	nop
     cd0:	00000b91 	.word	0x00000b91
     cd4:	00009b28 	.word	0x00009b28

00000cd8 <_usart_async_init>:
{
     cd8:	b570      	push	{r4, r5, r6, lr}
     cda:	460c      	mov	r4, r1
	ASSERT(device);
     cdc:	4606      	mov	r6, r0
     cde:	22cd      	movs	r2, #205	; 0xcd
     ce0:	4918      	ldr	r1, [pc, #96]	; (d44 <_usart_async_init+0x6c>)
     ce2:	3000      	adds	r0, #0
     ce4:	bf18      	it	ne
     ce6:	2001      	movne	r0, #1
     ce8:	4b17      	ldr	r3, [pc, #92]	; (d48 <_usart_async_init+0x70>)
     cea:	4798      	blx	r3
	init_status = _usart_init(hw);
     cec:	4620      	mov	r0, r4
     cee:	4b17      	ldr	r3, [pc, #92]	; (d4c <_usart_async_init+0x74>)
     cf0:	4798      	blx	r3
	if (init_status) {
     cf2:	4605      	mov	r5, r0
     cf4:	b108      	cbz	r0, cfa <_usart_async_init+0x22>
}
     cf6:	4628      	mov	r0, r5
     cf8:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
     cfa:	61b4      	str	r4, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
     cfc:	4631      	mov	r1, r6
     cfe:	4620      	mov	r0, r4
     d00:	4b13      	ldr	r3, [pc, #76]	; (d50 <_usart_async_init+0x78>)
     d02:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
     d04:	4620      	mov	r0, r4
     d06:	4b13      	ldr	r3, [pc, #76]	; (d54 <_usart_async_init+0x7c>)
     d08:	4798      	blx	r3
	for (uint32_t i = 0; i < 4; i++) {
     d0a:	2400      	movs	r4, #0
     d0c:	e016      	b.n	d3c <_usart_async_init+0x64>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     d0e:	0941      	lsrs	r1, r0, #5
     d10:	f000 021f 	and.w	r2, r0, #31
     d14:	2301      	movs	r3, #1
     d16:	4093      	lsls	r3, r2
     d18:	4a0f      	ldr	r2, [pc, #60]	; (d58 <_usart_async_init+0x80>)
     d1a:	f101 0620 	add.w	r6, r1, #32
     d1e:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
     d22:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     d26:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     d2a:	f101 0660 	add.w	r6, r1, #96	; 0x60
     d2e:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     d32:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		irq++;
     d36:	3001      	adds	r0, #1
     d38:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
     d3a:	3401      	adds	r4, #1
     d3c:	2c03      	cmp	r4, #3
     d3e:	d9e6      	bls.n	d0e <_usart_async_init+0x36>
     d40:	e7d9      	b.n	cf6 <_usart_async_init+0x1e>
     d42:	bf00      	nop
     d44:	00009bb4 	.word	0x00009bb4
     d48:	0000088d 	.word	0x0000088d
     d4c:	00000bd9 	.word	0x00000bd9
     d50:	00000b51 	.word	0x00000b51
     d54:	00000b79 	.word	0x00000b79
     d58:	e000e100 	.word	0xe000e100

00000d5c <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
     d5c:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     d5e:	6813      	ldr	r3, [r2, #0]
     d60:	f043 0302 	orr.w	r3, r3, #2
     d64:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     d66:	69d3      	ldr	r3, [r2, #28]
     d68:	f013 0f03 	tst.w	r3, #3
     d6c:	d1fb      	bne.n	d66 <_usart_async_enable+0xa>
}
     d6e:	4770      	bx	lr

00000d70 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
     d70:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
     d72:	6299      	str	r1, [r3, #40]	; 0x28
     d74:	4770      	bx	lr

00000d76 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
     d76:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
     d78:	2201      	movs	r2, #1
     d7a:	759a      	strb	r2, [r3, #22]
     d7c:	4770      	bx	lr

00000d7e <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
     d7e:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
     d80:	2202      	movs	r2, #2
     d82:	759a      	strb	r2, [r3, #22]
     d84:	4770      	bx	lr
	...

00000d88 <_usart_async_set_irq_state>:
{
     d88:	b570      	push	{r4, r5, r6, lr}
     d8a:	460c      	mov	r4, r1
     d8c:	4615      	mov	r5, r2
	ASSERT(device);
     d8e:	4606      	mov	r6, r0
     d90:	f240 222d 	movw	r2, #557	; 0x22d
     d94:	4916      	ldr	r1, [pc, #88]	; (df0 <_usart_async_set_irq_state+0x68>)
     d96:	3000      	adds	r0, #0
     d98:	bf18      	it	ne
     d9a:	2001      	movne	r0, #1
     d9c:	4b15      	ldr	r3, [pc, #84]	; (df4 <_usart_async_set_irq_state+0x6c>)
     d9e:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
     da0:	b134      	cbz	r4, db0 <_usart_async_set_irq_state+0x28>
     da2:	2c02      	cmp	r4, #2
     da4:	d004      	beq.n	db0 <_usart_async_set_irq_state+0x28>
	} else if (USART_ASYNC_RX_DONE == type) {
     da6:	2c01      	cmp	r4, #1
     da8:	d011      	beq.n	dce <_usart_async_set_irq_state+0x46>
	} else if (USART_ASYNC_ERROR == type) {
     daa:	2c03      	cmp	r4, #3
     dac:	d017      	beq.n	dde <_usart_async_set_irq_state+0x56>
     dae:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
     db0:	69b3      	ldr	r3, [r6, #24]
	if (value == 0x0) {
     db2:	b935      	cbnz	r5, dc2 <_usart_async_set_irq_state+0x3a>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
     db4:	2201      	movs	r2, #1
     db6:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
     db8:	69b3      	ldr	r3, [r6, #24]
	if (value == 0x0) {
     dba:	b92d      	cbnz	r5, dc8 <_usart_async_set_irq_state+0x40>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
     dbc:	2202      	movs	r2, #2
     dbe:	751a      	strb	r2, [r3, #20]
     dc0:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
     dc2:	2201      	movs	r2, #1
     dc4:	759a      	strb	r2, [r3, #22]
     dc6:	e7f7      	b.n	db8 <_usart_async_set_irq_state+0x30>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
     dc8:	2202      	movs	r2, #2
     dca:	759a      	strb	r2, [r3, #22]
     dcc:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
     dce:	69b3      	ldr	r3, [r6, #24]
	if (value == 0x0) {
     dd0:	b915      	cbnz	r5, dd8 <_usart_async_set_irq_state+0x50>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
     dd2:	2204      	movs	r2, #4
     dd4:	751a      	strb	r2, [r3, #20]
     dd6:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
     dd8:	2204      	movs	r2, #4
     dda:	759a      	strb	r2, [r3, #22]
     ddc:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
     dde:	69b3      	ldr	r3, [r6, #24]
	if (value == 0x0) {
     de0:	b115      	cbz	r5, de8 <_usart_async_set_irq_state+0x60>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
     de2:	2280      	movs	r2, #128	; 0x80
     de4:	759a      	strb	r2, [r3, #22]
}
     de6:	e7e2      	b.n	dae <_usart_async_set_irq_state+0x26>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
     de8:	2280      	movs	r2, #128	; 0x80
     dea:	751a      	strb	r2, [r3, #20]
     dec:	bd70      	pop	{r4, r5, r6, pc}
     dee:	bf00      	nop
     df0:	00009bb4 	.word	0x00009bb4
     df4:	0000088d 	.word	0x0000088d

00000df8 <SERCOM1_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM1_0_Handler(void)
{
     df8:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
     dfa:	4b02      	ldr	r3, [pc, #8]	; (e04 <SERCOM1_0_Handler+0xc>)
     dfc:	6818      	ldr	r0, [r3, #0]
     dfe:	4b02      	ldr	r3, [pc, #8]	; (e08 <SERCOM1_0_Handler+0x10>)
     e00:	4798      	blx	r3
     e02:	bd08      	pop	{r3, pc}
     e04:	200002c4 	.word	0x200002c4
     e08:	00000ae1 	.word	0x00000ae1

00000e0c <SERCOM1_1_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM1_1_Handler(void)
{
     e0c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
     e0e:	4b02      	ldr	r3, [pc, #8]	; (e18 <SERCOM1_1_Handler+0xc>)
     e10:	6818      	ldr	r0, [r3, #0]
     e12:	4b02      	ldr	r3, [pc, #8]	; (e1c <SERCOM1_1_Handler+0x10>)
     e14:	4798      	blx	r3
     e16:	bd08      	pop	{r3, pc}
     e18:	200002c4 	.word	0x200002c4
     e1c:	00000ae1 	.word	0x00000ae1

00000e20 <SERCOM1_2_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM1_2_Handler(void)
{
     e20:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
     e22:	4b02      	ldr	r3, [pc, #8]	; (e2c <SERCOM1_2_Handler+0xc>)
     e24:	6818      	ldr	r0, [r3, #0]
     e26:	4b02      	ldr	r3, [pc, #8]	; (e30 <SERCOM1_2_Handler+0x10>)
     e28:	4798      	blx	r3
     e2a:	bd08      	pop	{r3, pc}
     e2c:	200002c4 	.word	0x200002c4
     e30:	00000ae1 	.word	0x00000ae1

00000e34 <SERCOM1_3_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM1_3_Handler(void)
{
     e34:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
     e36:	4b02      	ldr	r3, [pc, #8]	; (e40 <SERCOM1_3_Handler+0xc>)
     e38:	6818      	ldr	r0, [r3, #0]
     e3a:	4b02      	ldr	r3, [pc, #8]	; (e44 <SERCOM1_3_Handler+0x10>)
     e3c:	4798      	blx	r3
     e3e:	bd08      	pop	{r3, pc}
     e40:	200002c4 	.word	0x200002c4
     e44:	00000ae1 	.word	0x00000ae1

00000e48 <SERCOM2_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM2_0_Handler(void)
{
     e48:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
     e4a:	4b02      	ldr	r3, [pc, #8]	; (e54 <SERCOM2_0_Handler+0xc>)
     e4c:	6858      	ldr	r0, [r3, #4]
     e4e:	4b02      	ldr	r3, [pc, #8]	; (e58 <SERCOM2_0_Handler+0x10>)
     e50:	4798      	blx	r3
     e52:	bd08      	pop	{r3, pc}
     e54:	200002c4 	.word	0x200002c4
     e58:	00000ae1 	.word	0x00000ae1

00000e5c <SERCOM2_1_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM2_1_Handler(void)
{
     e5c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
     e5e:	4b02      	ldr	r3, [pc, #8]	; (e68 <SERCOM2_1_Handler+0xc>)
     e60:	6858      	ldr	r0, [r3, #4]
     e62:	4b02      	ldr	r3, [pc, #8]	; (e6c <SERCOM2_1_Handler+0x10>)
     e64:	4798      	blx	r3
     e66:	bd08      	pop	{r3, pc}
     e68:	200002c4 	.word	0x200002c4
     e6c:	00000ae1 	.word	0x00000ae1

00000e70 <SERCOM2_2_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM2_2_Handler(void)
{
     e70:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
     e72:	4b02      	ldr	r3, [pc, #8]	; (e7c <SERCOM2_2_Handler+0xc>)
     e74:	6858      	ldr	r0, [r3, #4]
     e76:	4b02      	ldr	r3, [pc, #8]	; (e80 <SERCOM2_2_Handler+0x10>)
     e78:	4798      	blx	r3
     e7a:	bd08      	pop	{r3, pc}
     e7c:	200002c4 	.word	0x200002c4
     e80:	00000ae1 	.word	0x00000ae1

00000e84 <SERCOM2_3_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM2_3_Handler(void)
{
     e84:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
     e86:	4b02      	ldr	r3, [pc, #8]	; (e90 <SERCOM2_3_Handler+0xc>)
     e88:	6858      	ldr	r0, [r3, #4]
     e8a:	4b02      	ldr	r3, [pc, #8]	; (e94 <SERCOM2_3_Handler+0x10>)
     e8c:	4798      	blx	r3
     e8e:	bd08      	pop	{r3, pc}
     e90:	200002c4 	.word	0x200002c4
     e94:	00000ae1 	.word	0x00000ae1

00000e98 <sendAtCommandWithRetryTimeout>:
{
    CellularError_t cellularStatus = CELLULAR_SUCCESS;
    CellularPktStatus_t pktStatus = CELLULAR_PKT_STATUS_OK;
    uint8_t tryCount = 0;

    if( pAtReq == NULL )
     e98:	b1e1      	cbz	r1, ed4 <sendAtCommandWithRetryTimeout+0x3c>
{
     e9a:	b5f0      	push	{r4, r5, r6, r7, lr}
     e9c:	b085      	sub	sp, #20
     e9e:	460d      	mov	r5, r1
     ea0:	4606      	mov	r6, r0
     ea2:	2400      	movs	r4, #0
     ea4:	4623      	mov	r3, r4
    {
        cellularStatus = CELLULAR_BAD_PARAMETER;
    }
    else
    {
        for( ; tryCount < ENBABLE_MODULE_UE_RETRY_COUNT; tryCount++ )
     ea6:	2c02      	cmp	r4, #2
     ea8:	d817      	bhi.n	eda <sendAtCommandWithRetryTimeout+0x42>
        {
            pktStatus = _Cellular_TimeoutAtcmdRequestWithCallback( pContext, *pAtReq, ENBABLE_MODULE_UE_RETRY_TIMEOUT );
     eaa:	f241 3388 	movw	r3, #5000	; 0x1388
     eae:	9303      	str	r3, [sp, #12]
     eb0:	f105 030c 	add.w	r3, r5, #12
     eb4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
     eb8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
     ebc:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
     ec0:	4630      	mov	r0, r6
     ec2:	4f07      	ldr	r7, [pc, #28]	; (ee0 <sendAtCommandWithRetryTimeout+0x48>)
     ec4:	47b8      	blx	r7
            cellularStatus = _Cellular_TranslatePktStatus( pktStatus );
     ec6:	4b07      	ldr	r3, [pc, #28]	; (ee4 <sendAtCommandWithRetryTimeout+0x4c>)
     ec8:	4798      	blx	r3

            if( cellularStatus == CELLULAR_SUCCESS )
     eca:	4603      	mov	r3, r0
     ecc:	b128      	cbz	r0, eda <sendAtCommandWithRetryTimeout+0x42>
        for( ; tryCount < ENBABLE_MODULE_UE_RETRY_COUNT; tryCount++ )
     ece:	3401      	adds	r4, #1
     ed0:	b2e4      	uxtb	r4, r4
     ed2:	e7e8      	b.n	ea6 <sendAtCommandWithRetryTimeout+0xe>
        cellularStatus = CELLULAR_BAD_PARAMETER;
     ed4:	2305      	movs	r3, #5
            }
        }
    }

    return cellularStatus;
}
     ed6:	4618      	mov	r0, r3
     ed8:	4770      	bx	lr
     eda:	4618      	mov	r0, r3
     edc:	b005      	add	sp, #20
     ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ee0:	00003e9d 	.word	0x00003e9d
     ee4:	0000395d 	.word	0x0000395d

00000ee8 <Cellular_ModuleInit>:
                                     void ** ppModuleContext )
{
    CellularError_t cellularStatus = CELLULAR_SUCCESS;
    bool status = false;

    if( pContext == NULL )
     ee8:	b1f8      	cbz	r0, f2a <Cellular_ModuleInit+0x42>
    {
        cellularStatus = CELLULAR_INVALID_HANDLE;
    }
    else if( ppModuleContext == NULL )
     eea:	b301      	cbz	r1, f2e <Cellular_ModuleInit+0x46>
{
     eec:	b538      	push	{r3, r4, r5, lr}
     eee:	460c      	mov	r4, r1
        cellularStatus = CELLULAR_BAD_PARAMETER;
    }
    else
    {
        /* Initialize the module context. */
        ( void ) memset( &cellularBg96Context, 0, sizeof( cellularModuleContext_t ) );
     ef0:	4d10      	ldr	r5, [pc, #64]	; (f34 <Cellular_ModuleInit+0x4c>)
     ef2:	2268      	movs	r2, #104	; 0x68
     ef4:	2100      	movs	r1, #0
     ef6:	4628      	mov	r0, r5
     ef8:	4b0f      	ldr	r3, [pc, #60]	; (f38 <Cellular_ModuleInit+0x50>)
     efa:	4798      	blx	r3

        /* Create the mutex for DNS. */
        status = PlatformMutex_Create( &cellularBg96Context.dnsQueryMutex, false );
     efc:	2100      	movs	r1, #0
     efe:	4628      	mov	r0, r5
     f00:	4b0e      	ldr	r3, [pc, #56]	; (f3c <Cellular_ModuleInit+0x54>)
     f02:	4798      	blx	r3

        if( status == false )
     f04:	b908      	cbnz	r0, f0a <Cellular_ModuleInit+0x22>
        {
            cellularStatus = CELLULAR_NO_MEMORY;
     f06:	2006      	movs	r0, #6
            }
        }
    }

    return cellularStatus;
}
     f08:	bd38      	pop	{r3, r4, r5, pc}
            cellularBg96Context.pktDnsQueue = xQueueCreate( 1, sizeof( cellularDnsQueryResult_t ) );
     f0a:	2200      	movs	r2, #0
     f0c:	2101      	movs	r1, #1
     f0e:	4608      	mov	r0, r1
     f10:	4b0b      	ldr	r3, [pc, #44]	; (f40 <Cellular_ModuleInit+0x58>)
     f12:	4798      	blx	r3
     f14:	65a8      	str	r0, [r5, #88]	; 0x58
            if( cellularBg96Context.pktDnsQueue == NULL )
     f16:	b118      	cbz	r0, f20 <Cellular_ModuleInit+0x38>
                *ppModuleContext = ( void * ) &cellularBg96Context;
     f18:	4b06      	ldr	r3, [pc, #24]	; (f34 <Cellular_ModuleInit+0x4c>)
     f1a:	6023      	str	r3, [r4, #0]
    CellularError_t cellularStatus = CELLULAR_SUCCESS;
     f1c:	2000      	movs	r0, #0
     f1e:	bd38      	pop	{r3, r4, r5, pc}
                PlatformMutex_Destroy( &cellularBg96Context.dnsQueryMutex );
     f20:	4628      	mov	r0, r5
     f22:	4b08      	ldr	r3, [pc, #32]	; (f44 <Cellular_ModuleInit+0x5c>)
     f24:	4798      	blx	r3
                cellularStatus = CELLULAR_NO_MEMORY;
     f26:	2006      	movs	r0, #6
     f28:	bd38      	pop	{r3, r4, r5, pc}
        cellularStatus = CELLULAR_INVALID_HANDLE;
     f2a:	2001      	movs	r0, #1
     f2c:	4770      	bx	lr
        cellularStatus = CELLULAR_BAD_PARAMETER;
     f2e:	2005      	movs	r0, #5
     f30:	4770      	bx	lr
     f32:	bf00      	nop
     f34:	200002cc 	.word	0x200002cc
     f38:	000088af 	.word	0x000088af
     f3c:	00005485 	.word	0x00005485
     f40:	00006aa9 	.word	0x00006aa9
     f44:	000054c9 	.word	0x000054c9

00000f48 <Cellular_ModuleEnableUE>:
/*-----------------------------------------------------------*/

/* FreeRTOS Cellular Common Library porting interface. */
/* coverity[misra_c_2012_rule_8_7_violation] */
CellularError_t Cellular_ModuleEnableUE( CellularContext_t * pContext )
{
     f48:	b510      	push	{r4, lr}
     f4a:	b08c      	sub	sp, #48	; 0x30
    CellularError_t cellularStatus = CELLULAR_SUCCESS;
    CellularAtReq_t atReqGetNoResult =
     f4c:	2300      	movs	r3, #0
     f4e:	9306      	str	r3, [sp, #24]
     f50:	9307      	str	r3, [sp, #28]
     f52:	9308      	str	r3, [sp, #32]
     f54:	9309      	str	r3, [sp, #36]	; 0x24
     f56:	930a      	str	r3, [sp, #40]	; 0x28
     f58:	930b      	str	r3, [sp, #44]	; 0x2c
        NULL,
        NULL,
        NULL,
        0
    };
    CellularAtReq_t atReqGetWithResult =
     f5a:	2204      	movs	r2, #4
     f5c:	f88d 2004 	strb.w	r2, [sp, #4]
     f60:	9302      	str	r3, [sp, #8]
     f62:	9303      	str	r3, [sp, #12]
     f64:	9304      	str	r3, [sp, #16]
     f66:	f8ad 3014 	strh.w	r3, [sp, #20]
        NULL,
        NULL,
        0
    };

    if( pContext != NULL )
     f6a:	2800      	cmp	r0, #0
     f6c:	d05e      	beq.n	102c <Cellular_ModuleEnableUE+0xe4>
     f6e:	4604      	mov	r4, r0
    {
        /* Disable echo. */
        atReqGetWithResult.pAtCmd = "ATE0";
     f70:	a90c      	add	r1, sp, #48	; 0x30
     f72:	4b2f      	ldr	r3, [pc, #188]	; (1030 <Cellular_ModuleEnableUE+0xe8>)
     f74:	f841 3d30 	str.w	r3, [r1, #-48]!
        cellularStatus = sendAtCommandWithRetryTimeout( pContext, &atReqGetWithResult );
     f78:	4b2e      	ldr	r3, [pc, #184]	; (1034 <Cellular_ModuleEnableUE+0xec>)
     f7a:	4798      	blx	r3

        if( cellularStatus == CELLULAR_SUCCESS )
     f7c:	4603      	mov	r3, r0
     f7e:	b168      	cbz	r0, f9c <Cellular_ModuleEnableUE+0x54>
            /* Disable DTR function. */
            atReqGetNoResult.pAtCmd = "AT&D0";
            cellularStatus = sendAtCommandWithRetryTimeout( pContext, &atReqGetNoResult );
        }

        if( cellularStatus == CELLULAR_SUCCESS )
     f80:	b1ab      	cbz	r3, fae <Cellular_ModuleEnableUE+0x66>
            /* Enable RTS/CTS hardware flow control. */
            atReqGetNoResult.pAtCmd = "AT+IFC=2,2";
            cellularStatus = sendAtCommandWithRetryTimeout( pContext, &atReqGetNoResult );
        }

        if( cellularStatus == CELLULAR_SUCCESS )
     f82:	b1eb      	cbz	r3, fc0 <Cellular_ModuleEnableUE+0x78>
                atReqGetNoResult.pAtCmd = "AT+QURCCFG=\"urcport\",\"uart1\"";
            #endif
            cellularStatus = sendAtCommandWithRetryTimeout( pContext, &atReqGetNoResult );
        }

        if( cellularStatus == CELLULAR_SUCCESS )
     f84:	b32b      	cbz	r3, fd2 <Cellular_ModuleEnableUE+0x8a>
            /* Configure Band configuration to all bands. */
            atReqGetNoResult.pAtCmd = "AT+QCFG=\"band\",f,400a0e189f,a0e189f";
            cellularStatus = sendAtCommandWithRetryTimeout( pContext, &atReqGetNoResult );
        }

        if( cellularStatus == CELLULAR_SUCCESS )
     f86:	2b00      	cmp	r3, #0
     f88:	d02c      	beq.n	fe4 <Cellular_ModuleEnableUE+0x9c>
            /* Configure RAT(s) to be Searched to Automatic. */
            atReqGetNoResult.pAtCmd = "AT+QCFG=\"nwscanmode\",0,1";
            cellularStatus = sendAtCommandWithRetryTimeout( pContext, &atReqGetNoResult );
        }

        if( cellularStatus == CELLULAR_SUCCESS )
     f8a:	2b00      	cmp	r3, #0
     f8c:	d033      	beq.n	ff6 <Cellular_ModuleEnableUE+0xae>
            /* Configure Network Category to be Searched under LTE RAT to LTE Cat M1 and Cat NB1. */
            atReqGetNoResult.pAtCmd = "AT+QCFG=\"iotopmode\",2,1";
            cellularStatus = sendAtCommandWithRetryTimeout( pContext, &atReqGetNoResult );
        }

        if( cellularStatus == CELLULAR_SUCCESS )
     f8e:	2b00      	cmp	r3, #0
     f90:	d03a      	beq.n	1008 <Cellular_ModuleEnableUE+0xc0>
            }

            cellularStatus = sendAtCommandWithRetryTimeout( pContext, &atReqGetNoResult );
        }

        if( cellularStatus == CELLULAR_SUCCESS )
     f92:	2b00      	cmp	r3, #0
     f94:	d041      	beq.n	101a <Cellular_ModuleEnableUE+0xd2>
            cellularStatus = sendAtCommandWithRetryTimeout( pContext, &atReqGetNoResult );
        }
    }

    return cellularStatus;
}
     f96:	4618      	mov	r0, r3
     f98:	b00c      	add	sp, #48	; 0x30
     f9a:	bd10      	pop	{r4, pc}
            atReqGetNoResult.pAtCmd = "AT&D0";
     f9c:	a90c      	add	r1, sp, #48	; 0x30
     f9e:	4b26      	ldr	r3, [pc, #152]	; (1038 <Cellular_ModuleEnableUE+0xf0>)
     fa0:	f841 3d18 	str.w	r3, [r1, #-24]!
            cellularStatus = sendAtCommandWithRetryTimeout( pContext, &atReqGetNoResult );
     fa4:	4620      	mov	r0, r4
     fa6:	4b23      	ldr	r3, [pc, #140]	; (1034 <Cellular_ModuleEnableUE+0xec>)
     fa8:	4798      	blx	r3
     faa:	4603      	mov	r3, r0
     fac:	e7e8      	b.n	f80 <Cellular_ModuleEnableUE+0x38>
            atReqGetNoResult.pAtCmd = "AT+IFC=2,2";
     fae:	a90c      	add	r1, sp, #48	; 0x30
     fb0:	4b22      	ldr	r3, [pc, #136]	; (103c <Cellular_ModuleEnableUE+0xf4>)
     fb2:	f841 3d18 	str.w	r3, [r1, #-24]!
            cellularStatus = sendAtCommandWithRetryTimeout( pContext, &atReqGetNoResult );
     fb6:	4620      	mov	r0, r4
     fb8:	4b1e      	ldr	r3, [pc, #120]	; (1034 <Cellular_ModuleEnableUE+0xec>)
     fba:	4798      	blx	r3
     fbc:	4603      	mov	r3, r0
     fbe:	e7e0      	b.n	f82 <Cellular_ModuleEnableUE+0x3a>
                atReqGetNoResult.pAtCmd = "AT+QURCCFG=\"urcport\",\"uart1\"";
     fc0:	a90c      	add	r1, sp, #48	; 0x30
     fc2:	4b1f      	ldr	r3, [pc, #124]	; (1040 <Cellular_ModuleEnableUE+0xf8>)
     fc4:	f841 3d18 	str.w	r3, [r1, #-24]!
            cellularStatus = sendAtCommandWithRetryTimeout( pContext, &atReqGetNoResult );
     fc8:	4620      	mov	r0, r4
     fca:	4b1a      	ldr	r3, [pc, #104]	; (1034 <Cellular_ModuleEnableUE+0xec>)
     fcc:	4798      	blx	r3
     fce:	4603      	mov	r3, r0
     fd0:	e7d8      	b.n	f84 <Cellular_ModuleEnableUE+0x3c>
            atReqGetNoResult.pAtCmd = "AT+QCFG=\"band\",f,400a0e189f,a0e189f";
     fd2:	a90c      	add	r1, sp, #48	; 0x30
     fd4:	4b1b      	ldr	r3, [pc, #108]	; (1044 <Cellular_ModuleEnableUE+0xfc>)
     fd6:	f841 3d18 	str.w	r3, [r1, #-24]!
            cellularStatus = sendAtCommandWithRetryTimeout( pContext, &atReqGetNoResult );
     fda:	4620      	mov	r0, r4
     fdc:	4b15      	ldr	r3, [pc, #84]	; (1034 <Cellular_ModuleEnableUE+0xec>)
     fde:	4798      	blx	r3
     fe0:	4603      	mov	r3, r0
     fe2:	e7d0      	b.n	f86 <Cellular_ModuleEnableUE+0x3e>
            atReqGetNoResult.pAtCmd = "AT+QCFG=\"nwscanmode\",0,1";
     fe4:	a90c      	add	r1, sp, #48	; 0x30
     fe6:	4b18      	ldr	r3, [pc, #96]	; (1048 <Cellular_ModuleEnableUE+0x100>)
     fe8:	f841 3d18 	str.w	r3, [r1, #-24]!
            cellularStatus = sendAtCommandWithRetryTimeout( pContext, &atReqGetNoResult );
     fec:	4620      	mov	r0, r4
     fee:	4b11      	ldr	r3, [pc, #68]	; (1034 <Cellular_ModuleEnableUE+0xec>)
     ff0:	4798      	blx	r3
     ff2:	4603      	mov	r3, r0
     ff4:	e7c9      	b.n	f8a <Cellular_ModuleEnableUE+0x42>
            atReqGetNoResult.pAtCmd = "AT+QCFG=\"iotopmode\",2,1";
     ff6:	a90c      	add	r1, sp, #48	; 0x30
     ff8:	4b14      	ldr	r3, [pc, #80]	; (104c <Cellular_ModuleEnableUE+0x104>)
     ffa:	f841 3d18 	str.w	r3, [r1, #-24]!
            cellularStatus = sendAtCommandWithRetryTimeout( pContext, &atReqGetNoResult );
     ffe:	4620      	mov	r0, r4
    1000:	4b0c      	ldr	r3, [pc, #48]	; (1034 <Cellular_ModuleEnableUE+0xec>)
    1002:	4798      	blx	r3
    1004:	4603      	mov	r3, r0
    1006:	e7c2      	b.n	f8e <Cellular_ModuleEnableUE+0x46>
                    atReqGetNoResult.pAtCmd = "AT+QCFG=\"nwscanseq\",02,1";
    1008:	a90c      	add	r1, sp, #48	; 0x30
    100a:	4b11      	ldr	r3, [pc, #68]	; (1050 <Cellular_ModuleEnableUE+0x108>)
    100c:	f841 3d18 	str.w	r3, [r1, #-24]!
            cellularStatus = sendAtCommandWithRetryTimeout( pContext, &atReqGetNoResult );
    1010:	4620      	mov	r0, r4
    1012:	4b08      	ldr	r3, [pc, #32]	; (1034 <Cellular_ModuleEnableUE+0xec>)
    1014:	4798      	blx	r3
    1016:	4603      	mov	r3, r0
    1018:	e7bb      	b.n	f92 <Cellular_ModuleEnableUE+0x4a>
            atReqGetNoResult.pAtCmd = "AT+CFUN=1";
    101a:	a90c      	add	r1, sp, #48	; 0x30
    101c:	4b0d      	ldr	r3, [pc, #52]	; (1054 <Cellular_ModuleEnableUE+0x10c>)
    101e:	f841 3d18 	str.w	r3, [r1, #-24]!
            cellularStatus = sendAtCommandWithRetryTimeout( pContext, &atReqGetNoResult );
    1022:	4620      	mov	r0, r4
    1024:	4b03      	ldr	r3, [pc, #12]	; (1034 <Cellular_ModuleEnableUE+0xec>)
    1026:	4798      	blx	r3
    1028:	4603      	mov	r3, r0
    102a:	e7b4      	b.n	f96 <Cellular_ModuleEnableUE+0x4e>
    CellularError_t cellularStatus = CELLULAR_SUCCESS;
    102c:	2300      	movs	r3, #0
    102e:	e7b2      	b.n	f96 <Cellular_ModuleEnableUE+0x4e>
    1030:	00009bd0 	.word	0x00009bd0
    1034:	00000e99 	.word	0x00000e99
    1038:	00009bd8 	.word	0x00009bd8
    103c:	00009be0 	.word	0x00009be0
    1040:	00009bec 	.word	0x00009bec
    1044:	00009c0c 	.word	0x00009c0c
    1048:	00009c30 	.word	0x00009c30
    104c:	00009c4c 	.word	0x00009c4c
    1050:	00009c64 	.word	0x00009c64
    1054:	00009c80 	.word	0x00009c80

00001058 <Cellular_ModuleEnableUrc>:
/*-----------------------------------------------------------*/

/* FreeRTOS Cellular Common Library porting interface. */
/* coverity[misra_c_2012_rule_8_7_violation] */
CellularError_t Cellular_ModuleEnableUrc( CellularContext_t * pContext )
{
    1058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    105c:	b08a      	sub	sp, #40	; 0x28
    105e:	4680      	mov	r8, r0
    CellularError_t cellularStatus = CELLULAR_SUCCESS;
    CellularAtReq_t atReqGetNoResult =
    1060:	ac04      	add	r4, sp, #16
    1062:	2600      	movs	r6, #0
    1064:	6066      	str	r6, [r4, #4]
    1066:	60a6      	str	r6, [r4, #8]
    1068:	60e6      	str	r6, [r4, #12]
    106a:	6126      	str	r6, [r4, #16]
    106c:	6166      	str	r6, [r4, #20]
        NULL,
        NULL,
        0
    };

    atReqGetNoResult.pAtCmd = "AT+COPS=3,2";
    106e:	4b1c      	ldr	r3, [pc, #112]	; (10e0 <Cellular_ModuleEnableUrc+0x88>)
    1070:	9304      	str	r3, [sp, #16]
    ( void ) _Cellular_AtcmdRequestWithCallback( pContext, atReqGetNoResult );
    1072:	ad07      	add	r5, sp, #28
    1074:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    1078:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
    107c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
    1080:	4640      	mov	r0, r8
    1082:	4f18      	ldr	r7, [pc, #96]	; (10e4 <Cellular_ModuleEnableUrc+0x8c>)
    1084:	47b8      	blx	r7

    atReqGetNoResult.pAtCmd = "AT+CREG=2";
    1086:	4b18      	ldr	r3, [pc, #96]	; (10e8 <Cellular_ModuleEnableUrc+0x90>)
    1088:	9304      	str	r3, [sp, #16]
    ( void ) _Cellular_AtcmdRequestWithCallback( pContext, atReqGetNoResult );
    108a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    108e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
    1092:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
    1096:	4640      	mov	r0, r8
    1098:	47b8      	blx	r7

    atReqGetNoResult.pAtCmd = "AT+CGREG=2";
    109a:	4b14      	ldr	r3, [pc, #80]	; (10ec <Cellular_ModuleEnableUrc+0x94>)
    109c:	9304      	str	r3, [sp, #16]
    ( void ) _Cellular_AtcmdRequestWithCallback( pContext, atReqGetNoResult );
    109e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    10a2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
    10a6:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
    10aa:	4640      	mov	r0, r8
    10ac:	47b8      	blx	r7

    atReqGetNoResult.pAtCmd = "AT+CEREG=2";
    10ae:	4b10      	ldr	r3, [pc, #64]	; (10f0 <Cellular_ModuleEnableUrc+0x98>)
    10b0:	9304      	str	r3, [sp, #16]
    ( void ) _Cellular_AtcmdRequestWithCallback( pContext, atReqGetNoResult );
    10b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    10b6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
    10ba:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
    10be:	4640      	mov	r0, r8
    10c0:	47b8      	blx	r7

    atReqGetNoResult.pAtCmd = "AT+CTZR=1";
    10c2:	4b0c      	ldr	r3, [pc, #48]	; (10f4 <Cellular_ModuleEnableUrc+0x9c>)
    10c4:	9304      	str	r3, [sp, #16]
    ( void ) _Cellular_AtcmdRequestWithCallback( pContext, atReqGetNoResult );
    10c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    10ca:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
    10ce:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
    10d2:	4640      	mov	r0, r8
    10d4:	47b8      	blx	r7

    return cellularStatus;
}
    10d6:	4630      	mov	r0, r6
    10d8:	b00a      	add	sp, #40	; 0x28
    10da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    10de:	bf00      	nop
    10e0:	00009c8c 	.word	0x00009c8c
    10e4:	00003ed1 	.word	0x00003ed1
    10e8:	00009c98 	.word	0x00009c98
    10ec:	00009ca4 	.word	0x00009ca4
    10f0:	00009cb0 	.word	0x00009cb0
    10f4:	00009cbc 	.word	0x00009cbc

000010f8 <parsePdnStatusContextId>:

/*-----------------------------------------------------------*/

static CellularATError_t parsePdnStatusContextId( char * pToken,
                                                  CellularPdnStatus_t * pPdnStatusBuffers )
{
    10f8:	b530      	push	{r4, r5, lr}
    10fa:	b083      	sub	sp, #12
    10fc:	4605      	mov	r5, r0
    10fe:	460c      	mov	r4, r1
    int32_t tempValue = 0;
    1100:	aa02      	add	r2, sp, #8
    1102:	2300      	movs	r3, #0
    1104:	f842 3d04 	str.w	r3, [r2, #-4]!
    CellularATError_t atCoreStatus = Cellular_ATStrtoi( pToken, 10, &tempValue );
    1108:	210a      	movs	r1, #10
    110a:	4b0d      	ldr	r3, [pc, #52]	; (1140 <parsePdnStatusContextId+0x48>)
    110c:	4798      	blx	r3

    if( atCoreStatus == CELLULAR_AT_SUCCESS )
    110e:	4603      	mov	r3, r0
    1110:	b920      	cbnz	r0, 111c <parsePdnStatusContextId+0x24>
    {
        if( ( tempValue >= ( int32_t ) CELLULAR_PDN_CONTEXT_ID_MIN ) &&
    1112:	9a01      	ldr	r2, [sp, #4]
    1114:	1e51      	subs	r1, r2, #1
    1116:	290f      	cmp	r1, #15
    1118:	d803      	bhi.n	1122 <parsePdnStatusContextId+0x2a>
            ( tempValue <= ( int32_t ) CELLULAR_PDN_CONTEXT_ID_MAX ) )
        {
            pPdnStatusBuffers->contextId = ( uint8_t ) tempValue;
    111a:	7022      	strb	r2, [r4, #0]
            atCoreStatus = CELLULAR_AT_ERROR;
        }
    }

    return atCoreStatus;
}
    111c:	4618      	mov	r0, r3
    111e:	b003      	add	sp, #12
    1120:	bd30      	pop	{r4, r5, pc}
            LogError( ( "Error in Processing Context Id. Token %s", pToken ) );
    1122:	f240 33b2 	movw	r3, #946	; 0x3b2
    1126:	4a07      	ldr	r2, [pc, #28]	; (1144 <parsePdnStatusContextId+0x4c>)
    1128:	4907      	ldr	r1, [pc, #28]	; (1148 <parsePdnStatusContextId+0x50>)
    112a:	4808      	ldr	r0, [pc, #32]	; (114c <parsePdnStatusContextId+0x54>)
    112c:	4c08      	ldr	r4, [pc, #32]	; (1150 <parsePdnStatusContextId+0x58>)
    112e:	47a0      	blx	r4
    1130:	4629      	mov	r1, r5
    1132:	4808      	ldr	r0, [pc, #32]	; (1154 <parsePdnStatusContextId+0x5c>)
    1134:	47a0      	blx	r4
    1136:	4808      	ldr	r0, [pc, #32]	; (1158 <parsePdnStatusContextId+0x60>)
    1138:	47a0      	blx	r4
            atCoreStatus = CELLULAR_AT_ERROR;
    113a:	2305      	movs	r3, #5
    113c:	e7ee      	b.n	111c <parsePdnStatusContextId+0x24>
    113e:	bf00      	nop
    1140:	00003751 	.word	0x00003751
    1144:	00009e30 	.word	0x00009e30
    1148:	0000a174 	.word	0x0000a174
    114c:	0000a188 	.word	0x0000a188
    1150:	00005bfd 	.word	0x00005bfd
    1154:	0000a434 	.word	0x0000a434
    1158:	0000dcf4 	.word	0x0000dcf4

0000115c <parsePdnStatusContextState>:

/*-----------------------------------------------------------*/

static CellularATError_t parsePdnStatusContextState( char * pToken,
                                                     CellularPdnStatus_t * pPdnStatusBuffers )
{
    115c:	b530      	push	{r4, r5, lr}
    115e:	b083      	sub	sp, #12
    1160:	4605      	mov	r5, r0
    1162:	460c      	mov	r4, r1
    int32_t tempValue = 0;
    1164:	aa02      	add	r2, sp, #8
    1166:	2300      	movs	r3, #0
    1168:	f842 3d04 	str.w	r3, [r2, #-4]!
    CellularATError_t atCoreStatus = Cellular_ATStrtoi( pToken, 10, &tempValue );
    116c:	210a      	movs	r1, #10
    116e:	4b0c      	ldr	r3, [pc, #48]	; (11a0 <parsePdnStatusContextState+0x44>)
    1170:	4798      	blx	r3

    if( atCoreStatus == CELLULAR_AT_SUCCESS )
    1172:	4603      	mov	r3, r0
    1174:	b918      	cbnz	r0, 117e <parsePdnStatusContextState+0x22>
    {
        if( ( tempValue >= 0 ) &&
    1176:	9a01      	ldr	r2, [sp, #4]
    1178:	2aff      	cmp	r2, #255	; 0xff
    117a:	d803      	bhi.n	1184 <parsePdnStatusContextState+0x28>
            ( tempValue <= ( int32_t ) UINT8_MAX ) )
        {
            pPdnStatusBuffers->state = ( uint8_t ) tempValue;
    117c:	7062      	strb	r2, [r4, #1]
            atCoreStatus = CELLULAR_AT_ERROR;
        }
    }

    return atCoreStatus;
}
    117e:	4618      	mov	r0, r3
    1180:	b003      	add	sp, #12
    1182:	bd30      	pop	{r4, r5, pc}
            LogError( ( "Error in processing PDN Status Buffer state. Token %s", pToken ) );
    1184:	f240 33cb 	movw	r3, #971	; 0x3cb
    1188:	4a06      	ldr	r2, [pc, #24]	; (11a4 <parsePdnStatusContextState+0x48>)
    118a:	4907      	ldr	r1, [pc, #28]	; (11a8 <parsePdnStatusContextState+0x4c>)
    118c:	4807      	ldr	r0, [pc, #28]	; (11ac <parsePdnStatusContextState+0x50>)
    118e:	4c08      	ldr	r4, [pc, #32]	; (11b0 <parsePdnStatusContextState+0x54>)
    1190:	47a0      	blx	r4
    1192:	4629      	mov	r1, r5
    1194:	4807      	ldr	r0, [pc, #28]	; (11b4 <parsePdnStatusContextState+0x58>)
    1196:	47a0      	blx	r4
    1198:	4807      	ldr	r0, [pc, #28]	; (11b8 <parsePdnStatusContextState+0x5c>)
    119a:	47a0      	blx	r4
            atCoreStatus = CELLULAR_AT_ERROR;
    119c:	2305      	movs	r3, #5
    119e:	e7ee      	b.n	117e <parsePdnStatusContextState+0x22>
    11a0:	00003751 	.word	0x00003751
    11a4:	00009e48 	.word	0x00009e48
    11a8:	0000a174 	.word	0x0000a174
    11ac:	0000a188 	.word	0x0000a188
    11b0:	00005bfd 	.word	0x00005bfd
    11b4:	0000a460 	.word	0x0000a460
    11b8:	0000dcf4 	.word	0x0000dcf4

000011bc <parsePdnStatusContextType>:

/*-----------------------------------------------------------*/

static CellularATError_t parsePdnStatusContextType( char * pToken,
                                                    CellularPdnStatus_t * pPdnStatusBuffers )
{
    11bc:	b530      	push	{r4, r5, lr}
    11be:	b083      	sub	sp, #12
    11c0:	4605      	mov	r5, r0
    11c2:	460c      	mov	r4, r1
    int32_t tempValue = 0;
    11c4:	aa02      	add	r2, sp, #8
    11c6:	2300      	movs	r3, #0
    11c8:	f842 3d04 	str.w	r3, [r2, #-4]!
    CellularATError_t atCoreStatus = Cellular_ATStrtoi( pToken, 10, &tempValue );
    11cc:	210a      	movs	r1, #10
    11ce:	4b0c      	ldr	r3, [pc, #48]	; (1200 <parsePdnStatusContextType+0x44>)
    11d0:	4798      	blx	r3

    if( atCoreStatus == CELLULAR_AT_SUCCESS )
    11d2:	4603      	mov	r3, r0
    11d4:	b918      	cbnz	r0, 11de <parsePdnStatusContextType+0x22>
    {
        if( ( tempValue >= 0 ) && ( tempValue < ( int32_t ) CELLULAR_PDN_CONTEXT_TYPE_MAX ) )
    11d6:	9a01      	ldr	r2, [sp, #4]
    11d8:	2a03      	cmp	r2, #3
    11da:	d803      	bhi.n	11e4 <parsePdnStatusContextType+0x28>
        {
            /* Variable "tempValue" is ensured that it is valid and within
             * a valid range. Hence, assigning the value of the variable to
             * pdnContextType with a enum cast. */
            /* coverity[misra_c_2012_rule_10_5_violation] */
            pPdnStatusBuffers->pdnContextType = ( CellularPdnContextType_t ) tempValue;
    11dc:	70a2      	strb	r2, [r4, #2]
            atCoreStatus = CELLULAR_AT_ERROR;
        }
    }

    return atCoreStatus;
}
    11de:	4618      	mov	r0, r3
    11e0:	b003      	add	sp, #12
    11e2:	bd30      	pop	{r4, r5, pc}
            LogError( ( "Error in processing PDN State Buffer Status. Token %s", pToken ) );
    11e4:	f240 33e7 	movw	r3, #999	; 0x3e7
    11e8:	4a06      	ldr	r2, [pc, #24]	; (1204 <parsePdnStatusContextType+0x48>)
    11ea:	4907      	ldr	r1, [pc, #28]	; (1208 <parsePdnStatusContextType+0x4c>)
    11ec:	4807      	ldr	r0, [pc, #28]	; (120c <parsePdnStatusContextType+0x50>)
    11ee:	4c08      	ldr	r4, [pc, #32]	; (1210 <parsePdnStatusContextType+0x54>)
    11f0:	47a0      	blx	r4
    11f2:	4629      	mov	r1, r5
    11f4:	4807      	ldr	r0, [pc, #28]	; (1214 <parsePdnStatusContextType+0x58>)
    11f6:	47a0      	blx	r4
    11f8:	4807      	ldr	r0, [pc, #28]	; (1218 <parsePdnStatusContextType+0x5c>)
    11fa:	47a0      	blx	r4
            atCoreStatus = CELLULAR_AT_ERROR;
    11fc:	2305      	movs	r3, #5
    11fe:	e7ee      	b.n	11de <parsePdnStatusContextType+0x22>
    1200:	00003751 	.word	0x00003751
    1204:	00009e64 	.word	0x00009e64
    1208:	0000a174 	.word	0x0000a174
    120c:	0000a188 	.word	0x0000a188
    1210:	00005bfd 	.word	0x00005bfd
    1214:	0000a498 	.word	0x0000a498
    1218:	0000dcf4 	.word	0x0000dcf4

0000121c <_getSimLockState>:
    if( pToken != NULL )
    121c:	2800      	cmp	r0, #0
    121e:	d061      	beq.n	12e4 <_getSimLockState+0xc8>
{
    1220:	b538      	push	{r3, r4, r5, lr}
    1222:	4604      	mov	r4, r0
        if( strcmp( pToken, "READY" ) == 0 )
    1224:	4935      	ldr	r1, [pc, #212]	; (12fc <_getSimLockState+0xe0>)
    1226:	4b36      	ldr	r3, [pc, #216]	; (1300 <_getSimLockState+0xe4>)
    1228:	4798      	blx	r3
    122a:	2800      	cmp	r0, #0
    122c:	d05c      	beq.n	12e8 <_getSimLockState+0xcc>
        else if( strcmp( pToken, "SIM PIN" ) == 0 )
    122e:	4935      	ldr	r1, [pc, #212]	; (1304 <_getSimLockState+0xe8>)
    1230:	4620      	mov	r0, r4
    1232:	4b33      	ldr	r3, [pc, #204]	; (1300 <_getSimLockState+0xe4>)
    1234:	4798      	blx	r3
    1236:	2800      	cmp	r0, #0
    1238:	d058      	beq.n	12ec <_getSimLockState+0xd0>
        else if( strcmp( pToken, "SIM PUK" ) == 0 )
    123a:	4933      	ldr	r1, [pc, #204]	; (1308 <_getSimLockState+0xec>)
    123c:	4620      	mov	r0, r4
    123e:	4b30      	ldr	r3, [pc, #192]	; (1300 <_getSimLockState+0xe4>)
    1240:	4798      	blx	r3
    1242:	b908      	cbnz	r0, 1248 <_getSimLockState+0x2c>
            tempState = CELLULAR_SIM_CARD_PUK;
    1244:	2002      	movs	r0, #2
    1246:	bd38      	pop	{r3, r4, r5, pc}
        else if( strcmp( pToken, "SIM PIN2" ) == 0 )
    1248:	4930      	ldr	r1, [pc, #192]	; (130c <_getSimLockState+0xf0>)
    124a:	4620      	mov	r0, r4
    124c:	4b2c      	ldr	r3, [pc, #176]	; (1300 <_getSimLockState+0xe4>)
    124e:	4798      	blx	r3
    1250:	b908      	cbnz	r0, 1256 <_getSimLockState+0x3a>
            tempState = CELLULAR_SIM_CARD_PIN2;
    1252:	2003      	movs	r0, #3
    1254:	bd38      	pop	{r3, r4, r5, pc}
        else if( strcmp( pToken, "SIM PUK2" ) == 0 )
    1256:	492e      	ldr	r1, [pc, #184]	; (1310 <_getSimLockState+0xf4>)
    1258:	4620      	mov	r0, r4
    125a:	4b29      	ldr	r3, [pc, #164]	; (1300 <_getSimLockState+0xe4>)
    125c:	4798      	blx	r3
    125e:	b908      	cbnz	r0, 1264 <_getSimLockState+0x48>
            tempState = CELLULAR_SIM_CARD_PUK2;
    1260:	2004      	movs	r0, #4
    1262:	bd38      	pop	{r3, r4, r5, pc}
        else if( strcmp( pToken, "PH-NET PIN" ) == 0 )
    1264:	492b      	ldr	r1, [pc, #172]	; (1314 <_getSimLockState+0xf8>)
    1266:	4620      	mov	r0, r4
    1268:	4b25      	ldr	r3, [pc, #148]	; (1300 <_getSimLockState+0xe4>)
    126a:	4798      	blx	r3
    126c:	b908      	cbnz	r0, 1272 <_getSimLockState+0x56>
            tempState = CELLULAR_SIM_CARD_PH_NET_PIN;
    126e:	2005      	movs	r0, #5
    1270:	bd38      	pop	{r3, r4, r5, pc}
        else if( strcmp( pToken, "PH-NET PUK" ) == 0 )
    1272:	4929      	ldr	r1, [pc, #164]	; (1318 <_getSimLockState+0xfc>)
    1274:	4620      	mov	r0, r4
    1276:	4b22      	ldr	r3, [pc, #136]	; (1300 <_getSimLockState+0xe4>)
    1278:	4798      	blx	r3
    127a:	b908      	cbnz	r0, 1280 <_getSimLockState+0x64>
            tempState = CELLULAR_SIM_CARD_PH_NET_PUK;
    127c:	2006      	movs	r0, #6
    127e:	bd38      	pop	{r3, r4, r5, pc}
        else if( strcmp( pToken, "PH-NETSUB PIN" ) == 0 )
    1280:	4926      	ldr	r1, [pc, #152]	; (131c <_getSimLockState+0x100>)
    1282:	4620      	mov	r0, r4
    1284:	4b1e      	ldr	r3, [pc, #120]	; (1300 <_getSimLockState+0xe4>)
    1286:	4798      	blx	r3
    1288:	b908      	cbnz	r0, 128e <_getSimLockState+0x72>
            tempState = CELLULAR_SIM_CARD_PH_NETSUB_PIN;
    128a:	2007      	movs	r0, #7
    128c:	bd38      	pop	{r3, r4, r5, pc}
        else if( strcmp( pToken, "PH-NETSUB PUK" ) == 0 )
    128e:	4924      	ldr	r1, [pc, #144]	; (1320 <_getSimLockState+0x104>)
    1290:	4620      	mov	r0, r4
    1292:	4b1b      	ldr	r3, [pc, #108]	; (1300 <_getSimLockState+0xe4>)
    1294:	4798      	blx	r3
    1296:	b908      	cbnz	r0, 129c <_getSimLockState+0x80>
            tempState = CELLULAR_SIM_CARD_PH_NETSUB_PUK;
    1298:	2008      	movs	r0, #8
    129a:	bd38      	pop	{r3, r4, r5, pc}
        else if( strcmp( pToken, "PH-SP PIN" ) == 0 )
    129c:	4921      	ldr	r1, [pc, #132]	; (1324 <_getSimLockState+0x108>)
    129e:	4620      	mov	r0, r4
    12a0:	4b17      	ldr	r3, [pc, #92]	; (1300 <_getSimLockState+0xe4>)
    12a2:	4798      	blx	r3
    12a4:	b908      	cbnz	r0, 12aa <_getSimLockState+0x8e>
            tempState = CELLULAR_SIM_CARD_SP_PIN;
    12a6:	2009      	movs	r0, #9
    12a8:	bd38      	pop	{r3, r4, r5, pc}
        else if( strcmp( pToken, "PH-SP PUK" ) == 0 )
    12aa:	491f      	ldr	r1, [pc, #124]	; (1328 <_getSimLockState+0x10c>)
    12ac:	4620      	mov	r0, r4
    12ae:	4b14      	ldr	r3, [pc, #80]	; (1300 <_getSimLockState+0xe4>)
    12b0:	4798      	blx	r3
    12b2:	b1e8      	cbz	r0, 12f0 <_getSimLockState+0xd4>
        else if( strcmp( pToken, "PH-CORP PIN" ) == 0 )
    12b4:	491d      	ldr	r1, [pc, #116]	; (132c <_getSimLockState+0x110>)
    12b6:	4620      	mov	r0, r4
    12b8:	4b11      	ldr	r3, [pc, #68]	; (1300 <_getSimLockState+0xe4>)
    12ba:	4798      	blx	r3
    12bc:	b1d0      	cbz	r0, 12f4 <_getSimLockState+0xd8>
        else if( strcmp( pToken, "PH-CORP PUK" ) == 0 )
    12be:	491c      	ldr	r1, [pc, #112]	; (1330 <_getSimLockState+0x114>)
    12c0:	4620      	mov	r0, r4
    12c2:	4b0f      	ldr	r3, [pc, #60]	; (1300 <_getSimLockState+0xe4>)
    12c4:	4798      	blx	r3
    12c6:	b1b8      	cbz	r0, 12f8 <_getSimLockState+0xdc>
            LogError( ( "Unknown SIM Lock State %s", pToken ) );
    12c8:	f240 3359 	movw	r3, #857	; 0x359
    12cc:	4a19      	ldr	r2, [pc, #100]	; (1334 <_getSimLockState+0x118>)
    12ce:	491a      	ldr	r1, [pc, #104]	; (1338 <_getSimLockState+0x11c>)
    12d0:	481a      	ldr	r0, [pc, #104]	; (133c <_getSimLockState+0x120>)
    12d2:	4d1b      	ldr	r5, [pc, #108]	; (1340 <_getSimLockState+0x124>)
    12d4:	47a8      	blx	r5
    12d6:	4621      	mov	r1, r4
    12d8:	481a      	ldr	r0, [pc, #104]	; (1344 <_getSimLockState+0x128>)
    12da:	47a8      	blx	r5
    12dc:	481a      	ldr	r0, [pc, #104]	; (1348 <_getSimLockState+0x12c>)
    12de:	47a8      	blx	r5
    CellularSimCardLockState_t tempState = CELLULAR_SIM_CARD_LOCK_UNKNOWN;
    12e0:	2010      	movs	r0, #16
    12e2:	bd38      	pop	{r3, r4, r5, pc}
    12e4:	2010      	movs	r0, #16
    12e6:	4770      	bx	lr
            tempState = CELLULAR_SIM_CARD_READY;
    12e8:	2000      	movs	r0, #0
    12ea:	bd38      	pop	{r3, r4, r5, pc}
            tempState = CELLULAR_SIM_CARD_PIN;
    12ec:	2001      	movs	r0, #1
    12ee:	bd38      	pop	{r3, r4, r5, pc}
            tempState = CELLULAR_SIM_CARD_SP_PUK;
    12f0:	200a      	movs	r0, #10
    12f2:	bd38      	pop	{r3, r4, r5, pc}
            tempState = CELLULAR_SIM_CARD_CORP_PIN;
    12f4:	200b      	movs	r0, #11
    12f6:	bd38      	pop	{r3, r4, r5, pc}
            tempState = CELLULAR_SIM_CARD_CORP_PUK;
    12f8:	200c      	movs	r0, #12
}
    12fa:	bd38      	pop	{r3, r4, r5, pc}
    12fc:	0000a69c 	.word	0x0000a69c
    1300:	00008ddd 	.word	0x00008ddd
    1304:	0000a6a4 	.word	0x0000a6a4
    1308:	0000a6ac 	.word	0x0000a6ac
    130c:	0000a6b4 	.word	0x0000a6b4
    1310:	0000a6c0 	.word	0x0000a6c0
    1314:	0000a6cc 	.word	0x0000a6cc
    1318:	0000a6d8 	.word	0x0000a6d8
    131c:	0000a6e4 	.word	0x0000a6e4
    1320:	0000a6f4 	.word	0x0000a6f4
    1324:	0000a704 	.word	0x0000a704
    1328:	0000a710 	.word	0x0000a710
    132c:	0000a71c 	.word	0x0000a71c
    1330:	0000a728 	.word	0x0000a728
    1334:	00009ecc 	.word	0x00009ecc
    1338:	0000a174 	.word	0x0000a174
    133c:	0000a188 	.word	0x0000a188
    1340:	00005bfd 	.word	0x00005bfd
    1344:	0000a734 	.word	0x0000a734
    1348:	0000dcf4 	.word	0x0000dcf4

0000134c <_Cellular_RecvFuncGetSimLockStatus>:
{
    134c:	b570      	push	{r4, r5, r6, lr}
    134e:	b082      	sub	sp, #8
    1350:	4614      	mov	r4, r2
    char * pToken = NULL, * pInputStr = NULL;
    1352:	2200      	movs	r2, #0
    1354:	9201      	str	r2, [sp, #4]
    1356:	9200      	str	r2, [sp, #0]
    if( pContext == NULL )
    1358:	2800      	cmp	r0, #0
    135a:	d02c      	beq.n	13b6 <_Cellular_RecvFuncGetSimLockStatus+0x6a>
    else if( ( pAtResp == NULL ) || ( pAtResp->pItm == NULL ) || ( pAtResp->pItm->pLine == NULL ) ||
    135c:	b131      	cbz	r1, 136c <_Cellular_RecvFuncGetSimLockStatus+0x20>
    135e:	684a      	ldr	r2, [r1, #4]
    1360:	b122      	cbz	r2, 136c <_Cellular_RecvFuncGetSimLockStatus+0x20>
    1362:	6852      	ldr	r2, [r2, #4]
    1364:	b112      	cbz	r2, 136c <_Cellular_RecvFuncGetSimLockStatus+0x20>
    1366:	b10c      	cbz	r4, 136c <_Cellular_RecvFuncGetSimLockStatus+0x20>
             ( pData == NULL ) || ( dataLen != sizeof( CellularSimCardLockState_t ) ) )
    1368:	2b01      	cmp	r3, #1
    136a:	d010      	beq.n	138e <_Cellular_RecvFuncGetSimLockStatus+0x42>
        LogError( ( " Get SIM lock State: Response data is invalid" ) );
    136c:	f240 3375 	movw	r3, #885	; 0x375
    1370:	4a21      	ldr	r2, [pc, #132]	; (13f8 <_Cellular_RecvFuncGetSimLockStatus+0xac>)
    1372:	4922      	ldr	r1, [pc, #136]	; (13fc <_Cellular_RecvFuncGetSimLockStatus+0xb0>)
    1374:	4822      	ldr	r0, [pc, #136]	; (1400 <_Cellular_RecvFuncGetSimLockStatus+0xb4>)
    1376:	4c23      	ldr	r4, [pc, #140]	; (1404 <_Cellular_RecvFuncGetSimLockStatus+0xb8>)
    1378:	47a0      	blx	r4
    137a:	4823      	ldr	r0, [pc, #140]	; (1408 <_Cellular_RecvFuncGetSimLockStatus+0xbc>)
    137c:	47a0      	blx	r4
    137e:	4823      	ldr	r0, [pc, #140]	; (140c <_Cellular_RecvFuncGetSimLockStatus+0xc0>)
    1380:	47a0      	blx	r4
        pktStatus = CELLULAR_PKT_STATUS_BAD_PARAM;
    1382:	2406      	movs	r4, #6
    CellularSimCardLockState_t * pSimLockState = NULL;
    1384:	2500      	movs	r5, #0
    if( pktStatus == CELLULAR_PKT_STATUS_OK )
    1386:	b1cc      	cbz	r4, 13bc <_Cellular_RecvFuncGetSimLockStatus+0x70>
}
    1388:	4620      	mov	r0, r4
    138a:	b002      	add	sp, #8
    138c:	bd70      	pop	{r4, r5, r6, pc}
        pInputStr = pAtResp->pItm->pLine;
    138e:	9200      	str	r2, [sp, #0]
        if( strlen( pInputStr ) == 0U )
    1390:	7813      	ldrb	r3, [r2, #0]
    1392:	b113      	cbz	r3, 139a <_Cellular_RecvFuncGetSimLockStatus+0x4e>
        pSimLockState = ( CellularSimCardLockState_t * ) pData;
    1394:	4625      	mov	r5, r4
    CellularPktStatus_t pktStatus = CELLULAR_PKT_STATUS_OK;
    1396:	2400      	movs	r4, #0
    1398:	e7f5      	b.n	1386 <_Cellular_RecvFuncGetSimLockStatus+0x3a>
            LogError( ( "Get SIM lock State: Input data is invalid" ) );
    139a:	f240 337f 	movw	r3, #895	; 0x37f
    139e:	4a16      	ldr	r2, [pc, #88]	; (13f8 <_Cellular_RecvFuncGetSimLockStatus+0xac>)
    13a0:	4916      	ldr	r1, [pc, #88]	; (13fc <_Cellular_RecvFuncGetSimLockStatus+0xb0>)
    13a2:	4817      	ldr	r0, [pc, #92]	; (1400 <_Cellular_RecvFuncGetSimLockStatus+0xb4>)
    13a4:	4d17      	ldr	r5, [pc, #92]	; (1404 <_Cellular_RecvFuncGetSimLockStatus+0xb8>)
    13a6:	47a8      	blx	r5
    13a8:	4819      	ldr	r0, [pc, #100]	; (1410 <_Cellular_RecvFuncGetSimLockStatus+0xc4>)
    13aa:	47a8      	blx	r5
    13ac:	4817      	ldr	r0, [pc, #92]	; (140c <_Cellular_RecvFuncGetSimLockStatus+0xc0>)
    13ae:	47a8      	blx	r5
        pSimLockState = ( CellularSimCardLockState_t * ) pData;
    13b0:	4625      	mov	r5, r4
            pktStatus = CELLULAR_PKT_STATUS_FAILURE;
    13b2:	2402      	movs	r4, #2
    13b4:	e7e7      	b.n	1386 <_Cellular_RecvFuncGetSimLockStatus+0x3a>
        pktStatus = CELLULAR_PKT_STATUS_INVALID_HANDLE;
    13b6:	2408      	movs	r4, #8
    CellularSimCardLockState_t * pSimLockState = NULL;
    13b8:	2500      	movs	r5, #0
    13ba:	e7e4      	b.n	1386 <_Cellular_RecvFuncGetSimLockStatus+0x3a>
        atCoreStatus = Cellular_ATRemoveAllWhiteSpaces( pInputStr );
    13bc:	9800      	ldr	r0, [sp, #0]
    13be:	4b15      	ldr	r3, [pc, #84]	; (1414 <_Cellular_RecvFuncGetSimLockStatus+0xc8>)
    13c0:	4798      	blx	r3
        if( atCoreStatus == CELLULAR_AT_SUCCESS )
    13c2:	4606      	mov	r6, r0
    13c4:	b140      	cbz	r0, 13d8 <_Cellular_RecvFuncGetSimLockStatus+0x8c>
        if( atCoreStatus == CELLULAR_AT_SUCCESS )
    13c6:	b166      	cbz	r6, 13e2 <_Cellular_RecvFuncGetSimLockStatus+0x96>
        if( atCoreStatus == CELLULAR_AT_SUCCESS )
    13c8:	b18e      	cbz	r6, 13ee <_Cellular_RecvFuncGetSimLockStatus+0xa2>
        if( atCoreStatus != CELLULAR_AT_SUCCESS )
    13ca:	2e00      	cmp	r6, #0
    13cc:	d0dc      	beq.n	1388 <_Cellular_RecvFuncGetSimLockStatus+0x3c>
            pktStatus = _Cellular_TranslateAtCoreStatus( atCoreStatus );
    13ce:	4630      	mov	r0, r6
    13d0:	4b11      	ldr	r3, [pc, #68]	; (1418 <_Cellular_RecvFuncGetSimLockStatus+0xcc>)
    13d2:	4798      	blx	r3
    13d4:	4604      	mov	r4, r0
    13d6:	e7d7      	b.n	1388 <_Cellular_RecvFuncGetSimLockStatus+0x3c>
            atCoreStatus = Cellular_ATRemovePrefix( &pInputStr );
    13d8:	4668      	mov	r0, sp
    13da:	4b10      	ldr	r3, [pc, #64]	; (141c <_Cellular_RecvFuncGetSimLockStatus+0xd0>)
    13dc:	4798      	blx	r3
    13de:	4606      	mov	r6, r0
    13e0:	e7f1      	b.n	13c6 <_Cellular_RecvFuncGetSimLockStatus+0x7a>
            atCoreStatus = Cellular_ATGetNextTok( &pInputStr, &pToken );
    13e2:	a901      	add	r1, sp, #4
    13e4:	4668      	mov	r0, sp
    13e6:	4b0e      	ldr	r3, [pc, #56]	; (1420 <_Cellular_RecvFuncGetSimLockStatus+0xd4>)
    13e8:	4798      	blx	r3
    13ea:	4606      	mov	r6, r0
    13ec:	e7ec      	b.n	13c8 <_Cellular_RecvFuncGetSimLockStatus+0x7c>
            *pSimLockState = _getSimLockState( pToken );
    13ee:	9801      	ldr	r0, [sp, #4]
    13f0:	4b0c      	ldr	r3, [pc, #48]	; (1424 <_Cellular_RecvFuncGetSimLockStatus+0xd8>)
    13f2:	4798      	blx	r3
    13f4:	7028      	strb	r0, [r5, #0]
    13f6:	e7e8      	b.n	13ca <_Cellular_RecvFuncGetSimLockStatus+0x7e>
    13f8:	00009ee0 	.word	0x00009ee0
    13fc:	0000a174 	.word	0x0000a174
    1400:	0000a188 	.word	0x0000a188
    1404:	00005bfd 	.word	0x00005bfd
    1408:	0000a750 	.word	0x0000a750
    140c:	0000dcf4 	.word	0x0000dcf4
    1410:	0000a780 	.word	0x0000a780
    1414:	000034c5 	.word	0x000034c5
    1418:	00003a95 	.word	0x00003a95
    141c:	00003409 	.word	0x00003409
    1420:	00003631 	.word	0x00003631
    1424:	0000121d 	.word	0x0000121d

00001428 <getPdnStatusParseToken>:
/*-----------------------------------------------------------*/

static CellularATError_t getPdnStatusParseToken( char * pToken,
                                                 uint8_t tokenIndex,
                                                 CellularPdnStatus_t * pPdnStatusBuffers )
{
    1428:	b570      	push	{r4, r5, r6, lr}
    142a:	4606      	mov	r6, r0
    142c:	4615      	mov	r5, r2
    CellularATError_t atCoreStatus = CELLULAR_AT_SUCCESS;

    switch( tokenIndex )
    142e:	2903      	cmp	r1, #3
    1430:	d82e      	bhi.n	1490 <getPdnStatusParseToken+0x68>
    1432:	e8df f001 	tbb	[pc, r1]
    1436:	0602      	.short	0x0602
    1438:	0e0a      	.short	0x0e0a
    {
        case ( CELLULAR_PDN_STATUS_POS_CONTEXT_ID ):
            LogDebug( ( "Context Id: %s", pToken ) );
            atCoreStatus = parsePdnStatusContextId( pToken, pPdnStatusBuffers );
    143a:	4611      	mov	r1, r2
    143c:	4b1c      	ldr	r3, [pc, #112]	; (14b0 <getPdnStatusParseToken+0x88>)
    143e:	4798      	blx	r3
            break;
    1440:	bd70      	pop	{r4, r5, r6, pc}

        case ( CELLULAR_PDN_STATUS_POS_CONTEXT_STATE ):
            LogDebug( ( "Context State: %s", pToken ) );
            atCoreStatus = parsePdnStatusContextState( pToken, pPdnStatusBuffers );
    1442:	4611      	mov	r1, r2
    1444:	4b1b      	ldr	r3, [pc, #108]	; (14b4 <getPdnStatusParseToken+0x8c>)
    1446:	4798      	blx	r3
            break;
    1448:	bd70      	pop	{r4, r5, r6, pc}

        case ( CELLULAR_PDN_STATUS_POS_CONTEXT_TYPE ):
            LogDebug( ( "Context Type: %s", pToken ) );
            atCoreStatus = parsePdnStatusContextType( pToken, pPdnStatusBuffers );
    144a:	4611      	mov	r1, r2
    144c:	4b1a      	ldr	r3, [pc, #104]	; (14b8 <getPdnStatusParseToken+0x90>)
    144e:	4798      	blx	r3
            break;
    1450:	bd70      	pop	{r4, r5, r6, pc}

        case ( CELLULAR_PDN_STATUS_POS_IP_ADDRESS ):
            LogDebug( ( "IP address: %s", pToken ) );
            ( void ) memcpy( ( void * ) pPdnStatusBuffers->ipAddress.ipAddress,
    1452:	2241      	movs	r2, #65	; 0x41
    1454:	4601      	mov	r1, r0
    1456:	1d28      	adds	r0, r5, #4
    1458:	4b18      	ldr	r3, [pc, #96]	; (14bc <getPdnStatusParseToken+0x94>)
    145a:	4798      	blx	r3
                             ( void * ) pToken, CELLULAR_IP_ADDRESS_MAX_SIZE + 1U );

            if( pPdnStatusBuffers->pdnContextType == CELLULAR_PDN_CONTEXT_IPV4 )
    145c:	78ab      	ldrb	r3, [r5, #2]
    145e:	2b01      	cmp	r3, #1
    1460:	d00f      	beq.n	1482 <getPdnStatusParseToken+0x5a>
            {
                pPdnStatusBuffers->ipAddress.ipAddressType = CELLULAR_IP_ADDRESS_V4;
            }
            else if( pPdnStatusBuffers->pdnContextType == CELLULAR_PDN_CONTEXT_IPV6 )
    1462:	2b02      	cmp	r3, #2
    1464:	d010      	beq.n	1488 <getPdnStatusParseToken+0x60>
            {
                pPdnStatusBuffers->ipAddress.ipAddressType = CELLULAR_IP_ADDRESS_V6;
            }
            else
            {
                LogError( ( "Unknown pdnContextType %d", pPdnStatusBuffers->pdnContextType ) );
    1466:	f240 4317 	movw	r3, #1047	; 0x417
    146a:	4a15      	ldr	r2, [pc, #84]	; (14c0 <getPdnStatusParseToken+0x98>)
    146c:	4915      	ldr	r1, [pc, #84]	; (14c4 <getPdnStatusParseToken+0x9c>)
    146e:	4816      	ldr	r0, [pc, #88]	; (14c8 <getPdnStatusParseToken+0xa0>)
    1470:	4c16      	ldr	r4, [pc, #88]	; (14cc <getPdnStatusParseToken+0xa4>)
    1472:	47a0      	blx	r4
    1474:	78a9      	ldrb	r1, [r5, #2]
    1476:	4816      	ldr	r0, [pc, #88]	; (14d0 <getPdnStatusParseToken+0xa8>)
    1478:	47a0      	blx	r4
    147a:	4816      	ldr	r0, [pc, #88]	; (14d4 <getPdnStatusParseToken+0xac>)
    147c:	47a0      	blx	r4
                atCoreStatus = CELLULAR_AT_ERROR;
    147e:	2005      	movs	r0, #5
    1480:	bd70      	pop	{r4, r5, r6, pc}
                pPdnStatusBuffers->ipAddress.ipAddressType = CELLULAR_IP_ADDRESS_V4;
    1482:	2000      	movs	r0, #0
    1484:	70e8      	strb	r0, [r5, #3]
    1486:	bd70      	pop	{r4, r5, r6, pc}
                pPdnStatusBuffers->ipAddress.ipAddressType = CELLULAR_IP_ADDRESS_V6;
    1488:	2301      	movs	r3, #1
    148a:	70eb      	strb	r3, [r5, #3]
    CellularATError_t atCoreStatus = CELLULAR_AT_SUCCESS;
    148c:	2000      	movs	r0, #0
    148e:	bd70      	pop	{r4, r5, r6, pc}
    1490:	460c      	mov	r4, r1
            }

            break;

        default:
            LogError( ( "Unknown token in getPdnStatusParseToken %s %d",
    1492:	f240 431f 	movw	r3, #1055	; 0x41f
    1496:	4a0a      	ldr	r2, [pc, #40]	; (14c0 <getPdnStatusParseToken+0x98>)
    1498:	490a      	ldr	r1, [pc, #40]	; (14c4 <getPdnStatusParseToken+0x9c>)
    149a:	480b      	ldr	r0, [pc, #44]	; (14c8 <getPdnStatusParseToken+0xa0>)
    149c:	4d0b      	ldr	r5, [pc, #44]	; (14cc <getPdnStatusParseToken+0xa4>)
    149e:	47a8      	blx	r5
    14a0:	4622      	mov	r2, r4
    14a2:	4631      	mov	r1, r6
    14a4:	480c      	ldr	r0, [pc, #48]	; (14d8 <getPdnStatusParseToken+0xb0>)
    14a6:	47a8      	blx	r5
    14a8:	480a      	ldr	r0, [pc, #40]	; (14d4 <getPdnStatusParseToken+0xac>)
    14aa:	47a8      	blx	r5
                        pToken, tokenIndex ) );
            atCoreStatus = CELLULAR_AT_ERROR;
    14ac:	2005      	movs	r0, #5
            break;
    }

    return atCoreStatus;
}
    14ae:	bd70      	pop	{r4, r5, r6, pc}
    14b0:	000010f9 	.word	0x000010f9
    14b4:	0000115d 	.word	0x0000115d
    14b8:	000011bd 	.word	0x000011bd
    14bc:	00008865 	.word	0x00008865
    14c0:	00009fe4 	.word	0x00009fe4
    14c4:	0000a174 	.word	0x0000a174
    14c8:	0000a188 	.word	0x0000a188
    14cc:	00005bfd 	.word	0x00005bfd
    14d0:	0000aa9c 	.word	0x0000aa9c
    14d4:	0000dcf4 	.word	0x0000dcf4
    14d8:	0000aab8 	.word	0x0000aab8

000014dc <getPdnStatusParseLine>:

/*-----------------------------------------------------------*/

static CellularATError_t getPdnStatusParseLine( char * pRespLine,
                                                CellularPdnStatus_t * pPdnStatusBuffers )
{
    14dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    14de:	b083      	sub	sp, #12
    14e0:	460f      	mov	r7, r1
    char * pToken = NULL;
    14e2:	2300      	movs	r3, #0
    14e4:	9301      	str	r3, [sp, #4]
    char * pLocalRespLine = pRespLine;
    14e6:	ab02      	add	r3, sp, #8
    14e8:	f843 0d08 	str.w	r0, [r3, #-8]!
    CellularATError_t atCoreStatus = CELLULAR_AT_SUCCESS;
    uint8_t tokenIndex = 0;

    atCoreStatus = Cellular_ATRemovePrefix( &pLocalRespLine );
    14ec:	4618      	mov	r0, r3
    14ee:	4b1b      	ldr	r3, [pc, #108]	; (155c <getPdnStatusParseLine+0x80>)
    14f0:	4798      	blx	r3

    if( atCoreStatus == CELLULAR_AT_SUCCESS )
    14f2:	4605      	mov	r5, r0
    14f4:	b120      	cbz	r0, 1500 <getPdnStatusParseLine+0x24>
    {
        atCoreStatus = Cellular_ATRemoveAllDoubleQuote( pLocalRespLine );
    }

    if( atCoreStatus == CELLULAR_AT_SUCCESS )
    14f6:	b145      	cbz	r5, 150a <getPdnStatusParseLine+0x2e>
    {
        atCoreStatus = Cellular_ATGetNextTok( &pLocalRespLine, &pToken );
    }

    if( atCoreStatus == CELLULAR_AT_SUCCESS )
    14f8:	2d00      	cmp	r5, #0
    14fa:	d12b      	bne.n	1554 <getPdnStatusParseLine+0x78>
    14fc:	2400      	movs	r4, #0
    14fe:	e011      	b.n	1524 <getPdnStatusParseLine+0x48>
        atCoreStatus = Cellular_ATRemoveAllDoubleQuote( pLocalRespLine );
    1500:	9800      	ldr	r0, [sp, #0]
    1502:	4b17      	ldr	r3, [pc, #92]	; (1560 <getPdnStatusParseLine+0x84>)
    1504:	4798      	blx	r3
    1506:	4605      	mov	r5, r0
    1508:	e7f5      	b.n	14f6 <getPdnStatusParseLine+0x1a>
        atCoreStatus = Cellular_ATGetNextTok( &pLocalRespLine, &pToken );
    150a:	a901      	add	r1, sp, #4
    150c:	4668      	mov	r0, sp
    150e:	4b15      	ldr	r3, [pc, #84]	; (1564 <getPdnStatusParseLine+0x88>)
    1510:	4798      	blx	r3
    1512:	4605      	mov	r5, r0
    1514:	e7f0      	b.n	14f8 <getPdnStatusParseLine+0x1c>
            if( atCoreStatus != CELLULAR_AT_SUCCESS )
            {
                LogInfo( ( "getPdnStatusParseToken %s index %d failed", pToken, tokenIndex ) );
            }

            tokenIndex++;
    1516:	3401      	adds	r4, #1
    1518:	b2e4      	uxtb	r4, r4

            if( Cellular_ATGetNextTok( &pLocalRespLine, &pToken ) != CELLULAR_AT_SUCCESS )
    151a:	a901      	add	r1, sp, #4
    151c:	4668      	mov	r0, sp
    151e:	4b11      	ldr	r3, [pc, #68]	; (1564 <getPdnStatusParseLine+0x88>)
    1520:	4798      	blx	r3
    1522:	b9b8      	cbnz	r0, 1554 <getPdnStatusParseLine+0x78>
        while( ( pToken != NULL ) && ( atCoreStatus == CELLULAR_AT_SUCCESS ) )
    1524:	9801      	ldr	r0, [sp, #4]
    1526:	b1a8      	cbz	r0, 1554 <getPdnStatusParseLine+0x78>
    1528:	b9a5      	cbnz	r5, 1554 <getPdnStatusParseLine+0x78>
            atCoreStatus = getPdnStatusParseToken( pToken, tokenIndex, pPdnStatusBuffers );
    152a:	463a      	mov	r2, r7
    152c:	4621      	mov	r1, r4
    152e:	4b0e      	ldr	r3, [pc, #56]	; (1568 <getPdnStatusParseLine+0x8c>)
    1530:	4798      	blx	r3
            if( atCoreStatus != CELLULAR_AT_SUCCESS )
    1532:	4605      	mov	r5, r0
    1534:	2800      	cmp	r0, #0
    1536:	d0ee      	beq.n	1516 <getPdnStatusParseLine+0x3a>
                LogInfo( ( "getPdnStatusParseToken %s index %d failed", pToken, tokenIndex ) );
    1538:	f240 4347 	movw	r3, #1095	; 0x447
    153c:	4a0b      	ldr	r2, [pc, #44]	; (156c <getPdnStatusParseLine+0x90>)
    153e:	490c      	ldr	r1, [pc, #48]	; (1570 <getPdnStatusParseLine+0x94>)
    1540:	480c      	ldr	r0, [pc, #48]	; (1574 <getPdnStatusParseLine+0x98>)
    1542:	4e0d      	ldr	r6, [pc, #52]	; (1578 <getPdnStatusParseLine+0x9c>)
    1544:	47b0      	blx	r6
    1546:	4622      	mov	r2, r4
    1548:	9901      	ldr	r1, [sp, #4]
    154a:	480c      	ldr	r0, [pc, #48]	; (157c <getPdnStatusParseLine+0xa0>)
    154c:	47b0      	blx	r6
    154e:	480c      	ldr	r0, [pc, #48]	; (1580 <getPdnStatusParseLine+0xa4>)
    1550:	47b0      	blx	r6
    1552:	e7e0      	b.n	1516 <getPdnStatusParseLine+0x3a>
            }
        }
    }

    return atCoreStatus;
}
    1554:	4628      	mov	r0, r5
    1556:	b003      	add	sp, #12
    1558:	bdf0      	pop	{r4, r5, r6, r7, pc}
    155a:	bf00      	nop
    155c:	00003409 	.word	0x00003409
    1560:	00003529 	.word	0x00003529
    1564:	00003631 	.word	0x00003631
    1568:	00001429 	.word	0x00001429
    156c:	00009ffc 	.word	0x00009ffc
    1570:	0000a174 	.word	0x0000a174
    1574:	0000aae8 	.word	0x0000aae8
    1578:	00005bfd 	.word	0x00005bfd
    157c:	0000ab00 	.word	0x0000ab00
    1580:	0000dcf4 	.word	0x0000dcf4

00001584 <_Cellular_RecvFuncGetPdnStatus>:
/* coverity[misra_c_2012_rule_8_13_violation] */
static CellularPktStatus_t _Cellular_RecvFuncGetPdnStatus( CellularContext_t * pContext,
                                                           const CellularATCommandResponse_t * pAtResp,
                                                           void * pData,
                                                           uint16_t dataLen )
{
    1584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t numStatusBuffers = ( uint8_t ) dataLen;
    CellularPktStatus_t pktStatus = CELLULAR_PKT_STATUS_OK;
    CellularATError_t atCoreStatus = CELLULAR_AT_SUCCESS;
    const CellularATCommandLine_t * pCommnadItem = NULL;

    if( pContext == NULL )
    1588:	b1a8      	cbz	r0, 15b6 <_Cellular_RecvFuncGetPdnStatus+0x32>
    158a:	4616      	mov	r6, r2
    158c:	b2dc      	uxtb	r4, r3
    {
        LogError( ( "GetPdnStatus: invalid context" ) );
        pktStatus = CELLULAR_PKT_STATUS_FAILURE;
    }
    else if( ( pAtResp == NULL ) )
    158e:	b301      	cbz	r1, 15d2 <_Cellular_RecvFuncGetPdnStatus+0x4e>
    {
        LogError( ( "GetPdnStatus: Response is invalid" ) );
        pktStatus = CELLULAR_PKT_STATUS_FAILURE;
    }
    else if( ( pPdnStatusBuffers == NULL ) || ( numStatusBuffers < 1U ) )
    1590:	b10a      	cbz	r2, 1596 <_Cellular_RecvFuncGetPdnStatus+0x12>
    1592:	2c00      	cmp	r4, #0
    1594:	d12b      	bne.n	15ee <_Cellular_RecvFuncGetPdnStatus+0x6a>
    {
        LogError( ( "GetPdnStatus: PDN Status bad parameters" ) );
    1596:	f240 4372 	movw	r3, #1138	; 0x472
    159a:	4a2f      	ldr	r2, [pc, #188]	; (1658 <_Cellular_RecvFuncGetPdnStatus+0xd4>)
    159c:	492f      	ldr	r1, [pc, #188]	; (165c <_Cellular_RecvFuncGetPdnStatus+0xd8>)
    159e:	4830      	ldr	r0, [pc, #192]	; (1660 <_Cellular_RecvFuncGetPdnStatus+0xdc>)
    15a0:	4c30      	ldr	r4, [pc, #192]	; (1664 <_Cellular_RecvFuncGetPdnStatus+0xe0>)
    15a2:	47a0      	blx	r4
    15a4:	4830      	ldr	r0, [pc, #192]	; (1668 <_Cellular_RecvFuncGetPdnStatus+0xe4>)
    15a6:	47a0      	blx	r4
    15a8:	4830      	ldr	r0, [pc, #192]	; (166c <_Cellular_RecvFuncGetPdnStatus+0xe8>)
    15aa:	47a0      	blx	r4
        pktStatus = CELLULAR_PKT_STATUS_BAD_PARAM;
    15ac:	f04f 0806 	mov.w	r8, #6
            pCommnadItem = pCommnadItem->pNext;
        }
    }

    return pktStatus;
}
    15b0:	4640      	mov	r0, r8
    15b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        LogError( ( "GetPdnStatus: invalid context" ) );
    15b6:	f44f 638d 	mov.w	r3, #1128	; 0x468
    15ba:	4a27      	ldr	r2, [pc, #156]	; (1658 <_Cellular_RecvFuncGetPdnStatus+0xd4>)
    15bc:	4927      	ldr	r1, [pc, #156]	; (165c <_Cellular_RecvFuncGetPdnStatus+0xd8>)
    15be:	4828      	ldr	r0, [pc, #160]	; (1660 <_Cellular_RecvFuncGetPdnStatus+0xdc>)
    15c0:	4c28      	ldr	r4, [pc, #160]	; (1664 <_Cellular_RecvFuncGetPdnStatus+0xe0>)
    15c2:	47a0      	blx	r4
    15c4:	482a      	ldr	r0, [pc, #168]	; (1670 <_Cellular_RecvFuncGetPdnStatus+0xec>)
    15c6:	47a0      	blx	r4
    15c8:	4828      	ldr	r0, [pc, #160]	; (166c <_Cellular_RecvFuncGetPdnStatus+0xe8>)
    15ca:	47a0      	blx	r4
        pktStatus = CELLULAR_PKT_STATUS_FAILURE;
    15cc:	f04f 0802 	mov.w	r8, #2
    15d0:	e7ee      	b.n	15b0 <_Cellular_RecvFuncGetPdnStatus+0x2c>
        LogError( ( "GetPdnStatus: Response is invalid" ) );
    15d2:	f240 436d 	movw	r3, #1133	; 0x46d
    15d6:	4a20      	ldr	r2, [pc, #128]	; (1658 <_Cellular_RecvFuncGetPdnStatus+0xd4>)
    15d8:	4920      	ldr	r1, [pc, #128]	; (165c <_Cellular_RecvFuncGetPdnStatus+0xd8>)
    15da:	4821      	ldr	r0, [pc, #132]	; (1660 <_Cellular_RecvFuncGetPdnStatus+0xdc>)
    15dc:	4c21      	ldr	r4, [pc, #132]	; (1664 <_Cellular_RecvFuncGetPdnStatus+0xe0>)
    15de:	47a0      	blx	r4
    15e0:	4824      	ldr	r0, [pc, #144]	; (1674 <_Cellular_RecvFuncGetPdnStatus+0xf0>)
    15e2:	47a0      	blx	r4
    15e4:	4821      	ldr	r0, [pc, #132]	; (166c <_Cellular_RecvFuncGetPdnStatus+0xe8>)
    15e6:	47a0      	blx	r4
        pktStatus = CELLULAR_PKT_STATUS_FAILURE;
    15e8:	f04f 0802 	mov.w	r8, #2
    15ec:	e7e0      	b.n	15b0 <_Cellular_RecvFuncGetPdnStatus+0x2c>
    else if( ( pAtResp->pItm == NULL ) || ( pAtResp->pItm->pLine == NULL ) )
    15ee:	684d      	ldr	r5, [r1, #4]
    15f0:	b1ad      	cbz	r5, 161e <_Cellular_RecvFuncGetPdnStatus+0x9a>
    15f2:	686b      	ldr	r3, [r5, #4]
    15f4:	b19b      	cbz	r3, 161e <_Cellular_RecvFuncGetPdnStatus+0x9a>
    15f6:	f04f 0800 	mov.w	r8, #0
        while( ( numStatusBuffers != 0U ) && ( pCommnadItem != NULL ) )
    15fa:	2c00      	cmp	r4, #0
    15fc:	d0d8      	beq.n	15b0 <_Cellular_RecvFuncGetPdnStatus+0x2c>
    15fe:	2d00      	cmp	r5, #0
    1600:	d0d6      	beq.n	15b0 <_Cellular_RecvFuncGetPdnStatus+0x2c>
            pRespLine = pCommnadItem->pLine;
    1602:	686f      	ldr	r7, [r5, #4]
            atCoreStatus = getPdnStatusParseLine( pRespLine, pPdnStatusBuffers );
    1604:	4631      	mov	r1, r6
    1606:	4638      	mov	r0, r7
    1608:	4b1b      	ldr	r3, [pc, #108]	; (1678 <_Cellular_RecvFuncGetPdnStatus+0xf4>)
    160a:	4798      	blx	r3
            pktStatus = _Cellular_TranslateAtCoreStatus( atCoreStatus );
    160c:	4b1b      	ldr	r3, [pc, #108]	; (167c <_Cellular_RecvFuncGetPdnStatus+0xf8>)
    160e:	4798      	blx	r3
            if( pktStatus != CELLULAR_PKT_STATUS_OK )
    1610:	4680      	mov	r8, r0
    1612:	b9a0      	cbnz	r0, 163e <_Cellular_RecvFuncGetPdnStatus+0xba>
            pPdnStatusBuffers++;
    1614:	3645      	adds	r6, #69	; 0x45
            numStatusBuffers--;
    1616:	3c01      	subs	r4, #1
    1618:	b2e4      	uxtb	r4, r4
            pCommnadItem = pCommnadItem->pNext;
    161a:	682d      	ldr	r5, [r5, #0]
    161c:	e7ed      	b.n	15fa <_Cellular_RecvFuncGetPdnStatus+0x76>
        LogError( ( "GetPdnStatus: no activated PDN" ) );
    161e:	f240 4377 	movw	r3, #1143	; 0x477
    1622:	4a0d      	ldr	r2, [pc, #52]	; (1658 <_Cellular_RecvFuncGetPdnStatus+0xd4>)
    1624:	490d      	ldr	r1, [pc, #52]	; (165c <_Cellular_RecvFuncGetPdnStatus+0xd8>)
    1626:	480e      	ldr	r0, [pc, #56]	; (1660 <_Cellular_RecvFuncGetPdnStatus+0xdc>)
    1628:	4c0e      	ldr	r4, [pc, #56]	; (1664 <_Cellular_RecvFuncGetPdnStatus+0xe0>)
    162a:	47a0      	blx	r4
    162c:	4814      	ldr	r0, [pc, #80]	; (1680 <_Cellular_RecvFuncGetPdnStatus+0xfc>)
    162e:	47a0      	blx	r4
    1630:	480e      	ldr	r0, [pc, #56]	; (166c <_Cellular_RecvFuncGetPdnStatus+0xe8>)
    1632:	47a0      	blx	r4
        pPdnStatusBuffers[ 0 ].contextId = INVALID_PDN_INDEX;
    1634:	23ff      	movs	r3, #255	; 0xff
    1636:	7033      	strb	r3, [r6, #0]
        pktStatus = CELLULAR_PKT_STATUS_OK;
    1638:	f04f 0800 	mov.w	r8, #0
    163c:	e7b8      	b.n	15b0 <_Cellular_RecvFuncGetPdnStatus+0x2c>
                LogError( ( "getPdnStatusParseLine parse %s failed", pRespLine ) );
    163e:	f240 4389 	movw	r3, #1161	; 0x489
    1642:	4a05      	ldr	r2, [pc, #20]	; (1658 <_Cellular_RecvFuncGetPdnStatus+0xd4>)
    1644:	4905      	ldr	r1, [pc, #20]	; (165c <_Cellular_RecvFuncGetPdnStatus+0xd8>)
    1646:	4806      	ldr	r0, [pc, #24]	; (1660 <_Cellular_RecvFuncGetPdnStatus+0xdc>)
    1648:	4c06      	ldr	r4, [pc, #24]	; (1664 <_Cellular_RecvFuncGetPdnStatus+0xe0>)
    164a:	47a0      	blx	r4
    164c:	4639      	mov	r1, r7
    164e:	480d      	ldr	r0, [pc, #52]	; (1684 <_Cellular_RecvFuncGetPdnStatus+0x100>)
    1650:	47a0      	blx	r4
    1652:	4806      	ldr	r0, [pc, #24]	; (166c <_Cellular_RecvFuncGetPdnStatus+0xe8>)
    1654:	47a0      	blx	r4
                break;
    1656:	e7ab      	b.n	15b0 <_Cellular_RecvFuncGetPdnStatus+0x2c>
    1658:	0000a014 	.word	0x0000a014
    165c:	0000a174 	.word	0x0000a174
    1660:	0000a188 	.word	0x0000a188
    1664:	00005bfd 	.word	0x00005bfd
    1668:	0000ab70 	.word	0x0000ab70
    166c:	0000dcf4 	.word	0x0000dcf4
    1670:	0000ab2c 	.word	0x0000ab2c
    1674:	0000ab4c 	.word	0x0000ab4c
    1678:	000014dd 	.word	0x000014dd
    167c:	00003a95 	.word	0x00003a95
    1680:	0000ab98 	.word	0x0000ab98
    1684:	0000abb8 	.word	0x0000abb8

00001688 <_Cellular_RecvFuncGetSimCardStatus>:
{
    1688:	b510      	push	{r4, lr}
    168a:	b082      	sub	sp, #8
    char * pInputLine = NULL;
    168c:	2400      	movs	r4, #0
    168e:	9401      	str	r4, [sp, #4]
    if( pContext == NULL )
    1690:	2800      	cmp	r0, #0
    1692:	d031      	beq.n	16f8 <_Cellular_RecvFuncGetSimCardStatus+0x70>
    1694:	4614      	mov	r4, r2
    else if( ( pAtResp == NULL ) || ( pAtResp->pItm == NULL ) || ( pAtResp->pItm->pLine == NULL ) )
    1696:	b149      	cbz	r1, 16ac <_Cellular_RecvFuncGetSimCardStatus+0x24>
    1698:	6849      	ldr	r1, [r1, #4]
    169a:	b139      	cbz	r1, 16ac <_Cellular_RecvFuncGetSimCardStatus+0x24>
    169c:	684a      	ldr	r2, [r1, #4]
    169e:	b12a      	cbz	r2, 16ac <_Cellular_RecvFuncGetSimCardStatus+0x24>
    else if( ( pData == NULL ) || ( dataLen != sizeof( CellularSimCardState_t ) ) )
    16a0:	2c00      	cmp	r4, #0
    16a2:	d02b      	beq.n	16fc <_Cellular_RecvFuncGetSimCardStatus+0x74>
    16a4:	2b01      	cmp	r3, #1
    16a6:	d010      	beq.n	16ca <_Cellular_RecvFuncGetSimCardStatus+0x42>
        pktStatus = CELLULAR_PKT_STATUS_BAD_PARAM;
    16a8:	2306      	movs	r3, #6
    16aa:	e00b      	b.n	16c4 <_Cellular_RecvFuncGetSimCardStatus+0x3c>
        LogError( ( "GetSimStatus: response is invalid" ) );
    16ac:	f240 23fa 	movw	r3, #762	; 0x2fa
    16b0:	4a14      	ldr	r2, [pc, #80]	; (1704 <_Cellular_RecvFuncGetSimCardStatus+0x7c>)
    16b2:	4915      	ldr	r1, [pc, #84]	; (1708 <_Cellular_RecvFuncGetSimCardStatus+0x80>)
    16b4:	4815      	ldr	r0, [pc, #84]	; (170c <_Cellular_RecvFuncGetSimCardStatus+0x84>)
    16b6:	4c16      	ldr	r4, [pc, #88]	; (1710 <_Cellular_RecvFuncGetSimCardStatus+0x88>)
    16b8:	47a0      	blx	r4
    16ba:	4816      	ldr	r0, [pc, #88]	; (1714 <_Cellular_RecvFuncGetSimCardStatus+0x8c>)
    16bc:	47a0      	blx	r4
    16be:	4816      	ldr	r0, [pc, #88]	; (1718 <_Cellular_RecvFuncGetSimCardStatus+0x90>)
    16c0:	47a0      	blx	r4
        pktStatus = CELLULAR_PKT_STATUS_FAILURE;
    16c2:	2302      	movs	r3, #2
}
    16c4:	4618      	mov	r0, r3
    16c6:	b002      	add	sp, #8
    16c8:	bd10      	pop	{r4, pc}
        pInputLine = pAtResp->pItm->pLine;
    16ca:	a802      	add	r0, sp, #8
    16cc:	f840 2d04 	str.w	r2, [r0, #-4]!
        atCoreStatus = Cellular_ATRemoveLeadingWhiteSpaces( &pInputLine );
    16d0:	4b12      	ldr	r3, [pc, #72]	; (171c <_Cellular_RecvFuncGetSimCardStatus+0x94>)
    16d2:	4798      	blx	r3
        pktStatus = _Cellular_TranslateAtCoreStatus( atCoreStatus );
    16d4:	4b12      	ldr	r3, [pc, #72]	; (1720 <_Cellular_RecvFuncGetSimCardStatus+0x98>)
    16d6:	4798      	blx	r3
        if( pktStatus == CELLULAR_PKT_STATUS_OK )
    16d8:	4603      	mov	r3, r0
    16da:	2800      	cmp	r0, #0
    16dc:	d1f2      	bne.n	16c4 <_Cellular_RecvFuncGetSimCardStatus+0x3c>
            pTokenPtr = strtok_r( pInputLine, ":", &pInputLine );
    16de:	aa02      	add	r2, sp, #8
    16e0:	f852 0d04 	ldr.w	r0, [r2, #-4]!
    16e4:	490f      	ldr	r1, [pc, #60]	; (1724 <_Cellular_RecvFuncGetSimCardStatus+0x9c>)
    16e6:	4b10      	ldr	r3, [pc, #64]	; (1728 <_Cellular_RecvFuncGetSimCardStatus+0xa0>)
    16e8:	4798      	blx	r3
            if( pTokenPtr == NULL )
    16ea:	b148      	cbz	r0, 1700 <_Cellular_RecvFuncGetSimCardStatus+0x78>
                pktStatus = _Cellular_ParseSimstat( pInputLine, pSimCardState );
    16ec:	4621      	mov	r1, r4
    16ee:	9801      	ldr	r0, [sp, #4]
    16f0:	4b0e      	ldr	r3, [pc, #56]	; (172c <_Cellular_RecvFuncGetSimCardStatus+0xa4>)
    16f2:	4798      	blx	r3
    16f4:	4603      	mov	r3, r0
    16f6:	e7e5      	b.n	16c4 <_Cellular_RecvFuncGetSimCardStatus+0x3c>
        pktStatus = CELLULAR_PKT_STATUS_INVALID_HANDLE;
    16f8:	2308      	movs	r3, #8
    16fa:	e7e3      	b.n	16c4 <_Cellular_RecvFuncGetSimCardStatus+0x3c>
        pktStatus = CELLULAR_PKT_STATUS_BAD_PARAM;
    16fc:	2306      	movs	r3, #6
    16fe:	e7e1      	b.n	16c4 <_Cellular_RecvFuncGetSimCardStatus+0x3c>
                pktStatus = CELLULAR_PKT_STATUS_BAD_RESPONSE;
    1700:	2304      	movs	r3, #4
    1702:	e7df      	b.n	16c4 <_Cellular_RecvFuncGetSimCardStatus+0x3c>
    1704:	0000a034 	.word	0x0000a034
    1708:	0000a174 	.word	0x0000a174
    170c:	0000a188 	.word	0x0000a188
    1710:	00005bfd 	.word	0x00005bfd
    1714:	0000abe0 	.word	0x0000abe0
    1718:	0000dcf4 	.word	0x0000dcf4
    171c:	00003461 	.word	0x00003461
    1720:	00003a95 	.word	0x00003a95
    1724:	0000ac04 	.word	0x0000ac04
    1728:	00008f6b 	.word	0x00008f6b
    172c:	000021e9 	.word	0x000021e9

00001730 <Cellular_ActivatePdn>:

/* FreeRTOS Cellular Library API. */
/* coverity[misra_c_2012_rule_8_7_violation] */
CellularError_t Cellular_ActivatePdn( CellularHandle_t cellularHandle,
                                      uint8_t contextId )
{
    1730:	b570      	push	{r4, r5, r6, lr}
    1732:	b092      	sub	sp, #72	; 0x48
    1734:	4606      	mov	r6, r0
    1736:	460d      	mov	r5, r1
    CellularContext_t * pContext = ( CellularContext_t * ) cellularHandle;
    CellularError_t cellularStatus = CELLULAR_SUCCESS;
    CellularPktStatus_t pktStatus = CELLULAR_PKT_STATUS_OK;
    char cmdBuf[ CELLULAR_AT_CMD_TYPICAL_MAX_SIZE ] = { '\0' };
    1738:	ac0a      	add	r4, sp, #40	; 0x28
    173a:	2220      	movs	r2, #32
    173c:	2100      	movs	r1, #0
    173e:	4620      	mov	r0, r4
    1740:	4b20      	ldr	r3, [pc, #128]	; (17c4 <Cellular_ActivatePdn+0x94>)
    1742:	4798      	blx	r3

    CellularAtReq_t atReqActPdn =
    1744:	9404      	str	r4, [sp, #16]
    1746:	2300      	movs	r3, #0
    1748:	f88d 3014 	strb.w	r3, [sp, #20]
    174c:	9306      	str	r3, [sp, #24]
    174e:	9307      	str	r3, [sp, #28]
    1750:	9308      	str	r3, [sp, #32]
    1752:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        NULL,
        NULL,
        0,
    };

    cellularStatus = _Cellular_IsValidPdn( contextId );
    1756:	4628      	mov	r0, r5
    1758:	4b1b      	ldr	r3, [pc, #108]	; (17c8 <Cellular_ActivatePdn+0x98>)
    175a:	4798      	blx	r3

    if( cellularStatus == CELLULAR_SUCCESS )
    175c:	4604      	mov	r4, r0
    175e:	b118      	cbz	r0, 1768 <Cellular_ActivatePdn+0x38>
    {
        /* Make sure the library is open. */
        cellularStatus = _Cellular_CheckLibraryStatus( pContext );
    }

    if( cellularStatus == CELLULAR_SUCCESS )
    1760:	b13c      	cbz	r4, 1772 <Cellular_ActivatePdn+0x42>
            cellularStatus = _Cellular_TranslatePktStatus( pktStatus );
        }
    }

    return cellularStatus;
}
    1762:	4620      	mov	r0, r4
    1764:	b012      	add	sp, #72	; 0x48
    1766:	bd70      	pop	{r4, r5, r6, pc}
        cellularStatus = _Cellular_CheckLibraryStatus( pContext );
    1768:	4630      	mov	r0, r6
    176a:	4b18      	ldr	r3, [pc, #96]	; (17cc <Cellular_ActivatePdn+0x9c>)
    176c:	4798      	blx	r3
    176e:	4604      	mov	r4, r0
    1770:	e7f6      	b.n	1760 <Cellular_ActivatePdn+0x30>
        ( void ) snprintf( cmdBuf, CELLULAR_AT_CMD_TYPICAL_MAX_SIZE, "%s%d", "AT+QIACT=", contextId );
    1772:	9500      	str	r5, [sp, #0]
    1774:	4b16      	ldr	r3, [pc, #88]	; (17d0 <Cellular_ActivatePdn+0xa0>)
    1776:	4a17      	ldr	r2, [pc, #92]	; (17d4 <Cellular_ActivatePdn+0xa4>)
    1778:	2120      	movs	r1, #32
    177a:	a80a      	add	r0, sp, #40	; 0x28
    177c:	4d16      	ldr	r5, [pc, #88]	; (17d8 <Cellular_ActivatePdn+0xa8>)
    177e:	47a8      	blx	r5
        pktStatus = _Cellular_TimeoutAtcmdRequestWithCallback( pContext, atReqActPdn, PDN_ACTIVATION_PACKET_REQ_TIMEOUT_MS );
    1780:	4b16      	ldr	r3, [pc, #88]	; (17dc <Cellular_ActivatePdn+0xac>)
    1782:	9303      	str	r3, [sp, #12]
    1784:	ab07      	add	r3, sp, #28
    1786:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    178a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
    178e:	ab04      	add	r3, sp, #16
    1790:	cb0e      	ldmia	r3, {r1, r2, r3}
    1792:	4630      	mov	r0, r6
    1794:	4d12      	ldr	r5, [pc, #72]	; (17e0 <Cellular_ActivatePdn+0xb0>)
    1796:	47a8      	blx	r5
        if( pktStatus != CELLULAR_PKT_STATUS_OK )
    1798:	4605      	mov	r5, r0
    179a:	2800      	cmp	r0, #0
    179c:	d0e1      	beq.n	1762 <Cellular_ActivatePdn+0x32>
            LogError( ( "Cellular_ActivatePdn: can't activate PDN, cmdBuf:%s, PktRet: %d", cmdBuf, pktStatus ) );
    179e:	f640 1347 	movw	r3, #2375	; 0x947
    17a2:	4a10      	ldr	r2, [pc, #64]	; (17e4 <Cellular_ActivatePdn+0xb4>)
    17a4:	4910      	ldr	r1, [pc, #64]	; (17e8 <Cellular_ActivatePdn+0xb8>)
    17a6:	4811      	ldr	r0, [pc, #68]	; (17ec <Cellular_ActivatePdn+0xbc>)
    17a8:	4c11      	ldr	r4, [pc, #68]	; (17f0 <Cellular_ActivatePdn+0xc0>)
    17aa:	47a0      	blx	r4
    17ac:	462a      	mov	r2, r5
    17ae:	a90a      	add	r1, sp, #40	; 0x28
    17b0:	4810      	ldr	r0, [pc, #64]	; (17f4 <Cellular_ActivatePdn+0xc4>)
    17b2:	47a0      	blx	r4
    17b4:	4810      	ldr	r0, [pc, #64]	; (17f8 <Cellular_ActivatePdn+0xc8>)
    17b6:	47a0      	blx	r4
            cellularStatus = _Cellular_TranslatePktStatus( pktStatus );
    17b8:	4628      	mov	r0, r5
    17ba:	4b10      	ldr	r3, [pc, #64]	; (17fc <Cellular_ActivatePdn+0xcc>)
    17bc:	4798      	blx	r3
    17be:	4604      	mov	r4, r0
    17c0:	e7cf      	b.n	1762 <Cellular_ActivatePdn+0x32>
    17c2:	bf00      	nop
    17c4:	000088af 	.word	0x000088af
    17c8:	00003add 	.word	0x00003add
    17cc:	000038dd 	.word	0x000038dd
    17d0:	0000ada4 	.word	0x0000ada4
    17d4:	0000ad58 	.word	0x0000ad58
    17d8:	00008d59 	.word	0x00008d59
    17dc:	000249f0 	.word	0x000249f0
    17e0:	00003e9d 	.word	0x00003e9d
    17e4:	0000a0b0 	.word	0x0000a0b0
    17e8:	0000a174 	.word	0x0000a174
    17ec:	0000a188 	.word	0x0000a188
    17f0:	00005bfd 	.word	0x00005bfd
    17f4:	0000adb0 	.word	0x0000adb0
    17f8:	0000dcf4 	.word	0x0000dcf4
    17fc:	0000395d 	.word	0x0000395d

00001800 <Cellular_SetPdnConfig>:
/* FreeRTOS Cellular Library API. */
/* coverity[misra_c_2012_rule_8_7_violation] */
CellularError_t Cellular_SetPdnConfig( CellularHandle_t cellularHandle,
                                       uint8_t contextId,
                                       const CellularPdnConfig_t * pPdnConfig )
{
    1800:	b5f0      	push	{r4, r5, r6, r7, lr}
    1802:	b0bf      	sub	sp, #252	; 0xfc
    1804:	4606      	mov	r6, r0
    1806:	460f      	mov	r7, r1
    1808:	4615      	mov	r5, r2
    CellularContext_t * pContext = ( CellularContext_t * ) cellularHandle;
    CellularError_t cellularStatus = CELLULAR_SUCCESS;
    CellularPktStatus_t pktStatus = CELLULAR_PKT_STATUS_OK;
    char cmdBuf[ CELLULAR_AT_CMD_MAX_SIZE ] = { '\0' };
    180a:	ac0c      	add	r4, sp, #48	; 0x30
    180c:	22c8      	movs	r2, #200	; 0xc8
    180e:	2100      	movs	r1, #0
    1810:	4620      	mov	r0, r4
    1812:	4b2e      	ldr	r3, [pc, #184]	; (18cc <Cellular_SetPdnConfig+0xcc>)
    1814:	4798      	blx	r3
    CellularAtReq_t atReqSetPdn =
    1816:	9406      	str	r4, [sp, #24]
    1818:	2300      	movs	r3, #0
    181a:	f88d 301c 	strb.w	r3, [sp, #28]
    181e:	9308      	str	r3, [sp, #32]
    1820:	9309      	str	r3, [sp, #36]	; 0x24
    1822:	930a      	str	r3, [sp, #40]	; 0x28
    1824:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
        NULL,
        NULL,
        0,
    };

    if( pPdnConfig == NULL )
    1828:	b135      	cbz	r5, 1838 <Cellular_SetPdnConfig+0x38>
    CellularError_t cellularStatus = CELLULAR_SUCCESS;
    182a:	2400      	movs	r4, #0
    {
        LogError( ( "Cellular_ATCommandRaw: Input parameter is NULL" ) );
        cellularStatus = CELLULAR_BAD_PARAMETER;
    }

    if( cellularStatus == CELLULAR_SUCCESS )
    182c:	b18c      	cbz	r4, 1852 <Cellular_SetPdnConfig+0x52>
    {
        cellularStatus = _Cellular_IsValidPdn( contextId );
    }

    if( cellularStatus == CELLULAR_SUCCESS )
    182e:	b1ac      	cbz	r4, 185c <Cellular_SetPdnConfig+0x5c>
    {
        /* Make sure the library is open. */
        cellularStatus = _Cellular_CheckLibraryStatus( pContext );
    }

    if( cellularStatus == CELLULAR_SUCCESS )
    1830:	b1cc      	cbz	r4, 1866 <Cellular_SetPdnConfig+0x66>
            cellularStatus = _Cellular_TranslatePktStatus( pktStatus );
        }
    }

    return cellularStatus;
}
    1832:	4620      	mov	r0, r4
    1834:	b03f      	add	sp, #252	; 0xfc
    1836:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LogError( ( "Cellular_ATCommandRaw: Input parameter is NULL" ) );
    1838:	f640 1367 	movw	r3, #2407	; 0x967
    183c:	4a24      	ldr	r2, [pc, #144]	; (18d0 <Cellular_SetPdnConfig+0xd0>)
    183e:	4925      	ldr	r1, [pc, #148]	; (18d4 <Cellular_SetPdnConfig+0xd4>)
    1840:	4825      	ldr	r0, [pc, #148]	; (18d8 <Cellular_SetPdnConfig+0xd8>)
    1842:	4c26      	ldr	r4, [pc, #152]	; (18dc <Cellular_SetPdnConfig+0xdc>)
    1844:	47a0      	blx	r4
    1846:	4826      	ldr	r0, [pc, #152]	; (18e0 <Cellular_SetPdnConfig+0xe0>)
    1848:	47a0      	blx	r4
    184a:	4826      	ldr	r0, [pc, #152]	; (18e4 <Cellular_SetPdnConfig+0xe4>)
    184c:	47a0      	blx	r4
        cellularStatus = CELLULAR_BAD_PARAMETER;
    184e:	2405      	movs	r4, #5
    1850:	e7ec      	b.n	182c <Cellular_SetPdnConfig+0x2c>
        cellularStatus = _Cellular_IsValidPdn( contextId );
    1852:	4638      	mov	r0, r7
    1854:	4b24      	ldr	r3, [pc, #144]	; (18e8 <Cellular_SetPdnConfig+0xe8>)
    1856:	4798      	blx	r3
    1858:	4604      	mov	r4, r0
    185a:	e7e8      	b.n	182e <Cellular_SetPdnConfig+0x2e>
        cellularStatus = _Cellular_CheckLibraryStatus( pContext );
    185c:	4630      	mov	r0, r6
    185e:	4b23      	ldr	r3, [pc, #140]	; (18ec <Cellular_SetPdnConfig+0xec>)
    1860:	4798      	blx	r3
    1862:	4604      	mov	r4, r0
    1864:	e7e4      	b.n	1830 <Cellular_SetPdnConfig+0x30>
                           pPdnConfig->pdnContextType,
    1866:	462b      	mov	r3, r5
    1868:	f813 2b02 	ldrb.w	r2, [r3], #2
                           pPdnConfig->username,
    186c:	f105 0143 	add.w	r1, r5, #67	; 0x43
                           pPdnConfig->password,
    1870:	f105 0064 	add.w	r0, r5, #100	; 0x64
                           pPdnConfig->pdnAuthType );
    1874:	786d      	ldrb	r5, [r5, #1]
        ( void ) snprintf( cmdBuf, CELLULAR_AT_CMD_MAX_SIZE, "%s%d,%d,\"%s\",\"%s\",\"%s\",%d",
    1876:	9505      	str	r5, [sp, #20]
    1878:	9004      	str	r0, [sp, #16]
    187a:	9103      	str	r1, [sp, #12]
    187c:	9302      	str	r3, [sp, #8]
    187e:	9201      	str	r2, [sp, #4]
    1880:	9700      	str	r7, [sp, #0]
    1882:	4b1b      	ldr	r3, [pc, #108]	; (18f0 <Cellular_SetPdnConfig+0xf0>)
    1884:	4a1b      	ldr	r2, [pc, #108]	; (18f4 <Cellular_SetPdnConfig+0xf4>)
    1886:	21c8      	movs	r1, #200	; 0xc8
    1888:	a80c      	add	r0, sp, #48	; 0x30
    188a:	4d1b      	ldr	r5, [pc, #108]	; (18f8 <Cellular_SetPdnConfig+0xf8>)
    188c:	47a8      	blx	r5
        pktStatus = _Cellular_AtcmdRequestWithCallback( pContext, atReqSetPdn );
    188e:	ab09      	add	r3, sp, #36	; 0x24
    1890:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    1894:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
    1898:	ab06      	add	r3, sp, #24
    189a:	cb0e      	ldmia	r3, {r1, r2, r3}
    189c:	4630      	mov	r0, r6
    189e:	4d17      	ldr	r5, [pc, #92]	; (18fc <Cellular_SetPdnConfig+0xfc>)
    18a0:	47a8      	blx	r5
        if( pktStatus != CELLULAR_PKT_STATUS_OK )
    18a2:	4605      	mov	r5, r0
    18a4:	2800      	cmp	r0, #0
    18a6:	d0c4      	beq.n	1832 <Cellular_SetPdnConfig+0x32>
            LogError( ( "Cellular_SetPdnConfig: can't set PDN, cmdBuf:%s, PktRet: %d", cmdBuf, pktStatus ) );
    18a8:	f640 1389 	movw	r3, #2441	; 0x989
    18ac:	4a08      	ldr	r2, [pc, #32]	; (18d0 <Cellular_SetPdnConfig+0xd0>)
    18ae:	4909      	ldr	r1, [pc, #36]	; (18d4 <Cellular_SetPdnConfig+0xd4>)
    18b0:	4809      	ldr	r0, [pc, #36]	; (18d8 <Cellular_SetPdnConfig+0xd8>)
    18b2:	4c0a      	ldr	r4, [pc, #40]	; (18dc <Cellular_SetPdnConfig+0xdc>)
    18b4:	47a0      	blx	r4
    18b6:	462a      	mov	r2, r5
    18b8:	a90c      	add	r1, sp, #48	; 0x30
    18ba:	4811      	ldr	r0, [pc, #68]	; (1900 <Cellular_SetPdnConfig+0x100>)
    18bc:	47a0      	blx	r4
    18be:	4809      	ldr	r0, [pc, #36]	; (18e4 <Cellular_SetPdnConfig+0xe4>)
    18c0:	47a0      	blx	r4
            cellularStatus = _Cellular_TranslatePktStatus( pktStatus );
    18c2:	4628      	mov	r0, r5
    18c4:	4b0f      	ldr	r3, [pc, #60]	; (1904 <Cellular_SetPdnConfig+0x104>)
    18c6:	4798      	blx	r3
    18c8:	4604      	mov	r4, r0
    18ca:	e7b2      	b.n	1832 <Cellular_SetPdnConfig+0x32>
    18cc:	000088af 	.word	0x000088af
    18d0:	0000a0c8 	.word	0x0000a0c8
    18d4:	0000a174 	.word	0x0000a174
    18d8:	0000a188 	.word	0x0000a188
    18dc:	00005bfd 	.word	0x00005bfd
    18e0:	0000adf0 	.word	0x0000adf0
    18e4:	0000dcf4 	.word	0x0000dcf4
    18e8:	00003add 	.word	0x00003add
    18ec:	000038dd 	.word	0x000038dd
    18f0:	0000ae20 	.word	0x0000ae20
    18f4:	0000ae2c 	.word	0x0000ae2c
    18f8:	00008d59 	.word	0x00008d59
    18fc:	00003ed1 	.word	0x00003ed1
    1900:	0000ae48 	.word	0x0000ae48
    1904:	0000395d 	.word	0x0000395d

00001908 <Cellular_GetPdnStatus>:
/* coverity[misra_c_2012_rule_8_13_violation] */
CellularError_t Cellular_GetPdnStatus( CellularHandle_t cellularHandle,
                                       CellularPdnStatus_t * pPdnStatusBuffers,
                                       uint8_t numStatusBuffers,
                                       uint8_t * pNumStatus )
{
    1908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    190c:	b08a      	sub	sp, #40	; 0x28
    190e:	4680      	mov	r8, r0
    1910:	460d      	mov	r5, r1
    1912:	4614      	mov	r4, r2
    1914:	461e      	mov	r6, r3
    CellularContext_t * pContext = ( CellularContext_t * ) cellularHandle;
    CellularError_t cellularStatus = CELLULAR_SUCCESS;
    CellularPktStatus_t pktStatus = CELLULAR_PKT_STATUS_OK;
    const CellularPdnStatus_t * pTempPdnStatusBuffer = pPdnStatusBuffers;
    uint8_t numBuffers = 0;
    CellularAtReq_t atReqGetPdnStatus =
    1916:	4b21      	ldr	r3, [pc, #132]	; (199c <Cellular_GetPdnStatus+0x94>)
    1918:	9304      	str	r3, [sp, #16]
    191a:	2302      	movs	r3, #2
    191c:	f88d 3014 	strb.w	r3, [sp, #20]
    1920:	4b1f      	ldr	r3, [pc, #124]	; (19a0 <Cellular_GetPdnStatus+0x98>)
    1922:	9306      	str	r3, [sp, #24]
    1924:	4b1f      	ldr	r3, [pc, #124]	; (19a4 <Cellular_GetPdnStatus+0x9c>)
    1926:	9307      	str	r3, [sp, #28]
    1928:	9108      	str	r1, [sp, #32]
    192a:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
        _Cellular_RecvFuncGetPdnStatus,
        pPdnStatusBuffers,
        numStatusBuffers,
    };

    if( ( pTempPdnStatusBuffer == NULL ) || ( pNumStatus == NULL ) || ( numStatusBuffers < 1u ) )
    192e:	b109      	cbz	r1, 1934 <Cellular_GetPdnStatus+0x2c>
    1930:	b106      	cbz	r6, 1934 <Cellular_GetPdnStatus+0x2c>
    1932:	b9e2      	cbnz	r2, 196e <Cellular_GetPdnStatus+0x66>
    {
        cellularStatus = CELLULAR_BAD_PARAMETER;
        LogWarn( ( "_Cellular_GetPdnStatus: Bad input Parameter " ) );
    1934:	f640 330d 	movw	r3, #2829	; 0xb0d
    1938:	4a1b      	ldr	r2, [pc, #108]	; (19a8 <Cellular_GetPdnStatus+0xa0>)
    193a:	491c      	ldr	r1, [pc, #112]	; (19ac <Cellular_GetPdnStatus+0xa4>)
    193c:	481c      	ldr	r0, [pc, #112]	; (19b0 <Cellular_GetPdnStatus+0xa8>)
    193e:	4f1d      	ldr	r7, [pc, #116]	; (19b4 <Cellular_GetPdnStatus+0xac>)
    1940:	47b8      	blx	r7
    1942:	481d      	ldr	r0, [pc, #116]	; (19b8 <Cellular_GetPdnStatus+0xb0>)
    1944:	47b8      	blx	r7
    1946:	481d      	ldr	r0, [pc, #116]	; (19bc <Cellular_GetPdnStatus+0xb4>)
    1948:	47b8      	blx	r7
        cellularStatus = CELLULAR_BAD_PARAMETER;
    194a:	2005      	movs	r0, #5
    }

    if( cellularStatus == CELLULAR_SUCCESS )
    194c:	b188      	cbz	r0, 1972 <Cellular_GetPdnStatus+0x6a>
    {
        /* Make sure the library is open. */
        cellularStatus = _Cellular_CheckLibraryStatus( pContext );
    }

    if( cellularStatus == CELLULAR_SUCCESS )
    194e:	b1a0      	cbz	r0, 197a <Cellular_GetPdnStatus+0x72>
    {
        pktStatus = _Cellular_AtcmdRequestWithCallback( pContext, atReqGetPdnStatus );
        cellularStatus = _Cellular_TranslatePktStatus( pktStatus );
    }

    if( cellularStatus == CELLULAR_SUCCESS )
    1950:	bb00      	cbnz	r0, 1994 <Cellular_GetPdnStatus+0x8c>
    {
        /* Populate the Valid number of statuses. */
        *pNumStatus = 0;
    1952:	2300      	movs	r3, #0
    1954:	7033      	strb	r3, [r6, #0]
    const CellularPdnStatus_t * pTempPdnStatusBuffer = pPdnStatusBuffers;
    1956:	4629      	mov	r1, r5
        numBuffers = numStatusBuffers;

        while( numBuffers != 0U )
    1958:	b1e4      	cbz	r4, 1994 <Cellular_GetPdnStatus+0x8c>
        {
            /* Check if the PDN state is valid. The context ID of the first
             * invalid PDN status is set to FF. */
            if( ( pTempPdnStatusBuffer->contextId <= CELLULAR_PDN_CONTEXT_ID_MAX ) &&
    195a:	780b      	ldrb	r3, [r1, #0]
    195c:	2b10      	cmp	r3, #16
    195e:	d819      	bhi.n	1994 <Cellular_GetPdnStatus+0x8c>
                ( pTempPdnStatusBuffer->contextId != INVALID_PDN_INDEX ) )
            {
                ( *pNumStatus ) += 1U;
    1960:	7833      	ldrb	r3, [r6, #0]
    1962:	3301      	adds	r3, #1
    1964:	7033      	strb	r3, [r6, #0]
            else
            {
                break;
            }

            numBuffers--;
    1966:	3c01      	subs	r4, #1
    1968:	b2e4      	uxtb	r4, r4
            pTempPdnStatusBuffer++;
    196a:	3145      	adds	r1, #69	; 0x45
    196c:	e7f4      	b.n	1958 <Cellular_GetPdnStatus+0x50>
    CellularError_t cellularStatus = CELLULAR_SUCCESS;
    196e:	2000      	movs	r0, #0
    1970:	e7ec      	b.n	194c <Cellular_GetPdnStatus+0x44>
        cellularStatus = _Cellular_CheckLibraryStatus( pContext );
    1972:	4640      	mov	r0, r8
    1974:	4b12      	ldr	r3, [pc, #72]	; (19c0 <Cellular_GetPdnStatus+0xb8>)
    1976:	4798      	blx	r3
    1978:	e7e9      	b.n	194e <Cellular_GetPdnStatus+0x46>
        pktStatus = _Cellular_AtcmdRequestWithCallback( pContext, atReqGetPdnStatus );
    197a:	ab0a      	add	r3, sp, #40	; 0x28
    197c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
    1980:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
    1984:	ab04      	add	r3, sp, #16
    1986:	cb0e      	ldmia	r3, {r1, r2, r3}
    1988:	4640      	mov	r0, r8
    198a:	4f0e      	ldr	r7, [pc, #56]	; (19c4 <Cellular_GetPdnStatus+0xbc>)
    198c:	47b8      	blx	r7
        cellularStatus = _Cellular_TranslatePktStatus( pktStatus );
    198e:	4b0e      	ldr	r3, [pc, #56]	; (19c8 <Cellular_GetPdnStatus+0xc0>)
    1990:	4798      	blx	r3
    1992:	e7dd      	b.n	1950 <Cellular_GetPdnStatus+0x48>
        }
    }

    return cellularStatus;
}
    1994:	b00a      	add	sp, #40	; 0x28
    1996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    199a:	bf00      	nop
    199c:	0000b044 	.word	0x0000b044
    19a0:	0000b050 	.word	0x0000b050
    19a4:	00001585 	.word	0x00001585
    19a8:	0000a138 	.word	0x0000a138
    19ac:	0000a174 	.word	0x0000a174
    19b0:	0000b058 	.word	0x0000b058
    19b4:	00005bfd 	.word	0x00005bfd
    19b8:	0000b070 	.word	0x0000b070
    19bc:	0000dcf4 	.word	0x0000dcf4
    19c0:	000038dd 	.word	0x000038dd
    19c4:	00003ed1 	.word	0x00003ed1
    19c8:	0000395d 	.word	0x0000395d

000019cc <Cellular_GetSimCardStatus>:

/* FreeRTOS Cellular Library API. */
/* coverity[misra_c_2012_rule_8_7_violation] */
CellularError_t Cellular_GetSimCardStatus( CellularHandle_t cellularHandle,
                                           CellularSimCardStatus_t * pSimCardStatus )
{
    19cc:	b530      	push	{r4, r5, lr}
    19ce:	b091      	sub	sp, #68	; 0x44
    19d0:	4605      	mov	r5, r0
    19d2:	460c      	mov	r4, r1
    CellularContext_t * pContext = ( CellularContext_t * ) cellularHandle;
    CellularError_t cellularStatus = CELLULAR_SUCCESS;
    CellularPktStatus_t pktStatus = CELLULAR_PKT_STATUS_OK;
    CellularAtReq_t atReqGetSimCardStatus =
    19d4:	4b20      	ldr	r3, [pc, #128]	; (1a58 <Cellular_GetSimCardStatus+0x8c>)
    19d6:	930a      	str	r3, [sp, #40]	; 0x28
    19d8:	2202      	movs	r2, #2
    19da:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
    19de:	4b1f      	ldr	r3, [pc, #124]	; (1a5c <Cellular_GetSimCardStatus+0x90>)
    19e0:	930c      	str	r3, [sp, #48]	; 0x30
    19e2:	4b1f      	ldr	r3, [pc, #124]	; (1a60 <Cellular_GetSimCardStatus+0x94>)
    19e4:	930d      	str	r3, [sp, #52]	; 0x34
    19e6:	910e      	str	r1, [sp, #56]	; 0x38
    19e8:	2301      	movs	r3, #1
    19ea:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
        "+QSIMSTAT",
        _Cellular_RecvFuncGetSimCardStatus,
        &pSimCardStatus->simCardState,
        sizeof( CellularSimCardState_t ),
    };
    CellularAtReq_t atReqGetSimLockStatus =
    19ee:	491d      	ldr	r1, [pc, #116]	; (1a64 <Cellular_GetSimCardStatus+0x98>)
    19f0:	9104      	str	r1, [sp, #16]
    19f2:	f88d 2014 	strb.w	r2, [sp, #20]
    19f6:	4a1c      	ldr	r2, [pc, #112]	; (1a68 <Cellular_GetSimCardStatus+0x9c>)
    19f8:	9206      	str	r2, [sp, #24]
    19fa:	4a1c      	ldr	r2, [pc, #112]	; (1a6c <Cellular_GetSimCardStatus+0xa0>)
    19fc:	9207      	str	r2, [sp, #28]
    {
        "AT+CPIN?",
        CELLULAR_AT_WITH_PREFIX,
        "+CPIN",
        _Cellular_RecvFuncGetSimLockStatus,
        &pSimCardStatus->simCardLockState,
    19fe:	18e2      	adds	r2, r4, r3
    CellularAtReq_t atReqGetSimLockStatus =
    1a00:	9208      	str	r2, [sp, #32]
    1a02:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        sizeof( CellularSimCardLockState_t ),
    };

    /* pContext is checked in _Cellular_CheckLibraryStatus function. */
    cellularStatus = _Cellular_CheckLibraryStatus( pContext );
    1a06:	4b1a      	ldr	r3, [pc, #104]	; (1a70 <Cellular_GetSimCardStatus+0xa4>)
    1a08:	4798      	blx	r3

    if( cellularStatus != CELLULAR_SUCCESS )
    1a0a:	4603      	mov	r3, r0
    1a0c:	b9a0      	cbnz	r0, 1a38 <Cellular_GetSimCardStatus+0x6c>
    {
        LogDebug( ( "_Cellular_CheckLibraryStatus failed" ) );
    }
    else if( pSimCardStatus == NULL )
    1a0e:	b30c      	cbz	r4, 1a54 <Cellular_GetSimCardStatus+0x88>
        cellularStatus = CELLULAR_BAD_PARAMETER;
    }
    else
    {
        /* Initialize the sim state and the sim lock state. */
        pSimCardStatus->simCardState = CELLULAR_SIM_CARD_UNKNOWN;
    1a10:	2303      	movs	r3, #3
    1a12:	7023      	strb	r3, [r4, #0]
        pSimCardStatus->simCardLockState = CELLULAR_SIM_CARD_LOCK_UNKNOWN;
    1a14:	2310      	movs	r3, #16
    1a16:	7063      	strb	r3, [r4, #1]

        pktStatus = _Cellular_AtcmdRequestWithCallback( pContext, atReqGetSimCardStatus );
    1a18:	ab10      	add	r3, sp, #64	; 0x40
    1a1a:	e913 0007 	ldmdb	r3, {r0, r1, r2}
    1a1e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
    1a22:	ab0a      	add	r3, sp, #40	; 0x28
    1a24:	cb0e      	ldmia	r3, {r1, r2, r3}
    1a26:	4628      	mov	r0, r5
    1a28:	4c12      	ldr	r4, [pc, #72]	; (1a74 <Cellular_GetSimCardStatus+0xa8>)
    1a2a:	47a0      	blx	r4

        if( pktStatus == CELLULAR_PKT_STATUS_OK )
    1a2c:	4603      	mov	r3, r0
    1a2e:	b130      	cbz	r0, 1a3e <Cellular_GetSimCardStatus+0x72>
        {
            pktStatus = _Cellular_AtcmdRequestWithCallback( pContext, atReqGetSimLockStatus );
        }

        cellularStatus = _Cellular_TranslatePktStatus( pktStatus );
    1a30:	4618      	mov	r0, r3
    1a32:	4b11      	ldr	r3, [pc, #68]	; (1a78 <Cellular_GetSimCardStatus+0xac>)
    1a34:	4798      	blx	r3
    1a36:	4603      	mov	r3, r0
        LogDebug( ( "_Cellular_GetSimStatus, Sim Insert State[%d], Lock State[%d]",
                    pSimCardStatus->simCardState, pSimCardStatus->simCardLockState ) );
    }

    return cellularStatus;
}
    1a38:	4618      	mov	r0, r3
    1a3a:	b011      	add	sp, #68	; 0x44
    1a3c:	bd30      	pop	{r4, r5, pc}
            pktStatus = _Cellular_AtcmdRequestWithCallback( pContext, atReqGetSimLockStatus );
    1a3e:	ab07      	add	r3, sp, #28
    1a40:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    1a44:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
    1a48:	ab04      	add	r3, sp, #16
    1a4a:	cb0e      	ldmia	r3, {r1, r2, r3}
    1a4c:	4628      	mov	r0, r5
    1a4e:	47a0      	blx	r4
    1a50:	4603      	mov	r3, r0
    1a52:	e7ed      	b.n	1a30 <Cellular_GetSimCardStatus+0x64>
        cellularStatus = CELLULAR_BAD_PARAMETER;
    1a54:	2305      	movs	r3, #5
    1a56:	e7ef      	b.n	1a38 <Cellular_GetSimCardStatus+0x6c>
    1a58:	0000b0a0 	.word	0x0000b0a0
    1a5c:	0000b0b0 	.word	0x0000b0b0
    1a60:	00001689 	.word	0x00001689
    1a64:	0000b0bc 	.word	0x0000b0bc
    1a68:	0000b0c8 	.word	0x0000b0c8
    1a6c:	0000134d 	.word	0x0000134d
    1a70:	000038dd 	.word	0x000038dd
    1a74:	00003ed1 	.word	0x00003ed1
    1a78:	0000395d 	.word	0x0000395d

00001a7c <Cellular_Init>:

/*-----------------------------------------------------------*/

CellularError_t Cellular_Init( CellularHandle_t * pCellularHandle,
                               const CellularCommInterface_t * pCommInterface )
{
    1a7c:	b500      	push	{lr}
    1a7e:	b08b      	sub	sp, #44	; 0x2c
    CellularTokenTable_t cellularTokenTable =
    1a80:	4b0e      	ldr	r3, [pc, #56]	; (1abc <Cellular_Init+0x40>)
    1a82:	9300      	str	r3, [sp, #0]
    1a84:	4b0e      	ldr	r3, [pc, #56]	; (1ac0 <Cellular_Init+0x44>)
    1a86:	681b      	ldr	r3, [r3, #0]
    1a88:	9301      	str	r3, [sp, #4]
    1a8a:	4b0e      	ldr	r3, [pc, #56]	; (1ac4 <Cellular_Init+0x48>)
    1a8c:	9302      	str	r3, [sp, #8]
    1a8e:	4b0e      	ldr	r3, [pc, #56]	; (1ac8 <Cellular_Init+0x4c>)
    1a90:	681b      	ldr	r3, [r3, #0]
    1a92:	9303      	str	r3, [sp, #12]
    1a94:	4b0d      	ldr	r3, [pc, #52]	; (1acc <Cellular_Init+0x50>)
    1a96:	9304      	str	r3, [sp, #16]
    1a98:	4b0d      	ldr	r3, [pc, #52]	; (1ad0 <Cellular_Init+0x54>)
    1a9a:	681b      	ldr	r3, [r3, #0]
    1a9c:	9305      	str	r3, [sp, #20]
    1a9e:	4b0d      	ldr	r3, [pc, #52]	; (1ad4 <Cellular_Init+0x58>)
    1aa0:	9306      	str	r3, [sp, #24]
    1aa2:	4b0d      	ldr	r3, [pc, #52]	; (1ad8 <Cellular_Init+0x5c>)
    1aa4:	681b      	ldr	r3, [r3, #0]
    1aa6:	9307      	str	r3, [sp, #28]
    1aa8:	2300      	movs	r3, #0
    1aaa:	9308      	str	r3, [sp, #32]
    1aac:	9309      	str	r3, [sp, #36]	; 0x24
        .cellularUrcTokenWoPrefixTableSize     = CellularUrcTokenWoPrefixTableSize,
        .pCellularSrcExtraTokenSuccessTable    = NULL,
        .cellularSrcExtraTokenSuccessTableSize = 0
    };

    return Cellular_CommonInit( pCellularHandle, pCommInterface, &cellularTokenTable );
    1aae:	466a      	mov	r2, sp
    1ab0:	4b0a      	ldr	r3, [pc, #40]	; (1adc <Cellular_Init+0x60>)
    1ab2:	4798      	blx	r3
}
    1ab4:	b00b      	add	sp, #44	; 0x2c
    1ab6:	f85d fb04 	ldr.w	pc, [sp], #4
    1aba:	bf00      	nop
    1abc:	20000050 	.word	0x20000050
    1ac0:	2000004c 	.word	0x2000004c
    1ac4:	20000028 	.word	0x20000028
    1ac8:	20000024 	.word	0x20000024
    1acc:	20000014 	.word	0x20000014
    1ad0:	20000010 	.word	0x20000010
    1ad4:	20000004 	.word	0x20000004
    1ad8:	20000000 	.word	0x20000000
    1adc:	00003f09 	.word	0x00003f09

00001ae0 <_informDataReadyToUpperLayer>:
}

/*-----------------------------------------------------------*/

static void _informDataReadyToUpperLayer( CellularSocketContext_t * pSocketData )
{
    1ae0:	b510      	push	{r4, lr}
    /* Indicate the upper layer about the data reception. */
    if( ( pSocketData != NULL ) && ( pSocketData->dataReadyCallback != NULL ) )
    1ae2:	b130      	cbz	r0, 1af2 <_informDataReadyToUpperLayer+0x12>
    1ae4:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    1ae8:	b11a      	cbz	r2, 1af2 <_informDataReadyToUpperLayer+0x12>
    {
        pSocketData->dataReadyCallback( pSocketData, pSocketData->pDataReadyCallbackContext );
    1aea:	f8d0 10a4 	ldr.w	r1, [r0, #164]	; 0xa4
    1aee:	4790      	blx	r2
    1af0:	bd10      	pop	{r4, pc}
    }
    else
    {
        LogError( ( ( "_parseSocketUrc: Data ready callback not set!!" ) ) );
    1af2:	f240 1375 	movw	r3, #373	; 0x175
    1af6:	4a05      	ldr	r2, [pc, #20]	; (1b0c <_informDataReadyToUpperLayer+0x2c>)
    1af8:	4905      	ldr	r1, [pc, #20]	; (1b10 <_informDataReadyToUpperLayer+0x30>)
    1afa:	4806      	ldr	r0, [pc, #24]	; (1b14 <_informDataReadyToUpperLayer+0x34>)
    1afc:	4c06      	ldr	r4, [pc, #24]	; (1b18 <_informDataReadyToUpperLayer+0x38>)
    1afe:	47a0      	blx	r4
    1b00:	4806      	ldr	r0, [pc, #24]	; (1b1c <_informDataReadyToUpperLayer+0x3c>)
    1b02:	47a0      	blx	r4
    1b04:	4806      	ldr	r0, [pc, #24]	; (1b20 <_informDataReadyToUpperLayer+0x40>)
    1b06:	47a0      	blx	r4
    1b08:	bd10      	pop	{r4, pc}
    1b0a:	bf00      	nop
    1b0c:	0000b154 	.word	0x0000b154
    1b10:	0000b258 	.word	0x0000b258
    1b14:	0000a188 	.word	0x0000a188
    1b18:	00005bfd 	.word	0x00005bfd
    1b1c:	0000b264 	.word	0x0000b264
    1b20:	0000dcf4 	.word	0x0000dcf4

00001b24 <_Cellular_ProcessModemRdy>:

/* Cellular common prototype. */
/* coverity[misra_c_2012_rule_8_13_violation] */
static void _Cellular_ProcessModemRdy( CellularContext_t * pContext,
                                       char * pInputLine )
{
    1b24:	b510      	push	{r4, lr}
    /* The token is the pInputLine. No need to process the pInputLine. */
    ( void ) pInputLine;

    if( pContext == NULL )
    1b26:	b118      	cbz	r0, 1b30 <_Cellular_ProcessModemRdy+0xc>
        LogWarn( ( "_Cellular_ProcessModemRdy: Context not set" ) );
    }
    else
    {
        LogDebug( ( "_Cellular_ProcessModemRdy: Modem Ready event received" ) );
        _Cellular_ModemEventCallback( pContext, CELLULAR_MODEM_EVENT_BOOTUP_OR_REBOOT );
    1b28:	2100      	movs	r1, #0
    1b2a:	4b07      	ldr	r3, [pc, #28]	; (1b48 <_Cellular_ProcessModemRdy+0x24>)
    1b2c:	4798      	blx	r3
    1b2e:	bd10      	pop	{r4, pc}
        LogWarn( ( "_Cellular_ProcessModemRdy: Context not set" ) );
    1b30:	f240 23e3 	movw	r3, #739	; 0x2e3
    1b34:	4a05      	ldr	r2, [pc, #20]	; (1b4c <_Cellular_ProcessModemRdy+0x28>)
    1b36:	4906      	ldr	r1, [pc, #24]	; (1b50 <_Cellular_ProcessModemRdy+0x2c>)
    1b38:	4806      	ldr	r0, [pc, #24]	; (1b54 <_Cellular_ProcessModemRdy+0x30>)
    1b3a:	4c07      	ldr	r4, [pc, #28]	; (1b58 <_Cellular_ProcessModemRdy+0x34>)
    1b3c:	47a0      	blx	r4
    1b3e:	4807      	ldr	r0, [pc, #28]	; (1b5c <_Cellular_ProcessModemRdy+0x38>)
    1b40:	47a0      	blx	r4
    1b42:	4807      	ldr	r0, [pc, #28]	; (1b60 <_Cellular_ProcessModemRdy+0x3c>)
    1b44:	47a0      	blx	r4
    1b46:	bd10      	pop	{r4, pc}
    1b48:	00003c15 	.word	0x00003c15
    1b4c:	0000b174 	.word	0x0000b174
    1b50:	0000b258 	.word	0x0000b258
    1b54:	0000b058 	.word	0x0000b058
    1b58:	00005bfd 	.word	0x00005bfd
    1b5c:	0000b294 	.word	0x0000b294
    1b60:	0000dcf4 	.word	0x0000dcf4

00001b64 <_Cellular_ProcessPsmPowerDown>:
{
    1b64:	b510      	push	{r4, lr}
    if( pContext == NULL )
    1b66:	b118      	cbz	r0, 1b70 <_Cellular_ProcessPsmPowerDown+0xc>
        _Cellular_ModemEventCallback( pContext, CELLULAR_MODEM_EVENT_PSM_ENTER );
    1b68:	2102      	movs	r1, #2
    1b6a:	4b07      	ldr	r3, [pc, #28]	; (1b88 <_Cellular_ProcessPsmPowerDown+0x24>)
    1b6c:	4798      	blx	r3
    1b6e:	bd10      	pop	{r4, pc}
        LogError( ( ( "_Cellular_ProcessPowerDown: Context not set" ) ) );
    1b70:	f240 23ce 	movw	r3, #718	; 0x2ce
    1b74:	4a05      	ldr	r2, [pc, #20]	; (1b8c <_Cellular_ProcessPsmPowerDown+0x28>)
    1b76:	4906      	ldr	r1, [pc, #24]	; (1b90 <_Cellular_ProcessPsmPowerDown+0x2c>)
    1b78:	4806      	ldr	r0, [pc, #24]	; (1b94 <_Cellular_ProcessPsmPowerDown+0x30>)
    1b7a:	4c07      	ldr	r4, [pc, #28]	; (1b98 <_Cellular_ProcessPsmPowerDown+0x34>)
    1b7c:	47a0      	blx	r4
    1b7e:	4807      	ldr	r0, [pc, #28]	; (1b9c <_Cellular_ProcessPsmPowerDown+0x38>)
    1b80:	47a0      	blx	r4
    1b82:	4807      	ldr	r0, [pc, #28]	; (1ba0 <_Cellular_ProcessPsmPowerDown+0x3c>)
    1b84:	47a0      	blx	r4
    1b86:	bd10      	pop	{r4, pc}
    1b88:	00003c15 	.word	0x00003c15
    1b8c:	0000b190 	.word	0x0000b190
    1b90:	0000b258 	.word	0x0000b258
    1b94:	0000a188 	.word	0x0000a188
    1b98:	00005bfd 	.word	0x00005bfd
    1b9c:	0000b2c0 	.word	0x0000b2c0
    1ba0:	0000dcf4 	.word	0x0000dcf4

00001ba4 <_Cellular_ProcessPowerDown>:
{
    1ba4:	b510      	push	{r4, lr}
    if( pContext == NULL )
    1ba6:	b118      	cbz	r0, 1bb0 <_Cellular_ProcessPowerDown+0xc>
        _Cellular_ModemEventCallback( pContext, CELLULAR_MODEM_EVENT_POWERED_DOWN );
    1ba8:	2101      	movs	r1, #1
    1baa:	4b07      	ldr	r3, [pc, #28]	; (1bc8 <_Cellular_ProcessPowerDown+0x24>)
    1bac:	4798      	blx	r3
    1bae:	bd10      	pop	{r4, pc}
        LogError( ( ( "_Cellular_ProcessPowerDown: Context not set" ) ) );
    1bb0:	f240 23b9 	movw	r3, #697	; 0x2b9
    1bb4:	4a05      	ldr	r2, [pc, #20]	; (1bcc <_Cellular_ProcessPowerDown+0x28>)
    1bb6:	4906      	ldr	r1, [pc, #24]	; (1bd0 <_Cellular_ProcessPowerDown+0x2c>)
    1bb8:	4806      	ldr	r0, [pc, #24]	; (1bd4 <_Cellular_ProcessPowerDown+0x30>)
    1bba:	4c07      	ldr	r4, [pc, #28]	; (1bd8 <_Cellular_ProcessPowerDown+0x34>)
    1bbc:	47a0      	blx	r4
    1bbe:	4807      	ldr	r0, [pc, #28]	; (1bdc <_Cellular_ProcessPowerDown+0x38>)
    1bc0:	47a0      	blx	r4
    1bc2:	4807      	ldr	r0, [pc, #28]	; (1be0 <_Cellular_ProcessPowerDown+0x3c>)
    1bc4:	47a0      	blx	r4
    1bc6:	bd10      	pop	{r4, pc}
    1bc8:	00003c15 	.word	0x00003c15
    1bcc:	0000b1b0 	.word	0x0000b1b0
    1bd0:	0000b258 	.word	0x0000b258
    1bd4:	0000a188 	.word	0x0000a188
    1bd8:	00005bfd 	.word	0x00005bfd
    1bdc:	0000b2c0 	.word	0x0000b2c0
    1be0:	0000dcf4 	.word	0x0000dcf4

00001be4 <_parseSocketOpenNextTok>:
{
    1be4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1be6:	b083      	sub	sp, #12
    1be8:	460e      	mov	r6, r1
    1bea:	4614      	mov	r4, r2
    int32_t sockStatus = 0;
    1bec:	aa02      	add	r2, sp, #8
    1bee:	2300      	movs	r3, #0
    1bf0:	f842 3d04 	str.w	r3, [r2, #-4]!
    atCoreStatus = Cellular_ATStrtoi( pToken, 10, &sockStatus );
    1bf4:	210a      	movs	r1, #10
    1bf6:	4b1c      	ldr	r3, [pc, #112]	; (1c68 <_parseSocketOpenNextTok+0x84>)
    1bf8:	4798      	blx	r3
    if( atCoreStatus == CELLULAR_AT_SUCCESS )
    1bfa:	4605      	mov	r5, r0
    1bfc:	b968      	cbnz	r0, 1c1a <_parseSocketOpenNextTok+0x36>
        if( sockStatus != 0 )
    1bfe:	9b01      	ldr	r3, [sp, #4]
    1c00:	b983      	cbnz	r3, 1c24 <_parseSocketOpenNextTok+0x40>
            pSocketData->socketState = SOCKETSTATE_CONNECTED;
    1c02:	2302      	movs	r3, #2
    1c04:	7223      	strb	r3, [r4, #8]
        if( pSocketData->openCallback != NULL )
    1c06:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
    1c0a:	b303      	cbz	r3, 1c4e <_parseSocketOpenNextTok+0x6a>
            if( sockStatus != 0 )
    1c0c:	9a01      	ldr	r2, [sp, #4]
    1c0e:	b1c2      	cbz	r2, 1c42 <_parseSocketOpenNextTok+0x5e>
                pSocketData->openCallback( CELLULAR_URC_SOCKET_OPEN_FAILED,
    1c10:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
    1c14:	4621      	mov	r1, r4
    1c16:	2006      	movs	r0, #6
    1c18:	4798      	blx	r3
    pktStatus = _Cellular_TranslateAtCoreStatus( atCoreStatus );
    1c1a:	4628      	mov	r0, r5
    1c1c:	4b13      	ldr	r3, [pc, #76]	; (1c6c <_parseSocketOpenNextTok+0x88>)
    1c1e:	4798      	blx	r3
}
    1c20:	b003      	add	sp, #12
    1c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
            pSocketData->socketState = SOCKETSTATE_DISCONNECTED;
    1c24:	2303      	movs	r3, #3
    1c26:	7223      	strb	r3, [r4, #8]
            LogError( ( "_parseSocketOpen: Socket open failed, conn %d, status %d", (int)sockIndex, (int)sockStatus ) );
    1c28:	2363      	movs	r3, #99	; 0x63
    1c2a:	4a11      	ldr	r2, [pc, #68]	; (1c70 <_parseSocketOpenNextTok+0x8c>)
    1c2c:	4911      	ldr	r1, [pc, #68]	; (1c74 <_parseSocketOpenNextTok+0x90>)
    1c2e:	4812      	ldr	r0, [pc, #72]	; (1c78 <_parseSocketOpenNextTok+0x94>)
    1c30:	4f12      	ldr	r7, [pc, #72]	; (1c7c <_parseSocketOpenNextTok+0x98>)
    1c32:	47b8      	blx	r7
    1c34:	9a01      	ldr	r2, [sp, #4]
    1c36:	4631      	mov	r1, r6
    1c38:	4811      	ldr	r0, [pc, #68]	; (1c80 <_parseSocketOpenNextTok+0x9c>)
    1c3a:	47b8      	blx	r7
    1c3c:	4811      	ldr	r0, [pc, #68]	; (1c84 <_parseSocketOpenNextTok+0xa0>)
    1c3e:	47b8      	blx	r7
    1c40:	e7e1      	b.n	1c06 <_parseSocketOpenNextTok+0x22>
                pSocketData->openCallback( CELLULAR_URC_SOCKET_OPENED,
    1c42:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
    1c46:	4621      	mov	r1, r4
    1c48:	2005      	movs	r0, #5
    1c4a:	4798      	blx	r3
    1c4c:	e7e5      	b.n	1c1a <_parseSocketOpenNextTok+0x36>
            LogError( ( "_parseSocketOpen: Socket open callback for conn %d is not set!!", (int)sockIndex ) );
    1c4e:	237b      	movs	r3, #123	; 0x7b
    1c50:	4a07      	ldr	r2, [pc, #28]	; (1c70 <_parseSocketOpenNextTok+0x8c>)
    1c52:	4908      	ldr	r1, [pc, #32]	; (1c74 <_parseSocketOpenNextTok+0x90>)
    1c54:	4808      	ldr	r0, [pc, #32]	; (1c78 <_parseSocketOpenNextTok+0x94>)
    1c56:	4c09      	ldr	r4, [pc, #36]	; (1c7c <_parseSocketOpenNextTok+0x98>)
    1c58:	47a0      	blx	r4
    1c5a:	4631      	mov	r1, r6
    1c5c:	480a      	ldr	r0, [pc, #40]	; (1c88 <_parseSocketOpenNextTok+0xa4>)
    1c5e:	47a0      	blx	r4
    1c60:	4808      	ldr	r0, [pc, #32]	; (1c84 <_parseSocketOpenNextTok+0xa0>)
    1c62:	47a0      	blx	r4
    1c64:	e7d9      	b.n	1c1a <_parseSocketOpenNextTok+0x36>
    1c66:	bf00      	nop
    1c68:	00003751 	.word	0x00003751
    1c6c:	00003a95 	.word	0x00003a95
    1c70:	0000b1cc 	.word	0x0000b1cc
    1c74:	0000b258 	.word	0x0000b258
    1c78:	0000a188 	.word	0x0000a188
    1c7c:	00005bfd 	.word	0x00005bfd
    1c80:	0000b2ec 	.word	0x0000b2ec
    1c84:	0000dcf4 	.word	0x0000dcf4
    1c88:	0000b328 	.word	0x0000b328

00001c8c <_parseSocketUrcRecv>:
{
    1c8c:	b530      	push	{r4, r5, lr}
    1c8e:	b085      	sub	sp, #20
    1c90:	4605      	mov	r5, r0
    char * pToken = NULL;
    1c92:	2300      	movs	r3, #0
    1c94:	9303      	str	r3, [sp, #12]
    char * pLocalUrcStr = pUrcStr;
    1c96:	9102      	str	r1, [sp, #8]
    int32_t tempValue = 0;
    1c98:	9301      	str	r3, [sp, #4]
    atCoreStatus = Cellular_ATGetNextTok( &pLocalUrcStr, &pToken );
    1c9a:	a903      	add	r1, sp, #12
    1c9c:	a802      	add	r0, sp, #8
    1c9e:	4b1b      	ldr	r3, [pc, #108]	; (1d0c <_parseSocketUrcRecv+0x80>)
    1ca0:	4798      	blx	r3
    if( atCoreStatus == CELLULAR_AT_SUCCESS )
    1ca2:	b138      	cbz	r0, 1cb4 <_parseSocketUrcRecv+0x28>
    1ca4:	4604      	mov	r4, r0
    uint32_t sockIndex = 0;
    1ca6:	2100      	movs	r1, #0
    if( atCoreStatus == CELLULAR_AT_SUCCESS )
    1ca8:	b1fc      	cbz	r4, 1cea <_parseSocketUrcRecv+0x5e>
    if( atCoreStatus != CELLULAR_AT_SUCCESS )
    1caa:	2c00      	cmp	r4, #0
    1cac:	d12a      	bne.n	1d04 <_parseSocketUrcRecv+0x78>
    CellularPktStatus_t pktStatus = CELLULAR_PKT_STATUS_OK;
    1cae:	2000      	movs	r0, #0
}
    1cb0:	b005      	add	sp, #20
    1cb2:	bd30      	pop	{r4, r5, pc}
        atCoreStatus = Cellular_ATStrtoi( pToken, 10, &tempValue );
    1cb4:	aa01      	add	r2, sp, #4
    1cb6:	210a      	movs	r1, #10
    1cb8:	9803      	ldr	r0, [sp, #12]
    1cba:	4b15      	ldr	r3, [pc, #84]	; (1d10 <_parseSocketUrcRecv+0x84>)
    1cbc:	4798      	blx	r3
        if( atCoreStatus == CELLULAR_AT_SUCCESS )
    1cbe:	4604      	mov	r4, r0
    1cc0:	b988      	cbnz	r0, 1ce6 <_parseSocketUrcRecv+0x5a>
            if( ( tempValue >= 0 ) && ( tempValue < ( int32_t ) CELLULAR_NUM_SOCKET_MAX ) )
    1cc2:	9901      	ldr	r1, [sp, #4]
    1cc4:	290b      	cmp	r1, #11
    1cc6:	d9ef      	bls.n	1ca8 <_parseSocketUrcRecv+0x1c>
                LogError( ( "Error in processing SockIndex. Token %s", pToken ) );
    1cc8:	f44f 73ca 	mov.w	r3, #404	; 0x194
    1ccc:	4a11      	ldr	r2, [pc, #68]	; (1d14 <_parseSocketUrcRecv+0x88>)
    1cce:	4912      	ldr	r1, [pc, #72]	; (1d18 <_parseSocketUrcRecv+0x8c>)
    1cd0:	4812      	ldr	r0, [pc, #72]	; (1d1c <_parseSocketUrcRecv+0x90>)
    1cd2:	4c13      	ldr	r4, [pc, #76]	; (1d20 <_parseSocketUrcRecv+0x94>)
    1cd4:	47a0      	blx	r4
    1cd6:	9903      	ldr	r1, [sp, #12]
    1cd8:	4812      	ldr	r0, [pc, #72]	; (1d24 <_parseSocketUrcRecv+0x98>)
    1cda:	47a0      	blx	r4
    1cdc:	4812      	ldr	r0, [pc, #72]	; (1d28 <_parseSocketUrcRecv+0x9c>)
    1cde:	47a0      	blx	r4
                atCoreStatus = CELLULAR_AT_ERROR;
    1ce0:	2405      	movs	r4, #5
    uint32_t sockIndex = 0;
    1ce2:	2100      	movs	r1, #0
    1ce4:	e7e0      	b.n	1ca8 <_parseSocketUrcRecv+0x1c>
    1ce6:	2100      	movs	r1, #0
    1ce8:	e7de      	b.n	1ca8 <_parseSocketUrcRecv+0x1c>
        pSocketData = _Cellular_GetSocketData( pContext, sockIndex );
    1cea:	4628      	mov	r0, r5
    1cec:	4b0f      	ldr	r3, [pc, #60]	; (1d2c <_parseSocketUrcRecv+0xa0>)
    1cee:	4798      	blx	r3
        if( pSocketData != NULL )
    1cf0:	b130      	cbz	r0, 1d00 <_parseSocketUrcRecv+0x74>
            if( pSocketData->dataMode == CELLULAR_ACCESSMODE_BUFFER )
    1cf2:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
    1cf6:	2a00      	cmp	r2, #0
    1cf8:	d1d7      	bne.n	1caa <_parseSocketUrcRecv+0x1e>
                _informDataReadyToUpperLayer( pSocketData );
    1cfa:	4b0d      	ldr	r3, [pc, #52]	; (1d30 <_parseSocketUrcRecv+0xa4>)
    1cfc:	4798      	blx	r3
    1cfe:	e7d4      	b.n	1caa <_parseSocketUrcRecv+0x1e>
            atCoreStatus = CELLULAR_AT_ERROR;
    1d00:	2405      	movs	r4, #5
    1d02:	e7d2      	b.n	1caa <_parseSocketUrcRecv+0x1e>
        pktStatus = _Cellular_TranslateAtCoreStatus( atCoreStatus );
    1d04:	4620      	mov	r0, r4
    1d06:	4b0b      	ldr	r3, [pc, #44]	; (1d34 <_parseSocketUrcRecv+0xa8>)
    1d08:	4798      	blx	r3
    1d0a:	e7d1      	b.n	1cb0 <_parseSocketUrcRecv+0x24>
    1d0c:	00003631 	.word	0x00003631
    1d10:	00003751 	.word	0x00003751
    1d14:	0000b1e4 	.word	0x0000b1e4
    1d18:	0000b258 	.word	0x0000b258
    1d1c:	0000a188 	.word	0x0000a188
    1d20:	00005bfd 	.word	0x00005bfd
    1d24:	0000b368 	.word	0x0000b368
    1d28:	0000dcf4 	.word	0x0000dcf4
    1d2c:	00003c2d 	.word	0x00003c2d
    1d30:	00001ae1 	.word	0x00001ae1
    1d34:	00003a95 	.word	0x00003a95

00001d38 <_parseSocketUrcClosed>:
{
    1d38:	b530      	push	{r4, r5, lr}
    1d3a:	b085      	sub	sp, #20
    1d3c:	4605      	mov	r5, r0
    char * pToken = NULL;
    1d3e:	2300      	movs	r3, #0
    1d40:	9303      	str	r3, [sp, #12]
    char * pLocalUrcStr = pUrcStr;
    1d42:	9102      	str	r1, [sp, #8]
    int32_t tempValue = 0;
    1d44:	9301      	str	r3, [sp, #4]
    atCoreStatus = Cellular_ATGetNextTok( &pLocalUrcStr, &pToken );
    1d46:	a903      	add	r1, sp, #12
    1d48:	a802      	add	r0, sp, #8
    1d4a:	4b21      	ldr	r3, [pc, #132]	; (1dd0 <_parseSocketUrcClosed+0x98>)
    1d4c:	4798      	blx	r3
    if( atCoreStatus == CELLULAR_AT_SUCCESS )
    1d4e:	4604      	mov	r4, r0
    1d50:	b190      	cbz	r0, 1d78 <_parseSocketUrcClosed+0x40>
    if( atCoreStatus == CELLULAR_AT_SUCCESS )
    1d52:	b9c4      	cbnz	r4, 1d86 <_parseSocketUrcClosed+0x4e>
        if( tempValue < ( int32_t ) CELLULAR_NUM_SOCKET_MAX )
    1d54:	9901      	ldr	r1, [sp, #4]
    1d56:	290b      	cmp	r1, #11
    1d58:	dd16      	ble.n	1d88 <_parseSocketUrcClosed+0x50>
            LogError( ( "Error in processing Socket Index. Token %s", pToken ) );
    1d5a:	f240 13d1 	movw	r3, #465	; 0x1d1
    1d5e:	4a1d      	ldr	r2, [pc, #116]	; (1dd4 <_parseSocketUrcClosed+0x9c>)
    1d60:	491d      	ldr	r1, [pc, #116]	; (1dd8 <_parseSocketUrcClosed+0xa0>)
    1d62:	481e      	ldr	r0, [pc, #120]	; (1ddc <_parseSocketUrcClosed+0xa4>)
    1d64:	4c1e      	ldr	r4, [pc, #120]	; (1de0 <_parseSocketUrcClosed+0xa8>)
    1d66:	47a0      	blx	r4
    1d68:	9903      	ldr	r1, [sp, #12]
    1d6a:	481e      	ldr	r0, [pc, #120]	; (1de4 <_parseSocketUrcClosed+0xac>)
    1d6c:	47a0      	blx	r4
    1d6e:	481e      	ldr	r0, [pc, #120]	; (1de8 <_parseSocketUrcClosed+0xb0>)
    1d70:	47a0      	blx	r4
            atCoreStatus = CELLULAR_AT_ERROR;
    1d72:	2405      	movs	r4, #5
    uint32_t sockIndex = 0;
    1d74:	2100      	movs	r1, #0
    1d76:	e007      	b.n	1d88 <_parseSocketUrcClosed+0x50>
        atCoreStatus = Cellular_ATStrtoi( pToken, 10, &tempValue );
    1d78:	aa01      	add	r2, sp, #4
    1d7a:	210a      	movs	r1, #10
    1d7c:	9803      	ldr	r0, [sp, #12]
    1d7e:	4b1b      	ldr	r3, [pc, #108]	; (1dec <_parseSocketUrcClosed+0xb4>)
    1d80:	4798      	blx	r3
    1d82:	4604      	mov	r4, r0
    1d84:	e7e5      	b.n	1d52 <_parseSocketUrcClosed+0x1a>
    uint32_t sockIndex = 0;
    1d86:	2100      	movs	r1, #0
    if( atCoreStatus == CELLULAR_AT_SUCCESS )
    1d88:	b11c      	cbz	r4, 1d92 <_parseSocketUrcClosed+0x5a>
    if( atCoreStatus != CELLULAR_AT_SUCCESS )
    1d8a:	b9ec      	cbnz	r4, 1dc8 <_parseSocketUrcClosed+0x90>
    CellularPktStatus_t pktStatus = CELLULAR_PKT_STATUS_OK;
    1d8c:	2000      	movs	r0, #0
}
    1d8e:	b005      	add	sp, #20
    1d90:	bd30      	pop	{r4, r5, pc}
        pSocketData = _Cellular_GetSocketData( pContext, sockIndex );
    1d92:	4628      	mov	r0, r5
    1d94:	4b16      	ldr	r3, [pc, #88]	; (1df0 <_parseSocketUrcClosed+0xb8>)
    1d96:	4798      	blx	r3
        if( pSocketData != NULL )
    1d98:	b1a0      	cbz	r0, 1dc4 <_parseSocketUrcClosed+0x8c>
            pSocketData->socketState = SOCKETSTATE_DISCONNECTED;
    1d9a:	2203      	movs	r2, #3
    1d9c:	7202      	strb	r2, [r0, #8]
            if( pSocketData->closedCallback != NULL )
    1d9e:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
    1da2:	b11a      	cbz	r2, 1dac <_parseSocketUrcClosed+0x74>
                pSocketData->closedCallback( pSocketData, pSocketData->pClosedCallbackContext );
    1da4:	f8d0 10b4 	ldr.w	r1, [r0, #180]	; 0xb4
    1da8:	4790      	blx	r2
    1daa:	e7ee      	b.n	1d8a <_parseSocketUrcClosed+0x52>
                LogInfo( ( "_parseSocketUrc: Socket close callback not set!!" ) );
    1dac:	f44f 73f3 	mov.w	r3, #486	; 0x1e6
    1db0:	4a08      	ldr	r2, [pc, #32]	; (1dd4 <_parseSocketUrcClosed+0x9c>)
    1db2:	4909      	ldr	r1, [pc, #36]	; (1dd8 <_parseSocketUrcClosed+0xa0>)
    1db4:	480f      	ldr	r0, [pc, #60]	; (1df4 <_parseSocketUrcClosed+0xbc>)
    1db6:	4d0a      	ldr	r5, [pc, #40]	; (1de0 <_parseSocketUrcClosed+0xa8>)
    1db8:	47a8      	blx	r5
    1dba:	480f      	ldr	r0, [pc, #60]	; (1df8 <_parseSocketUrcClosed+0xc0>)
    1dbc:	47a8      	blx	r5
    1dbe:	480a      	ldr	r0, [pc, #40]	; (1de8 <_parseSocketUrcClosed+0xb0>)
    1dc0:	47a8      	blx	r5
    1dc2:	e7e2      	b.n	1d8a <_parseSocketUrcClosed+0x52>
            atCoreStatus = CELLULAR_AT_ERROR;
    1dc4:	2405      	movs	r4, #5
    1dc6:	e7e0      	b.n	1d8a <_parseSocketUrcClosed+0x52>
        pktStatus = _Cellular_TranslateAtCoreStatus( atCoreStatus );
    1dc8:	4620      	mov	r0, r4
    1dca:	4b0c      	ldr	r3, [pc, #48]	; (1dfc <_parseSocketUrcClosed+0xc4>)
    1dcc:	4798      	blx	r3
    1dce:	e7de      	b.n	1d8e <_parseSocketUrcClosed+0x56>
    1dd0:	00003631 	.word	0x00003631
    1dd4:	0000b1f8 	.word	0x0000b1f8
    1dd8:	0000b258 	.word	0x0000b258
    1ddc:	0000a188 	.word	0x0000a188
    1de0:	00005bfd 	.word	0x00005bfd
    1de4:	0000b390 	.word	0x0000b390
    1de8:	0000dcf4 	.word	0x0000dcf4
    1dec:	00003751 	.word	0x00003751
    1df0:	00003c2d 	.word	0x00003c2d
    1df4:	0000aae8 	.word	0x0000aae8
    1df8:	0000b3bc 	.word	0x0000b3bc
    1dfc:	00003a95 	.word	0x00003a95

00001e00 <_parseSocketUrcAct>:
{
    1e00:	b570      	push	{r4, r5, r6, lr}
    1e02:	b084      	sub	sp, #16
    1e04:	4606      	mov	r6, r0
    int32_t tempValue = 0;
    1e06:	2300      	movs	r3, #0
    1e08:	9303      	str	r3, [sp, #12]
    char * pToken = NULL;
    1e0a:	9302      	str	r3, [sp, #8]
    char * pLocalUrcStr = pUrcStr;
    1e0c:	9101      	str	r1, [sp, #4]
    atCoreStatus = Cellular_ATGetNextTok( &pLocalUrcStr, &pToken );
    1e0e:	a902      	add	r1, sp, #8
    1e10:	a801      	add	r0, sp, #4
    1e12:	4b17      	ldr	r3, [pc, #92]	; (1e70 <_parseSocketUrcAct+0x70>)
    1e14:	4798      	blx	r3
    if( atCoreStatus == CELLULAR_AT_SUCCESS )
    1e16:	4604      	mov	r4, r0
    1e18:	b158      	cbz	r0, 1e32 <_parseSocketUrcAct+0x32>
    if( atCoreStatus == CELLULAR_AT_SUCCESS )
    1e1a:	bb24      	cbnz	r4, 1e66 <_parseSocketUrcAct+0x66>
        if( ( ( tempValue >= ( int32_t ) CELLULAR_PDN_CONTEXT_ID_MIN ) &&
    1e1c:	9d03      	ldr	r5, [sp, #12]
    1e1e:	1e6b      	subs	r3, r5, #1
    1e20:	2b0f      	cmp	r3, #15
    1e22:	d813      	bhi.n	1e4c <_parseSocketUrcAct+0x4c>
            contextId = ( uint8_t ) tempValue;
    1e24:	b2ed      	uxtb	r5, r5
            if( _Cellular_IsValidPdn( contextId ) == CELLULAR_SUCCESS )
    1e26:	4628      	mov	r0, r5
    1e28:	4b12      	ldr	r3, [pc, #72]	; (1e74 <_parseSocketUrcAct+0x74>)
    1e2a:	4798      	blx	r3
    1e2c:	b140      	cbz	r0, 1e40 <_parseSocketUrcAct+0x40>
                atCoreStatus = CELLULAR_AT_ERROR;
    1e2e:	2405      	movs	r4, #5
    1e30:	e019      	b.n	1e66 <_parseSocketUrcAct+0x66>
        atCoreStatus = Cellular_ATStrtoi( pToken, 10, &tempValue );
    1e32:	aa03      	add	r2, sp, #12
    1e34:	210a      	movs	r1, #10
    1e36:	9802      	ldr	r0, [sp, #8]
    1e38:	4b0f      	ldr	r3, [pc, #60]	; (1e78 <_parseSocketUrcAct+0x78>)
    1e3a:	4798      	blx	r3
    1e3c:	4604      	mov	r4, r0
    1e3e:	e7ec      	b.n	1e1a <_parseSocketUrcAct+0x1a>
                _Cellular_PdnEventCallback( pContext, CELLULAR_URC_EVENT_PDN_DEACTIVATED, contextId );
    1e40:	462a      	mov	r2, r5
    1e42:	2103      	movs	r1, #3
    1e44:	4630      	mov	r0, r6
    1e46:	4b0d      	ldr	r3, [pc, #52]	; (1e7c <_parseSocketUrcAct+0x7c>)
    1e48:	4798      	blx	r3
    1e4a:	e00c      	b.n	1e66 <_parseSocketUrcAct+0x66>
            LogError( ( "Error in processing Context Id. Token %s", pToken ) );
    1e4c:	f240 231f 	movw	r3, #543	; 0x21f
    1e50:	4a0b      	ldr	r2, [pc, #44]	; (1e80 <_parseSocketUrcAct+0x80>)
    1e52:	490c      	ldr	r1, [pc, #48]	; (1e84 <_parseSocketUrcAct+0x84>)
    1e54:	480c      	ldr	r0, [pc, #48]	; (1e88 <_parseSocketUrcAct+0x88>)
    1e56:	4c0d      	ldr	r4, [pc, #52]	; (1e8c <_parseSocketUrcAct+0x8c>)
    1e58:	47a0      	blx	r4
    1e5a:	9902      	ldr	r1, [sp, #8]
    1e5c:	480c      	ldr	r0, [pc, #48]	; (1e90 <_parseSocketUrcAct+0x90>)
    1e5e:	47a0      	blx	r4
    1e60:	480c      	ldr	r0, [pc, #48]	; (1e94 <_parseSocketUrcAct+0x94>)
    1e62:	47a0      	blx	r4
            atCoreStatus = CELLULAR_AT_ERROR;
    1e64:	2405      	movs	r4, #5
    pktStatus = _Cellular_TranslateAtCoreStatus( atCoreStatus );
    1e66:	4620      	mov	r0, r4
    1e68:	4b0b      	ldr	r3, [pc, #44]	; (1e98 <_parseSocketUrcAct+0x98>)
    1e6a:	4798      	blx	r3
}
    1e6c:	b004      	add	sp, #16
    1e6e:	bd70      	pop	{r4, r5, r6, pc}
    1e70:	00003631 	.word	0x00003631
    1e74:	00003add 	.word	0x00003add
    1e78:	00003751 	.word	0x00003751
    1e7c:	00003bc5 	.word	0x00003bc5
    1e80:	0000b210 	.word	0x0000b210
    1e84:	0000b258 	.word	0x0000b258
    1e88:	0000a188 	.word	0x0000a188
    1e8c:	00005bfd 	.word	0x00005bfd
    1e90:	0000b3f0 	.word	0x0000b3f0
    1e94:	0000dcf4 	.word	0x0000dcf4
    1e98:	00003a95 	.word	0x00003a95

00001e9c <_parseSocketUrcDns>:
{
    1e9c:	b530      	push	{r4, r5, lr}
    1e9e:	b083      	sub	sp, #12
    1ea0:	460d      	mov	r5, r1
    cellularModuleContext_t * pModuleContext = NULL;
    1ea2:	2300      	movs	r3, #0
    1ea4:	9301      	str	r3, [sp, #4]
    if( pContext == NULL )
    1ea6:	b178      	cbz	r0, 1ec8 <_parseSocketUrcDns+0x2c>
    else if( pUrcStr == NULL )
    1ea8:	b181      	cbz	r1, 1ecc <_parseSocketUrcDns+0x30>
        cellularStatus = _Cellular_GetModuleContext( pContext, ( void ** ) &pModuleContext );
    1eaa:	a901      	add	r1, sp, #4
    1eac:	4b0a      	ldr	r3, [pc, #40]	; (1ed8 <_parseSocketUrcDns+0x3c>)
    1eae:	4798      	blx	r3
        if( cellularStatus != CELLULAR_SUCCESS )
    1eb0:	b970      	cbnz	r0, 1ed0 <_parseSocketUrcDns+0x34>
    CellularPktStatus_t pktStatus = CELLULAR_PKT_STATUS_OK;
    1eb2:	2400      	movs	r4, #0
    if( pktStatus == CELLULAR_PKT_STATUS_OK )
    1eb4:	b92c      	cbnz	r4, 1ec2 <_parseSocketUrcDns+0x26>
        if( pModuleContext->dnsEventCallback != NULL )
    1eb6:	9801      	ldr	r0, [sp, #4]
    1eb8:	6e43      	ldr	r3, [r0, #100]	; 0x64
    1eba:	b15b      	cbz	r3, 1ed4 <_parseSocketUrcDns+0x38>
            pModuleContext->dnsEventCallback( pModuleContext, pUrcStr, pModuleContext->pDnsUsrData );
    1ebc:	6e02      	ldr	r2, [r0, #96]	; 0x60
    1ebe:	4629      	mov	r1, r5
    1ec0:	4798      	blx	r3
}
    1ec2:	4620      	mov	r0, r4
    1ec4:	b003      	add	sp, #12
    1ec6:	bd30      	pop	{r4, r5, pc}
        pktStatus = CELLULAR_PKT_STATUS_INVALID_HANDLE;
    1ec8:	2408      	movs	r4, #8
    1eca:	e7f3      	b.n	1eb4 <_parseSocketUrcDns+0x18>
        pktStatus = CELLULAR_PKT_STATUS_BAD_PARAM;
    1ecc:	2406      	movs	r4, #6
    1ece:	e7f1      	b.n	1eb4 <_parseSocketUrcDns+0x18>
            pktStatus = CELLULAR_PKT_STATUS_INVALID_HANDLE;
    1ed0:	2408      	movs	r4, #8
    1ed2:	e7ef      	b.n	1eb4 <_parseSocketUrcDns+0x18>
            pktStatus = CELLULAR_PKT_STATUS_INVALID_DATA;
    1ed4:	240b      	movs	r4, #11
    1ed6:	e7f4      	b.n	1ec2 <_parseSocketUrcDns+0x26>
    1ed8:	00003b99 	.word	0x00003b99

00001edc <_Cellular_ProcessSocketurc>:
{
    1edc:	b570      	push	{r4, r5, r6, lr}
    1ede:	b082      	sub	sp, #8
    char * pUrcStr = NULL, * pToken = NULL;
    1ee0:	2300      	movs	r3, #0
    1ee2:	9300      	str	r3, [sp, #0]
    if( pContext == NULL )
    1ee4:	b1a8      	cbz	r0, 1f12 <_Cellular_ProcessSocketurc+0x36>
    1ee6:	4605      	mov	r5, r0
    else if( pInputLine == NULL )
    1ee8:	b199      	cbz	r1, 1f12 <_Cellular_ProcessSocketurc+0x36>
    1eea:	4608      	mov	r0, r1
        pUrcStr = pInputLine;
    1eec:	9101      	str	r1, [sp, #4]
        atCoreStatus = Cellular_ATRemoveAllDoubleQuote( pUrcStr );
    1eee:	4b21      	ldr	r3, [pc, #132]	; (1f74 <_Cellular_ProcessSocketurc+0x98>)
    1ef0:	4798      	blx	r3
        if( atCoreStatus == CELLULAR_AT_SUCCESS )
    1ef2:	4604      	mov	r4, r0
    1ef4:	b178      	cbz	r0, 1f16 <_Cellular_ProcessSocketurc+0x3a>
        if( atCoreStatus == CELLULAR_AT_SUCCESS )
    1ef6:	b19c      	cbz	r4, 1f20 <_Cellular_ProcessSocketurc+0x44>
        if( atCoreStatus == CELLULAR_AT_SUCCESS )
    1ef8:	b94c      	cbnz	r4, 1f0e <_Cellular_ProcessSocketurc+0x32>
            if( strstr( pToken, "recv" ) != NULL )
    1efa:	9e00      	ldr	r6, [sp, #0]
    1efc:	491e      	ldr	r1, [pc, #120]	; (1f78 <_Cellular_ProcessSocketurc+0x9c>)
    1efe:	4630      	mov	r0, r6
    1f00:	4b1e      	ldr	r3, [pc, #120]	; (1f7c <_Cellular_ProcessSocketurc+0xa0>)
    1f02:	4798      	blx	r3
    1f04:	b190      	cbz	r0, 1f2c <_Cellular_ProcessSocketurc+0x50>
                pktStatus = _parseSocketUrcRecv( pContext, pUrcStr );
    1f06:	9901      	ldr	r1, [sp, #4]
    1f08:	4628      	mov	r0, r5
    1f0a:	4b1d      	ldr	r3, [pc, #116]	; (1f80 <_Cellular_ProcessSocketurc+0xa4>)
    1f0c:	4798      	blx	r3
        if( atCoreStatus != CELLULAR_AT_SUCCESS )
    1f0e:	2c00      	cmp	r4, #0
    1f10:	d12b      	bne.n	1f6a <_Cellular_ProcessSocketurc+0x8e>
}
    1f12:	b002      	add	sp, #8
    1f14:	bd70      	pop	{r4, r5, r6, pc}
            atCoreStatus = Cellular_ATRemoveLeadingWhiteSpaces( &pUrcStr );
    1f16:	a801      	add	r0, sp, #4
    1f18:	4b1a      	ldr	r3, [pc, #104]	; (1f84 <_Cellular_ProcessSocketurc+0xa8>)
    1f1a:	4798      	blx	r3
    1f1c:	4604      	mov	r4, r0
    1f1e:	e7ea      	b.n	1ef6 <_Cellular_ProcessSocketurc+0x1a>
            atCoreStatus = Cellular_ATGetNextTok( &pUrcStr, &pToken );
    1f20:	4669      	mov	r1, sp
    1f22:	a801      	add	r0, sp, #4
    1f24:	4b18      	ldr	r3, [pc, #96]	; (1f88 <_Cellular_ProcessSocketurc+0xac>)
    1f26:	4798      	blx	r3
    1f28:	4604      	mov	r4, r0
    1f2a:	e7e5      	b.n	1ef8 <_Cellular_ProcessSocketurc+0x1c>
            else if( strcmp( pToken, "closed" ) == 0 )
    1f2c:	4917      	ldr	r1, [pc, #92]	; (1f8c <_Cellular_ProcessSocketurc+0xb0>)
    1f2e:	4630      	mov	r0, r6
    1f30:	4b17      	ldr	r3, [pc, #92]	; (1f90 <_Cellular_ProcessSocketurc+0xb4>)
    1f32:	4798      	blx	r3
    1f34:	b178      	cbz	r0, 1f56 <_Cellular_ProcessSocketurc+0x7a>
            else if( strcmp( pToken, "pdpdeact" ) == 0 )
    1f36:	4917      	ldr	r1, [pc, #92]	; (1f94 <_Cellular_ProcessSocketurc+0xb8>)
    1f38:	4630      	mov	r0, r6
    1f3a:	4b15      	ldr	r3, [pc, #84]	; (1f90 <_Cellular_ProcessSocketurc+0xb4>)
    1f3c:	4798      	blx	r3
    1f3e:	b178      	cbz	r0, 1f60 <_Cellular_ProcessSocketurc+0x84>
            else if( strcmp( pToken, "dnsgip" ) == 0 )
    1f40:	4915      	ldr	r1, [pc, #84]	; (1f98 <_Cellular_ProcessSocketurc+0xbc>)
    1f42:	4630      	mov	r0, r6
    1f44:	4b12      	ldr	r3, [pc, #72]	; (1f90 <_Cellular_ProcessSocketurc+0xb4>)
    1f46:	4798      	blx	r3
    1f48:	2800      	cmp	r0, #0
    1f4a:	d1e0      	bne.n	1f0e <_Cellular_ProcessSocketurc+0x32>
                pktStatus = _parseSocketUrcDns( pContext, pUrcStr );
    1f4c:	9901      	ldr	r1, [sp, #4]
    1f4e:	4628      	mov	r0, r5
    1f50:	4b12      	ldr	r3, [pc, #72]	; (1f9c <_Cellular_ProcessSocketurc+0xc0>)
    1f52:	4798      	blx	r3
    1f54:	e7db      	b.n	1f0e <_Cellular_ProcessSocketurc+0x32>
                pktStatus = _parseSocketUrcClosed( pContext, pUrcStr );
    1f56:	9901      	ldr	r1, [sp, #4]
    1f58:	4628      	mov	r0, r5
    1f5a:	4b11      	ldr	r3, [pc, #68]	; (1fa0 <_Cellular_ProcessSocketurc+0xc4>)
    1f5c:	4798      	blx	r3
    1f5e:	e7d6      	b.n	1f0e <_Cellular_ProcessSocketurc+0x32>
                pktStatus = _parseSocketUrcAct( pContext, pUrcStr );
    1f60:	9901      	ldr	r1, [sp, #4]
    1f62:	4628      	mov	r0, r5
    1f64:	4b0f      	ldr	r3, [pc, #60]	; (1fa4 <_Cellular_ProcessSocketurc+0xc8>)
    1f66:	4798      	blx	r3
    1f68:	e7d1      	b.n	1f0e <_Cellular_ProcessSocketurc+0x32>
            pktStatus = _Cellular_TranslateAtCoreStatus( atCoreStatus );
    1f6a:	4620      	mov	r0, r4
    1f6c:	4b0e      	ldr	r3, [pc, #56]	; (1fa8 <_Cellular_ProcessSocketurc+0xcc>)
    1f6e:	4798      	blx	r3
}
    1f70:	e7cf      	b.n	1f12 <_Cellular_ProcessSocketurc+0x36>
    1f72:	bf00      	nop
    1f74:	00003529 	.word	0x00003529
    1f78:	0000b41c 	.word	0x0000b41c
    1f7c:	00008e8d 	.word	0x00008e8d
    1f80:	00001c8d 	.word	0x00001c8d
    1f84:	00003461 	.word	0x00003461
    1f88:	00003631 	.word	0x00003631
    1f8c:	0000b424 	.word	0x0000b424
    1f90:	00008ddd 	.word	0x00008ddd
    1f94:	0000b42c 	.word	0x0000b42c
    1f98:	0000b438 	.word	0x0000b438
    1f9c:	00001e9d 	.word	0x00001e9d
    1fa0:	00001d39 	.word	0x00001d39
    1fa4:	00001e01 	.word	0x00001e01
    1fa8:	00003a95 	.word	0x00003a95

00001fac <_Cellular_ProcessSocketOpen>:
{
    1fac:	b570      	push	{r4, r5, r6, lr}
    1fae:	b084      	sub	sp, #16
    char * pUrcStr = NULL, * pToken = NULL;
    1fb0:	2300      	movs	r3, #0
    1fb2:	9302      	str	r3, [sp, #8]
    int32_t tempValue = 0;
    1fb4:	9301      	str	r3, [sp, #4]
    if( pContext == NULL )
    1fb6:	2800      	cmp	r0, #0
    1fb8:	d02a      	beq.n	2010 <_Cellular_ProcessSocketOpen+0x64>
    1fba:	4606      	mov	r6, r0
    else if( pInputLine == NULL )
    1fbc:	b341      	cbz	r1, 2010 <_Cellular_ProcessSocketOpen+0x64>
    1fbe:	4608      	mov	r0, r1
        pUrcStr = pInputLine;
    1fc0:	9103      	str	r1, [sp, #12]
        atCoreStatus = Cellular_ATRemoveAllWhiteSpaces( pUrcStr );
    1fc2:	4b20      	ldr	r3, [pc, #128]	; (2044 <_Cellular_ProcessSocketOpen+0x98>)
    1fc4:	4798      	blx	r3
        if( atCoreStatus == CELLULAR_AT_SUCCESS )
    1fc6:	4604      	mov	r4, r0
    1fc8:	b190      	cbz	r0, 1ff0 <_Cellular_ProcessSocketOpen+0x44>
        if( atCoreStatus == CELLULAR_AT_SUCCESS )
    1fca:	b1bc      	cbz	r4, 1ffc <_Cellular_ProcessSocketOpen+0x50>
        if( atCoreStatus == CELLULAR_AT_SUCCESS )
    1fcc:	b9ec      	cbnz	r4, 200a <_Cellular_ProcessSocketOpen+0x5e>
            if( ( tempValue >= 0 ) &&
    1fce:	9d01      	ldr	r5, [sp, #4]
    1fd0:	2d0b      	cmp	r5, #11
    1fd2:	d91b      	bls.n	200c <_Cellular_ProcessSocketOpen+0x60>
                LogError( ( "Error processing in Socket index. token %s", pToken ) );
    1fd4:	23b1      	movs	r3, #177	; 0xb1
    1fd6:	4a1c      	ldr	r2, [pc, #112]	; (2048 <_Cellular_ProcessSocketOpen+0x9c>)
    1fd8:	491c      	ldr	r1, [pc, #112]	; (204c <_Cellular_ProcessSocketOpen+0xa0>)
    1fda:	481d      	ldr	r0, [pc, #116]	; (2050 <_Cellular_ProcessSocketOpen+0xa4>)
    1fdc:	4c1d      	ldr	r4, [pc, #116]	; (2054 <_Cellular_ProcessSocketOpen+0xa8>)
    1fde:	47a0      	blx	r4
    1fe0:	9902      	ldr	r1, [sp, #8]
    1fe2:	481d      	ldr	r0, [pc, #116]	; (2058 <_Cellular_ProcessSocketOpen+0xac>)
    1fe4:	47a0      	blx	r4
    1fe6:	481d      	ldr	r0, [pc, #116]	; (205c <_Cellular_ProcessSocketOpen+0xb0>)
    1fe8:	47a0      	blx	r4
    uint32_t sockIndex = 0;
    1fea:	2500      	movs	r5, #0
                atCoreStatus = CELLULAR_AT_ERROR;
    1fec:	2405      	movs	r4, #5
    1fee:	e00d      	b.n	200c <_Cellular_ProcessSocketOpen+0x60>
            atCoreStatus = Cellular_ATGetNextTok( &pUrcStr, &pToken );
    1ff0:	a902      	add	r1, sp, #8
    1ff2:	a803      	add	r0, sp, #12
    1ff4:	4b1a      	ldr	r3, [pc, #104]	; (2060 <_Cellular_ProcessSocketOpen+0xb4>)
    1ff6:	4798      	blx	r3
    1ff8:	4604      	mov	r4, r0
    1ffa:	e7e6      	b.n	1fca <_Cellular_ProcessSocketOpen+0x1e>
            atCoreStatus = Cellular_ATStrtoi( pToken, 10, &tempValue );
    1ffc:	aa01      	add	r2, sp, #4
    1ffe:	210a      	movs	r1, #10
    2000:	9802      	ldr	r0, [sp, #8]
    2002:	4b18      	ldr	r3, [pc, #96]	; (2064 <_Cellular_ProcessSocketOpen+0xb8>)
    2004:	4798      	blx	r3
    2006:	4604      	mov	r4, r0
    2008:	e7e0      	b.n	1fcc <_Cellular_ProcessSocketOpen+0x20>
    uint32_t sockIndex = 0;
    200a:	2500      	movs	r5, #0
        if( atCoreStatus == CELLULAR_AT_SUCCESS )
    200c:	b114      	cbz	r4, 2014 <_Cellular_ProcessSocketOpen+0x68>
        if( atCoreStatus != CELLULAR_AT_SUCCESS )
    200e:	b9ac      	cbnz	r4, 203c <_Cellular_ProcessSocketOpen+0x90>
}
    2010:	b004      	add	sp, #16
    2012:	bd70      	pop	{r4, r5, r6, pc}
            pSocketData = _Cellular_GetSocketData( pContext, sockIndex );
    2014:	4629      	mov	r1, r5
    2016:	4630      	mov	r0, r6
    2018:	4b13      	ldr	r3, [pc, #76]	; (2068 <_Cellular_ProcessSocketOpen+0xbc>)
    201a:	4798      	blx	r3
            if( pSocketData != NULL )
    201c:	4606      	mov	r6, r0
    201e:	2800      	cmp	r0, #0
    2020:	d0f5      	beq.n	200e <_Cellular_ProcessSocketOpen+0x62>
                atCoreStatus = Cellular_ATGetNextTok( &pUrcStr, &pToken );
    2022:	a902      	add	r1, sp, #8
    2024:	a803      	add	r0, sp, #12
    2026:	4b0e      	ldr	r3, [pc, #56]	; (2060 <_Cellular_ProcessSocketOpen+0xb4>)
    2028:	4798      	blx	r3
                if( atCoreStatus == CELLULAR_AT_SUCCESS )
    202a:	4604      	mov	r4, r0
    202c:	2800      	cmp	r0, #0
    202e:	d1ee      	bne.n	200e <_Cellular_ProcessSocketOpen+0x62>
                    pktStatus = _parseSocketOpenNextTok( pToken, sockIndex, pSocketData );
    2030:	4632      	mov	r2, r6
    2032:	4629      	mov	r1, r5
    2034:	9802      	ldr	r0, [sp, #8]
    2036:	4b0d      	ldr	r3, [pc, #52]	; (206c <_Cellular_ProcessSocketOpen+0xc0>)
    2038:	4798      	blx	r3
    203a:	e7e8      	b.n	200e <_Cellular_ProcessSocketOpen+0x62>
            pktStatus = _Cellular_TranslateAtCoreStatus( atCoreStatus );
    203c:	4620      	mov	r0, r4
    203e:	4b0c      	ldr	r3, [pc, #48]	; (2070 <_Cellular_ProcessSocketOpen+0xc4>)
    2040:	4798      	blx	r3
}
    2042:	e7e5      	b.n	2010 <_Cellular_ProcessSocketOpen+0x64>
    2044:	000034c5 	.word	0x000034c5
    2048:	0000b224 	.word	0x0000b224
    204c:	0000b258 	.word	0x0000b258
    2050:	0000a188 	.word	0x0000a188
    2054:	00005bfd 	.word	0x00005bfd
    2058:	0000b440 	.word	0x0000b440
    205c:	0000dcf4 	.word	0x0000dcf4
    2060:	00003631 	.word	0x00003631
    2064:	00003751 	.word	0x00003751
    2068:	00003c2d 	.word	0x00003c2d
    206c:	00001be5 	.word	0x00001be5
    2070:	00003a95 	.word	0x00003a95

00002074 <_parseUrcIndicationCsq>:
{
    2074:	b530      	push	{r4, r5, lr}
    2076:	b089      	sub	sp, #36	; 0x24
    char * pToken = NULL;
    2078:	2300      	movs	r3, #0
    207a:	9307      	str	r3, [sp, #28]
    int32_t retStrtoi = 0;
    207c:	9306      	str	r3, [sp, #24]
    int16_t csqRssi = CELLULAR_INVALID_SIGNAL_VALUE, csqBer = CELLULAR_INVALID_SIGNAL_VALUE;
    207e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2082:	f8ad 2016 	strh.w	r2, [sp, #22]
    2086:	f8ad 2014 	strh.w	r2, [sp, #20]
    CellularSignalInfo_t signalInfo = { 0 };
    208a:	9302      	str	r3, [sp, #8]
    208c:	9303      	str	r3, [sp, #12]
    208e:	9304      	str	r3, [sp, #16]
    char * pLocalUrcStr = pUrcStr;
    2090:	9101      	str	r1, [sp, #4]
    if( ( pContext == NULL ) || ( pUrcStr == NULL ) )
    2092:	4605      	mov	r5, r0
    2094:	b1f8      	cbz	r0, 20d6 <_parseUrcIndicationCsq+0x62>
    2096:	b301      	cbz	r1, 20da <_parseUrcIndicationCsq+0x66>
        atCoreStatus = Cellular_ATGetNextTok( &pLocalUrcStr, &pToken );
    2098:	a907      	add	r1, sp, #28
    209a:	a801      	add	r0, sp, #4
    209c:	4b30      	ldr	r3, [pc, #192]	; (2160 <_parseUrcIndicationCsq+0xec>)
    209e:	4798      	blx	r3
    20a0:	4604      	mov	r4, r0
    if( atCoreStatus == CELLULAR_AT_SUCCESS )
    20a2:	b1e4      	cbz	r4, 20de <_parseUrcIndicationCsq+0x6a>
    if( atCoreStatus == CELLULAR_AT_SUCCESS )
    20a4:	b934      	cbnz	r4, 20b4 <_parseUrcIndicationCsq+0x40>
        if( ( retStrtoi >= INT16_MIN ) && ( retStrtoi <= ( int32_t ) INT16_MAX ) )
    20a6:	9806      	ldr	r0, [sp, #24]
    20a8:	f500 4300 	add.w	r3, r0, #32768	; 0x8000
    20ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    20b0:	d31c      	bcc.n	20ec <_parseUrcIndicationCsq+0x78>
            atCoreStatus = CELLULAR_AT_ERROR;
    20b2:	2405      	movs	r4, #5
    if( atCoreStatus == CELLULAR_AT_SUCCESS )
    20b4:	b31c      	cbz	r4, 20fe <_parseUrcIndicationCsq+0x8a>
    if( atCoreStatus == CELLULAR_AT_SUCCESS )
    20b6:	b344      	cbz	r4, 210a <_parseUrcIndicationCsq+0x96>
    if( atCoreStatus == CELLULAR_AT_SUCCESS )
    20b8:	b934      	cbnz	r4, 20c8 <_parseUrcIndicationCsq+0x54>
        if( ( retStrtoi >= INT16_MIN ) &&
    20ba:	9806      	ldr	r0, [sp, #24]
    20bc:	f500 4300 	add.w	r3, r0, #32768	; 0x8000
    20c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    20c4:	d328      	bcc.n	2118 <_parseUrcIndicationCsq+0xa4>
            atCoreStatus = CELLULAR_AT_ERROR;
    20c6:	2405      	movs	r4, #5
    if( atCoreStatus == CELLULAR_AT_SUCCESS )
    20c8:	2c00      	cmp	r4, #0
    20ca:	d02d      	beq.n	2128 <_parseUrcIndicationCsq+0xb4>
    if( atCoreStatus != CELLULAR_AT_SUCCESS )
    20cc:	2c00      	cmp	r4, #0
    20ce:	d142      	bne.n	2156 <_parseUrcIndicationCsq+0xe2>
    CellularPktStatus_t pktStatus = CELLULAR_PKT_STATUS_OK;
    20d0:	2000      	movs	r0, #0
}
    20d2:	b009      	add	sp, #36	; 0x24
    20d4:	bd30      	pop	{r4, r5, pc}
        atCoreStatus = CELLULAR_AT_BAD_PARAMETER;
    20d6:	2401      	movs	r4, #1
    20d8:	e7e3      	b.n	20a2 <_parseUrcIndicationCsq+0x2e>
    20da:	2401      	movs	r4, #1
    20dc:	e7e1      	b.n	20a2 <_parseUrcIndicationCsq+0x2e>
        atCoreStatus = Cellular_ATStrtoi( pToken, 10, &retStrtoi );
    20de:	aa06      	add	r2, sp, #24
    20e0:	210a      	movs	r1, #10
    20e2:	9807      	ldr	r0, [sp, #28]
    20e4:	4b1f      	ldr	r3, [pc, #124]	; (2164 <_parseUrcIndicationCsq+0xf0>)
    20e6:	4798      	blx	r3
    20e8:	4604      	mov	r4, r0
    20ea:	e7db      	b.n	20a4 <_parseUrcIndicationCsq+0x30>
            cellularStatus = _Cellular_ConvertCsqSignalRssi( ( int16_t ) retStrtoi, &csqRssi );
    20ec:	f10d 0116 	add.w	r1, sp, #22
    20f0:	b200      	sxth	r0, r0
    20f2:	4b1d      	ldr	r3, [pc, #116]	; (2168 <_parseUrcIndicationCsq+0xf4>)
    20f4:	4798      	blx	r3
            if( cellularStatus != CELLULAR_SUCCESS )
    20f6:	2800      	cmp	r0, #0
    20f8:	d0dc      	beq.n	20b4 <_parseUrcIndicationCsq+0x40>
                atCoreStatus = CELLULAR_AT_BAD_PARAMETER;
    20fa:	2401      	movs	r4, #1
    20fc:	e7da      	b.n	20b4 <_parseUrcIndicationCsq+0x40>
        atCoreStatus = Cellular_ATGetNextTok( &pLocalUrcStr, &pToken );
    20fe:	a907      	add	r1, sp, #28
    2100:	a801      	add	r0, sp, #4
    2102:	4b17      	ldr	r3, [pc, #92]	; (2160 <_parseUrcIndicationCsq+0xec>)
    2104:	4798      	blx	r3
    2106:	4604      	mov	r4, r0
    2108:	e7d5      	b.n	20b6 <_parseUrcIndicationCsq+0x42>
        atCoreStatus = Cellular_ATStrtoi( pToken, 10, &retStrtoi );
    210a:	aa06      	add	r2, sp, #24
    210c:	210a      	movs	r1, #10
    210e:	9807      	ldr	r0, [sp, #28]
    2110:	4b14      	ldr	r3, [pc, #80]	; (2164 <_parseUrcIndicationCsq+0xf0>)
    2112:	4798      	blx	r3
    2114:	4604      	mov	r4, r0
    2116:	e7cf      	b.n	20b8 <_parseUrcIndicationCsq+0x44>
            cellularStatus = _Cellular_ConvertCsqSignalBer( ( int16_t ) retStrtoi, &csqBer );
    2118:	a905      	add	r1, sp, #20
    211a:	b200      	sxth	r0, r0
    211c:	4b13      	ldr	r3, [pc, #76]	; (216c <_parseUrcIndicationCsq+0xf8>)
    211e:	4798      	blx	r3
            if( cellularStatus != CELLULAR_SUCCESS )
    2120:	2800      	cmp	r0, #0
    2122:	d0d1      	beq.n	20c8 <_parseUrcIndicationCsq+0x54>
                atCoreStatus = CELLULAR_AT_BAD_PARAMETER;
    2124:	2401      	movs	r4, #1
    2126:	e7cf      	b.n	20c8 <_parseUrcIndicationCsq+0x54>
        signalInfo.rssi = csqRssi;
    2128:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    212c:	f8ad 3008 	strh.w	r3, [sp, #8]
        signalInfo.rsrp = CELLULAR_INVALID_SIGNAL_VALUE;
    2130:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2134:	f8ad 300a 	strh.w	r3, [sp, #10]
        signalInfo.rsrq = CELLULAR_INVALID_SIGNAL_VALUE;
    2138:	f8ad 300c 	strh.w	r3, [sp, #12]
        signalInfo.ber = csqBer;
    213c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    2140:	f8ad 3010 	strh.w	r3, [sp, #16]
        signalInfo.bars = CELLULAR_INVALID_SIGNAL_BAR_VALUE;
    2144:	23ff      	movs	r3, #255	; 0xff
    2146:	f88d 3012 	strb.w	r3, [sp, #18]
        _Cellular_SignalStrengthChangedCallback( pContext, CELLULAR_URC_EVENT_SIGNAL_CHANGED, &signalInfo );
    214a:	aa02      	add	r2, sp, #8
    214c:	2104      	movs	r1, #4
    214e:	4628      	mov	r0, r5
    2150:	4b07      	ldr	r3, [pc, #28]	; (2170 <_parseUrcIndicationCsq+0xfc>)
    2152:	4798      	blx	r3
    2154:	e7ba      	b.n	20cc <_parseUrcIndicationCsq+0x58>
        pktStatus = _Cellular_TranslateAtCoreStatus( atCoreStatus );
    2156:	4620      	mov	r0, r4
    2158:	4b06      	ldr	r3, [pc, #24]	; (2174 <_parseUrcIndicationCsq+0x100>)
    215a:	4798      	blx	r3
    215c:	e7b9      	b.n	20d2 <_parseUrcIndicationCsq+0x5e>
    215e:	bf00      	nop
    2160:	00003631 	.word	0x00003631
    2164:	00003751 	.word	0x00003751
    2168:	00003b21 	.word	0x00003b21
    216c:	00003b59 	.word	0x00003b59
    2170:	00003be1 	.word	0x00003be1
    2174:	00003a95 	.word	0x00003a95

00002178 <_Cellular_ProcessIndication>:
{
    2178:	b530      	push	{r4, r5, lr}
    217a:	b083      	sub	sp, #12
    char * pUrcStr = NULL, * pToken = NULL;
    217c:	2300      	movs	r3, #0
    217e:	9300      	str	r3, [sp, #0]
    if( pContext == NULL )
    2180:	b198      	cbz	r0, 21aa <_Cellular_ProcessIndication+0x32>
    2182:	4605      	mov	r5, r0
    else if( pInputLine == NULL )
    2184:	b189      	cbz	r1, 21aa <_Cellular_ProcessIndication+0x32>
    2186:	4608      	mov	r0, r1
        pUrcStr = pInputLine;
    2188:	9101      	str	r1, [sp, #4]
        atCoreStatus = Cellular_ATRemoveAllDoubleQuote( pUrcStr );
    218a:	4b10      	ldr	r3, [pc, #64]	; (21cc <_Cellular_ProcessIndication+0x54>)
    218c:	4798      	blx	r3
        if( atCoreStatus == CELLULAR_AT_SUCCESS )
    218e:	4604      	mov	r4, r0
    2190:	b168      	cbz	r0, 21ae <_Cellular_ProcessIndication+0x36>
        if( atCoreStatus == CELLULAR_AT_SUCCESS )
    2192:	b18c      	cbz	r4, 21b8 <_Cellular_ProcessIndication+0x40>
        if( atCoreStatus == CELLULAR_AT_SUCCESS )
    2194:	b944      	cbnz	r4, 21a8 <_Cellular_ProcessIndication+0x30>
            if( strstr( pToken, "csq" ) != NULL )
    2196:	490e      	ldr	r1, [pc, #56]	; (21d0 <_Cellular_ProcessIndication+0x58>)
    2198:	9800      	ldr	r0, [sp, #0]
    219a:	4b0e      	ldr	r3, [pc, #56]	; (21d4 <_Cellular_ProcessIndication+0x5c>)
    219c:	4798      	blx	r3
    219e:	b118      	cbz	r0, 21a8 <_Cellular_ProcessIndication+0x30>
                pktStatus = _parseUrcIndicationCsq( ( const CellularContext_t * ) pContext, pUrcStr );
    21a0:	9901      	ldr	r1, [sp, #4]
    21a2:	4628      	mov	r0, r5
    21a4:	4b0c      	ldr	r3, [pc, #48]	; (21d8 <_Cellular_ProcessIndication+0x60>)
    21a6:	4798      	blx	r3
        if( atCoreStatus != CELLULAR_AT_SUCCESS )
    21a8:	b964      	cbnz	r4, 21c4 <_Cellular_ProcessIndication+0x4c>
}
    21aa:	b003      	add	sp, #12
    21ac:	bd30      	pop	{r4, r5, pc}
            atCoreStatus = Cellular_ATRemoveLeadingWhiteSpaces( &pUrcStr );
    21ae:	a801      	add	r0, sp, #4
    21b0:	4b0a      	ldr	r3, [pc, #40]	; (21dc <_Cellular_ProcessIndication+0x64>)
    21b2:	4798      	blx	r3
    21b4:	4604      	mov	r4, r0
    21b6:	e7ec      	b.n	2192 <_Cellular_ProcessIndication+0x1a>
            atCoreStatus = Cellular_ATGetNextTok( &pUrcStr, &pToken );
    21b8:	4669      	mov	r1, sp
    21ba:	a801      	add	r0, sp, #4
    21bc:	4b08      	ldr	r3, [pc, #32]	; (21e0 <_Cellular_ProcessIndication+0x68>)
    21be:	4798      	blx	r3
    21c0:	4604      	mov	r4, r0
    21c2:	e7e7      	b.n	2194 <_Cellular_ProcessIndication+0x1c>
            pktStatus = _Cellular_TranslateAtCoreStatus( atCoreStatus );
    21c4:	4620      	mov	r0, r4
    21c6:	4b07      	ldr	r3, [pc, #28]	; (21e4 <_Cellular_ProcessIndication+0x6c>)
    21c8:	4798      	blx	r3
}
    21ca:	e7ee      	b.n	21aa <_Cellular_ProcessIndication+0x32>
    21cc:	00003529 	.word	0x00003529
    21d0:	0000b46c 	.word	0x0000b46c
    21d4:	00008e8d 	.word	0x00008e8d
    21d8:	00002075 	.word	0x00002075
    21dc:	00003461 	.word	0x00003461
    21e0:	00003631 	.word	0x00003631
    21e4:	00003a95 	.word	0x00003a95

000021e8 <_Cellular_ParseSimstat>:

/* Cellular common prototype. */
/* coverity[misra_c_2012_rule_8_13_violation] */
CellularPktStatus_t _Cellular_ParseSimstat( char * pInputStr,
                                            CellularSimCardState_t * pSimState )
{
    21e8:	b530      	push	{r4, r5, lr}
    21ea:	b085      	sub	sp, #20
    21ec:	4604      	mov	r4, r0
    CellularPktStatus_t pktStatus = CELLULAR_PKT_STATUS_OK;
    CellularATError_t atCoreStatus = CELLULAR_AT_SUCCESS;
    char * pToken = NULL;
    21ee:	2300      	movs	r3, #0
    21f0:	9303      	str	r3, [sp, #12]
    char * pLocalInputStr = pInputStr;
    21f2:	9002      	str	r0, [sp, #8]
    int32_t tempValue = 0;
    21f4:	9301      	str	r3, [sp, #4]

    if( ( pInputStr == NULL ) || ( strlen( pInputStr ) == 0U ) ||
    21f6:	b110      	cbz	r0, 21fe <_Cellular_ParseSimstat+0x16>
    21f8:	460d      	mov	r5, r1
    21fa:	7803      	ldrb	r3, [r0, #0]
    21fc:	b973      	cbnz	r3, 221c <_Cellular_ParseSimstat+0x34>
        ( strlen( pInputStr ) < 2U ) || ( pSimState == NULL ) )
    {
        LogError( ( "_Cellular_ProcessQsimstat Input data is invalid %s", pInputStr ) );
    21fe:	f44f 733f 	mov.w	r3, #764	; 0x2fc
    2202:	4a1f      	ldr	r2, [pc, #124]	; (2280 <_Cellular_ParseSimstat+0x98>)
    2204:	491f      	ldr	r1, [pc, #124]	; (2284 <_Cellular_ParseSimstat+0x9c>)
    2206:	4820      	ldr	r0, [pc, #128]	; (2288 <_Cellular_ParseSimstat+0xa0>)
    2208:	4d20      	ldr	r5, [pc, #128]	; (228c <_Cellular_ParseSimstat+0xa4>)
    220a:	47a8      	blx	r5
    220c:	4621      	mov	r1, r4
    220e:	4820      	ldr	r0, [pc, #128]	; (2290 <_Cellular_ParseSimstat+0xa8>)
    2210:	47a8      	blx	r5
    2212:	4820      	ldr	r0, [pc, #128]	; (2294 <_Cellular_ParseSimstat+0xac>)
    2214:	47a8      	blx	r5
        pktStatus = CELLULAR_PKT_STATUS_BAD_PARAM;
    2216:	2006      	movs	r0, #6

        pktStatus = _Cellular_TranslateAtCoreStatus( atCoreStatus );
    }

    return pktStatus;
}
    2218:	b005      	add	sp, #20
    221a:	bd30      	pop	{r4, r5, pc}
        ( strlen( pInputStr ) < 2U ) || ( pSimState == NULL ) )
    221c:	4b1e      	ldr	r3, [pc, #120]	; (2298 <_Cellular_ParseSimstat+0xb0>)
    221e:	4798      	blx	r3
    if( ( pInputStr == NULL ) || ( strlen( pInputStr ) == 0U ) ||
    2220:	2801      	cmp	r0, #1
    2222:	d9ec      	bls.n	21fe <_Cellular_ParseSimstat+0x16>
        ( strlen( pInputStr ) < 2U ) || ( pSimState == NULL ) )
    2224:	2d00      	cmp	r5, #0
    2226:	d0ea      	beq.n	21fe <_Cellular_ParseSimstat+0x16>
        atCoreStatus = Cellular_ATGetNextTok( &pLocalInputStr, &pToken );
    2228:	a903      	add	r1, sp, #12
    222a:	a802      	add	r0, sp, #8
    222c:	4b1b      	ldr	r3, [pc, #108]	; (229c <_Cellular_ParseSimstat+0xb4>)
    222e:	4798      	blx	r3
        if( atCoreStatus == CELLULAR_AT_SUCCESS )
    2230:	4603      	mov	r3, r0
    2232:	b1a8      	cbz	r0, 2260 <_Cellular_ParseSimstat+0x78>
        if( atCoreStatus == CELLULAR_AT_SUCCESS )
    2234:	b1d3      	cbz	r3, 226c <_Cellular_ParseSimstat+0x84>
        if( atCoreStatus == CELLULAR_AT_SUCCESS )
    2236:	b97b      	cbnz	r3, 2258 <_Cellular_ParseSimstat+0x70>
            if( ( tempValue >= 0 ) &&
    2238:	9a01      	ldr	r2, [sp, #4]
    223a:	2a01      	cmp	r2, #1
    223c:	d91d      	bls.n	227a <_Cellular_ParseSimstat+0x92>
                LogError( ( "Error in processing SIM state. token %s", pToken ) );
    223e:	f44f 7347 	mov.w	r3, #796	; 0x31c
    2242:	4a0f      	ldr	r2, [pc, #60]	; (2280 <_Cellular_ParseSimstat+0x98>)
    2244:	490f      	ldr	r1, [pc, #60]	; (2284 <_Cellular_ParseSimstat+0x9c>)
    2246:	4810      	ldr	r0, [pc, #64]	; (2288 <_Cellular_ParseSimstat+0xa0>)
    2248:	4c10      	ldr	r4, [pc, #64]	; (228c <_Cellular_ParseSimstat+0xa4>)
    224a:	47a0      	blx	r4
    224c:	9903      	ldr	r1, [sp, #12]
    224e:	4814      	ldr	r0, [pc, #80]	; (22a0 <_Cellular_ParseSimstat+0xb8>)
    2250:	47a0      	blx	r4
    2252:	4810      	ldr	r0, [pc, #64]	; (2294 <_Cellular_ParseSimstat+0xac>)
    2254:	47a0      	blx	r4
                atCoreStatus = CELLULAR_AT_ERROR;
    2256:	2305      	movs	r3, #5
        pktStatus = _Cellular_TranslateAtCoreStatus( atCoreStatus );
    2258:	4618      	mov	r0, r3
    225a:	4b12      	ldr	r3, [pc, #72]	; (22a4 <_Cellular_ParseSimstat+0xbc>)
    225c:	4798      	blx	r3
    225e:	e7db      	b.n	2218 <_Cellular_ParseSimstat+0x30>
            atCoreStatus = Cellular_ATGetNextTok( &pLocalInputStr, &pToken );
    2260:	a903      	add	r1, sp, #12
    2262:	a802      	add	r0, sp, #8
    2264:	4b0d      	ldr	r3, [pc, #52]	; (229c <_Cellular_ParseSimstat+0xb4>)
    2266:	4798      	blx	r3
    2268:	4603      	mov	r3, r0
    226a:	e7e3      	b.n	2234 <_Cellular_ParseSimstat+0x4c>
            atCoreStatus = Cellular_ATStrtoi( pToken, 10, &tempValue );
    226c:	aa01      	add	r2, sp, #4
    226e:	210a      	movs	r1, #10
    2270:	9803      	ldr	r0, [sp, #12]
    2272:	4b0d      	ldr	r3, [pc, #52]	; (22a8 <_Cellular_ParseSimstat+0xc0>)
    2274:	4798      	blx	r3
    2276:	4603      	mov	r3, r0
    2278:	e7dd      	b.n	2236 <_Cellular_ParseSimstat+0x4e>
                *pSimState = ( CellularSimCardState_t ) tempValue;
    227a:	702a      	strb	r2, [r5, #0]
    227c:	e7ec      	b.n	2258 <_Cellular_ParseSimstat+0x70>
    227e:	bf00      	nop
    2280:	0000b240 	.word	0x0000b240
    2284:	0000b258 	.word	0x0000b258
    2288:	0000a188 	.word	0x0000a188
    228c:	00005bfd 	.word	0x00005bfd
    2290:	0000b470 	.word	0x0000b470
    2294:	0000dcf4 	.word	0x0000dcf4
    2298:	00008df1 	.word	0x00008df1
    229c:	00003631 	.word	0x00003631
    22a0:	0000b4a4 	.word	0x0000b4a4
    22a4:	00003a95 	.word	0x00003a95
    22a8:	00003751 	.word	0x00003751

000022ac <_Cellular_ProcessSimstat>:
{
    22ac:	b500      	push	{lr}
    22ae:	b083      	sub	sp, #12
    CellularSimCardState_t simCardState = CELLULAR_SIM_CARD_UNKNOWN;
    22b0:	2303      	movs	r3, #3
    22b2:	f88d 3007 	strb.w	r3, [sp, #7]
    if( pContext != NULL )
    22b6:	b120      	cbz	r0, 22c2 <_Cellular_ProcessSimstat+0x16>
    22b8:	4608      	mov	r0, r1
        ( void ) _Cellular_ParseSimstat( pInputLine, &simCardState );
    22ba:	f10d 0107 	add.w	r1, sp, #7
    22be:	4b02      	ldr	r3, [pc, #8]	; (22c8 <_Cellular_ProcessSimstat+0x1c>)
    22c0:	4798      	blx	r3
}
    22c2:	b003      	add	sp, #12
    22c4:	f85d fb04 	ldr.w	pc, [sp], #4
    22c8:	000021e9 	.word	0x000021e9

000022cc <Cellular_RfOn>:
/*-----------------------------------------------------------*/

/* FreeRTOS Cellular Library API. */
/* coverity[misra_c_2012_rule_8_7_violation] */
CellularError_t Cellular_RfOn( CellularHandle_t cellularHandle )
{
    22cc:	b508      	push	{r3, lr}
    return Cellular_CommonRfOn( cellularHandle );
    22ce:	4b01      	ldr	r3, [pc, #4]	; (22d4 <Cellular_RfOn+0x8>)
    22d0:	4798      	blx	r3
}
    22d2:	bd08      	pop	{r3, pc}
    22d4:	00002899 	.word	0x00002899

000022d8 <Cellular_RfOff>:
/*-----------------------------------------------------------*/

/* FreeRTOS Cellular Library API. */
/* coverity[misra_c_2012_rule_8_7_violation] */
CellularError_t Cellular_RfOff( CellularHandle_t cellularHandle )
{
    22d8:	b508      	push	{r3, lr}
    return Cellular_CommonRfOff( cellularHandle );
    22da:	4b01      	ldr	r3, [pc, #4]	; (22e0 <Cellular_RfOff+0x8>)
    22dc:	4798      	blx	r3
}
    22de:	bd08      	pop	{r3, pc}
    22e0:	000028e9 	.word	0x000028e9

000022e4 <Cellular_GetIPAddress>:
/* coverity[misra_c_2012_rule_8_7_violation] */
CellularError_t Cellular_GetIPAddress( CellularHandle_t cellularHandle,
                                       uint8_t contextId,
                                       char * pBuffer,
                                       uint32_t bufferLength )
{
    22e4:	b510      	push	{r4, lr}
    return Cellular_CommonGetIPAddress( cellularHandle, contextId, pBuffer, bufferLength );
    22e6:	4c01      	ldr	r4, [pc, #4]	; (22ec <Cellular_GetIPAddress+0x8>)
    22e8:	47a0      	blx	r4
}
    22ea:	bd10      	pop	{r4, pc}
    22ec:	00002939 	.word	0x00002939

000022f0 <Cellular_GetServiceStatus>:

/* FreeRTOS Cellular Library API. */
/* coverity[misra_c_2012_rule_8_7_violation] */
CellularError_t Cellular_GetServiceStatus( CellularHandle_t cellularHandle,
                                           CellularServiceStatus_t * pServiceStatus )
{
    22f0:	b508      	push	{r3, lr}
    return Cellular_CommonGetServiceStatus( cellularHandle, pServiceStatus );
    22f2:	4b01      	ldr	r3, [pc, #4]	; (22f8 <Cellular_GetServiceStatus+0x8>)
    22f4:	4798      	blx	r3
}
    22f6:	bd08      	pop	{r3, pc}
    22f8:	00002bb1 	.word	0x00002bb1

000022fc <atcmdUpdateMccMnc>:

/*-----------------------------------------------------------*/

static CellularError_t atcmdUpdateMccMnc( CellularContext_t * pContext,
                                          cellularOperatorInfo_t * pOperatorInfo )
{
    22fc:	b510      	push	{r4, lr}
    22fe:	b08a      	sub	sp, #40	; 0x28
    2300:	4604      	mov	r4, r0
    CellularError_t cellularStatus = CELLULAR_SUCCESS;
    CellularPktStatus_t pktStatus;
    CellularAtReq_t atReqGetMccMnc = { 0 };
    2302:	ab04      	add	r3, sp, #16
    2304:	2200      	movs	r2, #0
    2306:	9205      	str	r2, [sp, #20]
    2308:	9209      	str	r2, [sp, #36]	; 0x24

    atReqGetMccMnc.pAtCmd = "AT+COPS?";
    230a:	4a0d      	ldr	r2, [pc, #52]	; (2340 <atcmdUpdateMccMnc+0x44>)
    230c:	9204      	str	r2, [sp, #16]
    atReqGetMccMnc.atCmdType = CELLULAR_AT_WITH_PREFIX;
    230e:	2202      	movs	r2, #2
    2310:	f88d 2014 	strb.w	r2, [sp, #20]
    atReqGetMccMnc.pAtRspPrefix = "+COPS";
    2314:	4a0b      	ldr	r2, [pc, #44]	; (2344 <atcmdUpdateMccMnc+0x48>)
    2316:	9206      	str	r2, [sp, #24]
    atReqGetMccMnc.respCallback = _Cellular_RecvFuncUpdateMccMnc;
    2318:	4a0b      	ldr	r2, [pc, #44]	; (2348 <atcmdUpdateMccMnc+0x4c>)
    231a:	9207      	str	r2, [sp, #28]
    atReqGetMccMnc.pData = pOperatorInfo;
    231c:	9108      	str	r1, [sp, #32]
    atReqGetMccMnc.dataLen = ( uint16_t ) sizeof( cellularOperatorInfo_t );
    231e:	222c      	movs	r2, #44	; 0x2c
    2320:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24

    pktStatus = _Cellular_AtcmdRequestWithCallback( pContext, atReqGetMccMnc );
    2324:	aa0a      	add	r2, sp, #40	; 0x28
    2326:	e912 0007 	ldmdb	r2, {r0, r1, r2}
    232a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
    232e:	cb0e      	ldmia	r3, {r1, r2, r3}
    2330:	4620      	mov	r0, r4
    2332:	4c06      	ldr	r4, [pc, #24]	; (234c <atcmdUpdateMccMnc+0x50>)
    2334:	47a0      	blx	r4
    cellularStatus = _Cellular_TranslatePktStatus( pktStatus );
    2336:	4b06      	ldr	r3, [pc, #24]	; (2350 <atcmdUpdateMccMnc+0x54>)
    2338:	4798      	blx	r3

    return cellularStatus;
}
    233a:	b00a      	add	sp, #40	; 0x28
    233c:	bd10      	pop	{r4, pc}
    233e:	bf00      	nop
    2340:	0000b9dc 	.word	0x0000b9dc
    2344:	0000b9e8 	.word	0x0000b9e8
    2348:	000027b1 	.word	0x000027b1
    234c:	00003ed1 	.word	0x00003ed1
    2350:	0000395d 	.word	0x0000395d

00002354 <queryNetworkStatus>:
{
    2354:	b510      	push	{r4, lr}
    2356:	b08c      	sub	sp, #48	; 0x30
    CellularNetworkRegType_t recvRegType = regType;
    2358:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    CellularAtReq_t atReqGetResult = { 0 };
    235c:	2300      	movs	r3, #0
    235e:	9305      	str	r3, [sp, #20]
    2360:	9306      	str	r3, [sp, #24]
    2362:	9307      	str	r3, [sp, #28]
    2364:	9308      	str	r3, [sp, #32]
    2366:	9309      	str	r3, [sp, #36]	; 0x24
    2368:	930a      	str	r3, [sp, #40]	; 0x28
    configASSERT( pContext != NULL );
    236a:	b940      	cbnz	r0, 237e <queryNetworkStatus+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI(void)
{
	uint32_t ulNewBASEPRI;

	__asm volatile("	mov %0, %1												\n"
    236c:	f04f 0380 	mov.w	r3, #128	; 0x80
    2370:	f383 8811 	msr	BASEPRI, r3
    2374:	f3bf 8f6f 	isb	sy
    2378:	f3bf 8f4f 	dsb	sy
    237c:	e7fe      	b.n	237c <queryNetworkStatus+0x28>
    237e:	4604      	mov	r4, r0
    atReqGetResult.pAtCmd = pCommand;
    2380:	9105      	str	r1, [sp, #20]
    atReqGetResult.atCmdType = CELLULAR_AT_MULTI_WITH_PREFIX;
    2382:	2303      	movs	r3, #3
    2384:	f88d 3018 	strb.w	r3, [sp, #24]
    atReqGetResult.pAtRspPrefix = pPrefix;
    2388:	9207      	str	r2, [sp, #28]
    atReqGetResult.respCallback = _Cellular_RecvFuncGetNetworkReg;
    238a:	4b0b      	ldr	r3, [pc, #44]	; (23b8 <queryNetworkStatus+0x64>)
    238c:	9308      	str	r3, [sp, #32]
    atReqGetResult.pData = &recvRegType;
    238e:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
    2392:	9309      	str	r3, [sp, #36]	; 0x24
    atReqGetResult.dataLen = ( uint16_t ) sizeof( CellularNetworkRegType_t );
    2394:	2301      	movs	r3, #1
    2396:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    pktStatus = _Cellular_AtcmdRequestWithCallback( pContext, atReqGetResult );
    239a:	ab08      	add	r3, sp, #32
    239c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    23a0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
    23a4:	ab05      	add	r3, sp, #20
    23a6:	cb0e      	ldmia	r3, {r1, r2, r3}
    23a8:	4620      	mov	r0, r4
    23aa:	4c04      	ldr	r4, [pc, #16]	; (23bc <queryNetworkStatus+0x68>)
    23ac:	47a0      	blx	r4
    cellularStatus = _Cellular_TranslatePktStatus( pktStatus );
    23ae:	4b04      	ldr	r3, [pc, #16]	; (23c0 <queryNetworkStatus+0x6c>)
    23b0:	4798      	blx	r3
}
    23b2:	b00c      	add	sp, #48	; 0x30
    23b4:	bd10      	pop	{r4, pc}
    23b6:	bf00      	nop
    23b8:	00002c69 	.word	0x00002c69
    23bc:	00003ed1 	.word	0x00003ed1
    23c0:	0000395d 	.word	0x0000395d

000023c4 <_parseCopsRegModeToken>:
{
    23c4:	b530      	push	{r4, r5, lr}
    23c6:	b083      	sub	sp, #12
    int32_t var = 0;
    23c8:	2300      	movs	r3, #0
    23ca:	9301      	str	r3, [sp, #4]
    if( pToken == NULL )
    23cc:	b160      	cbz	r0, 23e8 <_parseCopsRegModeToken+0x24>
    23ce:	460d      	mov	r5, r1
    23d0:	4604      	mov	r4, r0
        atCoreStatus = Cellular_ATStrtoi( pToken, 10, &var );
    23d2:	aa01      	add	r2, sp, #4
    23d4:	210a      	movs	r1, #10
    23d6:	4b13      	ldr	r3, [pc, #76]	; (2424 <_parseCopsRegModeToken+0x60>)
    23d8:	4798      	blx	r3
        if( atCoreStatus == CELLULAR_AT_SUCCESS )
    23da:	bb00      	cbnz	r0, 241e <_parseCopsRegModeToken+0x5a>
            if( ( var >= 0 ) && ( var < ( int32_t ) REGISTRATION_MODE_MAX ) )
    23dc:	9b01      	ldr	r3, [sp, #4]
    23de:	2b04      	cmp	r3, #4
    23e0:	d80f      	bhi.n	2402 <_parseCopsRegModeToken+0x3e>
                pOperatorInfo->networkRegMode = ( CellularNetworkRegistrationMode_t ) var;
    23e2:	726b      	strb	r3, [r5, #9]
    bool parseStatus = true;
    23e4:	2001      	movs	r0, #1
    23e6:	e01b      	b.n	2420 <_parseCopsRegModeToken+0x5c>
        LogError( ( "_parseCopsRegMode: Input Parameter NULL" ) );
    23e8:	f240 3333 	movw	r3, #819	; 0x333
    23ec:	4a0e      	ldr	r2, [pc, #56]	; (2428 <_parseCopsRegModeToken+0x64>)
    23ee:	490f      	ldr	r1, [pc, #60]	; (242c <_parseCopsRegModeToken+0x68>)
    23f0:	480f      	ldr	r0, [pc, #60]	; (2430 <_parseCopsRegModeToken+0x6c>)
    23f2:	4c10      	ldr	r4, [pc, #64]	; (2434 <_parseCopsRegModeToken+0x70>)
    23f4:	47a0      	blx	r4
    23f6:	4810      	ldr	r0, [pc, #64]	; (2438 <_parseCopsRegModeToken+0x74>)
    23f8:	47a0      	blx	r4
    23fa:	4810      	ldr	r0, [pc, #64]	; (243c <_parseCopsRegModeToken+0x78>)
    23fc:	47a0      	blx	r4
        parseStatus = false;
    23fe:	2000      	movs	r0, #0
    2400:	e00e      	b.n	2420 <_parseCopsRegModeToken+0x5c>
                LogError( ( "_parseCopsRegMode: Error in processing Network Registration mode. Token %s", pToken ) );
    2402:	f240 3346 	movw	r3, #838	; 0x346
    2406:	4a08      	ldr	r2, [pc, #32]	; (2428 <_parseCopsRegModeToken+0x64>)
    2408:	4908      	ldr	r1, [pc, #32]	; (242c <_parseCopsRegModeToken+0x68>)
    240a:	4809      	ldr	r0, [pc, #36]	; (2430 <_parseCopsRegModeToken+0x6c>)
    240c:	4d09      	ldr	r5, [pc, #36]	; (2434 <_parseCopsRegModeToken+0x70>)
    240e:	47a8      	blx	r5
    2410:	4621      	mov	r1, r4
    2412:	480b      	ldr	r0, [pc, #44]	; (2440 <_parseCopsRegModeToken+0x7c>)
    2414:	47a8      	blx	r5
    2416:	4809      	ldr	r0, [pc, #36]	; (243c <_parseCopsRegModeToken+0x78>)
    2418:	47a8      	blx	r5
                parseStatus = false;
    241a:	2000      	movs	r0, #0
    241c:	e000      	b.n	2420 <_parseCopsRegModeToken+0x5c>
    bool parseStatus = true;
    241e:	2001      	movs	r0, #1
}
    2420:	b003      	add	sp, #12
    2422:	bd30      	pop	{r4, r5, pc}
    2424:	00003751 	.word	0x00003751
    2428:	0000b590 	.word	0x0000b590
    242c:	0000a174 	.word	0x0000a174
    2430:	0000a188 	.word	0x0000a188
    2434:	00005bfd 	.word	0x00005bfd
    2438:	0000bb78 	.word	0x0000bb78
    243c:	0000dcf4 	.word	0x0000dcf4
    2440:	0000bba0 	.word	0x0000bba0

00002444 <_parseCopsNetworkNameFormatToken>:
{
    2444:	b530      	push	{r4, r5, lr}
    2446:	b083      	sub	sp, #12
    int32_t var = 0;
    2448:	2300      	movs	r3, #0
    244a:	9301      	str	r3, [sp, #4]
    if( pToken == NULL )
    244c:	b160      	cbz	r0, 2468 <_parseCopsNetworkNameFormatToken+0x24>
    244e:	460d      	mov	r5, r1
    2450:	4604      	mov	r4, r0
        atCoreStatus = Cellular_ATStrtoi( pToken, 10, &var );
    2452:	aa01      	add	r2, sp, #4
    2454:	210a      	movs	r1, #10
    2456:	4b13      	ldr	r3, [pc, #76]	; (24a4 <_parseCopsNetworkNameFormatToken+0x60>)
    2458:	4798      	blx	r3
        if( atCoreStatus == CELLULAR_AT_SUCCESS )
    245a:	bb00      	cbnz	r0, 249e <_parseCopsNetworkNameFormatToken+0x5a>
            if( ( var >= 0 ) &&
    245c:	9b01      	ldr	r3, [sp, #4]
    245e:	2b09      	cmp	r3, #9
    2460:	d80f      	bhi.n	2482 <_parseCopsNetworkNameFormatToken+0x3e>
                pOperatorInfo->operatorNameFormat = ( CellularOperatorNameFormat_t ) var;
    2462:	72ab      	strb	r3, [r5, #10]
    bool parseStatus = true;
    2464:	2001      	movs	r0, #1
    2466:	e01b      	b.n	24a0 <_parseCopsNetworkNameFormatToken+0x5c>
        LogError( ( "_parseCopsNetworkNameFormat: Input Parameter NULL" ) );
    2468:	f240 335a 	movw	r3, #858	; 0x35a
    246c:	4a0e      	ldr	r2, [pc, #56]	; (24a8 <_parseCopsNetworkNameFormatToken+0x64>)
    246e:	490f      	ldr	r1, [pc, #60]	; (24ac <_parseCopsNetworkNameFormatToken+0x68>)
    2470:	480f      	ldr	r0, [pc, #60]	; (24b0 <_parseCopsNetworkNameFormatToken+0x6c>)
    2472:	4c10      	ldr	r4, [pc, #64]	; (24b4 <_parseCopsNetworkNameFormatToken+0x70>)
    2474:	47a0      	blx	r4
    2476:	4810      	ldr	r0, [pc, #64]	; (24b8 <_parseCopsNetworkNameFormatToken+0x74>)
    2478:	47a0      	blx	r4
    247a:	4810      	ldr	r0, [pc, #64]	; (24bc <_parseCopsNetworkNameFormatToken+0x78>)
    247c:	47a0      	blx	r4
        parseStatus = false;
    247e:	2000      	movs	r0, #0
    2480:	e00e      	b.n	24a0 <_parseCopsNetworkNameFormatToken+0x5c>
                LogError( ( "_parseCopsNetworkNameFormat: Error in processing Network Registration mode. Token %s", pToken ) );
    2482:	f240 336e 	movw	r3, #878	; 0x36e
    2486:	4a08      	ldr	r2, [pc, #32]	; (24a8 <_parseCopsNetworkNameFormatToken+0x64>)
    2488:	4908      	ldr	r1, [pc, #32]	; (24ac <_parseCopsNetworkNameFormatToken+0x68>)
    248a:	4809      	ldr	r0, [pc, #36]	; (24b0 <_parseCopsNetworkNameFormatToken+0x6c>)
    248c:	4d09      	ldr	r5, [pc, #36]	; (24b4 <_parseCopsNetworkNameFormatToken+0x70>)
    248e:	47a8      	blx	r5
    2490:	4621      	mov	r1, r4
    2492:	480b      	ldr	r0, [pc, #44]	; (24c0 <_parseCopsNetworkNameFormatToken+0x7c>)
    2494:	47a8      	blx	r5
    2496:	4809      	ldr	r0, [pc, #36]	; (24bc <_parseCopsNetworkNameFormatToken+0x78>)
    2498:	47a8      	blx	r5
                parseStatus = false;
    249a:	2000      	movs	r0, #0
    249c:	e000      	b.n	24a0 <_parseCopsNetworkNameFormatToken+0x5c>
    bool parseStatus = true;
    249e:	2001      	movs	r0, #1
}
    24a0:	b003      	add	sp, #12
    24a2:	bd30      	pop	{r4, r5, pc}
    24a4:	00003751 	.word	0x00003751
    24a8:	0000b5a8 	.word	0x0000b5a8
    24ac:	0000a174 	.word	0x0000a174
    24b0:	0000a188 	.word	0x0000a188
    24b4:	00005bfd 	.word	0x00005bfd
    24b8:	0000bbec 	.word	0x0000bbec
    24bc:	0000dcf4 	.word	0x0000dcf4
    24c0:	0000bc20 	.word	0x0000bc20

000024c4 <_parseCopsRatToken>:
{
    24c4:	b530      	push	{r4, r5, lr}
    24c6:	b083      	sub	sp, #12
    int32_t var = 0;
    24c8:	2300      	movs	r3, #0
    24ca:	9301      	str	r3, [sp, #4]
    if( pToken == NULL )
    24cc:	b160      	cbz	r0, 24e8 <_parseCopsRatToken+0x24>
    24ce:	460d      	mov	r5, r1
    24d0:	4604      	mov	r4, r0
        atCoreStatus = Cellular_ATStrtoi( pToken, 10, &var );
    24d2:	aa01      	add	r2, sp, #4
    24d4:	210a      	movs	r1, #10
    24d6:	4b13      	ldr	r3, [pc, #76]	; (2524 <_parseCopsRatToken+0x60>)
    24d8:	4798      	blx	r3
        if( atCoreStatus == CELLULAR_AT_SUCCESS )
    24da:	bb00      	cbnz	r0, 251e <_parseCopsRatToken+0x5a>
            if( ( var < ( int32_t ) CELLULAR_RAT_MAX ) && ( var >= 0 ) )
    24dc:	9b01      	ldr	r3, [sp, #4]
    24de:	2b09      	cmp	r3, #9
    24e0:	d80f      	bhi.n	2502 <_parseCopsRatToken+0x3e>
                pOperatorInfo->rat = ( CellularRat_t ) var;
    24e2:	722b      	strb	r3, [r5, #8]
    bool parseStatus = true;
    24e4:	2001      	movs	r0, #1
    24e6:	e01b      	b.n	2520 <_parseCopsRatToken+0x5c>
        LogError( ( "_parseCopsNetworkName: Input Parameter NULL" ) );
    24e8:	f240 33b3 	movw	r3, #947	; 0x3b3
    24ec:	4a0e      	ldr	r2, [pc, #56]	; (2528 <_parseCopsRatToken+0x64>)
    24ee:	490f      	ldr	r1, [pc, #60]	; (252c <_parseCopsRatToken+0x68>)
    24f0:	480f      	ldr	r0, [pc, #60]	; (2530 <_parseCopsRatToken+0x6c>)
    24f2:	4c10      	ldr	r4, [pc, #64]	; (2534 <_parseCopsRatToken+0x70>)
    24f4:	47a0      	blx	r4
    24f6:	4810      	ldr	r0, [pc, #64]	; (2538 <_parseCopsRatToken+0x74>)
    24f8:	47a0      	blx	r4
    24fa:	4810      	ldr	r0, [pc, #64]	; (253c <_parseCopsRatToken+0x78>)
    24fc:	47a0      	blx	r4
        parseStatus = false;
    24fe:	2000      	movs	r0, #0
    2500:	e00e      	b.n	2520 <_parseCopsRatToken+0x5c>
                LogError( ( "_parseCopsNetworkName: Error in processing RAT. Token %s", pToken ) );
    2502:	f240 33c6 	movw	r3, #966	; 0x3c6
    2506:	4a08      	ldr	r2, [pc, #32]	; (2528 <_parseCopsRatToken+0x64>)
    2508:	4908      	ldr	r1, [pc, #32]	; (252c <_parseCopsRatToken+0x68>)
    250a:	4809      	ldr	r0, [pc, #36]	; (2530 <_parseCopsRatToken+0x6c>)
    250c:	4d09      	ldr	r5, [pc, #36]	; (2534 <_parseCopsRatToken+0x70>)
    250e:	47a8      	blx	r5
    2510:	4621      	mov	r1, r4
    2512:	480b      	ldr	r0, [pc, #44]	; (2540 <_parseCopsRatToken+0x7c>)
    2514:	47a8      	blx	r5
    2516:	4809      	ldr	r0, [pc, #36]	; (253c <_parseCopsRatToken+0x78>)
    2518:	47a8      	blx	r5
                parseStatus = false;
    251a:	2000      	movs	r0, #0
    251c:	e000      	b.n	2520 <_parseCopsRatToken+0x5c>
    bool parseStatus = true;
    251e:	2001      	movs	r0, #1
}
    2520:	b003      	add	sp, #12
    2522:	bd30      	pop	{r4, r5, pc}
    2524:	00003751 	.word	0x00003751
    2528:	0000b5cc 	.word	0x0000b5cc
    252c:	0000a174 	.word	0x0000a174
    2530:	0000a188 	.word	0x0000a188
    2534:	00005bfd 	.word	0x00005bfd
    2538:	0000bc78 	.word	0x0000bc78
    253c:	0000dcf4 	.word	0x0000dcf4
    2540:	0000bca4 	.word	0x0000bca4

00002544 <_Cellular_RecvFuncIpAddress>:
{
    2544:	b570      	push	{r4, r5, r6, lr}
    2546:	b082      	sub	sp, #8
    2548:	461d      	mov	r5, r3
    char * pInputLine = NULL, * pToken = NULL;
    254a:	2300      	movs	r3, #0
    254c:	9301      	str	r3, [sp, #4]
    254e:	9300      	str	r3, [sp, #0]
    if( pContext == NULL )
    2550:	b1a8      	cbz	r0, 257e <_Cellular_RecvFuncIpAddress+0x3a>
    2552:	4614      	mov	r4, r2
    else if( ( pAtResp == NULL ) || ( pAtResp->pItm == NULL ) || ( pAtResp->pItm->pLine == NULL ) )
    2554:	b301      	cbz	r1, 2598 <_Cellular_RecvFuncIpAddress+0x54>
    2556:	684b      	ldr	r3, [r1, #4]
    2558:	b1f3      	cbz	r3, 2598 <_Cellular_RecvFuncIpAddress+0x54>
    255a:	685b      	ldr	r3, [r3, #4]
    255c:	b1e3      	cbz	r3, 2598 <_Cellular_RecvFuncIpAddress+0x54>
    else if( ( pData == NULL ) || ( dataLen == 0U ) )
    255e:	b10a      	cbz	r2, 2564 <_Cellular_RecvFuncIpAddress+0x20>
    2560:	2d00      	cmp	r5, #0
    2562:	d127      	bne.n	25b4 <_Cellular_RecvFuncIpAddress+0x70>
        LogError( ( "Recv IP address: pData is invalid or dataLen is wrong" ) );
    2564:	f240 436b 	movw	r3, #1131	; 0x46b
    2568:	4a26      	ldr	r2, [pc, #152]	; (2604 <_Cellular_RecvFuncIpAddress+0xc0>)
    256a:	4927      	ldr	r1, [pc, #156]	; (2608 <_Cellular_RecvFuncIpAddress+0xc4>)
    256c:	4827      	ldr	r0, [pc, #156]	; (260c <_Cellular_RecvFuncIpAddress+0xc8>)
    256e:	4c28      	ldr	r4, [pc, #160]	; (2610 <_Cellular_RecvFuncIpAddress+0xcc>)
    2570:	47a0      	blx	r4
    2572:	4828      	ldr	r0, [pc, #160]	; (2614 <_Cellular_RecvFuncIpAddress+0xd0>)
    2574:	47a0      	blx	r4
    2576:	4828      	ldr	r0, [pc, #160]	; (2618 <_Cellular_RecvFuncIpAddress+0xd4>)
    2578:	47a0      	blx	r4
        pktStatus = CELLULAR_PKT_STATUS_BAD_PARAM;
    257a:	2006      	movs	r0, #6
    257c:	e018      	b.n	25b0 <_Cellular_RecvFuncIpAddress+0x6c>
        LogError( ( "Recv IP address: Invalid context" ) );
    257e:	f240 4361 	movw	r3, #1121	; 0x461
    2582:	4a20      	ldr	r2, [pc, #128]	; (2604 <_Cellular_RecvFuncIpAddress+0xc0>)
    2584:	4920      	ldr	r1, [pc, #128]	; (2608 <_Cellular_RecvFuncIpAddress+0xc4>)
    2586:	4821      	ldr	r0, [pc, #132]	; (260c <_Cellular_RecvFuncIpAddress+0xc8>)
    2588:	4c21      	ldr	r4, [pc, #132]	; (2610 <_Cellular_RecvFuncIpAddress+0xcc>)
    258a:	47a0      	blx	r4
    258c:	4823      	ldr	r0, [pc, #140]	; (261c <_Cellular_RecvFuncIpAddress+0xd8>)
    258e:	47a0      	blx	r4
    2590:	4821      	ldr	r0, [pc, #132]	; (2618 <_Cellular_RecvFuncIpAddress+0xd4>)
    2592:	47a0      	blx	r4
        pktStatus = CELLULAR_PKT_STATUS_INVALID_HANDLE;
    2594:	2008      	movs	r0, #8
    2596:	e00b      	b.n	25b0 <_Cellular_RecvFuncIpAddress+0x6c>
        LogError( ( "Recv IP address: response is invalid" ) );
    2598:	f240 4366 	movw	r3, #1126	; 0x466
    259c:	4a19      	ldr	r2, [pc, #100]	; (2604 <_Cellular_RecvFuncIpAddress+0xc0>)
    259e:	491a      	ldr	r1, [pc, #104]	; (2608 <_Cellular_RecvFuncIpAddress+0xc4>)
    25a0:	481a      	ldr	r0, [pc, #104]	; (260c <_Cellular_RecvFuncIpAddress+0xc8>)
    25a2:	4c1b      	ldr	r4, [pc, #108]	; (2610 <_Cellular_RecvFuncIpAddress+0xcc>)
    25a4:	47a0      	blx	r4
    25a6:	481e      	ldr	r0, [pc, #120]	; (2620 <_Cellular_RecvFuncIpAddress+0xdc>)
    25a8:	47a0      	blx	r4
    25aa:	481b      	ldr	r0, [pc, #108]	; (2618 <_Cellular_RecvFuncIpAddress+0xd4>)
    25ac:	47a0      	blx	r4
        pktStatus = CELLULAR_PKT_STATUS_FAILURE;
    25ae:	2002      	movs	r0, #2
}
    25b0:	b002      	add	sp, #8
    25b2:	bd70      	pop	{r4, r5, r6, pc}
        pInputLine = pAtResp->pItm->pLine;
    25b4:	a802      	add	r0, sp, #8
    25b6:	f840 3d04 	str.w	r3, [r0, #-4]!
        atCoreStatus = Cellular_ATRemovePrefix( &pInputLine );
    25ba:	4b1a      	ldr	r3, [pc, #104]	; (2624 <_Cellular_RecvFuncIpAddress+0xe0>)
    25bc:	4798      	blx	r3
        if( atCoreStatus == CELLULAR_AT_SUCCESS )
    25be:	4606      	mov	r6, r0
    25c0:	b168      	cbz	r0, 25de <_Cellular_RecvFuncIpAddress+0x9a>
        if( atCoreStatus == CELLULAR_AT_SUCCESS )
    25c2:	b93e      	cbnz	r6, 25d4 <_Cellular_RecvFuncIpAddress+0x90>
            if( pInputLine[ 0 ] != '\0' )
    25c4:	9b01      	ldr	r3, [sp, #4]
    25c6:	781b      	ldrb	r3, [r3, #0]
    25c8:	b17b      	cbz	r3, 25ea <_Cellular_RecvFuncIpAddress+0xa6>
                atCoreStatus = Cellular_ATGetNextTok( &pInputLine, &pToken );
    25ca:	4669      	mov	r1, sp
    25cc:	a801      	add	r0, sp, #4
    25ce:	4b16      	ldr	r3, [pc, #88]	; (2628 <_Cellular_RecvFuncIpAddress+0xe4>)
    25d0:	4798      	blx	r3
    25d2:	4606      	mov	r6, r0
        if( atCoreStatus == CELLULAR_AT_SUCCESS )
    25d4:	b17e      	cbz	r6, 25f6 <_Cellular_RecvFuncIpAddress+0xb2>
        pktStatus = _Cellular_TranslateAtCoreStatus( atCoreStatus );
    25d6:	4630      	mov	r0, r6
    25d8:	4b14      	ldr	r3, [pc, #80]	; (262c <_Cellular_RecvFuncIpAddress+0xe8>)
    25da:	4798      	blx	r3
    25dc:	e7e8      	b.n	25b0 <_Cellular_RecvFuncIpAddress+0x6c>
            atCoreStatus = Cellular_ATGetNextTok( &pInputLine, &pToken );
    25de:	4669      	mov	r1, sp
    25e0:	a801      	add	r0, sp, #4
    25e2:	4b11      	ldr	r3, [pc, #68]	; (2628 <_Cellular_RecvFuncIpAddress+0xe4>)
    25e4:	4798      	blx	r3
    25e6:	4606      	mov	r6, r0
    25e8:	e7eb      	b.n	25c2 <_Cellular_RecvFuncIpAddress+0x7e>
                ( void ) strncpy( pData, "0,0,0,0", dataLen );
    25ea:	462a      	mov	r2, r5
    25ec:	4910      	ldr	r1, [pc, #64]	; (2630 <_Cellular_RecvFuncIpAddress+0xec>)
    25ee:	4620      	mov	r0, r4
    25f0:	4b10      	ldr	r3, [pc, #64]	; (2634 <_Cellular_RecvFuncIpAddress+0xf0>)
    25f2:	4798      	blx	r3
    25f4:	e7ee      	b.n	25d4 <_Cellular_RecvFuncIpAddress+0x90>
            ( void ) strncpy( pData, pToken, dataLen );
    25f6:	462a      	mov	r2, r5
    25f8:	9900      	ldr	r1, [sp, #0]
    25fa:	4620      	mov	r0, r4
    25fc:	4b0d      	ldr	r3, [pc, #52]	; (2634 <_Cellular_RecvFuncIpAddress+0xf0>)
    25fe:	4798      	blx	r3
    2600:	e7e9      	b.n	25d6 <_Cellular_RecvFuncIpAddress+0x92>
    2602:	bf00      	nop
    2604:	0000b67c 	.word	0x0000b67c
    2608:	0000a174 	.word	0x0000a174
    260c:	0000a188 	.word	0x0000a188
    2610:	00005bfd 	.word	0x00005bfd
    2614:	0000bf04 	.word	0x0000bf04
    2618:	0000dcf4 	.word	0x0000dcf4
    261c:	0000beb8 	.word	0x0000beb8
    2620:	0000bedc 	.word	0x0000bedc
    2624:	00003409 	.word	0x00003409
    2628:	00003631 	.word	0x00003631
    262c:	00003a95 	.word	0x00003a95
    2630:	0000bf3c 	.word	0x0000bf3c
    2634:	00008e25 	.word	0x00008e25

00002638 <_parseCopsNetworkNameToken>:
{
    2638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if( pToken == NULL )
    263c:	b1a0      	cbz	r0, 2668 <_parseCopsNetworkNameToken+0x30>
    263e:	460c      	mov	r4, r1
    2640:	4605      	mov	r5, r0
        if( ( pOperatorInfo->operatorNameFormat == OPERATOR_NAME_FORMAT_LONG ) ||
    2642:	7a8b      	ldrb	r3, [r1, #10]
    2644:	2b01      	cmp	r3, #1
    2646:	d91d      	bls.n	2684 <_parseCopsNetworkNameToken+0x4c>
        else if( pOperatorInfo->operatorNameFormat == OPERATOR_NAME_FORMAT_NUMERIC )
    2648:	2b02      	cmp	r3, #2
    264a:	d024      	beq.n	2696 <_parseCopsNetworkNameToken+0x5e>
            LogError( ( "Error in processing Operator Name: Format Unknown" ) );
    264c:	f44f 7368 	mov.w	r3, #928	; 0x3a0
    2650:	4a23      	ldr	r2, [pc, #140]	; (26e0 <_parseCopsNetworkNameToken+0xa8>)
    2652:	4924      	ldr	r1, [pc, #144]	; (26e4 <_parseCopsNetworkNameToken+0xac>)
    2654:	4824      	ldr	r0, [pc, #144]	; (26e8 <_parseCopsNetworkNameToken+0xb0>)
    2656:	4c25      	ldr	r4, [pc, #148]	; (26ec <_parseCopsNetworkNameToken+0xb4>)
    2658:	47a0      	blx	r4
    265a:	4825      	ldr	r0, [pc, #148]	; (26f0 <_parseCopsNetworkNameToken+0xb8>)
    265c:	47a0      	blx	r4
    265e:	4825      	ldr	r0, [pc, #148]	; (26f4 <_parseCopsNetworkNameToken+0xbc>)
    2660:	47a0      	blx	r4
            parseStatus = false;
    2662:	2000      	movs	r0, #0
}
    2664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        LogError( ( "_parseCopsNetworkName: Input Parameter NULL" ) );
    2668:	f240 3381 	movw	r3, #897	; 0x381
    266c:	4a1c      	ldr	r2, [pc, #112]	; (26e0 <_parseCopsNetworkNameToken+0xa8>)
    266e:	491d      	ldr	r1, [pc, #116]	; (26e4 <_parseCopsNetworkNameToken+0xac>)
    2670:	481d      	ldr	r0, [pc, #116]	; (26e8 <_parseCopsNetworkNameToken+0xb0>)
    2672:	4c1e      	ldr	r4, [pc, #120]	; (26ec <_parseCopsNetworkNameToken+0xb4>)
    2674:	47a0      	blx	r4
    2676:	4820      	ldr	r0, [pc, #128]	; (26f8 <_parseCopsNetworkNameToken+0xc0>)
    2678:	47a0      	blx	r4
    267a:	481e      	ldr	r0, [pc, #120]	; (26f4 <_parseCopsNetworkNameToken+0xbc>)
    267c:	47a0      	blx	r4
        parseStatus = false;
    267e:	2000      	movs	r0, #0
    2680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            ( void ) strncpy( pOperatorInfo->operatorName, pToken, CELLULAR_NETWORK_NAME_MAX_SIZE );
    2684:	2220      	movs	r2, #32
    2686:	4601      	mov	r1, r0
    2688:	f104 000b 	add.w	r0, r4, #11
    268c:	4b1b      	ldr	r3, [pc, #108]	; (26fc <_parseCopsNetworkNameToken+0xc4>)
    268e:	4798      	blx	r3
    bool parseStatus = true;
    2690:	2001      	movs	r0, #1
    2692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            mccMncLen = ( uint32_t ) strlen( pToken );
    2696:	4b1a      	ldr	r3, [pc, #104]	; (2700 <_parseCopsNetworkNameToken+0xc8>)
    2698:	4798      	blx	r3
    269a:	4606      	mov	r6, r0
            if( ( mccMncLen == ( CELLULAR_MCC_MAX_SIZE + CELLULAR_MNC_MAX_SIZE ) ) ||
    269c:	1f43      	subs	r3, r0, #5
    269e:	2b01      	cmp	r3, #1
    26a0:	d90d      	bls.n	26be <_parseCopsNetworkNameToken+0x86>
                LogError( ( "_parseCopsNetworkName: Error in processing Network MCC MNC: Length not Valid" ) );
    26a2:	f240 339a 	movw	r3, #922	; 0x39a
    26a6:	4a0e      	ldr	r2, [pc, #56]	; (26e0 <_parseCopsNetworkNameToken+0xa8>)
    26a8:	490e      	ldr	r1, [pc, #56]	; (26e4 <_parseCopsNetworkNameToken+0xac>)
    26aa:	480f      	ldr	r0, [pc, #60]	; (26e8 <_parseCopsNetworkNameToken+0xb0>)
    26ac:	4c0f      	ldr	r4, [pc, #60]	; (26ec <_parseCopsNetworkNameToken+0xb4>)
    26ae:	47a0      	blx	r4
    26b0:	4814      	ldr	r0, [pc, #80]	; (2704 <_parseCopsNetworkNameToken+0xcc>)
    26b2:	47a0      	blx	r4
    26b4:	480f      	ldr	r0, [pc, #60]	; (26f4 <_parseCopsNetworkNameToken+0xbc>)
    26b6:	47a0      	blx	r4
                parseStatus = false;
    26b8:	2000      	movs	r0, #0
    26ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                ( void ) strncpy( pOperatorInfo->plmnInfo.mcc, pToken, CELLULAR_MCC_MAX_SIZE );
    26be:	2203      	movs	r2, #3
    26c0:	4629      	mov	r1, r5
    26c2:	4620      	mov	r0, r4
    26c4:	f8df 8034 	ldr.w	r8, [pc, #52]	; 26fc <_parseCopsNetworkNameToken+0xc4>
    26c8:	47c0      	blx	r8
                pOperatorInfo->plmnInfo.mcc[ CELLULAR_MCC_MAX_SIZE ] = '\0';
    26ca:	2700      	movs	r7, #0
    26cc:	70e7      	strb	r7, [r4, #3]
                ( void ) strncpy( pOperatorInfo->plmnInfo.mnc, &pToken[ CELLULAR_MCC_MAX_SIZE ],
    26ce:	1eb2      	subs	r2, r6, #2
    26d0:	1ce9      	adds	r1, r5, #3
    26d2:	1d20      	adds	r0, r4, #4
    26d4:	47c0      	blx	r8
                pOperatorInfo->plmnInfo.mnc[ CELLULAR_MNC_MAX_SIZE ] = '\0';
    26d6:	71e7      	strb	r7, [r4, #7]
    bool parseStatus = true;
    26d8:	2001      	movs	r0, #1
    26da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    26de:	bf00      	nop
    26e0:	0000b698 	.word	0x0000b698
    26e4:	0000a174 	.word	0x0000a174
    26e8:	0000a188 	.word	0x0000a188
    26ec:	00005bfd 	.word	0x00005bfd
    26f0:	0000bf94 	.word	0x0000bf94
    26f4:	0000dcf4 	.word	0x0000dcf4
    26f8:	0000bc78 	.word	0x0000bc78
    26fc:	00008e25 	.word	0x00008e25
    2700:	00008df1 	.word	0x00008df1
    2704:	0000bf44 	.word	0x0000bf44

00002708 <_parseCops>:
{
    2708:	b530      	push	{r4, r5, lr}
    270a:	b083      	sub	sp, #12
    270c:	460d      	mov	r5, r1
    char * pToken = NULL;
    270e:	2300      	movs	r3, #0
    2710:	9301      	str	r3, [sp, #4]
    char * pTempCopsResponse = pCopsResponse;
    2712:	9000      	str	r0, [sp, #0]
    atCoreStatus = Cellular_ATGetNextTok( &pTempCopsResponse, &pToken );
    2714:	a901      	add	r1, sp, #4
    2716:	4668      	mov	r0, sp
    2718:	4b20      	ldr	r3, [pc, #128]	; (279c <_parseCops+0x94>)
    271a:	4798      	blx	r3
    if( atCoreStatus == CELLULAR_AT_SUCCESS )
    271c:	4604      	mov	r4, r0
    271e:	b150      	cbz	r0, 2736 <_parseCops+0x2e>
    if( atCoreStatus == CELLULAR_AT_SUCCESS )
    2720:	b18c      	cbz	r4, 2746 <_parseCops+0x3e>
    if( atCoreStatus == CELLULAR_AT_SUCCESS )
    2722:	b1b4      	cbz	r4, 2752 <_parseCops+0x4a>
    if( atCoreStatus == CELLULAR_AT_SUCCESS )
    2724:	b1ec      	cbz	r4, 2762 <_parseCops+0x5a>
    if( atCoreStatus == CELLULAR_AT_SUCCESS )
    2726:	b314      	cbz	r4, 276e <_parseCops+0x66>
    if( atCoreStatus == CELLULAR_AT_SUCCESS )
    2728:	2c00      	cmp	r4, #0
    272a:	d028      	beq.n	277e <_parseCops+0x76>
    if( atCoreStatus == CELLULAR_AT_SUCCESS )
    272c:	2c00      	cmp	r4, #0
    272e:	d02c      	beq.n	278a <_parseCops+0x82>
}
    2730:	4620      	mov	r0, r4
    2732:	b003      	add	sp, #12
    2734:	bd30      	pop	{r4, r5, pc}
        parseStatus = _parseCopsRegModeToken( pToken, pOperatorInfo );
    2736:	4629      	mov	r1, r5
    2738:	9801      	ldr	r0, [sp, #4]
    273a:	4b19      	ldr	r3, [pc, #100]	; (27a0 <_parseCops+0x98>)
    273c:	4798      	blx	r3
        if( parseStatus == false )
    273e:	2800      	cmp	r0, #0
    2740:	d1ee      	bne.n	2720 <_parseCops+0x18>
            atCoreStatus = CELLULAR_AT_ERROR;
    2742:	2405      	movs	r4, #5
    2744:	e7ec      	b.n	2720 <_parseCops+0x18>
        atCoreStatus = Cellular_ATGetNextTok( &pTempCopsResponse, &pToken );
    2746:	a901      	add	r1, sp, #4
    2748:	4668      	mov	r0, sp
    274a:	4b14      	ldr	r3, [pc, #80]	; (279c <_parseCops+0x94>)
    274c:	4798      	blx	r3
    274e:	4604      	mov	r4, r0
    2750:	e7e7      	b.n	2722 <_parseCops+0x1a>
        parseStatus = _parseCopsNetworkNameFormatToken( pToken, pOperatorInfo );
    2752:	4629      	mov	r1, r5
    2754:	9801      	ldr	r0, [sp, #4]
    2756:	4b13      	ldr	r3, [pc, #76]	; (27a4 <_parseCops+0x9c>)
    2758:	4798      	blx	r3
        if( parseStatus == false )
    275a:	2800      	cmp	r0, #0
    275c:	d1e2      	bne.n	2724 <_parseCops+0x1c>
            atCoreStatus = CELLULAR_AT_ERROR;
    275e:	2405      	movs	r4, #5
    2760:	e7e0      	b.n	2724 <_parseCops+0x1c>
        atCoreStatus = Cellular_ATGetNextTok( &pTempCopsResponse, &pToken );
    2762:	a901      	add	r1, sp, #4
    2764:	4668      	mov	r0, sp
    2766:	4b0d      	ldr	r3, [pc, #52]	; (279c <_parseCops+0x94>)
    2768:	4798      	blx	r3
    276a:	4604      	mov	r4, r0
    276c:	e7db      	b.n	2726 <_parseCops+0x1e>
        parseStatus = _parseCopsNetworkNameToken( pToken, pOperatorInfo );
    276e:	4629      	mov	r1, r5
    2770:	9801      	ldr	r0, [sp, #4]
    2772:	4b0d      	ldr	r3, [pc, #52]	; (27a8 <_parseCops+0xa0>)
    2774:	4798      	blx	r3
        if( parseStatus == false )
    2776:	2800      	cmp	r0, #0
    2778:	d1d6      	bne.n	2728 <_parseCops+0x20>
            atCoreStatus = CELLULAR_AT_ERROR;
    277a:	2405      	movs	r4, #5
    277c:	e7d4      	b.n	2728 <_parseCops+0x20>
        atCoreStatus = Cellular_ATGetNextTok( &pTempCopsResponse, &pToken );
    277e:	a901      	add	r1, sp, #4
    2780:	4668      	mov	r0, sp
    2782:	4b06      	ldr	r3, [pc, #24]	; (279c <_parseCops+0x94>)
    2784:	4798      	blx	r3
    2786:	4604      	mov	r4, r0
    2788:	e7d0      	b.n	272c <_parseCops+0x24>
        parseStatus = _parseCopsRatToken( pToken, pOperatorInfo );
    278a:	4629      	mov	r1, r5
    278c:	9801      	ldr	r0, [sp, #4]
    278e:	4b07      	ldr	r3, [pc, #28]	; (27ac <_parseCops+0xa4>)
    2790:	4798      	blx	r3
        if( parseStatus == false )
    2792:	2800      	cmp	r0, #0
    2794:	d1cc      	bne.n	2730 <_parseCops+0x28>
            atCoreStatus = CELLULAR_AT_ERROR;
    2796:	2405      	movs	r4, #5
    2798:	e7ca      	b.n	2730 <_parseCops+0x28>
    279a:	bf00      	nop
    279c:	00003631 	.word	0x00003631
    27a0:	000023c5 	.word	0x000023c5
    27a4:	00002445 	.word	0x00002445
    27a8:	00002639 	.word	0x00002639
    27ac:	000024c5 	.word	0x000024c5

000027b0 <_Cellular_RecvFuncUpdateMccMnc>:
{
    27b0:	b530      	push	{r4, r5, lr}
    27b2:	b083      	sub	sp, #12
    char * pCopsResponse = NULL;
    27b4:	2400      	movs	r4, #0
    27b6:	9401      	str	r4, [sp, #4]
    if( pContext == NULL )
    27b8:	2800      	cmp	r0, #0
    27ba:	d050      	beq.n	285e <_Cellular_RecvFuncUpdateMccMnc+0xae>
    27bc:	4614      	mov	r4, r2
    else if( ( pAtResp == NULL ) || ( pAtResp->pItm == NULL ) || ( pAtResp->pItm->pLine == NULL ) )
    27be:	b199      	cbz	r1, 27e8 <_Cellular_RecvFuncUpdateMccMnc+0x38>
    27c0:	6849      	ldr	r1, [r1, #4]
    27c2:	b189      	cbz	r1, 27e8 <_Cellular_RecvFuncUpdateMccMnc+0x38>
    27c4:	684a      	ldr	r2, [r1, #4]
    27c6:	b17a      	cbz	r2, 27e8 <_Cellular_RecvFuncUpdateMccMnc+0x38>
    else if( ( pData == NULL ) || ( dataLen != sizeof( cellularOperatorInfo_t ) ) )
    27c8:	b10c      	cbz	r4, 27ce <_Cellular_RecvFuncUpdateMccMnc+0x1e>
    27ca:	2b2c      	cmp	r3, #44	; 0x2c
    27cc:	d01a      	beq.n	2804 <_Cellular_RecvFuncUpdateMccMnc+0x54>
        LogError( ( "UpdateMccMnc: pData is invalid or dataLen is wrong" ) );
    27ce:	f240 432d 	movw	r3, #1069	; 0x42d
    27d2:	4a24      	ldr	r2, [pc, #144]	; (2864 <_Cellular_RecvFuncUpdateMccMnc+0xb4>)
    27d4:	4924      	ldr	r1, [pc, #144]	; (2868 <_Cellular_RecvFuncUpdateMccMnc+0xb8>)
    27d6:	4825      	ldr	r0, [pc, #148]	; (286c <_Cellular_RecvFuncUpdateMccMnc+0xbc>)
    27d8:	4c25      	ldr	r4, [pc, #148]	; (2870 <_Cellular_RecvFuncUpdateMccMnc+0xc0>)
    27da:	47a0      	blx	r4
    27dc:	4825      	ldr	r0, [pc, #148]	; (2874 <_Cellular_RecvFuncUpdateMccMnc+0xc4>)
    27de:	47a0      	blx	r4
    27e0:	4825      	ldr	r0, [pc, #148]	; (2878 <_Cellular_RecvFuncUpdateMccMnc+0xc8>)
    27e2:	47a0      	blx	r4
        pktStatus = CELLULAR_PKT_STATUS_FAILURE;
    27e4:	2002      	movs	r0, #2
    27e6:	e00b      	b.n	2800 <_Cellular_RecvFuncUpdateMccMnc+0x50>
        LogError( ( "UpdateMccMnc: Response is invalid" ) );
    27e8:	f44f 6385 	mov.w	r3, #1064	; 0x428
    27ec:	4a1d      	ldr	r2, [pc, #116]	; (2864 <_Cellular_RecvFuncUpdateMccMnc+0xb4>)
    27ee:	491e      	ldr	r1, [pc, #120]	; (2868 <_Cellular_RecvFuncUpdateMccMnc+0xb8>)
    27f0:	481e      	ldr	r0, [pc, #120]	; (286c <_Cellular_RecvFuncUpdateMccMnc+0xbc>)
    27f2:	4c1f      	ldr	r4, [pc, #124]	; (2870 <_Cellular_RecvFuncUpdateMccMnc+0xc0>)
    27f4:	47a0      	blx	r4
    27f6:	4821      	ldr	r0, [pc, #132]	; (287c <_Cellular_RecvFuncUpdateMccMnc+0xcc>)
    27f8:	47a0      	blx	r4
    27fa:	481f      	ldr	r0, [pc, #124]	; (2878 <_Cellular_RecvFuncUpdateMccMnc+0xc8>)
    27fc:	47a0      	blx	r4
        pktStatus = CELLULAR_PKT_STATUS_FAILURE;
    27fe:	2002      	movs	r0, #2
}
    2800:	b003      	add	sp, #12
    2802:	bd30      	pop	{r4, r5, pc}
        pCopsResponse = pAtResp->pItm->pLine;
    2804:	a802      	add	r0, sp, #8
    2806:	f840 2d04 	str.w	r2, [r0, #-4]!
        atCoreStatus = Cellular_ATRemovePrefix( &pCopsResponse );
    280a:	4b1d      	ldr	r3, [pc, #116]	; (2880 <_Cellular_RecvFuncUpdateMccMnc+0xd0>)
    280c:	4798      	blx	r3
        if( atCoreStatus == CELLULAR_AT_SUCCESS )
    280e:	4605      	mov	r5, r0
    2810:	b128      	cbz	r0, 281e <_Cellular_RecvFuncUpdateMccMnc+0x6e>
        if( atCoreStatus == CELLULAR_AT_SUCCESS )
    2812:	b14d      	cbz	r5, 2828 <_Cellular_RecvFuncUpdateMccMnc+0x78>
        if( atCoreStatus == CELLULAR_AT_SUCCESS )
    2814:	b16d      	cbz	r5, 2832 <_Cellular_RecvFuncUpdateMccMnc+0x82>
        if( atCoreStatus == CELLULAR_AT_ERROR )
    2816:	2d05      	cmp	r5, #5
    2818:	d011      	beq.n	283e <_Cellular_RecvFuncUpdateMccMnc+0x8e>
    CellularPktStatus_t pktStatus = CELLULAR_PKT_STATUS_OK;
    281a:	2000      	movs	r0, #0
    281c:	e7f0      	b.n	2800 <_Cellular_RecvFuncUpdateMccMnc+0x50>
            atCoreStatus = Cellular_ATRemoveAllDoubleQuote( pCopsResponse );
    281e:	9801      	ldr	r0, [sp, #4]
    2820:	4b18      	ldr	r3, [pc, #96]	; (2884 <_Cellular_RecvFuncUpdateMccMnc+0xd4>)
    2822:	4798      	blx	r3
    2824:	4605      	mov	r5, r0
    2826:	e7f4      	b.n	2812 <_Cellular_RecvFuncUpdateMccMnc+0x62>
            atCoreStatus = Cellular_ATRemoveAllWhiteSpaces( pCopsResponse );
    2828:	9801      	ldr	r0, [sp, #4]
    282a:	4b17      	ldr	r3, [pc, #92]	; (2888 <_Cellular_RecvFuncUpdateMccMnc+0xd8>)
    282c:	4798      	blx	r3
    282e:	4605      	mov	r5, r0
    2830:	e7f0      	b.n	2814 <_Cellular_RecvFuncUpdateMccMnc+0x64>
            atCoreStatus = _parseCops( pCopsResponse, pOperatorInfo );
    2832:	4621      	mov	r1, r4
    2834:	9801      	ldr	r0, [sp, #4]
    2836:	4b15      	ldr	r3, [pc, #84]	; (288c <_Cellular_RecvFuncUpdateMccMnc+0xdc>)
    2838:	4798      	blx	r3
    283a:	4605      	mov	r5, r0
    283c:	e7eb      	b.n	2816 <_Cellular_RecvFuncUpdateMccMnc+0x66>
            LogError( ( "ERROR: COPS %s", pCopsResponse ) );
    283e:	f240 434c 	movw	r3, #1100	; 0x44c
    2842:	4a08      	ldr	r2, [pc, #32]	; (2864 <_Cellular_RecvFuncUpdateMccMnc+0xb4>)
    2844:	4908      	ldr	r1, [pc, #32]	; (2868 <_Cellular_RecvFuncUpdateMccMnc+0xb8>)
    2846:	4809      	ldr	r0, [pc, #36]	; (286c <_Cellular_RecvFuncUpdateMccMnc+0xbc>)
    2848:	4c09      	ldr	r4, [pc, #36]	; (2870 <_Cellular_RecvFuncUpdateMccMnc+0xc0>)
    284a:	47a0      	blx	r4
    284c:	9901      	ldr	r1, [sp, #4]
    284e:	4810      	ldr	r0, [pc, #64]	; (2890 <_Cellular_RecvFuncUpdateMccMnc+0xe0>)
    2850:	47a0      	blx	r4
    2852:	4809      	ldr	r0, [pc, #36]	; (2878 <_Cellular_RecvFuncUpdateMccMnc+0xc8>)
    2854:	47a0      	blx	r4
            pktStatus = _Cellular_TranslateAtCoreStatus( atCoreStatus );
    2856:	4628      	mov	r0, r5
    2858:	4b0e      	ldr	r3, [pc, #56]	; (2894 <_Cellular_RecvFuncUpdateMccMnc+0xe4>)
    285a:	4798      	blx	r3
    285c:	e7d0      	b.n	2800 <_Cellular_RecvFuncUpdateMccMnc+0x50>
        pktStatus = CELLULAR_PKT_STATUS_FAILURE;
    285e:	2002      	movs	r0, #2
    2860:	e7ce      	b.n	2800 <_Cellular_RecvFuncUpdateMccMnc+0x50>
    2862:	bf00      	nop
    2864:	0000b6b4 	.word	0x0000b6b4
    2868:	0000a174 	.word	0x0000a174
    286c:	0000a188 	.word	0x0000a188
    2870:	00005bfd 	.word	0x00005bfd
    2874:	0000bfec 	.word	0x0000bfec
    2878:	0000dcf4 	.word	0x0000dcf4
    287c:	0000bfc8 	.word	0x0000bfc8
    2880:	00003409 	.word	0x00003409
    2884:	00003529 	.word	0x00003529
    2888:	000034c5 	.word	0x000034c5
    288c:	00002709 	.word	0x00002709
    2890:	0000c020 	.word	0x0000c020
    2894:	00003a95 	.word	0x00003a95

00002898 <Cellular_CommonRfOn>:
}

/*-----------------------------------------------------------*/

CellularError_t Cellular_CommonRfOn( CellularHandle_t cellularHandle )
{
    2898:	b510      	push	{r4, lr}
    289a:	b08a      	sub	sp, #40	; 0x28
    289c:	4604      	mov	r4, r0
    CellularContext_t * pContext = ( CellularContext_t * ) cellularHandle;
    CellularError_t cellularStatus;
    CellularPktStatus_t pktStatus;
    CellularAtReq_t atReq = { 0 };
    289e:	2300      	movs	r3, #0
    28a0:	9305      	str	r3, [sp, #20]
    28a2:	9306      	str	r3, [sp, #24]
    28a4:	9307      	str	r3, [sp, #28]
    28a6:	9308      	str	r3, [sp, #32]
    28a8:	9309      	str	r3, [sp, #36]	; 0x24

    atReq.pAtCmd = "AT+CFUN=1";
    28aa:	4b0b      	ldr	r3, [pc, #44]	; (28d8 <Cellular_CommonRfOn+0x40>)
    28ac:	9304      	str	r3, [sp, #16]
    atReq.respCallback = NULL;
    atReq.pData = NULL;
    atReq.dataLen = 0;

    /* Make sure library is open. */
    cellularStatus = _Cellular_CheckLibraryStatus( pContext );
    28ae:	4b0b      	ldr	r3, [pc, #44]	; (28dc <Cellular_CommonRfOn+0x44>)
    28b0:	4798      	blx	r3

    if( cellularStatus == CELLULAR_SUCCESS )
    28b2:	4603      	mov	r3, r0
    28b4:	b110      	cbz	r0, 28bc <Cellular_CommonRfOn+0x24>
        pktStatus = _Cellular_AtcmdRequestWithCallback( pContext, atReq );
        cellularStatus = _Cellular_TranslatePktStatus( pktStatus );
    }

    return cellularStatus;
}
    28b6:	4618      	mov	r0, r3
    28b8:	b00a      	add	sp, #40	; 0x28
    28ba:	bd10      	pop	{r4, pc}
        pktStatus = _Cellular_AtcmdRequestWithCallback( pContext, atReq );
    28bc:	ab0a      	add	r3, sp, #40	; 0x28
    28be:	e913 0007 	ldmdb	r3, {r0, r1, r2}
    28c2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
    28c6:	ab04      	add	r3, sp, #16
    28c8:	cb0e      	ldmia	r3, {r1, r2, r3}
    28ca:	4620      	mov	r0, r4
    28cc:	4c04      	ldr	r4, [pc, #16]	; (28e0 <Cellular_CommonRfOn+0x48>)
    28ce:	47a0      	blx	r4
        cellularStatus = _Cellular_TranslatePktStatus( pktStatus );
    28d0:	4b04      	ldr	r3, [pc, #16]	; (28e4 <Cellular_CommonRfOn+0x4c>)
    28d2:	4798      	blx	r3
    28d4:	4603      	mov	r3, r0
    28d6:	e7ee      	b.n	28b6 <Cellular_CommonRfOn+0x1e>
    28d8:	00009c80 	.word	0x00009c80
    28dc:	000038dd 	.word	0x000038dd
    28e0:	00003ed1 	.word	0x00003ed1
    28e4:	0000395d 	.word	0x0000395d

000028e8 <Cellular_CommonRfOff>:

/*-----------------------------------------------------------*/

CellularError_t Cellular_CommonRfOff( CellularHandle_t cellularHandle )
{
    28e8:	b510      	push	{r4, lr}
    28ea:	b08a      	sub	sp, #40	; 0x28
    28ec:	4604      	mov	r4, r0
    CellularContext_t * pContext = ( CellularContext_t * ) cellularHandle;
    CellularError_t cellularStatus;
    CellularPktStatus_t pktStatus;
    CellularAtReq_t atReq = { 0 };
    28ee:	2300      	movs	r3, #0
    28f0:	9305      	str	r3, [sp, #20]
    28f2:	9306      	str	r3, [sp, #24]
    28f4:	9307      	str	r3, [sp, #28]
    28f6:	9308      	str	r3, [sp, #32]
    28f8:	9309      	str	r3, [sp, #36]	; 0x24

    atReq.pAtCmd = "AT+CFUN=4";
    28fa:	4b0b      	ldr	r3, [pc, #44]	; (2928 <Cellular_CommonRfOff+0x40>)
    28fc:	9304      	str	r3, [sp, #16]
    atReq.respCallback = NULL;
    atReq.pData = NULL;
    atReq.dataLen = 0;

    /* Make sure library is open. */
    cellularStatus = _Cellular_CheckLibraryStatus( pContext );
    28fe:	4b0b      	ldr	r3, [pc, #44]	; (292c <Cellular_CommonRfOff+0x44>)
    2900:	4798      	blx	r3

    if( cellularStatus == CELLULAR_SUCCESS )
    2902:	4603      	mov	r3, r0
    2904:	b110      	cbz	r0, 290c <Cellular_CommonRfOff+0x24>
        pktStatus = _Cellular_AtcmdRequestWithCallback( pContext, atReq );
        cellularStatus = _Cellular_TranslatePktStatus( pktStatus );
    }

    return cellularStatus;
}
    2906:	4618      	mov	r0, r3
    2908:	b00a      	add	sp, #40	; 0x28
    290a:	bd10      	pop	{r4, pc}
        pktStatus = _Cellular_AtcmdRequestWithCallback( pContext, atReq );
    290c:	ab0a      	add	r3, sp, #40	; 0x28
    290e:	e913 0007 	ldmdb	r3, {r0, r1, r2}
    2912:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
    2916:	ab04      	add	r3, sp, #16
    2918:	cb0e      	ldmia	r3, {r1, r2, r3}
    291a:	4620      	mov	r0, r4
    291c:	4c04      	ldr	r4, [pc, #16]	; (2930 <Cellular_CommonRfOff+0x48>)
    291e:	47a0      	blx	r4
        cellularStatus = _Cellular_TranslatePktStatus( pktStatus );
    2920:	4b04      	ldr	r3, [pc, #16]	; (2934 <Cellular_CommonRfOff+0x4c>)
    2922:	4798      	blx	r3
    2924:	4603      	mov	r3, r0
    2926:	e7ee      	b.n	2906 <Cellular_CommonRfOff+0x1e>
    2928:	0000c6b0 	.word	0x0000c6b0
    292c:	000038dd 	.word	0x000038dd
    2930:	00003ed1 	.word	0x00003ed1
    2934:	0000395d 	.word	0x0000395d

00002938 <Cellular_CommonGetIPAddress>:

CellularError_t Cellular_CommonGetIPAddress( CellularHandle_t cellularHandle,
                                             uint8_t contextId,
                                             char * pBuffer,
                                             uint32_t bufferLength )
{
    2938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    293c:	b092      	sub	sp, #72	; 0x48
    293e:	4607      	mov	r7, r0
    2940:	4688      	mov	r8, r1
    2942:	4615      	mov	r5, r2
    2944:	461e      	mov	r6, r3
    CellularContext_t * pContext = ( CellularContext_t * ) cellularHandle;
    CellularError_t cellularStatus = CELLULAR_SUCCESS;
    CellularPktStatus_t pktStatus = CELLULAR_PKT_STATUS_OK;
    char cmdBuf[ CELLULAR_AT_CMD_TYPICAL_MAX_SIZE ] = { '\0' };
    2946:	ac0a      	add	r4, sp, #40	; 0x28
    2948:	2220      	movs	r2, #32
    294a:	2100      	movs	r1, #0
    294c:	4620      	mov	r0, r4
    294e:	4b30      	ldr	r3, [pc, #192]	; (2a10 <Cellular_CommonGetIPAddress+0xd8>)
    2950:	4798      	blx	r3
    CellularAtReq_t atReqGetIp = { 0 };
    2952:	2300      	movs	r3, #0
    2954:	9305      	str	r3, [sp, #20]
    2956:	9309      	str	r3, [sp, #36]	; 0x24

    atReqGetIp.pAtCmd = cmdBuf;
    2958:	9404      	str	r4, [sp, #16]
    atReqGetIp.atCmdType = CELLULAR_AT_WITH_PREFIX;
    295a:	2302      	movs	r3, #2
    295c:	f88d 3014 	strb.w	r3, [sp, #20]
    atReqGetIp.pAtRspPrefix = "+CGPADDR";
    2960:	4b2c      	ldr	r3, [pc, #176]	; (2a14 <Cellular_CommonGetIPAddress+0xdc>)
    2962:	9306      	str	r3, [sp, #24]
    atReqGetIp.respCallback = _Cellular_RecvFuncIpAddress;
    2964:	4b2c      	ldr	r3, [pc, #176]	; (2a18 <Cellular_CommonGetIPAddress+0xe0>)
    2966:	9307      	str	r3, [sp, #28]
    atReqGetIp.pData = pBuffer;
    2968:	9508      	str	r5, [sp, #32]
    atReqGetIp.dataLen = ( uint16_t ) bufferLength;
    296a:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24

    /* Make sure the library is open. */
    cellularStatus = _Cellular_CheckLibraryStatus( pContext );
    296e:	4638      	mov	r0, r7
    2970:	4b2a      	ldr	r3, [pc, #168]	; (2a1c <Cellular_CommonGetIPAddress+0xe4>)
    2972:	4798      	blx	r3

    if( cellularStatus != CELLULAR_SUCCESS )
    2974:	b990      	cbnz	r0, 299c <Cellular_CommonGetIPAddress+0x64>
    {
        LogError( ( "_Cellular_CheckLibraryStatus failed" ) );
    }
    else if( ( pBuffer == NULL ) || ( bufferLength == 0U ) )
    2976:	b105      	cbz	r5, 297a <Cellular_CommonGetIPAddress+0x42>
    2978:	b9ee      	cbnz	r6, 29b6 <Cellular_CommonGetIPAddress+0x7e>
    {
        LogError( ( "_Cellular_GetIPAddress: pBuffer is invalid or bufferLength is wrong" ) );
    297a:	f240 73ae 	movw	r3, #1966	; 0x7ae
    297e:	4a28      	ldr	r2, [pc, #160]	; (2a20 <Cellular_CommonGetIPAddress+0xe8>)
    2980:	4928      	ldr	r1, [pc, #160]	; (2a24 <Cellular_CommonGetIPAddress+0xec>)
    2982:	4829      	ldr	r0, [pc, #164]	; (2a28 <Cellular_CommonGetIPAddress+0xf0>)
    2984:	4c29      	ldr	r4, [pc, #164]	; (2a2c <Cellular_CommonGetIPAddress+0xf4>)
    2986:	47a0      	blx	r4
    2988:	4829      	ldr	r0, [pc, #164]	; (2a30 <Cellular_CommonGetIPAddress+0xf8>)
    298a:	47a0      	blx	r4
    298c:	4829      	ldr	r0, [pc, #164]	; (2a34 <Cellular_CommonGetIPAddress+0xfc>)
    298e:	47a0      	blx	r4
        cellularStatus = CELLULAR_BAD_PARAMETER;
    2990:	2405      	movs	r4, #5
    else
    {
        cellularStatus = _Cellular_IsValidPdn( contextId );
    }

    if( cellularStatus == CELLULAR_SUCCESS )
    2992:	b1ac      	cbz	r4, 29c0 <Cellular_CommonGetIPAddress+0x88>
            cellularStatus = _Cellular_TranslatePktStatus( pktStatus );
        }
    }

    return cellularStatus;
}
    2994:	4620      	mov	r0, r4
    2996:	b012      	add	sp, #72	; 0x48
    2998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    299c:	4604      	mov	r4, r0
        LogError( ( "_Cellular_CheckLibraryStatus failed" ) );
    299e:	f240 73aa 	movw	r3, #1962	; 0x7aa
    29a2:	4a1f      	ldr	r2, [pc, #124]	; (2a20 <Cellular_CommonGetIPAddress+0xe8>)
    29a4:	491f      	ldr	r1, [pc, #124]	; (2a24 <Cellular_CommonGetIPAddress+0xec>)
    29a6:	4820      	ldr	r0, [pc, #128]	; (2a28 <Cellular_CommonGetIPAddress+0xf0>)
    29a8:	4d20      	ldr	r5, [pc, #128]	; (2a2c <Cellular_CommonGetIPAddress+0xf4>)
    29aa:	47a8      	blx	r5
    29ac:	4822      	ldr	r0, [pc, #136]	; (2a38 <Cellular_CommonGetIPAddress+0x100>)
    29ae:	47a8      	blx	r5
    29b0:	4820      	ldr	r0, [pc, #128]	; (2a34 <Cellular_CommonGetIPAddress+0xfc>)
    29b2:	47a8      	blx	r5
    29b4:	e7ed      	b.n	2992 <Cellular_CommonGetIPAddress+0x5a>
        cellularStatus = _Cellular_IsValidPdn( contextId );
    29b6:	4640      	mov	r0, r8
    29b8:	4b20      	ldr	r3, [pc, #128]	; (2a3c <Cellular_CommonGetIPAddress+0x104>)
    29ba:	4798      	blx	r3
    29bc:	4604      	mov	r4, r0
    29be:	e7e8      	b.n	2992 <Cellular_CommonGetIPAddress+0x5a>
        ( void ) snprintf( cmdBuf, CELLULAR_AT_CMD_TYPICAL_MAX_SIZE, "%s%d", "AT+CGPADDR=", contextId );
    29c0:	f8cd 8000 	str.w	r8, [sp]
    29c4:	4b1e      	ldr	r3, [pc, #120]	; (2a40 <Cellular_CommonGetIPAddress+0x108>)
    29c6:	4a1f      	ldr	r2, [pc, #124]	; (2a44 <Cellular_CommonGetIPAddress+0x10c>)
    29c8:	2120      	movs	r1, #32
    29ca:	a80a      	add	r0, sp, #40	; 0x28
    29cc:	4d1e      	ldr	r5, [pc, #120]	; (2a48 <Cellular_CommonGetIPAddress+0x110>)
    29ce:	47a8      	blx	r5
        pktStatus = _Cellular_AtcmdRequestWithCallback( pContext, atReqGetIp );
    29d0:	ab07      	add	r3, sp, #28
    29d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    29d6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
    29da:	ab04      	add	r3, sp, #16
    29dc:	cb0e      	ldmia	r3, {r1, r2, r3}
    29de:	4638      	mov	r0, r7
    29e0:	4d1a      	ldr	r5, [pc, #104]	; (2a4c <Cellular_CommonGetIPAddress+0x114>)
    29e2:	47a8      	blx	r5
        if( pktStatus != CELLULAR_PKT_STATUS_OK )
    29e4:	4605      	mov	r5, r0
    29e6:	2800      	cmp	r0, #0
    29e8:	d0d4      	beq.n	2994 <Cellular_CommonGetIPAddress+0x5c>
            LogError( ( "_Cellular_GetIPAddress: couldn't retrieve the IP, cmdBuf:%s, pktStatus: %d", cmdBuf, pktStatus ) );
    29ea:	f240 73c2 	movw	r3, #1986	; 0x7c2
    29ee:	4a0c      	ldr	r2, [pc, #48]	; (2a20 <Cellular_CommonGetIPAddress+0xe8>)
    29f0:	490c      	ldr	r1, [pc, #48]	; (2a24 <Cellular_CommonGetIPAddress+0xec>)
    29f2:	480d      	ldr	r0, [pc, #52]	; (2a28 <Cellular_CommonGetIPAddress+0xf0>)
    29f4:	4c0d      	ldr	r4, [pc, #52]	; (2a2c <Cellular_CommonGetIPAddress+0xf4>)
    29f6:	47a0      	blx	r4
    29f8:	462a      	mov	r2, r5
    29fa:	a90a      	add	r1, sp, #40	; 0x28
    29fc:	4814      	ldr	r0, [pc, #80]	; (2a50 <Cellular_CommonGetIPAddress+0x118>)
    29fe:	47a0      	blx	r4
    2a00:	480c      	ldr	r0, [pc, #48]	; (2a34 <Cellular_CommonGetIPAddress+0xfc>)
    2a02:	47a0      	blx	r4
            cellularStatus = _Cellular_TranslatePktStatus( pktStatus );
    2a04:	4628      	mov	r0, r5
    2a06:	4b13      	ldr	r3, [pc, #76]	; (2a54 <Cellular_CommonGetIPAddress+0x11c>)
    2a08:	4798      	blx	r3
    2a0a:	4604      	mov	r4, r0
    2a0c:	e7c2      	b.n	2994 <Cellular_CommonGetIPAddress+0x5c>
    2a0e:	bf00      	nop
    2a10:	000088af 	.word	0x000088af
    2a14:	0000c7b8 	.word	0x0000c7b8
    2a18:	00002545 	.word	0x00002545
    2a1c:	000038dd 	.word	0x000038dd
    2a20:	0000b8e0 	.word	0x0000b8e0
    2a24:	0000a174 	.word	0x0000a174
    2a28:	0000a188 	.word	0x0000a188
    2a2c:	00005bfd 	.word	0x00005bfd
    2a30:	0000c7c4 	.word	0x0000c7c4
    2a34:	0000dcf4 	.word	0x0000dcf4
    2a38:	0000c598 	.word	0x0000c598
    2a3c:	00003add 	.word	0x00003add
    2a40:	0000c808 	.word	0x0000c808
    2a44:	0000ad58 	.word	0x0000ad58
    2a48:	00008d59 	.word	0x00008d59
    2a4c:	00003ed1 	.word	0x00003ed1
    2a50:	0000c814 	.word	0x0000c814
    2a54:	0000395d 	.word	0x0000395d

00002a58 <_Cellular_DestroyAtDataMutex>:

/*-----------------------------------------------------------*/

void _Cellular_DestroyAtDataMutex( CellularContext_t * pContext )
{
    2a58:	b508      	push	{r3, lr}
    configASSERT( pContext != NULL );
    2a5a:	b940      	cbnz	r0, 2a6e <_Cellular_DestroyAtDataMutex+0x16>
    2a5c:	f04f 0380 	mov.w	r3, #128	; 0x80
    2a60:	f383 8811 	msr	BASEPRI, r3
    2a64:	f3bf 8f6f 	isb	sy
    2a68:	f3bf 8f4f 	dsb	sy
    2a6c:	e7fe      	b.n	2a6c <_Cellular_DestroyAtDataMutex+0x14>

    PlatformMutex_Destroy( &pContext->libAtDataMutex );
    2a6e:	3060      	adds	r0, #96	; 0x60
    2a70:	4b01      	ldr	r3, [pc, #4]	; (2a78 <_Cellular_DestroyAtDataMutex+0x20>)
    2a72:	4798      	blx	r3
    2a74:	bd08      	pop	{r3, pc}
    2a76:	bf00      	nop
    2a78:	000054c9 	.word	0x000054c9

00002a7c <_Cellular_CreateAtDataMutex>:
}

/*-----------------------------------------------------------*/

bool _Cellular_CreateAtDataMutex( CellularContext_t * pContext )
{
    2a7c:	b508      	push	{r3, lr}
    bool status = false;

    configASSERT( pContext != NULL );
    2a7e:	b940      	cbnz	r0, 2a92 <_Cellular_CreateAtDataMutex+0x16>
    2a80:	f04f 0380 	mov.w	r3, #128	; 0x80
    2a84:	f383 8811 	msr	BASEPRI, r3
    2a88:	f3bf 8f6f 	isb	sy
    2a8c:	f3bf 8f4f 	dsb	sy
    2a90:	e7fe      	b.n	2a90 <_Cellular_CreateAtDataMutex+0x14>

    status = PlatformMutex_Create( &pContext->libAtDataMutex, false );
    2a92:	2100      	movs	r1, #0
    2a94:	3060      	adds	r0, #96	; 0x60
    2a96:	4b01      	ldr	r3, [pc, #4]	; (2a9c <_Cellular_CreateAtDataMutex+0x20>)
    2a98:	4798      	blx	r3

    return status;
}
    2a9a:	bd08      	pop	{r3, pc}
    2a9c:	00005485 	.word	0x00005485

00002aa0 <_Cellular_LockAtDataMutex>:

/*-----------------------------------------------------------*/

void _Cellular_LockAtDataMutex( CellularContext_t * pContext )
{
    2aa0:	b508      	push	{r3, lr}
    configASSERT( pContext != NULL );
    2aa2:	b940      	cbnz	r0, 2ab6 <_Cellular_LockAtDataMutex+0x16>
    2aa4:	f04f 0380 	mov.w	r3, #128	; 0x80
    2aa8:	f383 8811 	msr	BASEPRI, r3
    2aac:	f3bf 8f6f 	isb	sy
    2ab0:	f3bf 8f4f 	dsb	sy
    2ab4:	e7fe      	b.n	2ab4 <_Cellular_LockAtDataMutex+0x14>

    PlatformMutex_Lock( &pContext->libAtDataMutex );
    2ab6:	3060      	adds	r0, #96	; 0x60
    2ab8:	4b01      	ldr	r3, [pc, #4]	; (2ac0 <_Cellular_LockAtDataMutex+0x20>)
    2aba:	4798      	blx	r3
    2abc:	bd08      	pop	{r3, pc}
    2abe:	bf00      	nop
    2ac0:	000054e9 	.word	0x000054e9

00002ac4 <_Cellular_UnlockAtDataMutex>:
}

/*-----------------------------------------------------------*/

void _Cellular_UnlockAtDataMutex( CellularContext_t * pContext )
{
    2ac4:	b508      	push	{r3, lr}
    configASSERT( pContext != NULL );
    2ac6:	b940      	cbnz	r0, 2ada <_Cellular_UnlockAtDataMutex+0x16>
    2ac8:	f04f 0380 	mov.w	r3, #128	; 0x80
    2acc:	f383 8811 	msr	BASEPRI, r3
    2ad0:	f3bf 8f6f 	isb	sy
    2ad4:	f3bf 8f4f 	dsb	sy
    2ad8:	e7fe      	b.n	2ad8 <_Cellular_UnlockAtDataMutex+0x14>

    PlatformMutex_Unlock( &pContext->libAtDataMutex );
    2ada:	3060      	adds	r0, #96	; 0x60
    2adc:	4b01      	ldr	r3, [pc, #4]	; (2ae4 <_Cellular_UnlockAtDataMutex+0x20>)
    2ade:	4798      	blx	r3
    2ae0:	bd08      	pop	{r3, pc}
    2ae2:	bf00      	nop
    2ae4:	000054f9 	.word	0x000054f9

00002ae8 <atcmdQueryRegStatus>:
{
    2ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    configASSERT( pContext != NULL );
    2aea:	2800      	cmp	r0, #0
    2aec:	d044      	beq.n	2b78 <atcmdQueryRegStatus+0x90>
    2aee:	4604      	mov	r4, r0
    2af0:	460d      	mov	r5, r1
    cellularStatus = queryNetworkStatus( pContext, "AT+CREG?", "+CREG", CELLULAR_REG_TYPE_CREG );
    2af2:	2300      	movs	r3, #0
    2af4:	4a25      	ldr	r2, [pc, #148]	; (2b8c <atcmdQueryRegStatus+0xa4>)
    2af6:	4926      	ldr	r1, [pc, #152]	; (2b90 <atcmdQueryRegStatus+0xa8>)
    2af8:	4e26      	ldr	r6, [pc, #152]	; (2b94 <atcmdQueryRegStatus+0xac>)
    2afa:	47b0      	blx	r6
        if( cellularStatus == CELLULAR_SUCCESS )
    2afc:	4606      	mov	r6, r0
    2afe:	b928      	cbnz	r0, 2b0c <atcmdQueryRegStatus+0x24>
            ( void ) queryNetworkStatus( pContext, "AT+CGREG?", "+CGREG", CELLULAR_REG_TYPE_CGREG );
    2b00:	2301      	movs	r3, #1
    2b02:	4a25      	ldr	r2, [pc, #148]	; (2b98 <atcmdQueryRegStatus+0xb0>)
    2b04:	4925      	ldr	r1, [pc, #148]	; (2b9c <atcmdQueryRegStatus+0xb4>)
    2b06:	4620      	mov	r0, r4
    2b08:	4f22      	ldr	r7, [pc, #136]	; (2b94 <atcmdQueryRegStatus+0xac>)
    2b0a:	47b8      	blx	r7
        _Cellular_LockAtDataMutex( pContext );
    2b0c:	4620      	mov	r0, r4
    2b0e:	4b24      	ldr	r3, [pc, #144]	; (2ba0 <atcmdQueryRegStatus+0xb8>)
    2b10:	4798      	blx	r3
        psRegStatus = pContext->libAtData.psRegStatus;
    2b12:	f894 70e2 	ldrb.w	r7, [r4, #226]	; 0xe2
        _Cellular_UnlockAtDataMutex( pContext );
    2b16:	4620      	mov	r0, r4
    2b18:	4b22      	ldr	r3, [pc, #136]	; (2ba4 <atcmdQueryRegStatus+0xbc>)
    2b1a:	4798      	blx	r3
    if( ( cellularStatus == CELLULAR_SUCCESS ) &&
    2b1c:	b956      	cbnz	r6, 2b34 <atcmdQueryRegStatus+0x4c>
    2b1e:	2f01      	cmp	r7, #1
    2b20:	d008      	beq.n	2b34 <atcmdQueryRegStatus+0x4c>
        ( psRegStatus != REGISTRATION_STATUS_REGISTERED_HOME ) &&
    2b22:	2f05      	cmp	r7, #5
    2b24:	d006      	beq.n	2b34 <atcmdQueryRegStatus+0x4c>
        cellularStatus = queryNetworkStatus( pContext, "AT+CEREG?", "+CEREG", CELLULAR_REG_TYPE_CEREG );
    2b26:	2302      	movs	r3, #2
    2b28:	4a1f      	ldr	r2, [pc, #124]	; (2ba8 <atcmdQueryRegStatus+0xc0>)
    2b2a:	4920      	ldr	r1, [pc, #128]	; (2bac <atcmdQueryRegStatus+0xc4>)
    2b2c:	4620      	mov	r0, r4
    2b2e:	4e19      	ldr	r6, [pc, #100]	; (2b94 <atcmdQueryRegStatus+0xac>)
    2b30:	47b0      	blx	r6
    2b32:	4606      	mov	r6, r0
    if( cellularStatus == CELLULAR_SUCCESS )
    2b34:	b9f6      	cbnz	r6, 2b74 <atcmdQueryRegStatus+0x8c>
        _Cellular_LockAtDataMutex( pContext );
    2b36:	4620      	mov	r0, r4
    2b38:	4b19      	ldr	r3, [pc, #100]	; (2ba0 <atcmdQueryRegStatus+0xb8>)
    2b3a:	4798      	blx	r3
        pServiceStatus->rat = pLibAtData->rat;
    2b3c:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    2b40:	702b      	strb	r3, [r5, #0]
        pServiceStatus->csRegistrationStatus = pLibAtData->csRegStatus;
    2b42:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    2b46:	70ab      	strb	r3, [r5, #2]
        pServiceStatus->psRegistrationStatus = pLibAtData->psRegStatus;
    2b48:	f894 30e2 	ldrb.w	r3, [r4, #226]	; 0xe2
    2b4c:	70eb      	strb	r3, [r5, #3]
        pServiceStatus->csRejectionCause = pLibAtData->csRejCause;
    2b4e:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    2b52:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
        pServiceStatus->csRejectionType = pLibAtData->csRejectType;
    2b56:	f894 30e3 	ldrb.w	r3, [r4, #227]	; 0xe3
    2b5a:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
        pServiceStatus->psRejectionCause = pLibAtData->psRejCause;
    2b5e:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
    2b62:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
        pServiceStatus->psRejectionType = pLibAtData->psRejectType;
    2b66:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
    2b6a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
        _Cellular_UnlockAtDataMutex( pContext );
    2b6e:	4620      	mov	r0, r4
    2b70:	4b0c      	ldr	r3, [pc, #48]	; (2ba4 <atcmdQueryRegStatus+0xbc>)
    2b72:	4798      	blx	r3
}
    2b74:	4630      	mov	r0, r6
    2b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2b78:	f04f 0380 	mov.w	r3, #128	; 0x80
    2b7c:	f383 8811 	msr	BASEPRI, r3
    2b80:	f3bf 8f6f 	isb	sy
    2b84:	f3bf 8f4f 	dsb	sy
    2b88:	e7fe      	b.n	2b88 <atcmdQueryRegStatus+0xa0>
    2b8a:	bf00      	nop
    2b8c:	0000c860 	.word	0x0000c860
    2b90:	0000c868 	.word	0x0000c868
    2b94:	00002355 	.word	0x00002355
    2b98:	0000c874 	.word	0x0000c874
    2b9c:	0000c87c 	.word	0x0000c87c
    2ba0:	00002aa1 	.word	0x00002aa1
    2ba4:	00002ac5 	.word	0x00002ac5
    2ba8:	0000c888 	.word	0x0000c888
    2bac:	0000c890 	.word	0x0000c890

00002bb0 <Cellular_CommonGetServiceStatus>:
{
    2bb0:	b570      	push	{r4, r5, r6, lr}
    2bb2:	b08c      	sub	sp, #48	; 0x30
    2bb4:	4605      	mov	r5, r0
    2bb6:	460c      	mov	r4, r1
    ( void ) memset( &operatorInfo, 0, sizeof( cellularOperatorInfo_t ) );
    2bb8:	222c      	movs	r2, #44	; 0x2c
    2bba:	2100      	movs	r1, #0
    2bbc:	a801      	add	r0, sp, #4
    2bbe:	4b1e      	ldr	r3, [pc, #120]	; (2c38 <Cellular_CommonGetServiceStatus+0x88>)
    2bc0:	4798      	blx	r3
    cellularStatus = _Cellular_CheckLibraryStatus( pContext );
    2bc2:	4628      	mov	r0, r5
    2bc4:	4b1d      	ldr	r3, [pc, #116]	; (2c3c <Cellular_CommonGetServiceStatus+0x8c>)
    2bc6:	4798      	blx	r3
    if( cellularStatus != CELLULAR_SUCCESS )
    2bc8:	4606      	mov	r6, r0
    2bca:	b9e0      	cbnz	r0, 2c06 <Cellular_CommonGetServiceStatus+0x56>
    else if( pServiceStatus == NULL )
    2bcc:	b33c      	cbz	r4, 2c1e <Cellular_CommonGetServiceStatus+0x6e>
        ( void ) atcmdQueryRegStatus( pContext, pServiceStatus );
    2bce:	4621      	mov	r1, r4
    2bd0:	4628      	mov	r0, r5
    2bd2:	4b1b      	ldr	r3, [pc, #108]	; (2c40 <Cellular_CommonGetServiceStatus+0x90>)
    2bd4:	4798      	blx	r3
        ( void ) atcmdUpdateMccMnc( pContext, &operatorInfo );
    2bd6:	a901      	add	r1, sp, #4
    2bd8:	4628      	mov	r0, r5
    2bda:	4b1a      	ldr	r3, [pc, #104]	; (2c44 <Cellular_CommonGetServiceStatus+0x94>)
    2bdc:	4798      	blx	r3
        pServiceStatus->networkRegistrationMode = operatorInfo.networkRegMode;
    2bde:	f89d 300d 	ldrb.w	r3, [sp, #13]
    2be2:	7063      	strb	r3, [r4, #1]
        pServiceStatus->plmnInfo = operatorInfo.plmnInfo;
    2be4:	ab01      	add	r3, sp, #4
    2be6:	cb03      	ldmia	r3!, {r0, r1}
    2be8:	6060      	str	r0, [r4, #4]
    2bea:	60a1      	str	r1, [r4, #8]
        ( void ) strncpy( pServiceStatus->operatorName, operatorInfo.operatorName, CELLULAR_NETWORK_NAME_MAX_SIZE );
    2bec:	2220      	movs	r2, #32
    2bee:	f10d 010f 	add.w	r1, sp, #15
    2bf2:	f104 000d 	add.w	r0, r4, #13
    2bf6:	4b14      	ldr	r3, [pc, #80]	; (2c48 <Cellular_CommonGetServiceStatus+0x98>)
    2bf8:	4798      	blx	r3
        pServiceStatus->operatorNameFormat = operatorInfo.operatorNameFormat;
    2bfa:	f89d 300e 	ldrb.w	r3, [sp, #14]
    2bfe:	7323      	strb	r3, [r4, #12]
}
    2c00:	4630      	mov	r0, r6
    2c02:	b00c      	add	sp, #48	; 0x30
    2c04:	bd70      	pop	{r4, r5, r6, pc}
        LogError( ( "_Cellular_CheckLibraryStatus failed" ) );
    2c06:	f44f 63de 	mov.w	r3, #1776	; 0x6f0
    2c0a:	4a10      	ldr	r2, [pc, #64]	; (2c4c <Cellular_CommonGetServiceStatus+0x9c>)
    2c0c:	4910      	ldr	r1, [pc, #64]	; (2c50 <Cellular_CommonGetServiceStatus+0xa0>)
    2c0e:	4811      	ldr	r0, [pc, #68]	; (2c54 <Cellular_CommonGetServiceStatus+0xa4>)
    2c10:	4c11      	ldr	r4, [pc, #68]	; (2c58 <Cellular_CommonGetServiceStatus+0xa8>)
    2c12:	47a0      	blx	r4
    2c14:	4811      	ldr	r0, [pc, #68]	; (2c5c <Cellular_CommonGetServiceStatus+0xac>)
    2c16:	47a0      	blx	r4
    2c18:	4811      	ldr	r0, [pc, #68]	; (2c60 <Cellular_CommonGetServiceStatus+0xb0>)
    2c1a:	47a0      	blx	r4
    2c1c:	e7f0      	b.n	2c00 <Cellular_CommonGetServiceStatus+0x50>
        LogError( ( "Cellular_CommonGetServiceStatus : Bad parameter" ) );
    2c1e:	f240 63f4 	movw	r3, #1780	; 0x6f4
    2c22:	4a0a      	ldr	r2, [pc, #40]	; (2c4c <Cellular_CommonGetServiceStatus+0x9c>)
    2c24:	490a      	ldr	r1, [pc, #40]	; (2c50 <Cellular_CommonGetServiceStatus+0xa0>)
    2c26:	480b      	ldr	r0, [pc, #44]	; (2c54 <Cellular_CommonGetServiceStatus+0xa4>)
    2c28:	4c0b      	ldr	r4, [pc, #44]	; (2c58 <Cellular_CommonGetServiceStatus+0xa8>)
    2c2a:	47a0      	blx	r4
    2c2c:	480d      	ldr	r0, [pc, #52]	; (2c64 <Cellular_CommonGetServiceStatus+0xb4>)
    2c2e:	47a0      	blx	r4
    2c30:	480b      	ldr	r0, [pc, #44]	; (2c60 <Cellular_CommonGetServiceStatus+0xb0>)
    2c32:	47a0      	blx	r4
        cellularStatus = CELLULAR_BAD_PARAMETER;
    2c34:	2605      	movs	r6, #5
    2c36:	e7e3      	b.n	2c00 <Cellular_CommonGetServiceStatus+0x50>
    2c38:	000088af 	.word	0x000088af
    2c3c:	000038dd 	.word	0x000038dd
    2c40:	00002ae9 	.word	0x00002ae9
    2c44:	000022fd 	.word	0x000022fd
    2c48:	00008e25 	.word	0x00008e25
    2c4c:	0000b8fc 	.word	0x0000b8fc
    2c50:	0000a174 	.word	0x0000a174
    2c54:	0000a188 	.word	0x0000a188
    2c58:	00005bfd 	.word	0x00005bfd
    2c5c:	0000c598 	.word	0x0000c598
    2c60:	0000dcf4 	.word	0x0000dcf4
    2c64:	0000c89c 	.word	0x0000c89c

00002c68 <_Cellular_RecvFuncGetNetworkReg>:
{
    2c68:	b570      	push	{r4, r5, r6, lr}
    2c6a:	b082      	sub	sp, #8
    char * pPregLine = NULL;
    2c6c:	2400      	movs	r4, #0
    2c6e:	9401      	str	r4, [sp, #4]
    if( pContext == NULL )
    2c70:	2800      	cmp	r0, #0
    2c72:	d03d      	beq.n	2cf0 <_Cellular_RecvFuncGetNetworkReg+0x88>
    2c74:	4604      	mov	r4, r0
    else if( ( pAtResp == NULL ) || ( pAtResp->pItm == NULL ) || ( pAtResp->pItm->pLine == NULL ) )
    2c76:	b199      	cbz	r1, 2ca0 <_Cellular_RecvFuncGetNetworkReg+0x38>
    2c78:	6849      	ldr	r1, [r1, #4]
    2c7a:	b189      	cbz	r1, 2ca0 <_Cellular_RecvFuncGetNetworkReg+0x38>
    2c7c:	6849      	ldr	r1, [r1, #4]
    2c7e:	b179      	cbz	r1, 2ca0 <_Cellular_RecvFuncGetNetworkReg+0x38>
    else if( ( pData == NULL ) || ( dataLen != sizeof( CellularNetworkRegType_t ) ) )
    2c80:	b10a      	cbz	r2, 2c86 <_Cellular_RecvFuncGetNetworkReg+0x1e>
    2c82:	2b01      	cmp	r3, #1
    2c84:	d01b      	beq.n	2cbe <_Cellular_RecvFuncGetNetworkReg+0x56>
        LogError( ( "_Cellular_RecvFuncGetPsreg: ppData is invalid or dataLen is wrong" ) );
    2c86:	f240 23f6 	movw	r3, #758	; 0x2f6
    2c8a:	4a1a      	ldr	r2, [pc, #104]	; (2cf4 <_Cellular_RecvFuncGetNetworkReg+0x8c>)
    2c8c:	491a      	ldr	r1, [pc, #104]	; (2cf8 <_Cellular_RecvFuncGetNetworkReg+0x90>)
    2c8e:	481b      	ldr	r0, [pc, #108]	; (2cfc <_Cellular_RecvFuncGetNetworkReg+0x94>)
    2c90:	4c1b      	ldr	r4, [pc, #108]	; (2d00 <_Cellular_RecvFuncGetNetworkReg+0x98>)
    2c92:	47a0      	blx	r4
    2c94:	481b      	ldr	r0, [pc, #108]	; (2d04 <_Cellular_RecvFuncGetNetworkReg+0x9c>)
    2c96:	47a0      	blx	r4
    2c98:	481b      	ldr	r0, [pc, #108]	; (2d08 <_Cellular_RecvFuncGetNetworkReg+0xa0>)
    2c9a:	47a0      	blx	r4
        pktStatus = CELLULAR_PKT_STATUS_BAD_PARAM;
    2c9c:	2506      	movs	r5, #6
    2c9e:	e00b      	b.n	2cb8 <_Cellular_RecvFuncGetNetworkReg+0x50>
        LogError( ( "_Cellular_RecvFuncGetPsreg: response is invalid" ) );
    2ca0:	f240 23f1 	movw	r3, #753	; 0x2f1
    2ca4:	4a13      	ldr	r2, [pc, #76]	; (2cf4 <_Cellular_RecvFuncGetNetworkReg+0x8c>)
    2ca6:	4914      	ldr	r1, [pc, #80]	; (2cf8 <_Cellular_RecvFuncGetNetworkReg+0x90>)
    2ca8:	4814      	ldr	r0, [pc, #80]	; (2cfc <_Cellular_RecvFuncGetNetworkReg+0x94>)
    2caa:	4c15      	ldr	r4, [pc, #84]	; (2d00 <_Cellular_RecvFuncGetNetworkReg+0x98>)
    2cac:	47a0      	blx	r4
    2cae:	4817      	ldr	r0, [pc, #92]	; (2d0c <_Cellular_RecvFuncGetNetworkReg+0xa4>)
    2cb0:	47a0      	blx	r4
    2cb2:	4815      	ldr	r0, [pc, #84]	; (2d08 <_Cellular_RecvFuncGetNetworkReg+0xa0>)
    2cb4:	47a0      	blx	r4
        pktStatus = CELLULAR_PKT_STATUS_BAD_PARAM;
    2cb6:	2506      	movs	r5, #6
}
    2cb8:	4628      	mov	r0, r5
    2cba:	b002      	add	sp, #8
    2cbc:	bd70      	pop	{r4, r5, r6, pc}
        regType = *( ( CellularNetworkRegType_t * ) pData );
    2cbe:	7816      	ldrb	r6, [r2, #0]
        pPregLine = pAtResp->pItm->pLine;
    2cc0:	a802      	add	r0, sp, #8
    2cc2:	f840 1d04 	str.w	r1, [r0, #-4]!
        atCoreStatus = Cellular_ATRemoveLeadingWhiteSpaces( &pPregLine );
    2cc6:	4b12      	ldr	r3, [pc, #72]	; (2d10 <_Cellular_RecvFuncGetNetworkReg+0xa8>)
    2cc8:	4798      	blx	r3
        pktStatus = _Cellular_TranslateAtCoreStatus( atCoreStatus );
    2cca:	4b12      	ldr	r3, [pc, #72]	; (2d14 <_Cellular_RecvFuncGetNetworkReg+0xac>)
    2ccc:	4798      	blx	r3
        if( pktStatus == CELLULAR_PKT_STATUS_OK )
    2cce:	4605      	mov	r5, r0
    2cd0:	2800      	cmp	r0, #0
    2cd2:	d1f1      	bne.n	2cb8 <_Cellular_RecvFuncGetNetworkReg+0x50>
            _Cellular_LockAtDataMutex( pContext );
    2cd4:	4620      	mov	r0, r4
    2cd6:	4b10      	ldr	r3, [pc, #64]	; (2d18 <_Cellular_RecvFuncGetNetworkReg+0xb0>)
    2cd8:	4798      	blx	r3
            pktStatus = _Cellular_ParseRegStatus( pContext, pPregLine, false, regType );
    2cda:	4633      	mov	r3, r6
    2cdc:	2200      	movs	r2, #0
    2cde:	9901      	ldr	r1, [sp, #4]
    2ce0:	4620      	mov	r0, r4
    2ce2:	4d0e      	ldr	r5, [pc, #56]	; (2d1c <_Cellular_RecvFuncGetNetworkReg+0xb4>)
    2ce4:	47a8      	blx	r5
    2ce6:	4605      	mov	r5, r0
            _Cellular_UnlockAtDataMutex( pContext );
    2ce8:	4620      	mov	r0, r4
    2cea:	4b0d      	ldr	r3, [pc, #52]	; (2d20 <_Cellular_RecvFuncGetNetworkReg+0xb8>)
    2cec:	4798      	blx	r3
    2cee:	e7e3      	b.n	2cb8 <_Cellular_RecvFuncGetNetworkReg+0x50>
        pktStatus = CELLULAR_PKT_STATUS_INVALID_HANDLE;
    2cf0:	2508      	movs	r5, #8
    2cf2:	e7e1      	b.n	2cb8 <_Cellular_RecvFuncGetNetworkReg+0x50>
    2cf4:	0000b91c 	.word	0x0000b91c
    2cf8:	0000a174 	.word	0x0000a174
    2cfc:	0000a188 	.word	0x0000a188
    2d00:	00005bfd 	.word	0x00005bfd
    2d04:	0000c8fc 	.word	0x0000c8fc
    2d08:	0000dcf4 	.word	0x0000dcf4
    2d0c:	0000c8cc 	.word	0x0000c8cc
    2d10:	00003461 	.word	0x00003461
    2d14:	00003a95 	.word	0x00003a95
    2d18:	00002aa1 	.word	0x00002aa1
    2d1c:	0000315d 	.word	0x0000315d
    2d20:	00002ac5 	.word	0x00002ac5

00002d24 <_Cellular_InitAtData>:
void _Cellular_InitAtData( CellularContext_t * pContext,
                           uint32_t mode )
{
    cellularAtData_t * pLibAtData = NULL;

    configASSERT( pContext != NULL );
    2d24:	4603      	mov	r3, r0
    2d26:	b170      	cbz	r0, 2d46 <_Cellular_InitAtData+0x22>

    pLibAtData = &pContext->libAtData;

    if( mode == 0u )
    2d28:	b1b1      	cbz	r1, 2d58 <_Cellular_InitAtData+0x34>
        ( void ) memset( pLibAtData, 0, sizeof( cellularAtData_t ) );
        pLibAtData->csRegStatus = REGISTRATION_STATUS_NOT_REGISTERED_SEARCHING;
        pLibAtData->psRegStatus = REGISTRATION_STATUS_NOT_REGISTERED_SEARCHING;
    }

    pLibAtData->lac = 0xFFFFU;
    2d2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2d2e:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
    pLibAtData->cellId = 0xFFFFFFFFU;
    2d32:	f04f 31ff 	mov.w	r1, #4294967295
    2d36:	f8c3 10e8 	str.w	r1, [r3, #232]	; 0xe8
    pLibAtData->rat = CELLULAR_RAT_INVALID;
    2d3a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    pLibAtData->rac = 0xFF;
    2d3e:	22ff      	movs	r2, #255	; 0xff
    2d40:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee
    2d44:	4770      	bx	lr
    2d46:	f04f 0380 	mov.w	r3, #128	; 0x80
    2d4a:	f383 8811 	msr	BASEPRI, r3
    2d4e:	f3bf 8f6f 	isb	sy
    2d52:	f3bf 8f4f 	dsb	sy
    2d56:	e7fe      	b.n	2d56 <_Cellular_InitAtData+0x32>
        ( void ) memset( pLibAtData, 0, sizeof( cellularAtData_t ) );
    2d58:	2200      	movs	r2, #0
    2d5a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    2d5e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    2d62:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    2d66:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    2d6a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
        pLibAtData->csRegStatus = REGISTRATION_STATUS_NOT_REGISTERED_SEARCHING;
    2d6e:	2202      	movs	r2, #2
    2d70:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
        pLibAtData->psRegStatus = REGISTRATION_STATUS_NOT_REGISTERED_SEARCHING;
    2d74:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
    2d78:	e7d7      	b.n	2d2a <_Cellular_InitAtData+0x6>
	...

00002d7c <_parseLacTacInRegStatus>:
/*-----------------------------------------------------------*/

static CellularPktStatus_t _parseLacTacInRegStatus( CellularNetworkRegType_t regType,
                                                    const char * pToken,
                                                    cellularAtData_t * pLibAtData )
{
    2d7c:	b530      	push	{r4, r5, lr}
    2d7e:	b083      	sub	sp, #12
    2d80:	4604      	mov	r4, r0
    2d82:	4608      	mov	r0, r1
    2d84:	4615      	mov	r5, r2
    int32_t tempValue = 0;
    2d86:	aa02      	add	r2, sp, #8
    2d88:	2300      	movs	r3, #0
    2d8a:	f842 3d04 	str.w	r3, [r2, #-4]!
    uint16_t var = 0;
    CellularATError_t atCoreStatus = CELLULAR_AT_SUCCESS;
    CellularPktStatus_t packetStatus = CELLULAR_PKT_STATUS_OK;

    atCoreStatus = Cellular_ATStrtoi( pToken, 16, &tempValue );
    2d8e:	2110      	movs	r1, #16
    2d90:	4b0d      	ldr	r3, [pc, #52]	; (2dc8 <_parseLacTacInRegStatus+0x4c>)
    2d92:	4798      	blx	r3

    if( atCoreStatus == CELLULAR_AT_SUCCESS )
    2d94:	4603      	mov	r3, r0
    2d96:	b928      	cbnz	r0, 2da4 <_parseLacTacInRegStatus+0x28>
    {
        if( ( tempValue >= 0 ) && ( tempValue <= UINT16_MAX ) )
    2d98:	9a01      	ldr	r2, [sp, #4]
    2d9a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    2d9e:	d20c      	bcs.n	2dba <_parseLacTacInRegStatus+0x3e>
        {
            var = ( uint16_t ) tempValue;
    2da0:	b292      	uxth	r2, r2
    2da2:	e000      	b.n	2da6 <_parseLacTacInRegStatus+0x2a>
    uint16_t var = 0;
    2da4:	2200      	movs	r2, #0
        {
            atCoreStatus = CELLULAR_AT_ERROR;
        }
    }

    if( atCoreStatus == CELLULAR_AT_SUCCESS )
    2da6:	b91b      	cbnz	r3, 2db0 <_parseLacTacInRegStatus+0x34>
    {
        /* Parsing Location area code for CREG or CGREG. */
        if( ( regType == CELLULAR_REG_TYPE_CREG ) || ( regType == CELLULAR_REG_TYPE_CGREG ) )
    2da8:	2c01      	cmp	r4, #1
    2daa:	d909      	bls.n	2dc0 <_parseLacTacInRegStatus+0x44>
        {
            pLibAtData->lac = ( uint16_t ) var;
        }
        /* Parsing Tracking area code for CEREG. */
        else if( regType == CELLULAR_REG_TYPE_CEREG )
    2dac:	2c02      	cmp	r4, #2
    2dae:	d009      	beq.n	2dc4 <_parseLacTacInRegStatus+0x48>
        {
            /* Empty else MISRA 15.7 */
        }
    }

    packetStatus = _Cellular_TranslateAtCoreStatus( atCoreStatus );
    2db0:	4618      	mov	r0, r3
    2db2:	4b06      	ldr	r3, [pc, #24]	; (2dcc <_parseLacTacInRegStatus+0x50>)
    2db4:	4798      	blx	r3
    return packetStatus;
}
    2db6:	b003      	add	sp, #12
    2db8:	bd30      	pop	{r4, r5, pc}
            atCoreStatus = CELLULAR_AT_ERROR;
    2dba:	2305      	movs	r3, #5
    uint16_t var = 0;
    2dbc:	2200      	movs	r2, #0
    2dbe:	e7f2      	b.n	2da6 <_parseLacTacInRegStatus+0x2a>
            pLibAtData->lac = ( uint16_t ) var;
    2dc0:	81aa      	strh	r2, [r5, #12]
    2dc2:	e7f5      	b.n	2db0 <_parseLacTacInRegStatus+0x34>
            pLibAtData->tac = ( uint16_t ) var;
    2dc4:	822a      	strh	r2, [r5, #16]
    2dc6:	e7f3      	b.n	2db0 <_parseLacTacInRegStatus+0x34>
    2dc8:	00003751 	.word	0x00003751
    2dcc:	00003a95 	.word	0x00003a95

00002dd0 <_parseRejectTypeInRegStatus>:
/*-----------------------------------------------------------*/

static CellularPktStatus_t _parseRejectTypeInRegStatus( CellularNetworkRegType_t regType,
                                                        const char * pToken,
                                                        cellularAtData_t * pLibAtData )
{
    2dd0:	b530      	push	{r4, r5, lr}
    2dd2:	b083      	sub	sp, #12
    2dd4:	4604      	mov	r4, r0
    2dd6:	4608      	mov	r0, r1
    2dd8:	4615      	mov	r5, r2
    int32_t tempValue = 0;
    2dda:	aa02      	add	r2, sp, #8
    2ddc:	2300      	movs	r3, #0
    2dde:	f842 3d04 	str.w	r3, [r2, #-4]!
    uint8_t rejType = 0;
    CellularATError_t atCoreStatus = CELLULAR_AT_SUCCESS;
    CellularPktStatus_t packetStatus = CELLULAR_PKT_STATUS_OK;

    atCoreStatus = Cellular_ATStrtoi( pToken, 10, &tempValue );
    2de2:	210a      	movs	r1, #10
    2de4:	4b10      	ldr	r3, [pc, #64]	; (2e28 <_parseRejectTypeInRegStatus+0x58>)
    2de6:	4798      	blx	r3

    if( atCoreStatus == CELLULAR_AT_SUCCESS )
    2de8:	4603      	mov	r3, r0
    2dea:	b920      	cbnz	r0, 2df6 <_parseRejectTypeInRegStatus+0x26>
    {
        if( ( tempValue >= 0 ) && ( tempValue <= ( int32_t ) UINT8_MAX ) )
    2dec:	9a01      	ldr	r2, [sp, #4]
    2dee:	2aff      	cmp	r2, #255	; 0xff
    2df0:	d80c      	bhi.n	2e0c <_parseRejectTypeInRegStatus+0x3c>
        {
            rejType = ( uint8_t ) tempValue;
    2df2:	b2d2      	uxtb	r2, r2
    2df4:	e000      	b.n	2df8 <_parseRejectTypeInRegStatus+0x28>
    uint8_t rejType = 0;
    2df6:	2200      	movs	r2, #0
        {
            atCoreStatus = CELLULAR_AT_ERROR;
        }
    }

    if( atCoreStatus == CELLULAR_AT_SUCCESS )
    2df8:	b91b      	cbnz	r3, 2e02 <_parseRejectTypeInRegStatus+0x32>
    {
        if( regType == CELLULAR_REG_TYPE_CREG )
    2dfa:	b964      	cbnz	r4, 2e16 <_parseRejectTypeInRegStatus+0x46>
        {
            /* Reject Type is only stored if the registration status is denied. */
            if( pLibAtData->csRegStatus == REGISTRATION_STATUS_REGISTRATION_DENIED )
    2dfc:	7869      	ldrb	r1, [r5, #1]
    2dfe:	2903      	cmp	r1, #3
    2e00:	d007      	beq.n	2e12 <_parseRejectTypeInRegStatus+0x42>
        {
            /* Empty else MISRA 15.7 */
        }
    }

    packetStatus = _Cellular_TranslateAtCoreStatus( atCoreStatus );
    2e02:	4618      	mov	r0, r3
    2e04:	4b09      	ldr	r3, [pc, #36]	; (2e2c <_parseRejectTypeInRegStatus+0x5c>)
    2e06:	4798      	blx	r3
    return packetStatus;
}
    2e08:	b003      	add	sp, #12
    2e0a:	bd30      	pop	{r4, r5, pc}
            atCoreStatus = CELLULAR_AT_ERROR;
    2e0c:	2305      	movs	r3, #5
    uint8_t rejType = 0;
    2e0e:	2200      	movs	r2, #0
    2e10:	e7f2      	b.n	2df8 <_parseRejectTypeInRegStatus+0x28>
                pLibAtData->csRejectType = rejType;
    2e12:	70ea      	strb	r2, [r5, #3]
    2e14:	e7f5      	b.n	2e02 <_parseRejectTypeInRegStatus+0x32>
        else if( ( regType == CELLULAR_REG_TYPE_CGREG ) || ( regType == CELLULAR_REG_TYPE_CEREG ) )
    2e16:	3c01      	subs	r4, #1
    2e18:	b2e4      	uxtb	r4, r4
    2e1a:	2c01      	cmp	r4, #1
    2e1c:	d8f1      	bhi.n	2e02 <_parseRejectTypeInRegStatus+0x32>
            if( pLibAtData->psRegStatus == REGISTRATION_STATUS_REGISTRATION_DENIED )
    2e1e:	78a9      	ldrb	r1, [r5, #2]
    2e20:	2903      	cmp	r1, #3
    2e22:	d1ee      	bne.n	2e02 <_parseRejectTypeInRegStatus+0x32>
                pLibAtData->psRejectType = rejType;
    2e24:	716a      	strb	r2, [r5, #5]
    2e26:	e7ec      	b.n	2e02 <_parseRejectTypeInRegStatus+0x32>
    2e28:	00003751 	.word	0x00003751
    2e2c:	00003a95 	.word	0x00003a95

00002e30 <_parseRejectCauseInRegStatus>:
/*-----------------------------------------------------------*/

static CellularPktStatus_t _parseRejectCauseInRegStatus( CellularNetworkRegType_t regType,
                                                         const char * pToken,
                                                         cellularAtData_t * pLibAtData )
{
    2e30:	b530      	push	{r4, r5, lr}
    2e32:	b083      	sub	sp, #12
    2e34:	4604      	mov	r4, r0
    2e36:	4608      	mov	r0, r1
    2e38:	4615      	mov	r5, r2
    int32_t tempValue = 0;
    2e3a:	aa02      	add	r2, sp, #8
    2e3c:	2300      	movs	r3, #0
    2e3e:	f842 3d04 	str.w	r3, [r2, #-4]!
    uint8_t rejCause = 0;
    CellularATError_t atCoreStatus = CELLULAR_AT_SUCCESS;
    CellularPktStatus_t packetStatus = CELLULAR_PKT_STATUS_OK;

    atCoreStatus = Cellular_ATStrtoi( pToken, 10, &tempValue );
    2e42:	210a      	movs	r1, #10
    2e44:	4b10      	ldr	r3, [pc, #64]	; (2e88 <_parseRejectCauseInRegStatus+0x58>)
    2e46:	4798      	blx	r3

    if( atCoreStatus == CELLULAR_AT_SUCCESS )
    2e48:	4603      	mov	r3, r0
    2e4a:	b920      	cbnz	r0, 2e56 <_parseRejectCauseInRegStatus+0x26>
    {
        if( ( tempValue >= 0 ) && ( tempValue <= ( int32_t ) UINT8_MAX ) )
    2e4c:	9a01      	ldr	r2, [sp, #4]
    2e4e:	2aff      	cmp	r2, #255	; 0xff
    2e50:	d80c      	bhi.n	2e6c <_parseRejectCauseInRegStatus+0x3c>
        {
            rejCause = ( uint8_t ) tempValue;
    2e52:	b2d2      	uxtb	r2, r2
    2e54:	e000      	b.n	2e58 <_parseRejectCauseInRegStatus+0x28>
    uint8_t rejCause = 0;
    2e56:	2200      	movs	r2, #0
        {
            atCoreStatus = CELLULAR_AT_ERROR;
        }
    }

    if( atCoreStatus == CELLULAR_AT_SUCCESS )
    2e58:	b91b      	cbnz	r3, 2e62 <_parseRejectCauseInRegStatus+0x32>
    {
        if( regType == CELLULAR_REG_TYPE_CREG )
    2e5a:	b964      	cbnz	r4, 2e76 <_parseRejectCauseInRegStatus+0x46>
        {
            if( pLibAtData->csRegStatus == REGISTRATION_STATUS_REGISTRATION_DENIED )
    2e5c:	7869      	ldrb	r1, [r5, #1]
    2e5e:	2903      	cmp	r1, #3
    2e60:	d007      	beq.n	2e72 <_parseRejectCauseInRegStatus+0x42>
        {
            /* Empty else MISRA 15.7 */
        }
    }

    packetStatus = _Cellular_TranslateAtCoreStatus( atCoreStatus );
    2e62:	4618      	mov	r0, r3
    2e64:	4b09      	ldr	r3, [pc, #36]	; (2e8c <_parseRejectCauseInRegStatus+0x5c>)
    2e66:	4798      	blx	r3

    return packetStatus;
}
    2e68:	b003      	add	sp, #12
    2e6a:	bd30      	pop	{r4, r5, pc}
            atCoreStatus = CELLULAR_AT_ERROR;
    2e6c:	2305      	movs	r3, #5
    uint8_t rejCause = 0;
    2e6e:	2200      	movs	r2, #0
    2e70:	e7f2      	b.n	2e58 <_parseRejectCauseInRegStatus+0x28>
                pLibAtData->csRejCause = rejCause;
    2e72:	712a      	strb	r2, [r5, #4]
    2e74:	e7f5      	b.n	2e62 <_parseRejectCauseInRegStatus+0x32>
        else if( ( regType == CELLULAR_REG_TYPE_CGREG ) || ( regType == CELLULAR_REG_TYPE_CEREG ) )
    2e76:	3c01      	subs	r4, #1
    2e78:	b2e4      	uxtb	r4, r4
    2e7a:	2c01      	cmp	r4, #1
    2e7c:	d8f1      	bhi.n	2e62 <_parseRejectCauseInRegStatus+0x32>
            if( pLibAtData->psRegStatus == REGISTRATION_STATUS_REGISTRATION_DENIED )
    2e7e:	78a9      	ldrb	r1, [r5, #2]
    2e80:	2903      	cmp	r1, #3
    2e82:	d1ee      	bne.n	2e62 <_parseRejectCauseInRegStatus+0x32>
                pLibAtData->psRejCause = rejCause;
    2e84:	71aa      	strb	r2, [r5, #6]
    2e86:	e7ec      	b.n	2e62 <_parseRejectCauseInRegStatus+0x32>
    2e88:	00003751 	.word	0x00003751
    2e8c:	00003a95 	.word	0x00003a95

00002e90 <_parseRegStatusInRegStatusParsing>:
{
    2e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2e94:	b082      	sub	sp, #8
    2e96:	4680      	mov	r8, r0
    2e98:	4610      	mov	r0, r2
    2e9a:	461f      	mov	r7, r3
    int32_t tempValue = 0;
    2e9c:	2300      	movs	r3, #0
    2e9e:	9301      	str	r3, [sp, #4]
    if( ( regType != CELLULAR_REG_TYPE_CREG ) && ( regType != CELLULAR_REG_TYPE_CEREG ) &&
    2ea0:	460e      	mov	r6, r1
    2ea2:	b131      	cbz	r1, 2eb2 <_parseRegStatusInRegStatusParsing+0x22>
    2ea4:	2902      	cmp	r1, #2
    2ea6:	d004      	beq.n	2eb2 <_parseRegStatusInRegStatusParsing+0x22>
    2ea8:	2901      	cmp	r1, #1
    2eaa:	d002      	beq.n	2eb2 <_parseRegStatusInRegStatusParsing+0x22>
    CellularNetworkRegistrationStatus_t regStatus = REGISTRATION_STATUS_UNKNOWN;
    2eac:	2404      	movs	r4, #4
        packetStatus = CELLULAR_PKT_STATUS_BAD_PARAM;
    2eae:	2506      	movs	r5, #6
    2eb0:	e00f      	b.n	2ed2 <_parseRegStatusInRegStatusParsing+0x42>
        atCoreStatus = Cellular_ATStrtoi( pToken, 10, &tempValue );
    2eb2:	aa01      	add	r2, sp, #4
    2eb4:	210a      	movs	r1, #10
    2eb6:	4b14      	ldr	r3, [pc, #80]	; (2f08 <_parseRegStatusInRegStatusParsing+0x78>)
    2eb8:	4798      	blx	r3
        if( atCoreStatus == CELLULAR_AT_SUCCESS )
    2eba:	4603      	mov	r3, r0
    2ebc:	b920      	cbnz	r0, 2ec8 <_parseRegStatusInRegStatusParsing+0x38>
            if( ( tempValue >= 0 ) && ( tempValue < ( int32_t ) REGISTRATION_STATUS_MAX ) )
    2ebe:	9c01      	ldr	r4, [sp, #4]
    2ec0:	2c08      	cmp	r4, #8
    2ec2:	d817      	bhi.n	2ef4 <_parseRegStatusInRegStatusParsing+0x64>
                regStatus = ( CellularNetworkRegistrationStatus_t ) tempValue;
    2ec4:	b2e4      	uxtb	r4, r4
    2ec6:	e000      	b.n	2eca <_parseRegStatusInRegStatusParsing+0x3a>
    CellularNetworkRegistrationStatus_t regStatus = REGISTRATION_STATUS_UNKNOWN;
    2ec8:	2404      	movs	r4, #4
        packetStatus = _Cellular_TranslateAtCoreStatus( atCoreStatus );
    2eca:	4618      	mov	r0, r3
    2ecc:	4b0f      	ldr	r3, [pc, #60]	; (2f0c <_parseRegStatusInRegStatusParsing+0x7c>)
    2ece:	4798      	blx	r3
    2ed0:	4605      	mov	r5, r0
    if( packetStatus == CELLULAR_PKT_STATUS_OK )
    2ed2:	b95d      	cbnz	r5, 2eec <_parseRegStatusInRegStatusParsing+0x5c>
        if( regType == CELLULAR_REG_TYPE_CREG )
    2ed4:	b98e      	cbnz	r6, 2efa <_parseRegStatusInRegStatusParsing+0x6a>
            pLibAtData->csRegStatus = regStatus;
    2ed6:	707c      	strb	r4, [r7, #1]
        if( regStatus == REGISTRATION_STATUS_REGISTERED_HOME )
    2ed8:	2c01      	cmp	r4, #1
    2eda:	d007      	beq.n	2eec <_parseRegStatusInRegStatusParsing+0x5c>
        else if( regStatus == REGISTRATION_STATUS_ROAMING_REGISTERED )
    2edc:	2c05      	cmp	r4, #5
    2ede:	d005      	beq.n	2eec <_parseRegStatusInRegStatusParsing+0x5c>
        else if( regStatus == REGISTRATION_STATUS_REGISTRATION_DENIED )
    2ee0:	2c03      	cmp	r4, #3
    2ee2:	d00c      	beq.n	2efe <_parseRegStatusInRegStatusParsing+0x6e>
            _Cellular_InitAtData( pContext, 1 );
    2ee4:	2101      	movs	r1, #1
    2ee6:	4640      	mov	r0, r8
    2ee8:	4b09      	ldr	r3, [pc, #36]	; (2f10 <_parseRegStatusInRegStatusParsing+0x80>)
    2eea:	4798      	blx	r3
}
    2eec:	4628      	mov	r0, r5
    2eee:	b002      	add	sp, #8
    2ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CellularNetworkRegistrationStatus_t regStatus = REGISTRATION_STATUS_UNKNOWN;
    2ef4:	2404      	movs	r4, #4
                atCoreStatus = CELLULAR_AT_ERROR;
    2ef6:	2305      	movs	r3, #5
    2ef8:	e7e7      	b.n	2eca <_parseRegStatusInRegStatusParsing+0x3a>
            pLibAtData->psRegStatus = regStatus;
    2efa:	70bc      	strb	r4, [r7, #2]
    2efc:	e7ec      	b.n	2ed8 <_parseRegStatusInRegStatusParsing+0x48>
            _Cellular_InitAtData( pContext, 1 );
    2efe:	2101      	movs	r1, #1
    2f00:	4640      	mov	r0, r8
    2f02:	4b03      	ldr	r3, [pc, #12]	; (2f10 <_parseRegStatusInRegStatusParsing+0x80>)
    2f04:	4798      	blx	r3
    2f06:	e7f1      	b.n	2eec <_parseRegStatusInRegStatusParsing+0x5c>
    2f08:	00003751 	.word	0x00003751
    2f0c:	00003a95 	.word	0x00003a95
    2f10:	00002d25 	.word	0x00002d25

00002f14 <_parseCellIdInRegStatus>:
{
    2f14:	b530      	push	{r4, r5, lr}
    2f16:	b083      	sub	sp, #12
    2f18:	4605      	mov	r5, r0
    2f1a:	460c      	mov	r4, r1
    int32_t tempValue = 0;
    2f1c:	aa02      	add	r2, sp, #8
    2f1e:	2300      	movs	r3, #0
    2f20:	f842 3d04 	str.w	r3, [r2, #-4]!
    atCoreStatus = Cellular_ATStrtoi( pToken, 16, &tempValue );
    2f24:	2110      	movs	r1, #16
    2f26:	4b0d      	ldr	r3, [pc, #52]	; (2f5c <_parseCellIdInRegStatus+0x48>)
    2f28:	4798      	blx	r3
    if( atCoreStatus == CELLULAR_AT_SUCCESS )
    2f2a:	4603      	mov	r3, r0
    2f2c:	b918      	cbnz	r0, 2f36 <_parseCellIdInRegStatus+0x22>
        if( tempValue >= 0 )
    2f2e:	9a01      	ldr	r2, [sp, #4]
    2f30:	2a00      	cmp	r2, #0
    2f32:	db05      	blt.n	2f40 <_parseCellIdInRegStatus+0x2c>
            pLibAtData->cellId = ( uint32_t ) tempValue;
    2f34:	60a2      	str	r2, [r4, #8]
    packetStatus = _Cellular_TranslateAtCoreStatus( atCoreStatus );
    2f36:	4618      	mov	r0, r3
    2f38:	4b09      	ldr	r3, [pc, #36]	; (2f60 <_parseCellIdInRegStatus+0x4c>)
    2f3a:	4798      	blx	r3
}
    2f3c:	b003      	add	sp, #12
    2f3e:	bd30      	pop	{r4, r5, pc}
            LogError( ( "Error in processing Cell Id. Token %s", pToken ) );
    2f40:	23e6      	movs	r3, #230	; 0xe6
    2f42:	4a08      	ldr	r2, [pc, #32]	; (2f64 <_parseCellIdInRegStatus+0x50>)
    2f44:	4908      	ldr	r1, [pc, #32]	; (2f68 <_parseCellIdInRegStatus+0x54>)
    2f46:	4809      	ldr	r0, [pc, #36]	; (2f6c <_parseCellIdInRegStatus+0x58>)
    2f48:	4c09      	ldr	r4, [pc, #36]	; (2f70 <_parseCellIdInRegStatus+0x5c>)
    2f4a:	47a0      	blx	r4
    2f4c:	4629      	mov	r1, r5
    2f4e:	4809      	ldr	r0, [pc, #36]	; (2f74 <_parseCellIdInRegStatus+0x60>)
    2f50:	47a0      	blx	r4
    2f52:	4809      	ldr	r0, [pc, #36]	; (2f78 <_parseCellIdInRegStatus+0x64>)
    2f54:	47a0      	blx	r4
            atCoreStatus = CELLULAR_AT_ERROR;
    2f56:	2305      	movs	r3, #5
    2f58:	e7ed      	b.n	2f36 <_parseCellIdInRegStatus+0x22>
    2f5a:	bf00      	nop
    2f5c:	00003751 	.word	0x00003751
    2f60:	00003a95 	.word	0x00003a95
    2f64:	0000cb20 	.word	0x0000cb20
    2f68:	0000b258 	.word	0x0000b258
    2f6c:	0000a188 	.word	0x0000a188
    2f70:	00005bfd 	.word	0x00005bfd
    2f74:	0000cb70 	.word	0x0000cb70
    2f78:	0000dcf4 	.word	0x0000dcf4

00002f7c <_parseRatInfoInRegStatus>:
{
    2f7c:	b530      	push	{r4, r5, lr}
    2f7e:	b083      	sub	sp, #12
    2f80:	4605      	mov	r5, r0
    2f82:	460c      	mov	r4, r1
    int32_t var = 0;
    2f84:	aa02      	add	r2, sp, #8
    2f86:	2300      	movs	r3, #0
    2f88:	f842 3d04 	str.w	r3, [r2, #-4]!
    atCoreStatus = Cellular_ATStrtoi( pToken, 10, &var );
    2f8c:	210a      	movs	r1, #10
    2f8e:	4b14      	ldr	r3, [pc, #80]	; (2fe0 <_parseRatInfoInRegStatus+0x64>)
    2f90:	4798      	blx	r3
    if( atCoreStatus == CELLULAR_AT_SUCCESS )
    2f92:	4602      	mov	r2, r0
    2f94:	b9e0      	cbnz	r0, 2fd0 <_parseRatInfoInRegStatus+0x54>
        if( var >= ( int32_t ) CELLULAR_RAT_MAX )
    2f96:	9b01      	ldr	r3, [sp, #4]
    2f98:	2b09      	cmp	r3, #9
    2f9a:	dc0b      	bgt.n	2fb4 <_parseRatInfoInRegStatus+0x38>
        else if( ( var == ( int32_t ) CELLULAR_RAT_GSM ) || ( var == ( int32_t ) CELLULAR_RAT_EDGE ) ||
    2f9c:	b1bb      	cbz	r3, 2fce <_parseRatInfoInRegStatus+0x52>
    2f9e:	2b03      	cmp	r3, #3
    2fa0:	d015      	beq.n	2fce <_parseRatInfoInRegStatus+0x52>
    2fa2:	2b08      	cmp	r3, #8
    2fa4:	d013      	beq.n	2fce <_parseRatInfoInRegStatus+0x52>
                 ( var == ( int32_t ) CELLULAR_RAT_CATM1 ) || ( var == ( int32_t ) CELLULAR_RAT_NBIOT ) )
    2fa6:	2b09      	cmp	r3, #9
    2fa8:	d011      	beq.n	2fce <_parseRatInfoInRegStatus+0x52>
        else if( var == ( int32_t ) CELLULAR_RAT_LTE )
    2faa:	2b07      	cmp	r3, #7
    2fac:	d015      	beq.n	2fda <_parseRatInfoInRegStatus+0x5e>
            pLibAtData->rat = CELLULAR_RAT_INVALID;
    2fae:	23ff      	movs	r3, #255	; 0xff
    2fb0:	7023      	strb	r3, [r4, #0]
    2fb2:	e00d      	b.n	2fd0 <_parseRatInfoInRegStatus+0x54>
            LogError( ( "Error in processing RAT. Token %s", pToken ) );
    2fb4:	23ff      	movs	r3, #255	; 0xff
    2fb6:	4a0b      	ldr	r2, [pc, #44]	; (2fe4 <_parseRatInfoInRegStatus+0x68>)
    2fb8:	490b      	ldr	r1, [pc, #44]	; (2fe8 <_parseRatInfoInRegStatus+0x6c>)
    2fba:	480c      	ldr	r0, [pc, #48]	; (2fec <_parseRatInfoInRegStatus+0x70>)
    2fbc:	4c0c      	ldr	r4, [pc, #48]	; (2ff0 <_parseRatInfoInRegStatus+0x74>)
    2fbe:	47a0      	blx	r4
    2fc0:	4629      	mov	r1, r5
    2fc2:	480c      	ldr	r0, [pc, #48]	; (2ff4 <_parseRatInfoInRegStatus+0x78>)
    2fc4:	47a0      	blx	r4
    2fc6:	480c      	ldr	r0, [pc, #48]	; (2ff8 <_parseRatInfoInRegStatus+0x7c>)
    2fc8:	47a0      	blx	r4
            atCoreStatus = CELLULAR_AT_ERROR;
    2fca:	2205      	movs	r2, #5
    2fcc:	e000      	b.n	2fd0 <_parseRatInfoInRegStatus+0x54>
            pLibAtData->rat = ( CellularRat_t ) var;
    2fce:	7023      	strb	r3, [r4, #0]
    packetStatus = _Cellular_TranslateAtCoreStatus( atCoreStatus );
    2fd0:	4610      	mov	r0, r2
    2fd2:	4b0a      	ldr	r3, [pc, #40]	; (2ffc <_parseRatInfoInRegStatus+0x80>)
    2fd4:	4798      	blx	r3
}
    2fd6:	b003      	add	sp, #12
    2fd8:	bd30      	pop	{r4, r5, pc}
            pLibAtData->rat = ( CellularRat_t ) CELLULAR_RAT_LTE;
    2fda:	7023      	strb	r3, [r4, #0]
    2fdc:	e7f8      	b.n	2fd0 <_parseRatInfoInRegStatus+0x54>
    2fde:	bf00      	nop
    2fe0:	00003751 	.word	0x00003751
    2fe4:	0000cb38 	.word	0x0000cb38
    2fe8:	0000b258 	.word	0x0000b258
    2fec:	0000a188 	.word	0x0000a188
    2ff0:	00005bfd 	.word	0x00005bfd
    2ff4:	0000cb98 	.word	0x0000cb98
    2ff8:	0000dcf4 	.word	0x0000dcf4
    2ffc:	00003a95 	.word	0x00003a95

00003000 <_regStatusSwitchParsingFunc>:
static CellularPktStatus_t _regStatusSwitchParsingFunc( CellularContext_t * pContext,
                                                        uint8_t i,
                                                        CellularNetworkRegType_t regType,
                                                        const char * pToken,
                                                        cellularAtData_t * pLibAtData )
{
    3000:	b538      	push	{r3, r4, r5, lr}
    3002:	4615      	mov	r5, r2
    3004:	461c      	mov	r4, r3
    CellularPktStatus_t packetStatus = CELLULAR_PKT_STATUS_OK;

    switch( i )
    3006:	3902      	subs	r1, #2
    3008:	2905      	cmp	r1, #5
    300a:	d826      	bhi.n	305a <_regStatusSwitchParsingFunc+0x5a>
    300c:	e8df f001 	tbb	[pc, r1]
    3010:	140f0903 	.word	0x140f0903
    3014:	1f19      	.short	0x1f19
    {
        /* Parsing network Registration status in CREG or CGREG or CEREG response. */
        case CELLULAR_REG_POS_STAT:
            packetStatus = _parseRegStatusInRegStatusParsing( pContext, regType, pToken, pLibAtData );
    3016:	9b04      	ldr	r3, [sp, #16]
    3018:	4622      	mov	r2, r4
    301a:	4629      	mov	r1, r5
    301c:	4c10      	ldr	r4, [pc, #64]	; (3060 <_regStatusSwitchParsingFunc+0x60>)
    301e:	47a0      	blx	r4
            break;
    3020:	bd38      	pop	{r3, r4, r5, pc}

        case CELLULAR_REG_POS_LAC_TAC:
            packetStatus = _parseLacTacInRegStatus( regType, pToken, pLibAtData );
    3022:	9a04      	ldr	r2, [sp, #16]
    3024:	4621      	mov	r1, r4
    3026:	4628      	mov	r0, r5
    3028:	4b0e      	ldr	r3, [pc, #56]	; (3064 <_regStatusSwitchParsingFunc+0x64>)
    302a:	4798      	blx	r3
            break;
    302c:	bd38      	pop	{r3, r4, r5, pc}

        /* Parsing Cell ID. */
        case CELLULAR_REG_POS_CELL_ID:
            packetStatus = _parseCellIdInRegStatus( pToken, pLibAtData );
    302e:	9904      	ldr	r1, [sp, #16]
    3030:	4620      	mov	r0, r4
    3032:	4b0d      	ldr	r3, [pc, #52]	; (3068 <_regStatusSwitchParsingFunc+0x68>)
    3034:	4798      	blx	r3
            break;
    3036:	bd38      	pop	{r3, r4, r5, pc}

        /* Parsing RAT Information. */
        case CELLULAR_REG_POS_RAT:
            packetStatus = _parseRatInfoInRegStatus( pToken, pLibAtData );
    3038:	9904      	ldr	r1, [sp, #16]
    303a:	4620      	mov	r0, r4
    303c:	4b0b      	ldr	r3, [pc, #44]	; (306c <_regStatusSwitchParsingFunc+0x6c>)
    303e:	4798      	blx	r3
            break;
    3040:	bd38      	pop	{r3, r4, r5, pc}

        /* Parsing Reject Type. */
        case CELLULAR_REG_POS_REJ_TYPE:
            packetStatus = _parseRejectTypeInRegStatus( regType, pToken, pLibAtData );
    3042:	9a04      	ldr	r2, [sp, #16]
    3044:	4621      	mov	r1, r4
    3046:	4628      	mov	r0, r5
    3048:	4b09      	ldr	r3, [pc, #36]	; (3070 <_regStatusSwitchParsingFunc+0x70>)
    304a:	4798      	blx	r3
            break;
    304c:	bd38      	pop	{r3, r4, r5, pc}

        /* Parsing the Reject Cause. */
        case CELLULAR_REG_POS_REJ_CAUSE:
            packetStatus = _parseRejectCauseInRegStatus( regType, pToken, pLibAtData );
    304e:	9a04      	ldr	r2, [sp, #16]
    3050:	4621      	mov	r1, r4
    3052:	4628      	mov	r0, r5
    3054:	4b07      	ldr	r3, [pc, #28]	; (3074 <_regStatusSwitchParsingFunc+0x74>)
    3056:	4798      	blx	r3
            break;
    3058:	bd38      	pop	{r3, r4, r5, pc}
    CellularPktStatus_t packetStatus = CELLULAR_PKT_STATUS_OK;
    305a:	2000      	movs	r0, #0
            LogDebug( ( "Unknown Parameter Position in Registration URC" ) );
            break;
    }

    return packetStatus;
}
    305c:	bd38      	pop	{r3, r4, r5, pc}
    305e:	bf00      	nop
    3060:	00002e91 	.word	0x00002e91
    3064:	00002d7d 	.word	0x00002d7d
    3068:	00002f15 	.word	0x00002f15
    306c:	00002f7d 	.word	0x00002f7d
    3070:	00002dd1 	.word	0x00002dd1
    3074:	00002e31 	.word	0x00002e31

00003078 <_Cellular_RegEventStatus>:
                                      CellularNetworkRegistrationStatus_t prevCsRegStatus,
                                      CellularNetworkRegistrationStatus_t prevPsRegStatus )
{
    bool retEventChanged = false;

    switch( regType )
    3078:	b139      	cbz	r1, 308a <_Cellular_RegEventStatus+0x12>
{
    307a:	b510      	push	{r4, lr}
    switch( regType )
    307c:	2902      	cmp	r1, #2
    307e:	d80d      	bhi.n	309c <_Cellular_RegEventStatus+0x24>
            break;

        case CELLULAR_REG_TYPE_CGREG:
        case CELLULAR_REG_TYPE_CEREG:

            if( pLibAtData->psRegStatus != prevPsRegStatus )
    3080:	7882      	ldrb	r2, [r0, #2]
    3082:	429a      	cmp	r2, r3
    3084:	d008      	beq.n	3098 <_Cellular_RegEventStatus+0x20>
            {
                retEventChanged = true;
    3086:	2001      	movs	r0, #1
            LogInfo( ( "_Cellular_RegEventStatus : unknown reg type " ) );
            break;
    }

    return retEventChanged;
}
    3088:	bd10      	pop	{r4, pc}
            if( pLibAtData->csRegStatus != prevCsRegStatus )
    308a:	7843      	ldrb	r3, [r0, #1]
    308c:	4293      	cmp	r3, r2
    308e:	d001      	beq.n	3094 <_Cellular_RegEventStatus+0x1c>
                retEventChanged = true;
    3090:	2001      	movs	r0, #1
    3092:	4770      	bx	lr
    bool retEventChanged = false;
    3094:	2000      	movs	r0, #0
    3096:	4770      	bx	lr
    3098:	2000      	movs	r0, #0
    309a:	bd10      	pop	{r4, pc}
            LogInfo( ( "_Cellular_RegEventStatus : unknown reg type " ) );
    309c:	f44f 7304 	mov.w	r3, #528	; 0x210
    30a0:	4a05      	ldr	r2, [pc, #20]	; (30b8 <_Cellular_RegEventStatus+0x40>)
    30a2:	4906      	ldr	r1, [pc, #24]	; (30bc <_Cellular_RegEventStatus+0x44>)
    30a4:	4806      	ldr	r0, [pc, #24]	; (30c0 <_Cellular_RegEventStatus+0x48>)
    30a6:	4c07      	ldr	r4, [pc, #28]	; (30c4 <_Cellular_RegEventStatus+0x4c>)
    30a8:	47a0      	blx	r4
    30aa:	4807      	ldr	r0, [pc, #28]	; (30c8 <_Cellular_RegEventStatus+0x50>)
    30ac:	47a0      	blx	r4
    30ae:	4807      	ldr	r0, [pc, #28]	; (30cc <_Cellular_RegEventStatus+0x54>)
    30b0:	47a0      	blx	r4
    bool retEventChanged = false;
    30b2:	2000      	movs	r0, #0
            break;
    30b4:	bd10      	pop	{r4, pc}
    30b6:	bf00      	nop
    30b8:	0000cb54 	.word	0x0000cb54
    30bc:	0000b258 	.word	0x0000b258
    30c0:	0000aae8 	.word	0x0000aae8
    30c4:	00005bfd 	.word	0x00005bfd
    30c8:	0000cbbc 	.word	0x0000cbbc
    30cc:	0000dcf4 	.word	0x0000dcf4

000030d0 <_regStatusGenerateEvent>:
{
    30d0:	b570      	push	{r4, r5, r6, lr}
    30d2:	b08e      	sub	sp, #56	; 0x38
    30d4:	4605      	mov	r5, r0
    30d6:	460e      	mov	r6, r1
    30d8:	4614      	mov	r4, r2
    ( void ) memset( &serviceStatus, 0, sizeof( CellularServiceStatus_t ) );
    30da:	2232      	movs	r2, #50	; 0x32
    30dc:	2100      	movs	r1, #0
    30de:	a801      	add	r0, sp, #4
    30e0:	4b1a      	ldr	r3, [pc, #104]	; (314c <_regStatusGenerateEvent+0x7c>)
    30e2:	4798      	blx	r3
    serviceStatus.rat = pLibAtData->rat;
    30e4:	7823      	ldrb	r3, [r4, #0]
    30e6:	f88d 3004 	strb.w	r3, [sp, #4]
    serviceStatus.csRegistrationStatus = pLibAtData->csRegStatus;
    30ea:	7863      	ldrb	r3, [r4, #1]
    30ec:	f88d 3006 	strb.w	r3, [sp, #6]
    serviceStatus.psRegistrationStatus = pLibAtData->psRegStatus;
    30f0:	78a3      	ldrb	r3, [r4, #2]
    30f2:	f88d 3007 	strb.w	r3, [sp, #7]
    serviceStatus.csRejectionCause = pLibAtData->csRejCause;
    30f6:	7923      	ldrb	r3, [r4, #4]
    30f8:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    serviceStatus.csRejectionType = pLibAtData->csRejectType;
    30fc:	78e3      	ldrb	r3, [r4, #3]
    30fe:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    serviceStatus.psRejectionCause = pLibAtData->psRejCause;
    3102:	79a3      	ldrb	r3, [r4, #6]
    3104:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
    serviceStatus.psRejectionType = pLibAtData->psRejectType;
    3108:	7963      	ldrb	r3, [r4, #5]
    310a:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    ( void ) strcpy( serviceStatus.plmnInfo.mcc, "FFF" );
    310e:	4b10      	ldr	r3, [pc, #64]	; (3150 <_regStatusGenerateEvent+0x80>)
    3110:	9302      	str	r3, [sp, #8]
    ( void ) strcpy( serviceStatus.plmnInfo.mnc, "FFF" );
    3112:	9303      	str	r3, [sp, #12]
    ( void ) strcpy( serviceStatus.operatorName, "FFF" );
    3114:	4b0f      	ldr	r3, [pc, #60]	; (3154 <_regStatusGenerateEvent+0x84>)
    3116:	6818      	ldr	r0, [r3, #0]
    3118:	f8cd 0011 	str.w	r0, [sp, #17]
    serviceStatus.operatorNameFormat = OPERATOR_NAME_FORMAT_NOT_PRESENT;
    311c:	2309      	movs	r3, #9
    311e:	f88d 3010 	strb.w	r3, [sp, #16]
    serviceStatus.networkRegistrationMode = REGISTRATION_MODE_UNKNOWN;
    3122:	2306      	movs	r3, #6
    3124:	f88d 3005 	strb.w	r3, [sp, #5]
    if( pContext->cbEvents.networkRegistrationCallback != NULL )
    3128:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
    312c:	b12b      	cbz	r3, 313a <_regStatusGenerateEvent+0x6a>
        if( regType == CELLULAR_REG_TYPE_CREG )
    312e:	b136      	cbz	r6, 313e <_regStatusGenerateEvent+0x6e>
            _Cellular_NetworkRegistrationCallback( pContext, CELLULAR_URC_EVENT_NETWORK_PS_REGISTRATION, &serviceStatus );
    3130:	aa01      	add	r2, sp, #4
    3132:	2101      	movs	r1, #1
    3134:	4628      	mov	r0, r5
    3136:	4b08      	ldr	r3, [pc, #32]	; (3158 <_regStatusGenerateEvent+0x88>)
    3138:	4798      	blx	r3
}
    313a:	b00e      	add	sp, #56	; 0x38
    313c:	bd70      	pop	{r4, r5, r6, pc}
            _Cellular_NetworkRegistrationCallback( pContext, CELLULAR_URC_EVENT_NETWORK_CS_REGISTRATION, &serviceStatus );
    313e:	aa01      	add	r2, sp, #4
    3140:	2100      	movs	r1, #0
    3142:	4628      	mov	r0, r5
    3144:	4b04      	ldr	r3, [pc, #16]	; (3158 <_regStatusGenerateEvent+0x88>)
    3146:	4798      	blx	r3
    3148:	e7f7      	b.n	313a <_regStatusGenerateEvent+0x6a>
    314a:	bf00      	nop
    314c:	000088af 	.word	0x000088af
    3150:	00464646 	.word	0x00464646
    3154:	0000cbec 	.word	0x0000cbec
    3158:	00003ba9 	.word	0x00003ba9

0000315c <_Cellular_ParseRegStatus>:

CellularPktStatus_t _Cellular_ParseRegStatus( CellularContext_t * pContext,
                                              char * pRegPayload,
                                              bool isUrc,
                                              CellularNetworkRegType_t regType )
{
    315c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3160:	b085      	sub	sp, #20
    uint8_t i = 0;
    char * pRegStr = NULL, * pToken = NULL;
    3162:	2400      	movs	r4, #0
    3164:	9402      	str	r4, [sp, #8]
    CellularPktStatus_t packetStatus = CELLULAR_PKT_STATUS_OK;
    CellularATError_t atCoreStatus = CELLULAR_AT_SUCCESS;
    CellularNetworkRegistrationStatus_t prevCsRegStatus = REGISTRATION_STATUS_UNKNOWN;
    CellularNetworkRegistrationStatus_t prevPsRegStatus = REGISTRATION_STATUS_UNKNOWN;

    if( pContext == NULL )
    3166:	2800      	cmp	r0, #0
    3168:	d052      	beq.n	3210 <_Cellular_ParseRegStatus+0xb4>
    316a:	4605      	mov	r5, r0
    {
        packetStatus = CELLULAR_PKT_STATUS_FAILURE;
    }
    else if( pRegPayload == NULL )
    316c:	2900      	cmp	r1, #0
    316e:	d051      	beq.n	3214 <_Cellular_ParseRegStatus+0xb8>
    {
        packetStatus = CELLULAR_PKT_STATUS_BAD_PARAM;
    }
    else
    {
        pLibAtData = &pContext->libAtData;
    3170:	f100 06e0 	add.w	r6, r0, #224	; 0xe0

        if( isUrc == true )
    3174:	b102      	cbz	r2, 3178 <_Cellular_ParseRegStatus+0x1c>
        {
            i++;
    3176:	2401      	movs	r4, #1
    3178:	4698      	mov	r8, r3
    317a:	4608      	mov	r0, r1
        }

        pRegStr = pRegPayload;
    317c:	9103      	str	r1, [sp, #12]

        atCoreStatus = Cellular_ATRemoveAllDoubleQuote( pRegStr );
    317e:	4b26      	ldr	r3, [pc, #152]	; (3218 <_Cellular_ParseRegStatus+0xbc>)
    3180:	4798      	blx	r3

        if( atCoreStatus == CELLULAR_AT_SUCCESS )
    3182:	4681      	mov	r9, r0
    3184:	b1e0      	cbz	r0, 31c0 <_Cellular_ParseRegStatus+0x64>
        {
            atCoreStatus = Cellular_ATRemoveAllWhiteSpaces( pRegStr );
        }

        if( atCoreStatus == CELLULAR_AT_SUCCESS )
    3186:	f1b9 0f00 	cmp.w	r9, #0
    318a:	d01e      	beq.n	31ca <_Cellular_ParseRegStatus+0x6e>
        {
            atCoreStatus = Cellular_ATGetNextTok( &pRegStr, &pToken );
        }

        if( atCoreStatus == CELLULAR_AT_SUCCESS )
    318c:	f1b9 0f00 	cmp.w	r9, #0
    3190:	d121      	bne.n	31d6 <_Cellular_ParseRegStatus+0x7a>
        {
            /* Backup the previous regStatus. */
            prevCsRegStatus = pLibAtData->csRegStatus;
    3192:	f895 b0e1 	ldrb.w	fp, [r5, #225]	; 0xe1
            prevPsRegStatus = pLibAtData->psRegStatus;
    3196:	f895 a0e2 	ldrb.w	sl, [r5, #226]	; 0xe2
    CellularPktStatus_t packetStatus = CELLULAR_PKT_STATUS_OK;
    319a:	2700      	movs	r7, #0

            while( pToken != NULL )
    319c:	9b02      	ldr	r3, [sp, #8]
    319e:	b1f3      	cbz	r3, 31de <_Cellular_ParseRegStatus+0x82>
            {
                i++;
    31a0:	3401      	adds	r4, #1
    31a2:	b2e4      	uxtb	r4, r4
                packetStatus = _regStatusSwitchParsingFunc( pContext, i, regType,
    31a4:	9600      	str	r6, [sp, #0]
    31a6:	4642      	mov	r2, r8
    31a8:	4621      	mov	r1, r4
    31aa:	4628      	mov	r0, r5
    31ac:	4f1b      	ldr	r7, [pc, #108]	; (321c <_Cellular_ParseRegStatus+0xc0>)
    31ae:	47b8      	blx	r7
    31b0:	4607      	mov	r7, r0
                                                            pToken, pLibAtData );

                /* Getting next token to parse. */
                if( Cellular_ATGetNextTok( &pRegStr, &pToken ) != CELLULAR_AT_SUCCESS )
    31b2:	a902      	add	r1, sp, #8
    31b4:	a803      	add	r0, sp, #12
    31b6:	4b1a      	ldr	r3, [pc, #104]	; (3220 <_Cellular_ParseRegStatus+0xc4>)
    31b8:	4798      	blx	r3
    31ba:	2800      	cmp	r0, #0
    31bc:	d0ee      	beq.n	319c <_Cellular_ParseRegStatus+0x40>
    31be:	e00e      	b.n	31de <_Cellular_ParseRegStatus+0x82>
            atCoreStatus = Cellular_ATRemoveAllWhiteSpaces( pRegStr );
    31c0:	9803      	ldr	r0, [sp, #12]
    31c2:	4b18      	ldr	r3, [pc, #96]	; (3224 <_Cellular_ParseRegStatus+0xc8>)
    31c4:	4798      	blx	r3
    31c6:	4681      	mov	r9, r0
    31c8:	e7dd      	b.n	3186 <_Cellular_ParseRegStatus+0x2a>
            atCoreStatus = Cellular_ATGetNextTok( &pRegStr, &pToken );
    31ca:	a902      	add	r1, sp, #8
    31cc:	a803      	add	r0, sp, #12
    31ce:	4b14      	ldr	r3, [pc, #80]	; (3220 <_Cellular_ParseRegStatus+0xc4>)
    31d0:	4798      	blx	r3
    31d2:	4681      	mov	r9, r0
    31d4:	e7da      	b.n	318c <_Cellular_ParseRegStatus+0x30>
    CellularNetworkRegistrationStatus_t prevPsRegStatus = REGISTRATION_STATUS_UNKNOWN;
    31d6:	f04f 0a04 	mov.w	sl, #4
    CellularNetworkRegistrationStatus_t prevCsRegStatus = REGISTRATION_STATUS_UNKNOWN;
    31da:	46d3      	mov	fp, sl
    CellularPktStatus_t packetStatus = CELLULAR_PKT_STATUS_OK;
    31dc:	2700      	movs	r7, #0
        {
            _regStatusGenerateLog( pRegPayload, regType );
        }

        /* If Registration Status changed, generate the event. */
        if( ( _Cellular_RegEventStatus( pLibAtData, regType, prevCsRegStatus, prevPsRegStatus ) == true ) )
    31de:	4653      	mov	r3, sl
    31e0:	465a      	mov	r2, fp
    31e2:	4641      	mov	r1, r8
    31e4:	4630      	mov	r0, r6
    31e6:	4c10      	ldr	r4, [pc, #64]	; (3228 <_Cellular_ParseRegStatus+0xcc>)
    31e8:	47a0      	blx	r4
    31ea:	b930      	cbnz	r0, 31fa <_Cellular_ParseRegStatus+0x9e>
        {
            _regStatusGenerateEvent( pContext, regType, pLibAtData );
        }

        if( atCoreStatus != CELLULAR_AT_SUCCESS )
    31ec:	f1b9 0f00 	cmp.w	r9, #0
    31f0:	d109      	bne.n	3206 <_Cellular_ParseRegStatus+0xaa>
            packetStatus = _Cellular_TranslateAtCoreStatus( atCoreStatus );
        }
    }

    return packetStatus;
}
    31f2:	4638      	mov	r0, r7
    31f4:	b005      	add	sp, #20
    31f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            _regStatusGenerateEvent( pContext, regType, pLibAtData );
    31fa:	4632      	mov	r2, r6
    31fc:	4641      	mov	r1, r8
    31fe:	4628      	mov	r0, r5
    3200:	4b0a      	ldr	r3, [pc, #40]	; (322c <_Cellular_ParseRegStatus+0xd0>)
    3202:	4798      	blx	r3
    3204:	e7f2      	b.n	31ec <_Cellular_ParseRegStatus+0x90>
            packetStatus = _Cellular_TranslateAtCoreStatus( atCoreStatus );
    3206:	4648      	mov	r0, r9
    3208:	4b09      	ldr	r3, [pc, #36]	; (3230 <_Cellular_ParseRegStatus+0xd4>)
    320a:	4798      	blx	r3
    320c:	4607      	mov	r7, r0
    320e:	e7f0      	b.n	31f2 <_Cellular_ParseRegStatus+0x96>
        packetStatus = CELLULAR_PKT_STATUS_FAILURE;
    3210:	2702      	movs	r7, #2
    3212:	e7ee      	b.n	31f2 <_Cellular_ParseRegStatus+0x96>
        packetStatus = CELLULAR_PKT_STATUS_BAD_PARAM;
    3214:	2706      	movs	r7, #6
    3216:	e7ec      	b.n	31f2 <_Cellular_ParseRegStatus+0x96>
    3218:	00003529 	.word	0x00003529
    321c:	00003001 	.word	0x00003001
    3220:	00003631 	.word	0x00003631
    3224:	000034c5 	.word	0x000034c5
    3228:	00003079 	.word	0x00003079
    322c:	000030d1 	.word	0x000030d1
    3230:	00003a95 	.word	0x00003a95

00003234 <Cellular_CommonUrcProcessCreg>:

/*-----------------------------------------------------------*/

CellularPktStatus_t Cellular_CommonUrcProcessCreg( CellularContext_t * pContext,
                                                   char * pInputLine )
{
    3234:	b538      	push	{r3, r4, r5, lr}
    CellularPktStatus_t pktStatus = CELLULAR_PKT_STATUS_OK;

    if( pContext != NULL )
    3236:	b178      	cbz	r0, 3258 <Cellular_CommonUrcProcessCreg+0x24>
    3238:	4604      	mov	r4, r0
    323a:	460d      	mov	r5, r1
    {
        _Cellular_LockAtDataMutex( pContext );
    323c:	4b07      	ldr	r3, [pc, #28]	; (325c <Cellular_CommonUrcProcessCreg+0x28>)
    323e:	4798      	blx	r3
        pktStatus = _Cellular_ParseRegStatus( pContext, pInputLine, true, CELLULAR_REG_TYPE_CREG );
    3240:	2300      	movs	r3, #0
    3242:	2201      	movs	r2, #1
    3244:	4629      	mov	r1, r5
    3246:	4620      	mov	r0, r4
    3248:	4d05      	ldr	r5, [pc, #20]	; (3260 <Cellular_CommonUrcProcessCreg+0x2c>)
    324a:	47a8      	blx	r5
    324c:	4605      	mov	r5, r0
        if( pktStatus != CELLULAR_PKT_STATUS_OK )
        {
            LogDebug( ( "Creg Parse failure" ) );
        }

        _Cellular_UnlockAtDataMutex( pContext );
    324e:	4620      	mov	r0, r4
    3250:	4b04      	ldr	r3, [pc, #16]	; (3264 <Cellular_CommonUrcProcessCreg+0x30>)
    3252:	4798      	blx	r3
    {
        pktStatus = CELLULAR_PKT_STATUS_INVALID_HANDLE;
    }

    return pktStatus;
}
    3254:	4628      	mov	r0, r5
    3256:	bd38      	pop	{r3, r4, r5, pc}
        pktStatus = CELLULAR_PKT_STATUS_INVALID_HANDLE;
    3258:	2508      	movs	r5, #8
    325a:	e7fb      	b.n	3254 <Cellular_CommonUrcProcessCreg+0x20>
    325c:	00002aa1 	.word	0x00002aa1
    3260:	0000315d 	.word	0x0000315d
    3264:	00002ac5 	.word	0x00002ac5

00003268 <Cellular_CommonUrcProcessCgreg>:

/*-----------------------------------------------------------*/

CellularPktStatus_t Cellular_CommonUrcProcessCgreg( CellularContext_t * pContext,
                                                    char * pInputLine )
{
    3268:	b538      	push	{r3, r4, r5, lr}
    CellularPktStatus_t pktStatus = CELLULAR_PKT_STATUS_OK;

    if( pContext != NULL )
    326a:	b178      	cbz	r0, 328c <Cellular_CommonUrcProcessCgreg+0x24>
    326c:	4604      	mov	r4, r0
    326e:	460d      	mov	r5, r1
    {
        _Cellular_LockAtDataMutex( pContext );
    3270:	4b07      	ldr	r3, [pc, #28]	; (3290 <Cellular_CommonUrcProcessCgreg+0x28>)
    3272:	4798      	blx	r3
        pktStatus = _Cellular_ParseRegStatus( pContext, pInputLine, true, CELLULAR_REG_TYPE_CGREG );
    3274:	2301      	movs	r3, #1
    3276:	461a      	mov	r2, r3
    3278:	4629      	mov	r1, r5
    327a:	4620      	mov	r0, r4
    327c:	4d05      	ldr	r5, [pc, #20]	; (3294 <Cellular_CommonUrcProcessCgreg+0x2c>)
    327e:	47a8      	blx	r5
    3280:	4605      	mov	r5, r0
        if( pktStatus != CELLULAR_PKT_STATUS_OK )
        {
            LogDebug( ( "Cgreg Parse failure" ) );
        }

        _Cellular_UnlockAtDataMutex( pContext );
    3282:	4620      	mov	r0, r4
    3284:	4b04      	ldr	r3, [pc, #16]	; (3298 <Cellular_CommonUrcProcessCgreg+0x30>)
    3286:	4798      	blx	r3
    {
        pktStatus = CELLULAR_PKT_STATUS_INVALID_HANDLE;
    }

    return pktStatus;
}
    3288:	4628      	mov	r0, r5
    328a:	bd38      	pop	{r3, r4, r5, pc}
        pktStatus = CELLULAR_PKT_STATUS_INVALID_HANDLE;
    328c:	2508      	movs	r5, #8
    328e:	e7fb      	b.n	3288 <Cellular_CommonUrcProcessCgreg+0x20>
    3290:	00002aa1 	.word	0x00002aa1
    3294:	0000315d 	.word	0x0000315d
    3298:	00002ac5 	.word	0x00002ac5

0000329c <Cellular_CommonUrcProcessCereg>:

/*-----------------------------------------------------------*/

CellularPktStatus_t Cellular_CommonUrcProcessCereg( CellularContext_t * pContext,
                                                    char * pInputLine )
{
    329c:	b538      	push	{r3, r4, r5, lr}
    CellularPktStatus_t pktStatus = CELLULAR_PKT_STATUS_OK;

    if( pContext != NULL )
    329e:	b178      	cbz	r0, 32c0 <Cellular_CommonUrcProcessCereg+0x24>
    32a0:	4604      	mov	r4, r0
    32a2:	460d      	mov	r5, r1
    {
        _Cellular_LockAtDataMutex( pContext );
    32a4:	4b07      	ldr	r3, [pc, #28]	; (32c4 <Cellular_CommonUrcProcessCereg+0x28>)
    32a6:	4798      	blx	r3
        pktStatus = _Cellular_ParseRegStatus( pContext, pInputLine, true, CELLULAR_REG_TYPE_CEREG );
    32a8:	2302      	movs	r3, #2
    32aa:	2201      	movs	r2, #1
    32ac:	4629      	mov	r1, r5
    32ae:	4620      	mov	r0, r4
    32b0:	4d05      	ldr	r5, [pc, #20]	; (32c8 <Cellular_CommonUrcProcessCereg+0x2c>)
    32b2:	47a8      	blx	r5
    32b4:	4605      	mov	r5, r0
        if( pktStatus != CELLULAR_PKT_STATUS_OK )
        {
            LogDebug( ( "Cereg Parse failure" ) );
        }

        _Cellular_UnlockAtDataMutex( pContext );
    32b6:	4620      	mov	r0, r4
    32b8:	4b04      	ldr	r3, [pc, #16]	; (32cc <Cellular_CommonUrcProcessCereg+0x30>)
    32ba:	4798      	blx	r3
    {
        pktStatus = CELLULAR_PKT_STATUS_INVALID_HANDLE;
    }

    return pktStatus;
}
    32bc:	4628      	mov	r0, r5
    32be:	bd38      	pop	{r3, r4, r5, pc}
        pktStatus = CELLULAR_PKT_STATUS_INVALID_HANDLE;
    32c0:	2508      	movs	r5, #8
    32c2:	e7fb      	b.n	32bc <Cellular_CommonUrcProcessCereg+0x20>
    32c4:	00002aa1 	.word	0x00002aa1
    32c8:	0000315d 	.word	0x0000315d
    32cc:	00002ac5 	.word	0x00002ac5

000032d0 <validateString>:

/*-----------------------------------------------------------*/

static void validateString( const char * pString,
                            CellularATStringValidationResult_t * pStringValidationResult )
{
    32d0:	b510      	push	{r4, lr}
    32d2:	460c      	mov	r4, r1
     * maxlen characters pointed to by s.
     *
     * stringLength == CELLULAR_AT_MAX_STRING_SIZE is valid because it means that
     * ( CELLULAR_AT_MAX_STRING_SIZE + 1 ) character is null terminating
     * character.*/
    stringLength = strnlen( pString, CELLULAR_AT_MAX_STRING_SIZE + 1U );
    32d4:	f240 1101 	movw	r1, #257	; 0x101
    32d8:	4b07      	ldr	r3, [pc, #28]	; (32f8 <validateString+0x28>)
    32da:	4798      	blx	r3

    if( stringLength == 0U )
    32dc:	b128      	cbz	r0, 32ea <validateString+0x1a>
    {
        *pStringValidationResult = CELLULAR_AT_STRING_EMPTY;
    }
    else if( stringLength > CELLULAR_AT_MAX_STRING_SIZE )
    32de:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    32e2:	d805      	bhi.n	32f0 <validateString+0x20>
    {
        *pStringValidationResult = CELLULAR_AT_STRING_TOO_LARGE;
    }
    else
    {
        *pStringValidationResult = CELLULAR_AT_STRING_VALID;
    32e4:	2300      	movs	r3, #0
    32e6:	7023      	strb	r3, [r4, #0]
    32e8:	bd10      	pop	{r4, pc}
        *pStringValidationResult = CELLULAR_AT_STRING_EMPTY;
    32ea:	2301      	movs	r3, #1
    32ec:	7023      	strb	r3, [r4, #0]
    32ee:	bd10      	pop	{r4, pc}
        *pStringValidationResult = CELLULAR_AT_STRING_TOO_LARGE;
    32f0:	2302      	movs	r3, #2
    32f2:	7023      	strb	r3, [r4, #0]
    32f4:	bd10      	pop	{r4, pc}
    32f6:	bf00      	nop
    32f8:	00008e4f 	.word	0x00008e4f

000032fc <Cellular_ATIsPrefixPresent>:

/*-----------------------------------------------------------*/

CellularATError_t Cellular_ATIsPrefixPresent( const char * pString,
                                              bool * pResult )
{
    32fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    32fe:	b083      	sub	sp, #12
    3300:	4604      	mov	r4, r0
    CellularATError_t atStatus = CELLULAR_AT_SUCCESS;
    CellularATStringValidationResult_t stringValidationResult = CELLULAR_AT_STRING_UNKNOWN;
    3302:	2303      	movs	r3, #3
    3304:	f88d 3007 	strb.w	r3, [sp, #7]
    char * ptrPrefixChar = NULL;
    char * ptrChar = NULL;

    if( ( pResult == NULL ) || ( pString == NULL ) )
    3308:	460f      	mov	r7, r1
    330a:	b181      	cbz	r1, 332e <Cellular_ATIsPrefixPresent+0x32>
    330c:	b188      	cbz	r0, 3332 <Cellular_ATIsPrefixPresent+0x36>
    CellularATError_t atStatus = CELLULAR_AT_SUCCESS;
    330e:	2600      	movs	r6, #0
    {
        atStatus = CELLULAR_AT_BAD_PARAMETER;
    }

    if( atStatus == CELLULAR_AT_SUCCESS )
    3310:	b18e      	cbz	r6, 3336 <Cellular_ATIsPrefixPresent+0x3a>
            atStatus = CELLULAR_AT_BAD_PARAMETER;
        }
    }

    /* Find location of first ':'. */
    if( atStatus == CELLULAR_AT_SUCCESS )
    3312:	b94e      	cbnz	r6, 3328 <Cellular_ATIsPrefixPresent+0x2c>
    {
        *pResult = true;
    3314:	2301      	movs	r3, #1
    3316:	703b      	strb	r3, [r7, #0]

        ptrPrefixChar = strchr( pString, ( int32_t ) ':' );
    3318:	213a      	movs	r1, #58	; 0x3a
    331a:	4620      	mov	r0, r4
    331c:	4b19      	ldr	r3, [pc, #100]	; (3384 <Cellular_ATIsPrefixPresent+0x88>)
    331e:	4798      	blx	r3

        if( ptrPrefixChar == NULL )
    3320:	4605      	mov	r5, r0
    3322:	b9a0      	cbnz	r0, 334e <Cellular_ATIsPrefixPresent+0x52>
        {
            *pResult = false;
    3324:	2300      	movs	r3, #0
    3326:	703b      	strb	r3, [r7, #0]
            }
        }
    }

    return atStatus;
}
    3328:	4630      	mov	r0, r6
    332a:	b003      	add	sp, #12
    332c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        atStatus = CELLULAR_AT_BAD_PARAMETER;
    332e:	2601      	movs	r6, #1
    3330:	e7ee      	b.n	3310 <Cellular_ATIsPrefixPresent+0x14>
    3332:	2601      	movs	r6, #1
    3334:	e7ec      	b.n	3310 <Cellular_ATIsPrefixPresent+0x14>
        validateString( pString, &stringValidationResult );
    3336:	f10d 0107 	add.w	r1, sp, #7
    333a:	4620      	mov	r0, r4
    333c:	4b12      	ldr	r3, [pc, #72]	; (3388 <Cellular_ATIsPrefixPresent+0x8c>)
    333e:	4798      	blx	r3
        if( stringValidationResult != CELLULAR_AT_STRING_VALID )
    3340:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3344:	2b00      	cmp	r3, #0
    3346:	d0e4      	beq.n	3312 <Cellular_ATIsPrefixPresent+0x16>
            atStatus = CELLULAR_AT_BAD_PARAMETER;
    3348:	2601      	movs	r6, #1
    334a:	e7e2      	b.n	3312 <Cellular_ATIsPrefixPresent+0x16>
            for( ptrChar = ( char * ) pString; ptrChar < ptrPrefixChar; ptrChar++ )
    334c:	3401      	adds	r4, #1
    334e:	42ac      	cmp	r4, r5
    3350:	d2ea      	bcs.n	3328 <Cellular_ATIsPrefixPresent+0x2c>
                if( CELLULAR_CHECK_IS_PREFIX_CHAR( ( char ) ( *ptrChar ) ) )
    3352:	4b0e      	ldr	r3, [pc, #56]	; (338c <Cellular_ATIsPrefixPresent+0x90>)
    3354:	4798      	blx	r3
    3356:	f994 3000 	ldrsb.w	r3, [r4]
    335a:	4418      	add	r0, r3
    335c:	7843      	ldrb	r3, [r0, #1]
    335e:	f013 0f03 	tst.w	r3, #3
    3362:	d1f3      	bne.n	334c <Cellular_ATIsPrefixPresent+0x50>
    3364:	4b09      	ldr	r3, [pc, #36]	; (338c <Cellular_ATIsPrefixPresent+0x90>)
    3366:	4798      	blx	r3
    3368:	7823      	ldrb	r3, [r4, #0]
    336a:	fa40 f083 	sxtab	r0, r0, r3
    336e:	7842      	ldrb	r2, [r0, #1]
    3370:	f012 0f04 	tst.w	r2, #4
    3374:	d1ea      	bne.n	334c <Cellular_ATIsPrefixPresent+0x50>
    3376:	2b2b      	cmp	r3, #43	; 0x2b
    3378:	d0e8      	beq.n	334c <Cellular_ATIsPrefixPresent+0x50>
    337a:	2b5f      	cmp	r3, #95	; 0x5f
    337c:	d0e6      	beq.n	334c <Cellular_ATIsPrefixPresent+0x50>
                    *pResult = false;
    337e:	2300      	movs	r3, #0
    3380:	703b      	strb	r3, [r7, #0]
                    break;
    3382:	e7d1      	b.n	3328 <Cellular_ATIsPrefixPresent+0x2c>
    3384:	00008dc1 	.word	0x00008dc1
    3388:	000032d1 	.word	0x000032d1
    338c:	00008825 	.word	0x00008825

00003390 <Cellular_ATStrStartWith>:
/*-----------------------------------------------------------*/

CellularATError_t Cellular_ATStrStartWith( const char * pString,
                                           const char * pPrefix,
                                           bool * pResult )
{
    3390:	b5f0      	push	{r4, r5, r6, r7, lr}
    3392:	b083      	sub	sp, #12
    3394:	4605      	mov	r5, r0
    3396:	460c      	mov	r4, r1
    CellularATError_t atStatus = CELLULAR_AT_SUCCESS;
    CellularATStringValidationResult_t stringValidationResult = CELLULAR_AT_STRING_UNKNOWN;
    3398:	2303      	movs	r3, #3
    339a:	f88d 3007 	strb.w	r3, [sp, #7]
    const char * pTempString = pString;
    const char * pTempPrefix = pPrefix;

    if( ( pResult == NULL ) || ( pString == NULL ) || ( pPrefix == NULL ) )
    339e:	4617      	mov	r7, r2
    33a0:	b17a      	cbz	r2, 33c2 <Cellular_ATStrStartWith+0x32>
    33a2:	b180      	cbz	r0, 33c6 <Cellular_ATStrStartWith+0x36>
    33a4:	b189      	cbz	r1, 33ca <Cellular_ATStrStartWith+0x3a>
    CellularATError_t atStatus = CELLULAR_AT_SUCCESS;
    33a6:	2600      	movs	r6, #0
    {
        atStatus = CELLULAR_AT_BAD_PARAMETER;
    }

    if( atStatus == CELLULAR_AT_SUCCESS )
    33a8:	b18e      	cbz	r6, 33ce <Cellular_ATStrStartWith+0x3e>
        {
            atStatus = CELLULAR_AT_BAD_PARAMETER;
        }
    }

    if( atStatus == CELLULAR_AT_SUCCESS )
    33aa:	b1de      	cbz	r6, 33e4 <Cellular_ATStrStartWith+0x54>
        {
            atStatus = CELLULAR_AT_BAD_PARAMETER;
        }
    }

    if( atStatus == CELLULAR_AT_SUCCESS )
    33ac:	bb3e      	cbnz	r6, 33fe <Cellular_ATStrStartWith+0x6e>
    {
        *pResult = true;
    33ae:	2301      	movs	r3, #1
    33b0:	703b      	strb	r3, [r7, #0]

        while( *pTempPrefix != '\0' )
    33b2:	7823      	ldrb	r3, [r4, #0]
    33b4:	b31b      	cbz	r3, 33fe <Cellular_ATStrStartWith+0x6e>
        {
            if( *pTempPrefix != *pTempString )
    33b6:	782a      	ldrb	r2, [r5, #0]
    33b8:	4293      	cmp	r3, r2
    33ba:	d11e      	bne.n	33fa <Cellular_ATStrStartWith+0x6a>
            {
                *pResult = false;
                break;
            }

            pTempPrefix++;
    33bc:	3401      	adds	r4, #1
            pTempString++;
    33be:	3501      	adds	r5, #1
    33c0:	e7f7      	b.n	33b2 <Cellular_ATStrStartWith+0x22>
        atStatus = CELLULAR_AT_BAD_PARAMETER;
    33c2:	2601      	movs	r6, #1
    33c4:	e7f0      	b.n	33a8 <Cellular_ATStrStartWith+0x18>
    33c6:	2601      	movs	r6, #1
    33c8:	e7ee      	b.n	33a8 <Cellular_ATStrStartWith+0x18>
    33ca:	2601      	movs	r6, #1
    33cc:	e7ec      	b.n	33a8 <Cellular_ATStrStartWith+0x18>
        validateString( pTempString, &stringValidationResult );
    33ce:	f10d 0107 	add.w	r1, sp, #7
    33d2:	4628      	mov	r0, r5
    33d4:	4b0b      	ldr	r3, [pc, #44]	; (3404 <Cellular_ATStrStartWith+0x74>)
    33d6:	4798      	blx	r3
        if( stringValidationResult != CELLULAR_AT_STRING_VALID )
    33d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    33dc:	2b00      	cmp	r3, #0
    33de:	d0e4      	beq.n	33aa <Cellular_ATStrStartWith+0x1a>
            atStatus = CELLULAR_AT_BAD_PARAMETER;
    33e0:	2601      	movs	r6, #1
    33e2:	e7e2      	b.n	33aa <Cellular_ATStrStartWith+0x1a>
        validateString( pTempPrefix, &stringValidationResult );
    33e4:	f10d 0107 	add.w	r1, sp, #7
    33e8:	4620      	mov	r0, r4
    33ea:	4b06      	ldr	r3, [pc, #24]	; (3404 <Cellular_ATStrStartWith+0x74>)
    33ec:	4798      	blx	r3
        if( stringValidationResult != CELLULAR_AT_STRING_VALID )
    33ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
    33f2:	2b00      	cmp	r3, #0
    33f4:	d0da      	beq.n	33ac <Cellular_ATStrStartWith+0x1c>
            atStatus = CELLULAR_AT_BAD_PARAMETER;
    33f6:	2601      	movs	r6, #1
    33f8:	e7d8      	b.n	33ac <Cellular_ATStrStartWith+0x1c>
                *pResult = false;
    33fa:	2300      	movs	r3, #0
    33fc:	703b      	strb	r3, [r7, #0]
        }
    }

    return atStatus;
}
    33fe:	4630      	mov	r0, r6
    3400:	b003      	add	sp, #12
    3402:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3404:	000032d1 	.word	0x000032d1

00003408 <Cellular_ATRemovePrefix>:

/*-----------------------------------------------------------*/

CellularATError_t Cellular_ATRemovePrefix( char ** ppString )
{
    3408:	b530      	push	{r4, r5, lr}
    340a:	b083      	sub	sp, #12
    CellularATError_t atStatus = CELLULAR_AT_SUCCESS;
    CellularATStringValidationResult_t stringValidationResult = CELLULAR_AT_STRING_UNKNOWN;
    340c:	2303      	movs	r3, #3
    340e:	f88d 3007 	strb.w	r3, [sp, #7]

    if( ( ppString == NULL ) || ( *ppString == NULL ) )
    3412:	4605      	mov	r5, r0
    3414:	b178      	cbz	r0, 3436 <Cellular_ATRemovePrefix+0x2e>
    3416:	6803      	ldr	r3, [r0, #0]
    3418:	b17b      	cbz	r3, 343a <Cellular_ATRemovePrefix+0x32>
    CellularATError_t atStatus = CELLULAR_AT_SUCCESS;
    341a:	2400      	movs	r4, #0
    {
        atStatus = CELLULAR_AT_BAD_PARAMETER;
    }

    if( atStatus == CELLULAR_AT_SUCCESS )
    341c:	b17c      	cbz	r4, 343e <Cellular_ATRemovePrefix+0x36>
        {
            atStatus = CELLULAR_AT_BAD_PARAMETER;
        }
    }

    if( atStatus == CELLULAR_AT_SUCCESS )
    341e:	b93c      	cbnz	r4, 3430 <Cellular_ATRemovePrefix+0x28>
    {
        /* The strchr() function returns a pointer to the first occurrence of
         * the character in the string or NULL if the character is not found.
         *
         * In case of AT response, prefix is always followed by a colon (':'). */
        *ppString = strchr( *ppString, ( int32_t ) ':' );
    3420:	213a      	movs	r1, #58	; 0x3a
    3422:	6828      	ldr	r0, [r5, #0]
    3424:	4b0c      	ldr	r3, [pc, #48]	; (3458 <Cellular_ATRemovePrefix+0x50>)
    3426:	4798      	blx	r3
    3428:	6028      	str	r0, [r5, #0]

        if( *ppString == NULL )
    342a:	b198      	cbz	r0, 3454 <Cellular_ATRemovePrefix+0x4c>
            atStatus = CELLULAR_AT_BAD_PARAMETER;
        }
        else
        {
            /* Note that we remove both the prefix and the colon. */
            ( *ppString )++;
    342c:	3001      	adds	r0, #1
    342e:	6028      	str	r0, [r5, #0]
        }
    }

    return atStatus;
}
    3430:	4620      	mov	r0, r4
    3432:	b003      	add	sp, #12
    3434:	bd30      	pop	{r4, r5, pc}
        atStatus = CELLULAR_AT_BAD_PARAMETER;
    3436:	2401      	movs	r4, #1
    3438:	e7f0      	b.n	341c <Cellular_ATRemovePrefix+0x14>
    343a:	2401      	movs	r4, #1
    343c:	e7ee      	b.n	341c <Cellular_ATRemovePrefix+0x14>
        validateString( *ppString, &stringValidationResult );
    343e:	f10d 0107 	add.w	r1, sp, #7
    3442:	6828      	ldr	r0, [r5, #0]
    3444:	4b05      	ldr	r3, [pc, #20]	; (345c <Cellular_ATRemovePrefix+0x54>)
    3446:	4798      	blx	r3
        if( stringValidationResult != CELLULAR_AT_STRING_VALID )
    3448:	f89d 3007 	ldrb.w	r3, [sp, #7]
    344c:	2b00      	cmp	r3, #0
    344e:	d0e6      	beq.n	341e <Cellular_ATRemovePrefix+0x16>
            atStatus = CELLULAR_AT_BAD_PARAMETER;
    3450:	2401      	movs	r4, #1
    3452:	e7e4      	b.n	341e <Cellular_ATRemovePrefix+0x16>
            atStatus = CELLULAR_AT_BAD_PARAMETER;
    3454:	2401      	movs	r4, #1
    3456:	e7eb      	b.n	3430 <Cellular_ATRemovePrefix+0x28>
    3458:	00008dc1 	.word	0x00008dc1
    345c:	000032d1 	.word	0x000032d1

00003460 <Cellular_ATRemoveLeadingWhiteSpaces>:

/*-----------------------------------------------------------*/

CellularATError_t Cellular_ATRemoveLeadingWhiteSpaces( char ** ppString )
{
    3460:	b530      	push	{r4, r5, lr}
    3462:	b083      	sub	sp, #12
    CellularATError_t atStatus = CELLULAR_AT_SUCCESS;
    CellularATStringValidationResult_t stringValidationResult = CELLULAR_AT_STRING_UNKNOWN;
    3464:	2303      	movs	r3, #3
    3466:	f88d 3007 	strb.w	r3, [sp, #7]

    if( ( ppString == NULL ) || ( *ppString == NULL ) )
    346a:	4604      	mov	r4, r0
    346c:	b138      	cbz	r0, 347e <Cellular_ATRemoveLeadingWhiteSpaces+0x1e>
    346e:	6803      	ldr	r3, [r0, #0]
    3470:	b13b      	cbz	r3, 3482 <Cellular_ATRemoveLeadingWhiteSpaces+0x22>
    CellularATError_t atStatus = CELLULAR_AT_SUCCESS;
    3472:	2500      	movs	r5, #0
    {
        atStatus = CELLULAR_AT_BAD_PARAMETER;
    }

    if( atStatus == CELLULAR_AT_SUCCESS )
    3474:	b13d      	cbz	r5, 3486 <Cellular_ATRemoveLeadingWhiteSpaces+0x26>
        {
            atStatus = CELLULAR_AT_BAD_PARAMETER;
        }
    }

    if( atStatus == CELLULAR_AT_SUCCESS )
    3476:	b19d      	cbz	r5, 34a0 <Cellular_ATRemoveLeadingWhiteSpaces+0x40>
            ( *ppString )++;
        }
    }

    return atStatus;
}
    3478:	4628      	mov	r0, r5
    347a:	b003      	add	sp, #12
    347c:	bd30      	pop	{r4, r5, pc}
        atStatus = CELLULAR_AT_BAD_PARAMETER;
    347e:	2501      	movs	r5, #1
    3480:	e7f8      	b.n	3474 <Cellular_ATRemoveLeadingWhiteSpaces+0x14>
    3482:	2501      	movs	r5, #1
    3484:	e7f6      	b.n	3474 <Cellular_ATRemoveLeadingWhiteSpaces+0x14>
        validateString( *ppString, &stringValidationResult );
    3486:	f10d 0107 	add.w	r1, sp, #7
    348a:	6820      	ldr	r0, [r4, #0]
    348c:	4b0b      	ldr	r3, [pc, #44]	; (34bc <Cellular_ATRemoveLeadingWhiteSpaces+0x5c>)
    348e:	4798      	blx	r3
        if( stringValidationResult != CELLULAR_AT_STRING_VALID )
    3490:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3494:	2b00      	cmp	r3, #0
    3496:	d0ee      	beq.n	3476 <Cellular_ATRemoveLeadingWhiteSpaces+0x16>
            atStatus = CELLULAR_AT_BAD_PARAMETER;
    3498:	2501      	movs	r5, #1
    349a:	e7ec      	b.n	3476 <Cellular_ATRemoveLeadingWhiteSpaces+0x16>
            ( *ppString )++;
    349c:	3301      	adds	r3, #1
    349e:	6023      	str	r3, [r4, #0]
        while( ( **ppString != '\0' ) && ( isspace( ( ( int ) ( **ppString ) ) ) != 0 ) )
    34a0:	6823      	ldr	r3, [r4, #0]
    34a2:	781b      	ldrb	r3, [r3, #0]
    34a4:	2b00      	cmp	r3, #0
    34a6:	d0e7      	beq.n	3478 <Cellular_ATRemoveLeadingWhiteSpaces+0x18>
    34a8:	4b05      	ldr	r3, [pc, #20]	; (34c0 <Cellular_ATRemoveLeadingWhiteSpaces+0x60>)
    34aa:	4798      	blx	r3
    34ac:	6823      	ldr	r3, [r4, #0]
    34ae:	781a      	ldrb	r2, [r3, #0]
    34b0:	4410      	add	r0, r2
    34b2:	7842      	ldrb	r2, [r0, #1]
    34b4:	f012 0f08 	tst.w	r2, #8
    34b8:	d1f0      	bne.n	349c <Cellular_ATRemoveLeadingWhiteSpaces+0x3c>
    34ba:	e7dd      	b.n	3478 <Cellular_ATRemoveLeadingWhiteSpaces+0x18>
    34bc:	000032d1 	.word	0x000032d1
    34c0:	00008825 	.word	0x00008825

000034c4 <Cellular_ATRemoveAllWhiteSpaces>:
}

/*-----------------------------------------------------------*/

CellularATError_t Cellular_ATRemoveAllWhiteSpaces( char * pString )
{
    34c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    34c6:	b083      	sub	sp, #12
    CellularATError_t atStatus = CELLULAR_AT_SUCCESS;
    CellularATStringValidationResult_t stringValidationResult = CELLULAR_AT_STRING_UNKNOWN;
    34c8:	2303      	movs	r3, #3
    34ca:	f88d 3007 	strb.w	r3, [sp, #7]
    char * p = NULL;
    uint16_t ind = 0;
    char * pTempString = pString;

    if( pString == NULL )
    34ce:	4606      	mov	r6, r0
    34d0:	b128      	cbz	r0, 34de <Cellular_ATRemoveAllWhiteSpaces+0x1a>
    CellularATError_t atStatus = CELLULAR_AT_SUCCESS;
    34d2:	2700      	movs	r7, #0
    {
        atStatus = CELLULAR_AT_BAD_PARAMETER;
    }

    if( atStatus == CELLULAR_AT_SUCCESS )
    34d4:	b12f      	cbz	r7, 34e2 <Cellular_ATRemoveAllWhiteSpaces+0x1e>
        {
            atStatus = CELLULAR_AT_BAD_PARAMETER;
        }
    }

    if( atStatus == CELLULAR_AT_SUCCESS )
    34d6:	b9ff      	cbnz	r7, 3518 <Cellular_ATRemoveAllWhiteSpaces+0x54>
    34d8:	4634      	mov	r4, r6
    34da:	2500      	movs	r5, #0
    34dc:	e00d      	b.n	34fa <Cellular_ATRemoveAllWhiteSpaces+0x36>
        atStatus = CELLULAR_AT_BAD_PARAMETER;
    34de:	2701      	movs	r7, #1
    34e0:	e7f8      	b.n	34d4 <Cellular_ATRemoveAllWhiteSpaces+0x10>
        validateString( pTempString, &stringValidationResult );
    34e2:	f10d 0107 	add.w	r1, sp, #7
    34e6:	4630      	mov	r0, r6
    34e8:	4b0d      	ldr	r3, [pc, #52]	; (3520 <Cellular_ATRemoveAllWhiteSpaces+0x5c>)
    34ea:	4798      	blx	r3
        if( stringValidationResult != CELLULAR_AT_STRING_VALID )
    34ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
    34f0:	2b00      	cmp	r3, #0
    34f2:	d0f0      	beq.n	34d6 <Cellular_ATRemoveAllWhiteSpaces+0x12>
            atStatus = CELLULAR_AT_BAD_PARAMETER;
    34f4:	2701      	movs	r7, #1
    34f6:	e7ee      	b.n	34d6 <Cellular_ATRemoveAllWhiteSpaces+0x12>
            {
                p[ ind ] = *pTempString;
                ind++;
            }

            pTempString++;
    34f8:	3401      	adds	r4, #1
        while( ( *pTempString ) != '\0' )
    34fa:	7823      	ldrb	r3, [r4, #0]
    34fc:	b15b      	cbz	r3, 3516 <Cellular_ATRemoveAllWhiteSpaces+0x52>
            if( isspace( ( ( int ) ( *pTempString ) ) ) == 0 )
    34fe:	4b09      	ldr	r3, [pc, #36]	; (3524 <Cellular_ATRemoveAllWhiteSpaces+0x60>)
    3500:	4798      	blx	r3
    3502:	7823      	ldrb	r3, [r4, #0]
    3504:	4418      	add	r0, r3
    3506:	7842      	ldrb	r2, [r0, #1]
    3508:	f012 0f08 	tst.w	r2, #8
    350c:	d1f4      	bne.n	34f8 <Cellular_ATRemoveAllWhiteSpaces+0x34>
                p[ ind ] = *pTempString;
    350e:	5573      	strb	r3, [r6, r5]
                ind++;
    3510:	3501      	adds	r5, #1
    3512:	b2ad      	uxth	r5, r5
    3514:	e7f0      	b.n	34f8 <Cellular_ATRemoveAllWhiteSpaces+0x34>
        }

        p[ ind ] = '\0';
    3516:	5573      	strb	r3, [r6, r5]
    }

    return atStatus;
}
    3518:	4638      	mov	r0, r7
    351a:	b003      	add	sp, #12
    351c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    351e:	bf00      	nop
    3520:	000032d1 	.word	0x000032d1
    3524:	00008825 	.word	0x00008825

00003528 <Cellular_ATRemoveAllDoubleQuote>:
}

/*-----------------------------------------------------------*/

CellularATError_t Cellular_ATRemoveAllDoubleQuote( char * pString )
{
    3528:	b530      	push	{r4, r5, lr}
    352a:	b083      	sub	sp, #12
    CellularATError_t atStatus = CELLULAR_AT_SUCCESS;
    CellularATStringValidationResult_t stringValidationResult = CELLULAR_AT_STRING_UNKNOWN;
    352c:	2303      	movs	r3, #3
    352e:	f88d 3007 	strb.w	r3, [sp, #7]
    char * p = NULL;
    uint16_t ind = 0;
    char * pTempString = pString;

    if( pString == NULL )
    3532:	4604      	mov	r4, r0
    3534:	b128      	cbz	r0, 3542 <Cellular_ATRemoveAllDoubleQuote+0x1a>
    CellularATError_t atStatus = CELLULAR_AT_SUCCESS;
    3536:	2500      	movs	r5, #0
    {
        atStatus = CELLULAR_AT_BAD_PARAMETER;
    }

    if( atStatus == CELLULAR_AT_SUCCESS )
    3538:	b12d      	cbz	r5, 3546 <Cellular_ATRemoveAllDoubleQuote+0x1e>
        {
            atStatus = CELLULAR_AT_BAD_PARAMETER;
        }
    }

    if( atStatus == CELLULAR_AT_SUCCESS )
    353a:	b9cd      	cbnz	r5, 3570 <Cellular_ATRemoveAllDoubleQuote+0x48>
    353c:	4621      	mov	r1, r4
    353e:	2200      	movs	r2, #0
    3540:	e00d      	b.n	355e <Cellular_ATRemoveAllDoubleQuote+0x36>
        atStatus = CELLULAR_AT_BAD_PARAMETER;
    3542:	2501      	movs	r5, #1
    3544:	e7f8      	b.n	3538 <Cellular_ATRemoveAllDoubleQuote+0x10>
        validateString( pTempString, &stringValidationResult );
    3546:	f10d 0107 	add.w	r1, sp, #7
    354a:	4620      	mov	r0, r4
    354c:	4b0a      	ldr	r3, [pc, #40]	; (3578 <Cellular_ATRemoveAllDoubleQuote+0x50>)
    354e:	4798      	blx	r3
        if( stringValidationResult != CELLULAR_AT_STRING_VALID )
    3550:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3554:	2b00      	cmp	r3, #0
    3556:	d0f0      	beq.n	353a <Cellular_ATRemoveAllDoubleQuote+0x12>
            atStatus = CELLULAR_AT_BAD_PARAMETER;
    3558:	2501      	movs	r5, #1
    355a:	e7ee      	b.n	353a <Cellular_ATRemoveAllDoubleQuote+0x12>
            {
                p[ ind ] = *pTempString;
                ind++;
            }

            pTempString++;
    355c:	3101      	adds	r1, #1
        while( ( *pTempString ) != '\0' )
    355e:	780b      	ldrb	r3, [r1, #0]
    3560:	b12b      	cbz	r3, 356e <Cellular_ATRemoveAllDoubleQuote+0x46>
            if( *pTempString != '\"' )
    3562:	2b22      	cmp	r3, #34	; 0x22
    3564:	d0fa      	beq.n	355c <Cellular_ATRemoveAllDoubleQuote+0x34>
                p[ ind ] = *pTempString;
    3566:	54a3      	strb	r3, [r4, r2]
                ind++;
    3568:	3201      	adds	r2, #1
    356a:	b292      	uxth	r2, r2
    356c:	e7f6      	b.n	355c <Cellular_ATRemoveAllDoubleQuote+0x34>
        }

        p[ ind ] = '\0';
    356e:	54a3      	strb	r3, [r4, r2]
    }

    return atStatus;
}
    3570:	4628      	mov	r0, r5
    3572:	b003      	add	sp, #12
    3574:	bd30      	pop	{r4, r5, pc}
    3576:	bf00      	nop
    3578:	000032d1 	.word	0x000032d1

0000357c <Cellular_ATGetSpecificNextTok>:
/*-----------------------------------------------------------*/

CellularATError_t Cellular_ATGetSpecificNextTok( char ** ppString,
                                                 const char * pDelimiter,
                                                 char ** ppTokOutput )
{
    357c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3580:	b083      	sub	sp, #12
    3582:	460e      	mov	r6, r1
    3584:	4617      	mov	r7, r2
    CellularATError_t atStatus = CELLULAR_AT_SUCCESS;
    CellularATStringValidationResult_t stringValidationResult = CELLULAR_AT_STRING_UNKNOWN;
    3586:	2303      	movs	r3, #3
    3588:	f88d 3007 	strb.w	r3, [sp, #7]
    uint16_t tokStrLen = 0, dataStrlen = 0;
    char * tok = NULL;

    if( ( ppString == NULL ) || ( pDelimiter == NULL ) ||
    358c:	4605      	mov	r5, r0
    358e:	b1c0      	cbz	r0, 35c2 <Cellular_ATGetSpecificNextTok+0x46>
    3590:	b1c9      	cbz	r1, 35c6 <Cellular_ATGetSpecificNextTok+0x4a>
    3592:	b1d2      	cbz	r2, 35ca <Cellular_ATGetSpecificNextTok+0x4e>
        ( ppTokOutput == NULL ) || ( *ppString == NULL ) )
    3594:	6803      	ldr	r3, [r0, #0]
    3596:	b1d3      	cbz	r3, 35ce <Cellular_ATGetSpecificNextTok+0x52>
    CellularATError_t atStatus = CELLULAR_AT_SUCCESS;
    3598:	2400      	movs	r4, #0
    {
        atStatus = CELLULAR_AT_BAD_PARAMETER;
    }

    if( atStatus == CELLULAR_AT_SUCCESS )
    359a:	b1d4      	cbz	r4, 35d2 <Cellular_ATGetSpecificNextTok+0x56>
        {
            atStatus = CELLULAR_AT_BAD_PARAMETER;
        }
    }

    if( atStatus == CELLULAR_AT_SUCCESS )
    359c:	bb4c      	cbnz	r4, 35f2 <Cellular_ATGetSpecificNextTok+0x76>
    {
        dataStrlen = ( uint16_t ) strlen( *ppString );
    359e:	f8d5 8000 	ldr.w	r8, [r5]
    35a2:	4640      	mov	r0, r8
    35a4:	4b1f      	ldr	r3, [pc, #124]	; (3624 <Cellular_ATGetSpecificNextTok+0xa8>)
    35a6:	4798      	blx	r3
    35a8:	fa1f f980 	uxth.w	r9, r0

        if( ( **ppString ) == ( *pDelimiter ) )
    35ac:	f898 2000 	ldrb.w	r2, [r8]
    35b0:	7833      	ldrb	r3, [r6, #0]
    35b2:	429a      	cmp	r2, r3
    35b4:	d018      	beq.n	35e8 <Cellular_ATGetSpecificNextTok+0x6c>
            **ppString = '\0';
            tok = *ppString;
        }
        else
        {
            tok = strtok( *ppString, pDelimiter );
    35b6:	4631      	mov	r1, r6
    35b8:	4640      	mov	r0, r8
    35ba:	4b1b      	ldr	r3, [pc, #108]	; (3628 <Cellular_ATGetSpecificNextTok+0xac>)
    35bc:	4798      	blx	r3
    35be:	4606      	mov	r6, r0
    35c0:	e019      	b.n	35f6 <Cellular_ATGetSpecificNextTok+0x7a>
        atStatus = CELLULAR_AT_BAD_PARAMETER;
    35c2:	2401      	movs	r4, #1
    35c4:	e7e9      	b.n	359a <Cellular_ATGetSpecificNextTok+0x1e>
    35c6:	2401      	movs	r4, #1
    35c8:	e7e7      	b.n	359a <Cellular_ATGetSpecificNextTok+0x1e>
    35ca:	2401      	movs	r4, #1
    35cc:	e7e5      	b.n	359a <Cellular_ATGetSpecificNextTok+0x1e>
    35ce:	2401      	movs	r4, #1
    35d0:	e7e3      	b.n	359a <Cellular_ATGetSpecificNextTok+0x1e>
        validateString( *ppString, &stringValidationResult );
    35d2:	f10d 0107 	add.w	r1, sp, #7
    35d6:	6828      	ldr	r0, [r5, #0]
    35d8:	4b14      	ldr	r3, [pc, #80]	; (362c <Cellular_ATGetSpecificNextTok+0xb0>)
    35da:	4798      	blx	r3
        if( stringValidationResult != CELLULAR_AT_STRING_VALID )
    35dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    35e0:	2b00      	cmp	r3, #0
    35e2:	d0db      	beq.n	359c <Cellular_ATGetSpecificNextTok+0x20>
            atStatus = CELLULAR_AT_BAD_PARAMETER;
    35e4:	2401      	movs	r4, #1
    35e6:	e7d9      	b.n	359c <Cellular_ATGetSpecificNextTok+0x20>
            **ppString = '\0';
    35e8:	2300      	movs	r3, #0
    35ea:	f888 3000 	strb.w	r3, [r8]
            tok = *ppString;
    35ee:	682e      	ldr	r6, [r5, #0]
    35f0:	e001      	b.n	35f6 <Cellular_ATGetSpecificNextTok+0x7a>
    char * tok = NULL;
    35f2:	2600      	movs	r6, #0
    uint16_t tokStrLen = 0, dataStrlen = 0;
    35f4:	46b1      	mov	r9, r6
        }
    }

    if( atStatus == CELLULAR_AT_SUCCESS )
    35f6:	b98c      	cbnz	r4, 361c <Cellular_ATGetSpecificNextTok+0xa0>
    {
        tokStrLen = ( uint16_t ) strlen( tok );
    35f8:	4630      	mov	r0, r6
    35fa:	4b0a      	ldr	r3, [pc, #40]	; (3624 <Cellular_ATGetSpecificNextTok+0xa8>)
    35fc:	4798      	blx	r3
    35fe:	b283      	uxth	r3, r0

        if( ( tokStrLen < dataStrlen ) && ( ( *ppString )[ tokStrLen + 1U ] != '\0' ) )
    3600:	4599      	cmp	r9, r3
    3602:	d908      	bls.n	3616 <Cellular_ATGetSpecificNextTok+0x9a>
    3604:	682b      	ldr	r3, [r5, #0]
    3606:	fa13 f380 	uxtah	r3, r3, r0
    360a:	785b      	ldrb	r3, [r3, #1]
    360c:	b11b      	cbz	r3, 3616 <Cellular_ATGetSpecificNextTok+0x9a>
        {
            *ppString = &tok[ strlen( tok ) + 1U ];
    360e:	3001      	adds	r0, #1
    3610:	4430      	add	r0, r6
    3612:	6028      	str	r0, [r5, #0]
    3614:	e001      	b.n	361a <Cellular_ATGetSpecificNextTok+0x9e>
        }
        else
        {
            *ppString = &tok[ strlen( tok ) ];
    3616:	4430      	add	r0, r6
    3618:	6028      	str	r0, [r5, #0]
        }

        *ppTokOutput = tok;
    361a:	603e      	str	r6, [r7, #0]
    }

    return atStatus;
}
    361c:	4620      	mov	r0, r4
    361e:	b003      	add	sp, #12
    3620:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3624:	00008df1 	.word	0x00008df1
    3628:	00008ec5 	.word	0x00008ec5
    362c:	000032d1 	.word	0x000032d1

00003630 <Cellular_ATGetNextTok>:
{
    3630:	b508      	push	{r3, lr}
    if( ( ppString == NULL ) || ( ppTokOutput == NULL ) )
    3632:	4603      	mov	r3, r0
    3634:	b118      	cbz	r0, 363e <Cellular_ATGetNextTok+0xe>
    3636:	b121      	cbz	r1, 3642 <Cellular_ATGetNextTok+0x12>
    CellularATError_t atStatus = CELLULAR_AT_SUCCESS;
    3638:	2000      	movs	r0, #0
    if( atStatus == CELLULAR_AT_SUCCESS )
    363a:	b120      	cbz	r0, 3646 <Cellular_ATGetNextTok+0x16>
}
    363c:	bd08      	pop	{r3, pc}
        atStatus = CELLULAR_AT_BAD_PARAMETER;
    363e:	2001      	movs	r0, #1
    3640:	e7fb      	b.n	363a <Cellular_ATGetNextTok+0xa>
    3642:	2001      	movs	r0, #1
    3644:	e7f9      	b.n	363a <Cellular_ATGetNextTok+0xa>
    3646:	4618      	mov	r0, r3
    3648:	460a      	mov	r2, r1
        atStatus = Cellular_ATGetSpecificNextTok( ppString, pDelimiter, ppTokOutput );
    364a:	4902      	ldr	r1, [pc, #8]	; (3654 <Cellular_ATGetNextTok+0x24>)
    364c:	4b02      	ldr	r3, [pc, #8]	; (3658 <Cellular_ATGetNextTok+0x28>)
    364e:	4798      	blx	r3
    3650:	e7f4      	b.n	363c <Cellular_ATGetNextTok+0xc>
    3652:	bf00      	nop
    3654:	0000c1cc 	.word	0x0000c1cc
    3658:	0000357d 	.word	0x0000357d

0000365c <Cellular_ATcheckErrorCode>:

CellularATError_t Cellular_ATcheckErrorCode( const char * pInputBuf,
                                             const char * const * const ppKeyList,
                                             size_t keyListLen,
                                             bool * pResult )
{
    365c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3660:	b083      	sub	sp, #12
    3662:	460d      	mov	r5, r1
    3664:	4616      	mov	r6, r2
    3666:	4699      	mov	r9, r3
    CellularATError_t atStatus = CELLULAR_AT_SUCCESS;
    uint8_t i = 0;
    CellularATStringValidationResult_t stringValidationResult = CELLULAR_AT_STRING_UNKNOWN;
    3668:	2303      	movs	r3, #3
    366a:	f88d 3007 	strb.w	r3, [sp, #7]
    bool tmpResult;

    if( ( pInputBuf == NULL ) || ( ppKeyList == NULL ) || ( pResult == NULL ) )
    366e:	4607      	mov	r7, r0
    3670:	b178      	cbz	r0, 3692 <Cellular_ATcheckErrorCode+0x36>
    3672:	b189      	cbz	r1, 3698 <Cellular_ATcheckErrorCode+0x3c>
    3674:	f1b9 0f00 	cmp.w	r9, #0
    3678:	d011      	beq.n	369e <Cellular_ATcheckErrorCode+0x42>
    CellularATError_t atStatus = CELLULAR_AT_SUCCESS;
    367a:	f04f 0800 	mov.w	r8, #0
    {
        atStatus = CELLULAR_AT_BAD_PARAMETER;
    }

    if( atStatus == CELLULAR_AT_SUCCESS )
    367e:	f1b8 0f00 	cmp.w	r8, #0
    3682:	d00f      	beq.n	36a4 <Cellular_ATcheckErrorCode+0x48>
        {
            atStatus = CELLULAR_AT_BAD_PARAMETER;
        }
    }

    if( atStatus == CELLULAR_AT_SUCCESS )
    3684:	f1b8 0f00 	cmp.w	r8, #0
    3688:	d12c      	bne.n	36e4 <Cellular_ATcheckErrorCode+0x88>
    {
        *pResult = false;
    368a:	2400      	movs	r4, #0
    368c:	f889 4000 	strb.w	r4, [r9]

        for( i = 0; i < keyListLen; i++ )
    3690:	e016      	b.n	36c0 <Cellular_ATcheckErrorCode+0x64>
        atStatus = CELLULAR_AT_BAD_PARAMETER;
    3692:	f04f 0801 	mov.w	r8, #1
    3696:	e7f2      	b.n	367e <Cellular_ATcheckErrorCode+0x22>
    3698:	f04f 0801 	mov.w	r8, #1
    369c:	e7ef      	b.n	367e <Cellular_ATcheckErrorCode+0x22>
    369e:	f04f 0801 	mov.w	r8, #1
    36a2:	e7ec      	b.n	367e <Cellular_ATcheckErrorCode+0x22>
        validateString( pInputBuf, &stringValidationResult );
    36a4:	f10d 0107 	add.w	r1, sp, #7
    36a8:	4638      	mov	r0, r7
    36aa:	4b10      	ldr	r3, [pc, #64]	; (36ec <Cellular_ATcheckErrorCode+0x90>)
    36ac:	4798      	blx	r3
        if( stringValidationResult != CELLULAR_AT_STRING_VALID )
    36ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    36b2:	2b00      	cmp	r3, #0
    36b4:	d0e6      	beq.n	3684 <Cellular_ATcheckErrorCode+0x28>
            atStatus = CELLULAR_AT_BAD_PARAMETER;
    36b6:	f04f 0801 	mov.w	r8, #1
    36ba:	e7e3      	b.n	3684 <Cellular_ATcheckErrorCode+0x28>
        for( i = 0; i < keyListLen; i++ )
    36bc:	3401      	adds	r4, #1
    36be:	b2e4      	uxtb	r4, r4
    36c0:	42b4      	cmp	r4, r6
    36c2:	d20f      	bcs.n	36e4 <Cellular_ATcheckErrorCode+0x88>
        {
            if( ( Cellular_ATStrStartWith( pInputBuf, ppKeyList[ i ], &tmpResult ) == CELLULAR_AT_SUCCESS ) && tmpResult )
    36c4:	f10d 0206 	add.w	r2, sp, #6
    36c8:	f855 1024 	ldr.w	r1, [r5, r4, lsl #2]
    36cc:	4638      	mov	r0, r7
    36ce:	4b08      	ldr	r3, [pc, #32]	; (36f0 <Cellular_ATcheckErrorCode+0x94>)
    36d0:	4798      	blx	r3
    36d2:	2800      	cmp	r0, #0
    36d4:	d1f2      	bne.n	36bc <Cellular_ATcheckErrorCode+0x60>
    36d6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    36da:	2b00      	cmp	r3, #0
    36dc:	d0ee      	beq.n	36bc <Cellular_ATcheckErrorCode+0x60>
            {
                *pResult = true;
    36de:	2301      	movs	r3, #1
    36e0:	f889 3000 	strb.w	r3, [r9]
            }
        }
    }

    return atStatus;
}
    36e4:	4640      	mov	r0, r8
    36e6:	b003      	add	sp, #12
    36e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    36ec:	000032d1 	.word	0x000032d1
    36f0:	00003391 	.word	0x00003391

000036f4 <Cellular_ATStrDup>:

/*-----------------------------------------------------------*/

CellularATError_t Cellular_ATStrDup( char ** ppDst,
                                     const char * pSrc )
{
    36f4:	b570      	push	{r4, r5, r6, lr}
    36f6:	460c      	mov	r4, r1
    char * p = NULL;
    CellularATError_t atStatus = CELLULAR_AT_SUCCESS;
    const char * pTempSrc = pSrc;

    if( ( ppDst == NULL ) || ( pTempSrc == NULL ) || ( strnlen( pTempSrc, CELLULAR_AT_MAX_STRING_SIZE ) >= CELLULAR_AT_MAX_STRING_SIZE ) )
    36f8:	4606      	mov	r6, r0
    36fa:	b158      	cbz	r0, 3714 <Cellular_ATStrDup+0x20>
    36fc:	b161      	cbz	r1, 3718 <Cellular_ATStrDup+0x24>
    36fe:	f44f 7180 	mov.w	r1, #256	; 0x100
    3702:	4620      	mov	r0, r4
    3704:	4b0f      	ldr	r3, [pc, #60]	; (3744 <Cellular_ATStrDup+0x50>)
    3706:	4798      	blx	r3
    3708:	28ff      	cmp	r0, #255	; 0xff
    370a:	d807      	bhi.n	371c <Cellular_ATStrDup+0x28>
    CellularATError_t atStatus = CELLULAR_AT_SUCCESS;
    370c:	2500      	movs	r5, #0
    {
        atStatus = CELLULAR_AT_BAD_PARAMETER;
    }

    if( atStatus == CELLULAR_AT_SUCCESS )
    370e:	b13d      	cbz	r5, 3720 <Cellular_ATStrDup+0x2c>
            atStatus = CELLULAR_AT_NO_MEMORY;
        }
    }

    return atStatus;
}
    3710:	4628      	mov	r0, r5
    3712:	bd70      	pop	{r4, r5, r6, pc}
        atStatus = CELLULAR_AT_BAD_PARAMETER;
    3714:	2501      	movs	r5, #1
    3716:	e7fa      	b.n	370e <Cellular_ATStrDup+0x1a>
    3718:	2501      	movs	r5, #1
    371a:	e7f8      	b.n	370e <Cellular_ATStrDup+0x1a>
    371c:	2501      	movs	r5, #1
    371e:	e7f6      	b.n	370e <Cellular_ATStrDup+0x1a>
        *ppDst = ( char * ) Platform_Malloc( sizeof( char ) * ( strlen( pTempSrc ) + 1U ) );
    3720:	4620      	mov	r0, r4
    3722:	4b09      	ldr	r3, [pc, #36]	; (3748 <Cellular_ATStrDup+0x54>)
    3724:	4798      	blx	r3
    3726:	3001      	adds	r0, #1
    3728:	4b08      	ldr	r3, [pc, #32]	; (374c <Cellular_ATStrDup+0x58>)
    372a:	4798      	blx	r3
    372c:	6030      	str	r0, [r6, #0]
        if( *ppDst != NULL )
    372e:	b920      	cbnz	r0, 373a <Cellular_ATStrDup+0x46>
            atStatus = CELLULAR_AT_NO_MEMORY;
    3730:	2502      	movs	r5, #2
    3732:	e7ed      	b.n	3710 <Cellular_ATStrDup+0x1c>
                *p = *pTempSrc;
    3734:	f800 3b01 	strb.w	r3, [r0], #1
                pTempSrc++;
    3738:	3401      	adds	r4, #1
            while( *pTempSrc != '\0' )
    373a:	7823      	ldrb	r3, [r4, #0]
    373c:	2b00      	cmp	r3, #0
    373e:	d1f9      	bne.n	3734 <Cellular_ATStrDup+0x40>
            *p = '\0';
    3740:	7003      	strb	r3, [r0, #0]
    3742:	e7e5      	b.n	3710 <Cellular_ATStrDup+0x1c>
    3744:	00008e4f 	.word	0x00008e4f
    3748:	00008df1 	.word	0x00008df1
    374c:	0000655d 	.word	0x0000655d

00003750 <Cellular_ATStrtoi>:
/*-----------------------------------------------------------*/

CellularATError_t Cellular_ATStrtoi( const char * pStr,
                                     int32_t base,
                                     int32_t * pResult )
{
    3750:	b530      	push	{r4, r5, lr}
    3752:	b083      	sub	sp, #12
    CellularATError_t atStatus = CELLULAR_AT_SUCCESS;
    int32_t retStrtol = 0;
    char * pEndStr = NULL;
    3754:	2300      	movs	r3, #0
    3756:	9301      	str	r3, [sp, #4]

    if( ( pStr == NULL ) || ( pResult == NULL ) )
    3758:	b168      	cbz	r0, 3776 <Cellular_ATStrtoi+0x26>
    375a:	4605      	mov	r5, r0
    375c:	b16a      	cbz	r2, 377a <Cellular_ATStrtoi+0x2a>
    375e:	4614      	mov	r4, r2
    3760:	460a      	mov	r2, r1
         * means that the complete pToken string passed for conversion was valid and a valid
         * conversion was performed. */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        /* coverity[misra_c_2012_rule_22_8_violation] */
        /* coverity[misra_c_2012_rule_22_9_violation] */
        retStrtol = ( int32_t ) strtol( pStr, &pEndStr, base );
    3762:	a901      	add	r1, sp, #4
    3764:	4b07      	ldr	r3, [pc, #28]	; (3784 <Cellular_ATStrtoi+0x34>)
    3766:	4798      	blx	r3

        /* The return value zero may stand for the failure of strtol. So if the return value
         * is zero, need to check the address of pEndStr, if it's greater than the pStr, that
         * means there is an real parsed zero before pEndStr.
         */
        if( pEndStr == pStr )
    3768:	9b01      	ldr	r3, [sp, #4]
    376a:	429d      	cmp	r5, r3
    376c:	d007      	beq.n	377e <Cellular_ATStrtoi+0x2e>
        {
            atStatus = CELLULAR_AT_ERROR;
        }
        else
        {
            *pResult = retStrtol;
    376e:	6020      	str	r0, [r4, #0]
    CellularATError_t atStatus = CELLULAR_AT_SUCCESS;
    3770:	2000      	movs	r0, #0
        }
    }

    return atStatus;
}
    3772:	b003      	add	sp, #12
    3774:	bd30      	pop	{r4, r5, pc}
        atStatus = CELLULAR_AT_BAD_PARAMETER;
    3776:	2001      	movs	r0, #1
    3778:	e7fb      	b.n	3772 <Cellular_ATStrtoi+0x22>
    377a:	2001      	movs	r0, #1
    377c:	e7f9      	b.n	3772 <Cellular_ATStrtoi+0x22>
            atStatus = CELLULAR_AT_ERROR;
    377e:	2005      	movs	r0, #5
    3780:	e7f7      	b.n	3772 <Cellular_ATStrtoi+0x22>
    3782:	bf00      	nop
    3784:	00009071 	.word	0x00009071

00003788 <_shutdownCallback>:

/*-----------------------------------------------------------*/

static void _shutdownCallback( CellularContext_t * pContext )
{
    pContext->bLibShutdown = true;
    3788:	2301      	movs	r3, #1
    378a:	7143      	strb	r3, [r0, #5]
    378c:	4770      	bx	lr

0000378e <_Cellular_SetShutdownCallback>:
/*-----------------------------------------------------------*/

static void _Cellular_SetShutdownCallback( CellularContext_t * pContext,
                                           _pPktioShutdownCallback_t shutdownCb )
{
    pContext->pPktioShutdownCB = shutdownCb;
    378e:	f8c0 11fc 	str.w	r1, [r0, #508]	; 0x1fc
    3792:	4770      	bx	lr

00003794 <checkInitParameter>:
{
    3794:	b510      	push	{r4, lr}
    if( pCellularHandle == NULL )
    3796:	b198      	cbz	r0, 37c0 <checkInitParameter+0x2c>
    else if( ( pCommInterface == NULL ) || ( pCommInterface->open == NULL ) ||
    3798:	b1f9      	cbz	r1, 37da <checkInitParameter+0x46>
    379a:	680b      	ldr	r3, [r1, #0]
    379c:	b1eb      	cbz	r3, 37da <checkInitParameter+0x46>
             ( pCommInterface->close == NULL ) || ( pCommInterface->send == NULL ) ||
    379e:	68cb      	ldr	r3, [r1, #12]
    else if( ( pCommInterface == NULL ) || ( pCommInterface->open == NULL ) ||
    37a0:	b1db      	cbz	r3, 37da <checkInitParameter+0x46>
             ( pCommInterface->close == NULL ) || ( pCommInterface->send == NULL ) ||
    37a2:	684b      	ldr	r3, [r1, #4]
    37a4:	b1cb      	cbz	r3, 37da <checkInitParameter+0x46>
             ( pCommInterface->recv == NULL ) )
    37a6:	688b      	ldr	r3, [r1, #8]
             ( pCommInterface->close == NULL ) || ( pCommInterface->send == NULL ) ||
    37a8:	b1bb      	cbz	r3, 37da <checkInitParameter+0x46>
    else if( ( pTokenTable == NULL ) || ( pTokenTable->pCellularUrcHandlerTable == NULL ) ||
    37aa:	b31a      	cbz	r2, 37f4 <checkInitParameter+0x60>
    37ac:	6813      	ldr	r3, [r2, #0]
    37ae:	b30b      	cbz	r3, 37f4 <checkInitParameter+0x60>
             ( pTokenTable->pCellularSrcTokenErrorTable == NULL ) ||
    37b0:	6893      	ldr	r3, [r2, #8]
    else if( ( pTokenTable == NULL ) || ( pTokenTable->pCellularUrcHandlerTable == NULL ) ||
    37b2:	b1fb      	cbz	r3, 37f4 <checkInitParameter+0x60>
             ( pTokenTable->pCellularSrcTokenSuccessTable == NULL ) ||
    37b4:	6913      	ldr	r3, [r2, #16]
             ( pTokenTable->pCellularSrcTokenErrorTable == NULL ) ||
    37b6:	b1eb      	cbz	r3, 37f4 <checkInitParameter+0x60>
             ( pTokenTable->pCellularUrcTokenWoPrefixTable == NULL ) )
    37b8:	6993      	ldr	r3, [r2, #24]
             ( pTokenTable->pCellularSrcTokenSuccessTable == NULL ) ||
    37ba:	b1db      	cbz	r3, 37f4 <checkInitParameter+0x60>
    CellularError_t cellularStatus = CELLULAR_SUCCESS;
    37bc:	2000      	movs	r0, #0
}
    37be:	bd10      	pop	{r4, pc}
        LogError( ( "Invalid CellularHandler pointer." ) );
    37c0:	f240 1389 	movw	r3, #393	; 0x189
    37c4:	4a12      	ldr	r2, [pc, #72]	; (3810 <checkInitParameter+0x7c>)
    37c6:	4913      	ldr	r1, [pc, #76]	; (3814 <checkInitParameter+0x80>)
    37c8:	4813      	ldr	r0, [pc, #76]	; (3818 <checkInitParameter+0x84>)
    37ca:	4c14      	ldr	r4, [pc, #80]	; (381c <checkInitParameter+0x88>)
    37cc:	47a0      	blx	r4
    37ce:	4814      	ldr	r0, [pc, #80]	; (3820 <checkInitParameter+0x8c>)
    37d0:	47a0      	blx	r4
    37d2:	4814      	ldr	r0, [pc, #80]	; (3824 <checkInitParameter+0x90>)
    37d4:	47a0      	blx	r4
        cellularStatus = CELLULAR_INVALID_HANDLE;
    37d6:	2001      	movs	r0, #1
    37d8:	bd10      	pop	{r4, pc}
        LogError( ( "All the functions in the CellularCommInterface should be valid." ) );
    37da:	f44f 73c8 	mov.w	r3, #400	; 0x190
    37de:	4a0c      	ldr	r2, [pc, #48]	; (3810 <checkInitParameter+0x7c>)
    37e0:	490c      	ldr	r1, [pc, #48]	; (3814 <checkInitParameter+0x80>)
    37e2:	480d      	ldr	r0, [pc, #52]	; (3818 <checkInitParameter+0x84>)
    37e4:	4c0d      	ldr	r4, [pc, #52]	; (381c <checkInitParameter+0x88>)
    37e6:	47a0      	blx	r4
    37e8:	480f      	ldr	r0, [pc, #60]	; (3828 <checkInitParameter+0x94>)
    37ea:	47a0      	blx	r4
    37ec:	480d      	ldr	r0, [pc, #52]	; (3824 <checkInitParameter+0x90>)
    37ee:	47a0      	blx	r4
        cellularStatus = CELLULAR_BAD_PARAMETER;
    37f0:	2005      	movs	r0, #5
    37f2:	bd10      	pop	{r4, pc}
        LogError( ( "All the token tables in the CellularTokenTable should be valid." ) );
    37f4:	f44f 73cc 	mov.w	r3, #408	; 0x198
    37f8:	4a05      	ldr	r2, [pc, #20]	; (3810 <checkInitParameter+0x7c>)
    37fa:	4906      	ldr	r1, [pc, #24]	; (3814 <checkInitParameter+0x80>)
    37fc:	4806      	ldr	r0, [pc, #24]	; (3818 <checkInitParameter+0x84>)
    37fe:	4c07      	ldr	r4, [pc, #28]	; (381c <checkInitParameter+0x88>)
    3800:	47a0      	blx	r4
    3802:	480a      	ldr	r0, [pc, #40]	; (382c <checkInitParameter+0x98>)
    3804:	47a0      	blx	r4
    3806:	4807      	ldr	r0, [pc, #28]	; (3824 <checkInitParameter+0x90>)
    3808:	47a0      	blx	r4
        cellularStatus = CELLULAR_BAD_PARAMETER;
    380a:	2005      	movs	r0, #5
    380c:	bd10      	pop	{r4, pc}
    380e:	bf00      	nop
    3810:	0000cc14 	.word	0x0000cc14
    3814:	0000b258 	.word	0x0000b258
    3818:	0000a188 	.word	0x0000a188
    381c:	00005bfd 	.word	0x00005bfd
    3820:	0000cd34 	.word	0x0000cd34
    3824:	0000dcf4 	.word	0x0000dcf4
    3828:	0000cd58 	.word	0x0000cd58
    382c:	0000cd98 	.word	0x0000cd98

00003830 <_Cellular_FreeContext>:
{
    3830:	b510      	push	{r4, lr}
    3832:	4604      	mov	r4, r0
    taskENTER_CRITICAL();
    3834:	4b0a      	ldr	r3, [pc, #40]	; (3860 <_Cellular_FreeContext+0x30>)
    3836:	4798      	blx	r3
    for( i = 0; i < CELLULAR_CONTEXT_MAX; i++ )
    3838:	2300      	movs	r3, #0
    383a:	b113      	cbz	r3, 3842 <_Cellular_FreeContext+0x12>
    taskEXIT_CRITICAL();
    383c:	4b09      	ldr	r3, [pc, #36]	; (3864 <_Cellular_FreeContext+0x34>)
    383e:	4798      	blx	r3
    3840:	bd10      	pop	{r4, pc}
        if( cellularContextTable[ i ] == pContext )
    3842:	4619      	mov	r1, r3
    3844:	4a08      	ldr	r2, [pc, #32]	; (3868 <_Cellular_FreeContext+0x38>)
    3846:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    384a:	42a2      	cmp	r2, r4
    384c:	d002      	beq.n	3854 <_Cellular_FreeContext+0x24>
    for( i = 0; i < CELLULAR_CONTEXT_MAX; i++ )
    384e:	3301      	adds	r3, #1
    3850:	b2db      	uxtb	r3, r3
    3852:	e7f2      	b.n	383a <_Cellular_FreeContext+0xa>
            cellularContextTable[ i ] = NULL;
    3854:	2200      	movs	r2, #0
    3856:	4b04      	ldr	r3, [pc, #16]	; (3868 <_Cellular_FreeContext+0x38>)
    3858:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            break;
    385c:	e7ee      	b.n	383c <_Cellular_FreeContext+0xc>
    385e:	bf00      	nop
    3860:	00006205 	.word	0x00006205
    3864:	00006249 	.word	0x00006249
    3868:	20000334 	.word	0x20000334

0000386c <_Cellular_AllocContext>:
{
    386c:	b570      	push	{r4, r5, r6, lr}
    taskENTER_CRITICAL();
    386e:	4b0f      	ldr	r3, [pc, #60]	; (38ac <_Cellular_AllocContext+0x40>)
    3870:	4798      	blx	r3
    for( i = 0; i < CELLULAR_CONTEXT_MAX; i++ )
    3872:	2300      	movs	r3, #0
    3874:	b123      	cbz	r3, 3880 <_Cellular_AllocContext+0x14>
    CellularContext_t * pContext = NULL;
    3876:	2400      	movs	r4, #0
    taskEXIT_CRITICAL();
    3878:	4b0d      	ldr	r3, [pc, #52]	; (38b0 <_Cellular_AllocContext+0x44>)
    387a:	4798      	blx	r3
}
    387c:	4620      	mov	r0, r4
    387e:	bd70      	pop	{r4, r5, r6, pc}
        if( cellularContextTable[ i ] == NULL )
    3880:	461d      	mov	r5, r3
    3882:	4a0c      	ldr	r2, [pc, #48]	; (38b4 <_Cellular_AllocContext+0x48>)
    3884:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    3888:	b112      	cbz	r2, 3890 <_Cellular_AllocContext+0x24>
    for( i = 0; i < CELLULAR_CONTEXT_MAX; i++ )
    388a:	3301      	adds	r3, #1
    388c:	b2db      	uxtb	r3, r3
    388e:	e7f1      	b.n	3874 <_Cellular_AllocContext+0x8>
                    pContext = &cellularStaticContextTable[ i ];
    3890:	4e08      	ldr	r6, [pc, #32]	; (38b4 <_Cellular_AllocContext+0x48>)
    3892:	1d34      	adds	r4, r6, #4
    3894:	f640 1258 	movw	r2, #2392	; 0x958
    3898:	fb02 4403 	mla	r4, r2, r3, r4
                ( void ) memset( pContext, 0, sizeof( CellularContext_t ) );
    389c:	2100      	movs	r1, #0
    389e:	4620      	mov	r0, r4
    38a0:	4b05      	ldr	r3, [pc, #20]	; (38b8 <_Cellular_AllocContext+0x4c>)
    38a2:	4798      	blx	r3
                cellularContextTable[ i ] = pContext;
    38a4:	f846 4025 	str.w	r4, [r6, r5, lsl #2]
    38a8:	e7e6      	b.n	3878 <_Cellular_AllocContext+0xc>
    38aa:	bf00      	nop
    38ac:	00006205 	.word	0x00006205
    38b0:	00006249 	.word	0x00006249
    38b4:	20000334 	.word	0x20000334
    38b8:	000088af 	.word	0x000088af

000038bc <_Cellular_CreateLibStatusMutex>:
{
    38bc:	b508      	push	{r3, lr}
    status = PlatformMutex_Create( &pContext->libStatusMutex, false );
    38be:	2100      	movs	r1, #0
    38c0:	3008      	adds	r0, #8
    38c2:	4b01      	ldr	r3, [pc, #4]	; (38c8 <_Cellular_CreateLibStatusMutex+0xc>)
    38c4:	4798      	blx	r3
}
    38c6:	bd08      	pop	{r3, pc}
    38c8:	00005485 	.word	0x00005485

000038cc <_Cellular_DestroyLibStatusMutex>:
{
    38cc:	b508      	push	{r3, lr}
    PlatformMutex_Destroy( &pContext->libStatusMutex );
    38ce:	3008      	adds	r0, #8
    38d0:	4b01      	ldr	r3, [pc, #4]	; (38d8 <_Cellular_DestroyLibStatusMutex+0xc>)
    38d2:	4798      	blx	r3
    38d4:	bd08      	pop	{r3, pc}
    38d6:	bf00      	nop
    38d8:	000054c9 	.word	0x000054c9

000038dc <_Cellular_CheckLibraryStatus>:

/*-----------------------------------------------------------*/

/* Checks whether Cellular Library is opened. */
CellularError_t _Cellular_CheckLibraryStatus( CellularContext_t * pContext )
{
    38dc:	b570      	push	{r4, r5, r6, lr}
    CellularError_t cellularStatus = CELLULAR_SUCCESS;

    if( pContext == NULL )
    38de:	4604      	mov	r4, r0
    38e0:	b178      	cbz	r0, 3902 <_Cellular_CheckLibraryStatus+0x26>
    {
        cellularStatus = CELLULAR_INVALID_HANDLE;
    }
    else
    {
        PlatformMutex_Lock( &pContext->libStatusMutex );
    38e2:	f100 0608 	add.w	r6, r0, #8
    38e6:	4630      	mov	r0, r6
    38e8:	4b14      	ldr	r3, [pc, #80]	; (393c <_Cellular_CheckLibraryStatus+0x60>)
    38ea:	4798      	blx	r3

        if( pContext->bLibOpened == false )
    38ec:	7923      	ldrb	r3, [r4, #4]
    38ee:	b133      	cbz	r3, 38fe <_Cellular_CheckLibraryStatus+0x22>
    CellularError_t cellularStatus = CELLULAR_SUCCESS;
    38f0:	2500      	movs	r5, #0
        {
            cellularStatus = CELLULAR_LIBRARY_NOT_OPEN;
        }

        PlatformMutex_Unlock( &pContext->libStatusMutex );
    38f2:	4630      	mov	r0, r6
    38f4:	4b12      	ldr	r3, [pc, #72]	; (3940 <_Cellular_CheckLibraryStatus+0x64>)
    38f6:	4798      	blx	r3
    }

    if( cellularStatus == CELLULAR_SUCCESS )
    38f8:	b12d      	cbz	r5, 3906 <_Cellular_CheckLibraryStatus+0x2a>

        PlatformMutex_Unlock( &pContext->libStatusMutex );
    }

    return cellularStatus;
}
    38fa:	4628      	mov	r0, r5
    38fc:	bd70      	pop	{r4, r5, r6, pc}
            cellularStatus = CELLULAR_LIBRARY_NOT_OPEN;
    38fe:	2503      	movs	r5, #3
    3900:	e7f7      	b.n	38f2 <_Cellular_CheckLibraryStatus+0x16>
        cellularStatus = CELLULAR_INVALID_HANDLE;
    3902:	2501      	movs	r5, #1
    3904:	e7f8      	b.n	38f8 <_Cellular_CheckLibraryStatus+0x1c>
        PlatformMutex_Lock( &pContext->libStatusMutex );
    3906:	f104 0608 	add.w	r6, r4, #8
    390a:	4630      	mov	r0, r6
    390c:	4b0b      	ldr	r3, [pc, #44]	; (393c <_Cellular_CheckLibraryStatus+0x60>)
    390e:	4798      	blx	r3
        if( ( pContext->bLibShutdown == true ) || ( pContext->bLibClosing == true ) )
    3910:	7963      	ldrb	r3, [r4, #5]
    3912:	b90b      	cbnz	r3, 3918 <_Cellular_CheckLibraryStatus+0x3c>
    3914:	79a3      	ldrb	r3, [r4, #6]
    3916:	b16b      	cbz	r3, 3934 <_Cellular_CheckLibraryStatus+0x58>
            LogError( ( "Cellular Lib indicated a failure[%d][%d]", pContext->bLibShutdown, pContext->bLibClosing ) );
    3918:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
    391c:	4a09      	ldr	r2, [pc, #36]	; (3944 <_Cellular_CheckLibraryStatus+0x68>)
    391e:	490a      	ldr	r1, [pc, #40]	; (3948 <_Cellular_CheckLibraryStatus+0x6c>)
    3920:	480a      	ldr	r0, [pc, #40]	; (394c <_Cellular_CheckLibraryStatus+0x70>)
    3922:	4d0b      	ldr	r5, [pc, #44]	; (3950 <_Cellular_CheckLibraryStatus+0x74>)
    3924:	47a8      	blx	r5
    3926:	79a2      	ldrb	r2, [r4, #6]
    3928:	7961      	ldrb	r1, [r4, #5]
    392a:	480a      	ldr	r0, [pc, #40]	; (3954 <_Cellular_CheckLibraryStatus+0x78>)
    392c:	47a8      	blx	r5
    392e:	480a      	ldr	r0, [pc, #40]	; (3958 <_Cellular_CheckLibraryStatus+0x7c>)
    3930:	47a8      	blx	r5
            cellularStatus = CELLULAR_INTERNAL_FAILURE;
    3932:	250a      	movs	r5, #10
        PlatformMutex_Unlock( &pContext->libStatusMutex );
    3934:	4630      	mov	r0, r6
    3936:	4b02      	ldr	r3, [pc, #8]	; (3940 <_Cellular_CheckLibraryStatus+0x64>)
    3938:	4798      	blx	r3
    393a:	e7de      	b.n	38fa <_Cellular_CheckLibraryStatus+0x1e>
    393c:	000054e9 	.word	0x000054e9
    3940:	000054f9 	.word	0x000054f9
    3944:	0000cc28 	.word	0x0000cc28
    3948:	0000b258 	.word	0x0000b258
    394c:	0000a188 	.word	0x0000a188
    3950:	00005bfd 	.word	0x00005bfd
    3954:	0000cdd8 	.word	0x0000cdd8
    3958:	0000dcf4 	.word	0x0000dcf4

0000395c <_Cellular_TranslatePktStatus>:

CellularError_t _Cellular_TranslatePktStatus( CellularPktStatus_t status )
{
    CellularError_t cellularStatus = CELLULAR_INTERNAL_FAILURE;

    switch( status )
    395c:	b188      	cbz	r0, 3982 <_Cellular_TranslatePktStatus+0x26>
{
    395e:	b538      	push	{r3, r4, r5, lr}
    3960:	4604      	mov	r4, r0
    switch( status )
    3962:	2801      	cmp	r0, #1
    3964:	d00f      	beq.n	3986 <_Cellular_TranslatePktStatus+0x2a>
        case CELLULAR_PKT_STATUS_FAILURE:
        case CELLULAR_PKT_STATUS_BAD_REQUEST:
        case CELLULAR_PKT_STATUS_BAD_RESPONSE:
        case CELLULAR_PKT_STATUS_SIZE_MISMATCH:
        default:
            LogError( ( "_Cellular_TranslatePktStatus: Status %d", status ) );
    3966:	f240 13e7 	movw	r3, #487	; 0x1e7
    396a:	4a08      	ldr	r2, [pc, #32]	; (398c <_Cellular_TranslatePktStatus+0x30>)
    396c:	4908      	ldr	r1, [pc, #32]	; (3990 <_Cellular_TranslatePktStatus+0x34>)
    396e:	4809      	ldr	r0, [pc, #36]	; (3994 <_Cellular_TranslatePktStatus+0x38>)
    3970:	4d09      	ldr	r5, [pc, #36]	; (3998 <_Cellular_TranslatePktStatus+0x3c>)
    3972:	47a8      	blx	r5
    3974:	4621      	mov	r1, r4
    3976:	4809      	ldr	r0, [pc, #36]	; (399c <_Cellular_TranslatePktStatus+0x40>)
    3978:	47a8      	blx	r5
    397a:	4809      	ldr	r0, [pc, #36]	; (39a0 <_Cellular_TranslatePktStatus+0x44>)
    397c:	47a8      	blx	r5
            cellularStatus = CELLULAR_INTERNAL_FAILURE;
    397e:	200a      	movs	r0, #10
            break;
    3980:	bd38      	pop	{r3, r4, r5, pc}
            cellularStatus = CELLULAR_SUCCESS;
    3982:	2000      	movs	r0, #0
    3984:	4770      	bx	lr
            cellularStatus = CELLULAR_TIMEOUT;
    3986:	2007      	movs	r0, #7
    }

    return cellularStatus;
}
    3988:	bd38      	pop	{r3, r4, r5, pc}
    398a:	bf00      	nop
    398c:	0000cc48 	.word	0x0000cc48
    3990:	0000b258 	.word	0x0000b258
    3994:	0000a188 	.word	0x0000a188
    3998:	00005bfd 	.word	0x00005bfd
    399c:	0000ce04 	.word	0x0000ce04
    39a0:	0000dcf4 	.word	0x0000dcf4

000039a4 <libOpen>:
{
    39a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    configASSERT( pContext != NULL );
    39a6:	2800      	cmp	r0, #0
    39a8:	d030      	beq.n	3a0c <libOpen+0x68>
    39aa:	4604      	mov	r4, r0
    PlatformMutex_Lock( &pContext->libStatusMutex );
    39ac:	f100 0708 	add.w	r7, r0, #8
    39b0:	4638      	mov	r0, r7
    39b2:	4b24      	ldr	r3, [pc, #144]	; (3a44 <libOpen+0xa0>)
    39b4:	4798      	blx	r3
    ( CellularPktStatus_t ) _Cellular_AtParseInit( pContext );
    39b6:	4620      	mov	r0, r4
    39b8:	4b23      	ldr	r3, [pc, #140]	; (3a48 <libOpen+0xa4>)
    39ba:	4798      	blx	r3
    _Cellular_LockAtDataMutex( pContext );
    39bc:	4620      	mov	r0, r4
    39be:	4b23      	ldr	r3, [pc, #140]	; (3a4c <libOpen+0xa8>)
    39c0:	4798      	blx	r3
    _Cellular_InitAtData( pContext, 0 );
    39c2:	2100      	movs	r1, #0
    39c4:	4620      	mov	r0, r4
    39c6:	4b22      	ldr	r3, [pc, #136]	; (3a50 <libOpen+0xac>)
    39c8:	4798      	blx	r3
    _Cellular_UnlockAtDataMutex( pContext );
    39ca:	4620      	mov	r0, r4
    39cc:	4b21      	ldr	r3, [pc, #132]	; (3a54 <libOpen+0xb0>)
    39ce:	4798      	blx	r3
    _Cellular_SetShutdownCallback( pContext, _shutdownCallback );
    39d0:	4921      	ldr	r1, [pc, #132]	; (3a58 <libOpen+0xb4>)
    39d2:	4620      	mov	r0, r4
    39d4:	4b21      	ldr	r3, [pc, #132]	; (3a5c <libOpen+0xb8>)
    39d6:	4798      	blx	r3
    pktStatus = _Cellular_PktHandlerInit( pContext );
    39d8:	4620      	mov	r0, r4
    39da:	4b21      	ldr	r3, [pc, #132]	; (3a60 <libOpen+0xbc>)
    39dc:	4798      	blx	r3
    if( pktStatus == CELLULAR_PKT_STATUS_OK )
    39de:	4605      	mov	r5, r0
    39e0:	b928      	cbnz	r0, 39ee <libOpen+0x4a>
        pktStatus = _Cellular_PktioInit( pContext, _Cellular_HandlePacket );
    39e2:	4920      	ldr	r1, [pc, #128]	; (3a64 <libOpen+0xc0>)
    39e4:	4620      	mov	r0, r4
    39e6:	4b20      	ldr	r3, [pc, #128]	; (3a68 <libOpen+0xc4>)
    39e8:	4798      	blx	r3
        if( pktStatus != CELLULAR_PKT_STATUS_OK )
    39ea:	4605      	mov	r5, r0
    39ec:	b9b8      	cbnz	r0, 3a1e <libOpen+0x7a>
    if( pktStatus != CELLULAR_PKT_STATUS_OK )
    39ee:	b33d      	cbz	r5, 3a40 <libOpen+0x9c>
        cellularStatus = _Cellular_TranslatePktStatus( pktStatus );
    39f0:	4628      	mov	r0, r5
    39f2:	4b1e      	ldr	r3, [pc, #120]	; (3a6c <libOpen+0xc8>)
    39f4:	4798      	blx	r3
    39f6:	4605      	mov	r5, r0
    if( cellularStatus == CELLULAR_SUCCESS )
    39f8:	b91d      	cbnz	r5, 3a02 <libOpen+0x5e>
        pContext->bLibOpened = true;
    39fa:	2301      	movs	r3, #1
    39fc:	7123      	strb	r3, [r4, #4]
        pContext->bLibShutdown = false;
    39fe:	2300      	movs	r3, #0
    3a00:	7163      	strb	r3, [r4, #5]
    PlatformMutex_Unlock( &pContext->libStatusMutex );
    3a02:	4638      	mov	r0, r7
    3a04:	4b1a      	ldr	r3, [pc, #104]	; (3a70 <libOpen+0xcc>)
    3a06:	4798      	blx	r3
}
    3a08:	4628      	mov	r0, r5
    3a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3a0c:	f04f 0380 	mov.w	r3, #128	; 0x80
    3a10:	f383 8811 	msr	BASEPRI, r3
    3a14:	f3bf 8f6f 	isb	sy
    3a18:	f3bf 8f4f 	dsb	sy
    3a1c:	e7fe      	b.n	3a1c <libOpen+0x78>
            LogError( ( "pktio failed to initialize" ) );
    3a1e:	23cd      	movs	r3, #205	; 0xcd
    3a20:	4a14      	ldr	r2, [pc, #80]	; (3a74 <libOpen+0xd0>)
    3a22:	4915      	ldr	r1, [pc, #84]	; (3a78 <libOpen+0xd4>)
    3a24:	4815      	ldr	r0, [pc, #84]	; (3a7c <libOpen+0xd8>)
    3a26:	4e16      	ldr	r6, [pc, #88]	; (3a80 <libOpen+0xdc>)
    3a28:	47b0      	blx	r6
    3a2a:	4816      	ldr	r0, [pc, #88]	; (3a84 <libOpen+0xe0>)
    3a2c:	47b0      	blx	r6
    3a2e:	4816      	ldr	r0, [pc, #88]	; (3a88 <libOpen+0xe4>)
    3a30:	47b0      	blx	r6
            _Cellular_PktioShutdown( pContext );
    3a32:	4620      	mov	r0, r4
    3a34:	4b15      	ldr	r3, [pc, #84]	; (3a8c <libOpen+0xe8>)
    3a36:	4798      	blx	r3
            _Cellular_PktHandlerCleanup( pContext );
    3a38:	4620      	mov	r0, r4
    3a3a:	4b15      	ldr	r3, [pc, #84]	; (3a90 <libOpen+0xec>)
    3a3c:	4798      	blx	r3
    3a3e:	e7d6      	b.n	39ee <libOpen+0x4a>
    CellularError_t cellularStatus = CELLULAR_SUCCESS;
    3a40:	2500      	movs	r5, #0
    3a42:	e7d9      	b.n	39f8 <libOpen+0x54>
    3a44:	000054e9 	.word	0x000054e9
    3a48:	00004495 	.word	0x00004495
    3a4c:	00002aa1 	.word	0x00002aa1
    3a50:	00002d25 	.word	0x00002d25
    3a54:	00002ac5 	.word	0x00002ac5
    3a58:	00003789 	.word	0x00003789
    3a5c:	0000378f 	.word	0x0000378f
    3a60:	0000446d 	.word	0x0000446d
    3a64:	00004391 	.word	0x00004391
    3a68:	00005005 	.word	0x00005005
    3a6c:	0000395d 	.word	0x0000395d
    3a70:	000054f9 	.word	0x000054f9
    3a74:	0000cc68 	.word	0x0000cc68
    3a78:	0000b258 	.word	0x0000b258
    3a7c:	0000a188 	.word	0x0000a188
    3a80:	00005bfd 	.word	0x00005bfd
    3a84:	0000ce2c 	.word	0x0000ce2c
    3a88:	0000dcf4 	.word	0x0000dcf4
    3a8c:	000051f9 	.word	0x000051f9
    3a90:	0000435d 	.word	0x0000435d

00003a94 <_Cellular_TranslateAtCoreStatus>:

CellularPktStatus_t _Cellular_TranslateAtCoreStatus( CellularATError_t status )
{
    CellularPktStatus_t pktStatus;

    switch( status )
    3a94:	b188      	cbz	r0, 3aba <_Cellular_TranslateAtCoreStatus+0x26>
{
    3a96:	b538      	push	{r3, r4, r5, lr}
    3a98:	4604      	mov	r4, r0
    switch( status )
    3a9a:	2801      	cmp	r0, #1
    3a9c:	d00f      	beq.n	3abe <_Cellular_TranslateAtCoreStatus+0x2a>
        case CELLULAR_AT_UNSUPPORTED:
        case CELLULAR_AT_MODEM_ERROR:
        case CELLULAR_AT_ERROR:
        case CELLULAR_AT_UNKNOWN:
        default:
            LogError( ( "_Cellular_TranslateAtCoreStatus: Status %d", status ) );
    3a9e:	f240 2305 	movw	r3, #517	; 0x205
    3aa2:	4a08      	ldr	r2, [pc, #32]	; (3ac4 <_Cellular_TranslateAtCoreStatus+0x30>)
    3aa4:	4908      	ldr	r1, [pc, #32]	; (3ac8 <_Cellular_TranslateAtCoreStatus+0x34>)
    3aa6:	4809      	ldr	r0, [pc, #36]	; (3acc <_Cellular_TranslateAtCoreStatus+0x38>)
    3aa8:	4d09      	ldr	r5, [pc, #36]	; (3ad0 <_Cellular_TranslateAtCoreStatus+0x3c>)
    3aaa:	47a8      	blx	r5
    3aac:	4621      	mov	r1, r4
    3aae:	4809      	ldr	r0, [pc, #36]	; (3ad4 <_Cellular_TranslateAtCoreStatus+0x40>)
    3ab0:	47a8      	blx	r5
    3ab2:	4809      	ldr	r0, [pc, #36]	; (3ad8 <_Cellular_TranslateAtCoreStatus+0x44>)
    3ab4:	47a8      	blx	r5
            pktStatus = CELLULAR_PKT_STATUS_FAILURE;
    3ab6:	2002      	movs	r0, #2
            break;
    3ab8:	bd38      	pop	{r3, r4, r5, pc}
            pktStatus = CELLULAR_PKT_STATUS_OK;
    3aba:	2000      	movs	r0, #0
    3abc:	4770      	bx	lr
            pktStatus = CELLULAR_PKT_STATUS_BAD_PARAM;
    3abe:	2006      	movs	r0, #6
    }

    return pktStatus;
}
    3ac0:	bd38      	pop	{r3, r4, r5, pc}
    3ac2:	bf00      	nop
    3ac4:	0000cc70 	.word	0x0000cc70
    3ac8:	0000b258 	.word	0x0000b258
    3acc:	0000a188 	.word	0x0000a188
    3ad0:	00005bfd 	.word	0x00005bfd
    3ad4:	0000ce48 	.word	0x0000ce48
    3ad8:	0000dcf4 	.word	0x0000dcf4

00003adc <_Cellular_IsValidPdn>:
}

/*-----------------------------------------------------------*/

CellularError_t _Cellular_IsValidPdn( uint8_t contextId )
{
    3adc:	b538      	push	{r3, r4, r5, lr}
    CellularError_t cellularStatus = CELLULAR_SUCCESS;

    if( ( contextId > CELLULAR_PDN_CONTEXT_ID_MAX ) || ( contextId < CELLULAR_PDN_CONTEXT_ID_MIN ) )
    3ade:	1e43      	subs	r3, r0, #1
    3ae0:	b2db      	uxtb	r3, r3
    3ae2:	2b0f      	cmp	r3, #15
    3ae4:	d801      	bhi.n	3aea <_Cellular_IsValidPdn+0xe>
    CellularError_t cellularStatus = CELLULAR_SUCCESS;
    3ae6:	2000      	movs	r0, #0
                    contextId ) );
        cellularStatus = CELLULAR_BAD_PARAMETER;
    }

    return cellularStatus;
}
    3ae8:	bd38      	pop	{r3, r4, r5, pc}
    3aea:	4604      	mov	r4, r0
        LogError( ( "_Cellular_IsValidPdn: ContextId out of range %d",
    3aec:	f240 239d 	movw	r3, #669	; 0x29d
    3af0:	4a05      	ldr	r2, [pc, #20]	; (3b08 <_Cellular_IsValidPdn+0x2c>)
    3af2:	4906      	ldr	r1, [pc, #24]	; (3b0c <_Cellular_IsValidPdn+0x30>)
    3af4:	4806      	ldr	r0, [pc, #24]	; (3b10 <_Cellular_IsValidPdn+0x34>)
    3af6:	4d07      	ldr	r5, [pc, #28]	; (3b14 <_Cellular_IsValidPdn+0x38>)
    3af8:	47a8      	blx	r5
    3afa:	4621      	mov	r1, r4
    3afc:	4806      	ldr	r0, [pc, #24]	; (3b18 <_Cellular_IsValidPdn+0x3c>)
    3afe:	47a8      	blx	r5
    3b00:	4806      	ldr	r0, [pc, #24]	; (3b1c <_Cellular_IsValidPdn+0x40>)
    3b02:	47a8      	blx	r5
        cellularStatus = CELLULAR_BAD_PARAMETER;
    3b04:	2005      	movs	r0, #5
    3b06:	bd38      	pop	{r3, r4, r5, pc}
    3b08:	0000cce0 	.word	0x0000cce0
    3b0c:	0000b258 	.word	0x0000b258
    3b10:	0000a188 	.word	0x0000a188
    3b14:	00005bfd 	.word	0x00005bfd
    3b18:	0000cf44 	.word	0x0000cf44
    3b1c:	0000dcf4 	.word	0x0000dcf4

00003b20 <_Cellular_ConvertCsqSignalRssi>:

/*-----------------------------------------------------------*/

CellularError_t _Cellular_ConvertCsqSignalRssi( int16_t csqRssi,
                                                int16_t * pRssiValue )
{
    3b20:	4603      	mov	r3, r0
    CellularError_t cellularStatus = CELLULAR_SUCCESS;
    int16_t rssiValue = 0;

    if( pRssiValue == NULL )
    3b22:	460a      	mov	r2, r1
    3b24:	b149      	cbz	r1, 3b3a <_Cellular_ConvertCsqSignalRssi+0x1a>
    CellularError_t cellularStatus = CELLULAR_SUCCESS;
    3b26:	2000      	movs	r0, #0
    {
        cellularStatus = CELLULAR_BAD_PARAMETER;
    }

    if( cellularStatus == CELLULAR_SUCCESS )
    3b28:	b968      	cbnz	r0, 3b46 <_Cellular_ConvertCsqSignalRssi+0x26>
    {
        if( csqRssi == ( SIGNAL_QUALITY_CSQ_UNKNOWN ) )
    3b2a:	2b63      	cmp	r3, #99	; 0x63
    3b2c:	d00f      	beq.n	3b4e <_Cellular_ConvertCsqSignalRssi+0x2e>
        {
            rssiValue = CELLULAR_INVALID_SIGNAL_VALUE;
        }
        else if( ( csqRssi < SIGNAL_QUALITY_CSQ_RSSI_MIN ) || ( csqRssi > SIGNAL_QUALITY_CSQ_RSSI_MAX ) )
    3b2e:	b29b      	uxth	r3, r3
    3b30:	2b1f      	cmp	r3, #31
    3b32:	d904      	bls.n	3b3e <_Cellular_ConvertCsqSignalRssi+0x1e>
    int16_t rssiValue = 0;
    3b34:	2300      	movs	r3, #0
        {
            cellularStatus = CELLULAR_BAD_PARAMETER;
    3b36:	2005      	movs	r0, #5
    3b38:	e006      	b.n	3b48 <_Cellular_ConvertCsqSignalRssi+0x28>
        cellularStatus = CELLULAR_BAD_PARAMETER;
    3b3a:	2005      	movs	r0, #5
    3b3c:	e7f4      	b.n	3b28 <_Cellular_ConvertCsqSignalRssi+0x8>
        }
        else
        {
            rssiValue = SIGNAL_QUALITY_CSQ_RSSI_BASE + ( csqRssi * SIGNAL_QUALITY_CSQ_RSSI_STEP );
    3b3e:	005b      	lsls	r3, r3, #1
    3b40:	3b71      	subs	r3, #113	; 0x71
    3b42:	b21b      	sxth	r3, r3
    3b44:	e000      	b.n	3b48 <_Cellular_ConvertCsqSignalRssi+0x28>
    int16_t rssiValue = 0;
    3b46:	2300      	movs	r3, #0
        }
    }

    if( cellularStatus == CELLULAR_SUCCESS )
    3b48:	b900      	cbnz	r0, 3b4c <_Cellular_ConvertCsqSignalRssi+0x2c>
    {
        *pRssiValue = rssiValue;
    3b4a:	8013      	strh	r3, [r2, #0]
    }

    return cellularStatus;
}
    3b4c:	4770      	bx	lr
            rssiValue = CELLULAR_INVALID_SIGNAL_VALUE;
    3b4e:	4b01      	ldr	r3, [pc, #4]	; (3b54 <_Cellular_ConvertCsqSignalRssi+0x34>)
    3b50:	e7fa      	b.n	3b48 <_Cellular_ConvertCsqSignalRssi+0x28>
    3b52:	bf00      	nop
    3b54:	ffff8000 	.word	0xffff8000

00003b58 <_Cellular_ConvertCsqSignalBer>:
        453, /* Assumed value 4.53%. */
        905, /* Assumed value 9.05%. */
        1810 /* Assumed value 18.10%. */
    };

    if( pBerValue == NULL )
    3b58:	460a      	mov	r2, r1
    3b5a:	b149      	cbz	r1, 3b70 <_Cellular_ConvertCsqSignalBer+0x18>
    CellularError_t cellularStatus = CELLULAR_SUCCESS;
    3b5c:	2300      	movs	r3, #0
    {
        cellularStatus = CELLULAR_BAD_PARAMETER;
    }

    if( cellularStatus == CELLULAR_SUCCESS )
    3b5e:	b97b      	cbnz	r3, 3b80 <_Cellular_ConvertCsqSignalBer+0x28>
    {
        if( csqBer == ( ( int16_t ) SIGNAL_QUALITY_CSQ_UNKNOWN ) )
    3b60:	2863      	cmp	r0, #99	; 0x63
    3b62:	d012      	beq.n	3b8a <_Cellular_ConvertCsqSignalBer+0x32>
        {
            berValue = CELLULAR_INVALID_SIGNAL_VALUE;
        }
        else if( ( csqBer < SIGNAL_QUALITY_CSQ_BER_MIN ) || ( csqBer > SIGNAL_QUALITY_CSQ_BER_MAX ) )
    3b64:	b281      	uxth	r1, r0
    3b66:	2907      	cmp	r1, #7
    3b68:	d904      	bls.n	3b74 <_Cellular_ConvertCsqSignalBer+0x1c>
    int16_t berValue = 0;
    3b6a:	2100      	movs	r1, #0
        {
            cellularStatus = CELLULAR_BAD_PARAMETER;
    3b6c:	2305      	movs	r3, #5
    3b6e:	e008      	b.n	3b82 <_Cellular_ConvertCsqSignalBer+0x2a>
        cellularStatus = CELLULAR_BAD_PARAMETER;
    3b70:	2305      	movs	r3, #5
    3b72:	e7f4      	b.n	3b5e <_Cellular_ConvertCsqSignalBer+0x6>
        }
        else
        {
            berValue = ( int16_t ) rxqualValueToBerTable[ csqBer ];
    3b74:	4906      	ldr	r1, [pc, #24]	; (3b90 <_Cellular_ConvertCsqSignalBer+0x38>)
    3b76:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3b7a:	f9b0 1108 	ldrsh.w	r1, [r0, #264]	; 0x108
    3b7e:	e000      	b.n	3b82 <_Cellular_ConvertCsqSignalBer+0x2a>
    int16_t berValue = 0;
    3b80:	2100      	movs	r1, #0
        }
    }

    if( cellularStatus == CELLULAR_SUCCESS )
    3b82:	b903      	cbnz	r3, 3b86 <_Cellular_ConvertCsqSignalBer+0x2e>
    {
        *pBerValue = berValue;
    3b84:	8011      	strh	r1, [r2, #0]
    }

    return cellularStatus;
}
    3b86:	4618      	mov	r0, r3
    3b88:	4770      	bx	lr
            berValue = CELLULAR_INVALID_SIGNAL_VALUE;
    3b8a:	4902      	ldr	r1, [pc, #8]	; (3b94 <_Cellular_ConvertCsqSignalBer+0x3c>)
    3b8c:	e7f9      	b.n	3b82 <_Cellular_ConvertCsqSignalBer+0x2a>
    3b8e:	bf00      	nop
    3b90:	0000cbf0 	.word	0x0000cbf0
    3b94:	ffff8000 	.word	0xffff8000

00003b98 <_Cellular_GetModuleContext>:
CellularError_t _Cellular_GetModuleContext( const CellularContext_t * pContext,
                                            void ** ppModuleContext )
{
    CellularError_t cellularStatus = CELLULAR_SUCCESS;

    if( pContext == NULL )
    3b98:	b120      	cbz	r0, 3ba4 <_Cellular_GetModuleContext+0xc>
    {
        cellularStatus = CELLULAR_INVALID_HANDLE;
    }
    else
    {
        *ppModuleContext = pContext->pModueContext;
    3b9a:	f8d0 3954 	ldr.w	r3, [r0, #2388]	; 0x954
    3b9e:	600b      	str	r3, [r1, #0]
    CellularError_t cellularStatus = CELLULAR_SUCCESS;
    3ba0:	2000      	movs	r0, #0
    3ba2:	4770      	bx	lr
        cellularStatus = CELLULAR_INVALID_HANDLE;
    3ba4:	2001      	movs	r0, #1
    }

    return cellularStatus;
}
    3ba6:	4770      	bx	lr

00003ba8 <_Cellular_NetworkRegistrationCallback>:

void _Cellular_NetworkRegistrationCallback( const CellularContext_t * pContext,
                                            CellularUrcEvent_t urcEvent,
                                            const CellularServiceStatus_t * pServiceStatus )
{
    if( ( pContext != NULL ) && ( pContext->cbEvents.networkRegistrationCallback != NULL ) )
    3ba8:	b158      	cbz	r0, 3bc2 <_Cellular_NetworkRegistrationCallback+0x1a>
{
    3baa:	b538      	push	{r3, r4, r5, lr}
    3bac:	4603      	mov	r3, r0
    if( ( pContext != NULL ) && ( pContext->cbEvents.networkRegistrationCallback != NULL ) )
    3bae:	f8d0 50b8 	ldr.w	r5, [r0, #184]	; 0xb8
    3bb2:	b12d      	cbz	r5, 3bc0 <_Cellular_NetworkRegistrationCallback+0x18>
    3bb4:	4614      	mov	r4, r2
    3bb6:	4608      	mov	r0, r1
    {
        pContext->cbEvents.networkRegistrationCallback( urcEvent, pServiceStatus,
    3bb8:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
    3bbc:	4621      	mov	r1, r4
    3bbe:	47a8      	blx	r5
    3bc0:	bd38      	pop	{r3, r4, r5, pc}
    3bc2:	4770      	bx	lr

00003bc4 <_Cellular_PdnEventCallback>:

void _Cellular_PdnEventCallback( const CellularContext_t * pContext,
                                 CellularUrcEvent_t urcEvent,
                                 uint8_t contextId )
{
    if( ( pContext != NULL ) && ( pContext->cbEvents.pdnEventCallback != NULL ) )
    3bc4:	b158      	cbz	r0, 3bde <_Cellular_PdnEventCallback+0x1a>
{
    3bc6:	b538      	push	{r3, r4, r5, lr}
    3bc8:	4603      	mov	r3, r0
    if( ( pContext != NULL ) && ( pContext->cbEvents.pdnEventCallback != NULL ) )
    3bca:	f8d0 50c0 	ldr.w	r5, [r0, #192]	; 0xc0
    3bce:	b12d      	cbz	r5, 3bdc <_Cellular_PdnEventCallback+0x18>
    3bd0:	4614      	mov	r4, r2
    3bd2:	4608      	mov	r0, r1
    {
        pContext->cbEvents.pdnEventCallback( urcEvent, contextId, pContext->cbEvents.pPdnEventCallbackContext );
    3bd4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
    3bd8:	4621      	mov	r1, r4
    3bda:	47a8      	blx	r5
    3bdc:	bd38      	pop	{r3, r4, r5, pc}
    3bde:	4770      	bx	lr

00003be0 <_Cellular_SignalStrengthChangedCallback>:

void _Cellular_SignalStrengthChangedCallback( const CellularContext_t * pContext,
                                              CellularUrcEvent_t urcEvent,
                                              const CellularSignalInfo_t * pSignalInfo )
{
    if( ( pContext != NULL ) && ( pContext->cbEvents.signalStrengthChangedCallback != NULL ) )
    3be0:	b158      	cbz	r0, 3bfa <_Cellular_SignalStrengthChangedCallback+0x1a>
{
    3be2:	b538      	push	{r3, r4, r5, lr}
    3be4:	4603      	mov	r3, r0
    if( ( pContext != NULL ) && ( pContext->cbEvents.signalStrengthChangedCallback != NULL ) )
    3be6:	f8d0 50c8 	ldr.w	r5, [r0, #200]	; 0xc8
    3bea:	b12d      	cbz	r5, 3bf8 <_Cellular_SignalStrengthChangedCallback+0x18>
    3bec:	4614      	mov	r4, r2
    3bee:	4608      	mov	r0, r1
    {
        pContext->cbEvents.signalStrengthChangedCallback( urcEvent, pSignalInfo,
    3bf0:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
    3bf4:	4621      	mov	r1, r4
    3bf6:	47a8      	blx	r5
    3bf8:	bd38      	pop	{r3, r4, r5, pc}
    3bfa:	4770      	bx	lr

00003bfc <_Cellular_GenericCallback>:
/*-----------------------------------------------------------*/

void _Cellular_GenericCallback( const CellularContext_t * pContext,
                                const char * pRawData )
{
    if( ( pContext != NULL ) && ( pContext->cbEvents.genericCallback != NULL ) )
    3bfc:	b148      	cbz	r0, 3c12 <_Cellular_GenericCallback+0x16>
{
    3bfe:	b508      	push	{r3, lr}
    3c00:	4603      	mov	r3, r0
    if( ( pContext != NULL ) && ( pContext->cbEvents.genericCallback != NULL ) )
    3c02:	f8d0 20d0 	ldr.w	r2, [r0, #208]	; 0xd0
    3c06:	b11a      	cbz	r2, 3c10 <_Cellular_GenericCallback+0x14>
    3c08:	4608      	mov	r0, r1
    {
        pContext->cbEvents.genericCallback( pRawData, pContext->cbEvents.pGenericCallbackContext );
    3c0a:	f8d3 10d4 	ldr.w	r1, [r3, #212]	; 0xd4
    3c0e:	4790      	blx	r2
    3c10:	bd08      	pop	{r3, pc}
    3c12:	4770      	bx	lr

00003c14 <_Cellular_ModemEventCallback>:
/*-----------------------------------------------------------*/

void _Cellular_ModemEventCallback( const CellularContext_t * pContext,
                                   CellularModemEvent_t modemEvent )
{
    if( ( pContext != NULL ) && ( pContext->cbEvents.modemEventCallback != NULL ) )
    3c14:	b148      	cbz	r0, 3c2a <_Cellular_ModemEventCallback+0x16>
{
    3c16:	b508      	push	{r3, lr}
    3c18:	4603      	mov	r3, r0
    if( ( pContext != NULL ) && ( pContext->cbEvents.modemEventCallback != NULL ) )
    3c1a:	f8d0 20d8 	ldr.w	r2, [r0, #216]	; 0xd8
    3c1e:	b11a      	cbz	r2, 3c28 <_Cellular_ModemEventCallback+0x14>
    3c20:	4608      	mov	r0, r1
    {
        pContext->cbEvents.modemEventCallback( modemEvent, pContext->cbEvents.pModemEventCallbackContext );
    3c22:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
    3c26:	4790      	blx	r2
    3c28:	bd08      	pop	{r3, pc}
    3c2a:	4770      	bx	lr

00003c2c <_Cellular_GetSocketData>:

/*-----------------------------------------------------------*/

CellularSocketContext_t * _Cellular_GetSocketData( const CellularContext_t * pContext,
                                                   uint32_t sockIndex )
{
    3c2c:	b538      	push	{r3, r4, r5, lr}
    CellularSocketContext_t * pSocketData = NULL;

    if( pContext == NULL )
    3c2e:	b148      	cbz	r0, 3c44 <_Cellular_GetSocketData+0x18>
    3c30:	460c      	mov	r4, r1
    {
        LogError( ( "Invalid context" ) );
    }
    else
    {
        if( ( sockIndex >= CELLULAR_NUM_SOCKET_MAX ) || ( pContext->pSocketData[ sockIndex ] == NULL ) )
    3c32:	290b      	cmp	r1, #11
    3c34:	d813      	bhi.n	3c5e <_Cellular_GetSocketData+0x32>
    3c36:	f501 7212 	add.w	r2, r1, #584	; 0x248
    3c3a:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    3c3e:	6858      	ldr	r0, [r3, #4]
    3c40:	b168      	cbz	r0, 3c5e <_Cellular_GetSocketData+0x32>
            pSocketData = pContext->pSocketData[ sockIndex ];
        }
    }

    return pSocketData;
}
    3c42:	bd38      	pop	{r3, r4, r5, pc}
        LogError( ( "Invalid context" ) );
    3c44:	f240 338e 	movw	r3, #910	; 0x38e
    3c48:	4a0c      	ldr	r2, [pc, #48]	; (3c7c <_Cellular_GetSocketData+0x50>)
    3c4a:	490d      	ldr	r1, [pc, #52]	; (3c80 <_Cellular_GetSocketData+0x54>)
    3c4c:	480d      	ldr	r0, [pc, #52]	; (3c84 <_Cellular_GetSocketData+0x58>)
    3c4e:	4c0e      	ldr	r4, [pc, #56]	; (3c88 <_Cellular_GetSocketData+0x5c>)
    3c50:	47a0      	blx	r4
    3c52:	480e      	ldr	r0, [pc, #56]	; (3c8c <_Cellular_GetSocketData+0x60>)
    3c54:	47a0      	blx	r4
    3c56:	480e      	ldr	r0, [pc, #56]	; (3c90 <_Cellular_GetSocketData+0x64>)
    3c58:	47a0      	blx	r4
    CellularSocketContext_t * pSocketData = NULL;
    3c5a:	2000      	movs	r0, #0
    3c5c:	bd38      	pop	{r3, r4, r5, pc}
            LogError( ( "_Cellular_GetSocketData, invalid socket handle %u", (uint16_t)sockIndex ) );
    3c5e:	f44f 7365 	mov.w	r3, #916	; 0x394
    3c62:	4a06      	ldr	r2, [pc, #24]	; (3c7c <_Cellular_GetSocketData+0x50>)
    3c64:	4906      	ldr	r1, [pc, #24]	; (3c80 <_Cellular_GetSocketData+0x54>)
    3c66:	4807      	ldr	r0, [pc, #28]	; (3c84 <_Cellular_GetSocketData+0x58>)
    3c68:	4d07      	ldr	r5, [pc, #28]	; (3c88 <_Cellular_GetSocketData+0x5c>)
    3c6a:	47a8      	blx	r5
    3c6c:	b2a1      	uxth	r1, r4
    3c6e:	4809      	ldr	r0, [pc, #36]	; (3c94 <_Cellular_GetSocketData+0x68>)
    3c70:	47a8      	blx	r5
    3c72:	4807      	ldr	r0, [pc, #28]	; (3c90 <_Cellular_GetSocketData+0x64>)
    3c74:	47a8      	blx	r5
    CellularSocketContext_t * pSocketData = NULL;
    3c76:	2000      	movs	r0, #0
    return pSocketData;
    3c78:	e7e3      	b.n	3c42 <_Cellular_GetSocketData+0x16>
    3c7a:	bf00      	nop
    3c7c:	0000cd08 	.word	0x0000cd08
    3c80:	0000b258 	.word	0x0000b258
    3c84:	0000a188 	.word	0x0000a188
    3c88:	00005bfd 	.word	0x00005bfd
    3c8c:	0000a404 	.word	0x0000a404
    3c90:	0000dcf4 	.word	0x0000dcf4
    3c94:	0000cf74 	.word	0x0000cf74

00003c98 <_Cellular_LibInit>:
/*-----------------------------------------------------------*/

CellularError_t _Cellular_LibInit( CellularHandle_t * pCellularHandle,
                                   const CellularCommInterface_t * pCommInterface,
                                   const CellularTokenTable_t * pTokenTable )
{
    3c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3c9c:	4607      	mov	r7, r0
    3c9e:	4688      	mov	r8, r1
    3ca0:	4616      	mov	r6, r2
    bool bLibStatusMutexCreateSuccess = false;
    bool bAtDataMutexCreateSuccess = false;
    bool bPktRequestMutexCreateSuccess = false;
    bool bPktResponseMutexCreateSuccess = false;

    cellularStatus = checkInitParameter( pCellularHandle, pCommInterface, pTokenTable );
    3ca2:	4b67      	ldr	r3, [pc, #412]	; (3e40 <_Cellular_LibInit+0x1a8>)
    3ca4:	4798      	blx	r3

    if( cellularStatus != CELLULAR_SUCCESS )
    3ca6:	4604      	mov	r4, r0
    3ca8:	2800      	cmp	r0, #0
    3caa:	d037      	beq.n	3d1c <_Cellular_LibInit+0x84>
    {
        LogError( ( "_Cellular_CommonInit checkInitParameter failed" ) );
    3cac:	f44f 736c 	mov.w	r3, #944	; 0x3b0
    3cb0:	4a64      	ldr	r2, [pc, #400]	; (3e44 <_Cellular_LibInit+0x1ac>)
    3cb2:	4965      	ldr	r1, [pc, #404]	; (3e48 <_Cellular_LibInit+0x1b0>)
    3cb4:	4865      	ldr	r0, [pc, #404]	; (3e4c <_Cellular_LibInit+0x1b4>)
    3cb6:	4d66      	ldr	r5, [pc, #408]	; (3e50 <_Cellular_LibInit+0x1b8>)
    3cb8:	47a8      	blx	r5
    3cba:	4866      	ldr	r0, [pc, #408]	; (3e54 <_Cellular_LibInit+0x1bc>)
    3cbc:	47a8      	blx	r5
    3cbe:	4866      	ldr	r0, [pc, #408]	; (3e58 <_Cellular_LibInit+0x1c0>)
    3cc0:	47a8      	blx	r5
    CellularContext_t * pContext = NULL;
    3cc2:	2500      	movs	r5, #0
            ( void ) memcpy( &pContext->tokenTable, pTokenTable, sizeof( CellularTokenTable_t ) );
        }
    }

    /* Defines the Mutexes and Semophores. */
    if( cellularStatus == CELLULAR_SUCCESS )
    3cc4:	2c00      	cmp	r4, #0
    3cc6:	d054      	beq.n	3d72 <_Cellular_LibInit+0xda>
    bool bLibStatusMutexCreateSuccess = false;
    3cc8:	2600      	movs	r6, #0
        {
            bLibStatusMutexCreateSuccess = true;
        }
    }

    if( cellularStatus == CELLULAR_SUCCESS )
    3cca:	2c00      	cmp	r4, #0
    3ccc:	d064      	beq.n	3d98 <_Cellular_LibInit+0x100>
    bool bAtDataMutexCreateSuccess = false;
    3cce:	f04f 0800 	mov.w	r8, #0
        {
            bAtDataMutexCreateSuccess = true;
        }
    }

    if( cellularStatus == CELLULAR_SUCCESS )
    3cd2:	2c00      	cmp	r4, #0
    3cd4:	d073      	beq.n	3dbe <_Cellular_LibInit+0x126>
    bool bPktRequestMutexCreateSuccess = false;
    3cd6:	f04f 0900 	mov.w	r9, #0
        {
            bPktRequestMutexCreateSuccess = true;
        }
    }

    if( cellularStatus == CELLULAR_SUCCESS )
    3cda:	2c00      	cmp	r4, #0
    3cdc:	f000 8082 	beq.w	3de4 <_Cellular_LibInit+0x14c>
    bool bPktResponseMutexCreateSuccess = false;
    3ce0:	f04f 0a00 	mov.w	sl, #0
            bPktResponseMutexCreateSuccess = true;
        }
    }

    /* Configure the library. */
    if( cellularStatus == CELLULAR_SUCCESS )
    3ce4:	2c00      	cmp	r4, #0
    3ce6:	f000 8091 	beq.w	3e0c <_Cellular_LibInit+0x174>
    {
        cellularStatus = libOpen( pContext );
    }

    if( cellularStatus != CELLULAR_SUCCESS )
    3cea:	2c00      	cmp	r4, #0
    3cec:	f000 80a3 	beq.w	3e36 <_Cellular_LibInit+0x19e>
    {
        if( bPktResponseMutexCreateSuccess == true )
    3cf0:	f1ba 0f00 	cmp.w	sl, #0
    3cf4:	f040 808f 	bne.w	3e16 <_Cellular_LibInit+0x17e>
        {
            _Cellular_DestroyPktResponseMutex( pContext );
        }

        if( bPktRequestMutexCreateSuccess == true )
    3cf8:	f1b9 0f00 	cmp.w	r9, #0
    3cfc:	f040 808f 	bne.w	3e1e <_Cellular_LibInit+0x186>
        {
            _Cellular_DestroyPktRequestMutex( pContext );
        }

        if( bAtDataMutexCreateSuccess == true )
    3d00:	f1b8 0f00 	cmp.w	r8, #0
    3d04:	f040 808f 	bne.w	3e26 <_Cellular_LibInit+0x18e>
        {
            _Cellular_DestroyAtDataMutex( pContext );
        }

        if( bLibStatusMutexCreateSuccess == true )
    3d08:	2e00      	cmp	r6, #0
    3d0a:	f040 8090 	bne.w	3e2e <_Cellular_LibInit+0x196>
        {
            _Cellular_DestroyLibStatusMutex( pContext );
        }

        if( pContext != NULL )
    3d0e:	2d00      	cmp	r5, #0
    3d10:	f000 8092 	beq.w	3e38 <_Cellular_LibInit+0x1a0>
        {
            _Cellular_FreeContext( pContext );
    3d14:	4628      	mov	r0, r5
    3d16:	4b51      	ldr	r3, [pc, #324]	; (3e5c <_Cellular_LibInit+0x1c4>)
    3d18:	4798      	blx	r3
    3d1a:	e08d      	b.n	3e38 <_Cellular_LibInit+0x1a0>
        pContext = _Cellular_AllocContext();
    3d1c:	4b50      	ldr	r3, [pc, #320]	; (3e60 <_Cellular_LibInit+0x1c8>)
    3d1e:	4798      	blx	r3
        if( pContext == NULL )
    3d20:	4605      	mov	r5, r0
    3d22:	b1c8      	cbz	r0, 3d58 <_Cellular_LibInit+0xc0>
            pContext->pCommIntf = pCommInterface;
    3d24:	4603      	mov	r3, r0
    3d26:	f843 8bf4 	str.w	r8, [r3], #244
            ( void ) memcpy( &pContext->tokenTable, pTokenTable, sizeof( CellularTokenTable_t ) );
    3d2a:	4631      	mov	r1, r6
    3d2c:	3620      	adds	r6, #32
    3d2e:	f8d1 c000 	ldr.w	ip, [r1]
    3d32:	f8d1 e004 	ldr.w	lr, [r1, #4]
    3d36:	6888      	ldr	r0, [r1, #8]
    3d38:	68ca      	ldr	r2, [r1, #12]
    3d3a:	f8c3 c000 	str.w	ip, [r3]
    3d3e:	f8c3 e004 	str.w	lr, [r3, #4]
    3d42:	6098      	str	r0, [r3, #8]
    3d44:	60da      	str	r2, [r3, #12]
    3d46:	3110      	adds	r1, #16
    3d48:	3310      	adds	r3, #16
    3d4a:	42b1      	cmp	r1, r6
    3d4c:	d1ef      	bne.n	3d2e <_Cellular_LibInit+0x96>
    3d4e:	6808      	ldr	r0, [r1, #0]
    3d50:	684a      	ldr	r2, [r1, #4]
    3d52:	6018      	str	r0, [r3, #0]
    3d54:	605a      	str	r2, [r3, #4]
    3d56:	e7b5      	b.n	3cc4 <_Cellular_LibInit+0x2c>
            LogError( ( "CellularContext_t allocation failed" ) );
    3d58:	f44f 736e 	mov.w	r3, #952	; 0x3b8
    3d5c:	4a39      	ldr	r2, [pc, #228]	; (3e44 <_Cellular_LibInit+0x1ac>)
    3d5e:	493a      	ldr	r1, [pc, #232]	; (3e48 <_Cellular_LibInit+0x1b0>)
    3d60:	483a      	ldr	r0, [pc, #232]	; (3e4c <_Cellular_LibInit+0x1b4>)
    3d62:	4c3b      	ldr	r4, [pc, #236]	; (3e50 <_Cellular_LibInit+0x1b8>)
    3d64:	47a0      	blx	r4
    3d66:	483f      	ldr	r0, [pc, #252]	; (3e64 <_Cellular_LibInit+0x1cc>)
    3d68:	47a0      	blx	r4
    3d6a:	483b      	ldr	r0, [pc, #236]	; (3e58 <_Cellular_LibInit+0x1c0>)
    3d6c:	47a0      	blx	r4
            cellularStatus = CELLULAR_NO_MEMORY;
    3d6e:	2406      	movs	r4, #6
    3d70:	e7a8      	b.n	3cc4 <_Cellular_LibInit+0x2c>
        if( _Cellular_CreateLibStatusMutex( pContext ) != true )
    3d72:	4628      	mov	r0, r5
    3d74:	4b3c      	ldr	r3, [pc, #240]	; (3e68 <_Cellular_LibInit+0x1d0>)
    3d76:	4798      	blx	r3
    3d78:	4606      	mov	r6, r0
    3d7a:	2800      	cmp	r0, #0
    3d7c:	d1a5      	bne.n	3cca <_Cellular_LibInit+0x32>
            LogError( ( "Could not create CellularLib status mutex" ) );
    3d7e:	f240 33ca 	movw	r3, #970	; 0x3ca
    3d82:	4a30      	ldr	r2, [pc, #192]	; (3e44 <_Cellular_LibInit+0x1ac>)
    3d84:	4930      	ldr	r1, [pc, #192]	; (3e48 <_Cellular_LibInit+0x1b0>)
    3d86:	4831      	ldr	r0, [pc, #196]	; (3e4c <_Cellular_LibInit+0x1b4>)
    3d88:	4c31      	ldr	r4, [pc, #196]	; (3e50 <_Cellular_LibInit+0x1b8>)
    3d8a:	47a0      	blx	r4
    3d8c:	4837      	ldr	r0, [pc, #220]	; (3e6c <_Cellular_LibInit+0x1d4>)
    3d8e:	47a0      	blx	r4
    3d90:	4831      	ldr	r0, [pc, #196]	; (3e58 <_Cellular_LibInit+0x1c0>)
    3d92:	47a0      	blx	r4
            cellularStatus = CELLULAR_RESOURCE_CREATION_FAIL;
    3d94:	240b      	movs	r4, #11
    3d96:	e798      	b.n	3cca <_Cellular_LibInit+0x32>
        if( _Cellular_CreateAtDataMutex( pContext ) != true )
    3d98:	4628      	mov	r0, r5
    3d9a:	4b35      	ldr	r3, [pc, #212]	; (3e70 <_Cellular_LibInit+0x1d8>)
    3d9c:	4798      	blx	r3
    3d9e:	4680      	mov	r8, r0
    3da0:	2800      	cmp	r0, #0
    3da2:	d196      	bne.n	3cd2 <_Cellular_LibInit+0x3a>
            LogError( ( "Could not create CELLULAR AT Data mutex " ) );
    3da4:	f240 33d7 	movw	r3, #983	; 0x3d7
    3da8:	4a26      	ldr	r2, [pc, #152]	; (3e44 <_Cellular_LibInit+0x1ac>)
    3daa:	4927      	ldr	r1, [pc, #156]	; (3e48 <_Cellular_LibInit+0x1b0>)
    3dac:	4827      	ldr	r0, [pc, #156]	; (3e4c <_Cellular_LibInit+0x1b4>)
    3dae:	4c28      	ldr	r4, [pc, #160]	; (3e50 <_Cellular_LibInit+0x1b8>)
    3db0:	47a0      	blx	r4
    3db2:	4830      	ldr	r0, [pc, #192]	; (3e74 <_Cellular_LibInit+0x1dc>)
    3db4:	47a0      	blx	r4
    3db6:	4828      	ldr	r0, [pc, #160]	; (3e58 <_Cellular_LibInit+0x1c0>)
    3db8:	47a0      	blx	r4
            cellularStatus = CELLULAR_RESOURCE_CREATION_FAIL;
    3dba:	240b      	movs	r4, #11
    3dbc:	e789      	b.n	3cd2 <_Cellular_LibInit+0x3a>
        if( _Cellular_CreatePktRequestMutex( pContext ) != true )
    3dbe:	4628      	mov	r0, r5
    3dc0:	4b2d      	ldr	r3, [pc, #180]	; (3e78 <_Cellular_LibInit+0x1e0>)
    3dc2:	4798      	blx	r3
    3dc4:	4681      	mov	r9, r0
    3dc6:	2800      	cmp	r0, #0
    3dc8:	d187      	bne.n	3cda <_Cellular_LibInit+0x42>
            LogError( ( "Could not create CELLULAR Pkt Req mutex " ) );
    3dca:	f44f 7379 	mov.w	r3, #996	; 0x3e4
    3dce:	4a1d      	ldr	r2, [pc, #116]	; (3e44 <_Cellular_LibInit+0x1ac>)
    3dd0:	491d      	ldr	r1, [pc, #116]	; (3e48 <_Cellular_LibInit+0x1b0>)
    3dd2:	481e      	ldr	r0, [pc, #120]	; (3e4c <_Cellular_LibInit+0x1b4>)
    3dd4:	4c1e      	ldr	r4, [pc, #120]	; (3e50 <_Cellular_LibInit+0x1b8>)
    3dd6:	47a0      	blx	r4
    3dd8:	4828      	ldr	r0, [pc, #160]	; (3e7c <_Cellular_LibInit+0x1e4>)
    3dda:	47a0      	blx	r4
    3ddc:	481e      	ldr	r0, [pc, #120]	; (3e58 <_Cellular_LibInit+0x1c0>)
    3dde:	47a0      	blx	r4
            cellularStatus = CELLULAR_RESOURCE_CREATION_FAIL;
    3de0:	240b      	movs	r4, #11
    3de2:	e77a      	b.n	3cda <_Cellular_LibInit+0x42>
        if( _Cellular_CreatePktResponseMutex( pContext ) != true )
    3de4:	4628      	mov	r0, r5
    3de6:	4b26      	ldr	r3, [pc, #152]	; (3e80 <_Cellular_LibInit+0x1e8>)
    3de8:	4798      	blx	r3
    3dea:	4682      	mov	sl, r0
    3dec:	2800      	cmp	r0, #0
    3dee:	f47f af79 	bne.w	3ce4 <_Cellular_LibInit+0x4c>
            LogError( ( "Could not create CELLULAR Pkt Resp mutex " ) );
    3df2:	f240 33f1 	movw	r3, #1009	; 0x3f1
    3df6:	4a13      	ldr	r2, [pc, #76]	; (3e44 <_Cellular_LibInit+0x1ac>)
    3df8:	4913      	ldr	r1, [pc, #76]	; (3e48 <_Cellular_LibInit+0x1b0>)
    3dfa:	4814      	ldr	r0, [pc, #80]	; (3e4c <_Cellular_LibInit+0x1b4>)
    3dfc:	4c14      	ldr	r4, [pc, #80]	; (3e50 <_Cellular_LibInit+0x1b8>)
    3dfe:	47a0      	blx	r4
    3e00:	4820      	ldr	r0, [pc, #128]	; (3e84 <_Cellular_LibInit+0x1ec>)
    3e02:	47a0      	blx	r4
    3e04:	4814      	ldr	r0, [pc, #80]	; (3e58 <_Cellular_LibInit+0x1c0>)
    3e06:	47a0      	blx	r4
            cellularStatus = CELLULAR_RESOURCE_CREATION_FAIL;
    3e08:	240b      	movs	r4, #11
    3e0a:	e76b      	b.n	3ce4 <_Cellular_LibInit+0x4c>
        cellularStatus = libOpen( pContext );
    3e0c:	4628      	mov	r0, r5
    3e0e:	4b1e      	ldr	r3, [pc, #120]	; (3e88 <_Cellular_LibInit+0x1f0>)
    3e10:	4798      	blx	r3
    3e12:	4604      	mov	r4, r0
    3e14:	e769      	b.n	3cea <_Cellular_LibInit+0x52>
            _Cellular_DestroyPktResponseMutex( pContext );
    3e16:	4628      	mov	r0, r5
    3e18:	4b1c      	ldr	r3, [pc, #112]	; (3e8c <_Cellular_LibInit+0x1f4>)
    3e1a:	4798      	blx	r3
    3e1c:	e76c      	b.n	3cf8 <_Cellular_LibInit+0x60>
            _Cellular_DestroyPktRequestMutex( pContext );
    3e1e:	4628      	mov	r0, r5
    3e20:	4b1b      	ldr	r3, [pc, #108]	; (3e90 <_Cellular_LibInit+0x1f8>)
    3e22:	4798      	blx	r3
    3e24:	e76c      	b.n	3d00 <_Cellular_LibInit+0x68>
            _Cellular_DestroyAtDataMutex( pContext );
    3e26:	4628      	mov	r0, r5
    3e28:	4b1a      	ldr	r3, [pc, #104]	; (3e94 <_Cellular_LibInit+0x1fc>)
    3e2a:	4798      	blx	r3
    3e2c:	e76c      	b.n	3d08 <_Cellular_LibInit+0x70>
            _Cellular_DestroyLibStatusMutex( pContext );
    3e2e:	4628      	mov	r0, r5
    3e30:	4b19      	ldr	r3, [pc, #100]	; (3e98 <_Cellular_LibInit+0x200>)
    3e32:	4798      	blx	r3
    3e34:	e76b      	b.n	3d0e <_Cellular_LibInit+0x76>
        }
    }
    else
    {
        *pCellularHandle = pContext;
    3e36:	603d      	str	r5, [r7, #0]
    }

    return cellularStatus;
}
    3e38:	4620      	mov	r0, r4
    3e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3e3e:	bf00      	nop
    3e40:	00003795 	.word	0x00003795
    3e44:	0000cd20 	.word	0x0000cd20
    3e48:	0000b258 	.word	0x0000b258
    3e4c:	0000a188 	.word	0x0000a188
    3e50:	00005bfd 	.word	0x00005bfd
    3e54:	0000cfa8 	.word	0x0000cfa8
    3e58:	0000dcf4 	.word	0x0000dcf4
    3e5c:	00003831 	.word	0x00003831
    3e60:	0000386d 	.word	0x0000386d
    3e64:	0000cfd8 	.word	0x0000cfd8
    3e68:	000038bd 	.word	0x000038bd
    3e6c:	0000cffc 	.word	0x0000cffc
    3e70:	00002a7d 	.word	0x00002a7d
    3e74:	0000d028 	.word	0x0000d028
    3e78:	00004575 	.word	0x00004575
    3e7c:	0000d054 	.word	0x0000d054
    3e80:	0000458d 	.word	0x0000458d
    3e84:	0000d080 	.word	0x0000d080
    3e88:	000039a5 	.word	0x000039a5
    3e8c:	000045b9 	.word	0x000045b9
    3e90:	000045a5 	.word	0x000045a5
    3e94:	00002a59 	.word	0x00002a59
    3e98:	000038cd 	.word	0x000038cd

00003e9c <_Cellular_TimeoutAtcmdRequestWithCallback>:
/*-----------------------------------------------------------*/

CellularPktStatus_t _Cellular_TimeoutAtcmdRequestWithCallback( CellularContext_t * pContext,
                                                               CellularAtReq_t atReq,
                                                               uint32_t timeoutMS )
{
    3e9c:	b084      	sub	sp, #16
    3e9e:	b530      	push	{r4, r5, lr}
    3ea0:	b085      	sub	sp, #20
    3ea2:	4605      	mov	r5, r0
    3ea4:	ac09      	add	r4, sp, #36	; 0x24
    3ea6:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    return _Cellular_PktHandler_AtcmdRequestWithCallback( pContext, atReq, timeoutMS );
    3eaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3eac:	9303      	str	r3, [sp, #12]
    3eae:	ab0c      	add	r3, sp, #48	; 0x30
    3eb0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    3eb4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
    3eb8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
    3ebc:	4628      	mov	r0, r5
    3ebe:	4c03      	ldr	r4, [pc, #12]	; (3ecc <_Cellular_TimeoutAtcmdRequestWithCallback+0x30>)
    3ec0:	47a0      	blx	r4
}
    3ec2:	b005      	add	sp, #20
    3ec4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    3ec8:	b004      	add	sp, #16
    3eca:	4770      	bx	lr
    3ecc:	000043ed 	.word	0x000043ed

00003ed0 <_Cellular_AtcmdRequestWithCallback>:
{
    3ed0:	b084      	sub	sp, #16
    3ed2:	b530      	push	{r4, r5, lr}
    3ed4:	b085      	sub	sp, #20
    3ed6:	4605      	mov	r5, r0
    3ed8:	ac09      	add	r4, sp, #36	; 0x24
    3eda:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    return _Cellular_TimeoutAtcmdRequestWithCallback( pContext, atReq, ( uint32_t ) PACKET_REQ_TIMEOUT_MS );
    3ede:	f241 3388 	movw	r3, #5000	; 0x1388
    3ee2:	9303      	str	r3, [sp, #12]
    3ee4:	ab0c      	add	r3, sp, #48	; 0x30
    3ee6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    3eea:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
    3eee:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
    3ef2:	4628      	mov	r0, r5
    3ef4:	4c03      	ldr	r4, [pc, #12]	; (3f04 <_Cellular_AtcmdRequestWithCallback+0x34>)
    3ef6:	47a0      	blx	r4
}
    3ef8:	b005      	add	sp, #20
    3efa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    3efe:	b004      	add	sp, #16
    3f00:	4770      	bx	lr
    3f02:	bf00      	nop
    3f04:	00003e9d 	.word	0x00003e9d

00003f08 <Cellular_CommonInit>:
/*-----------------------------------------------------------*/

CellularError_t Cellular_CommonInit( CellularHandle_t * pCellularHandle,
                                     const CellularCommInterface_t * pCommInterface,
                                     const CellularTokenTable_t * pTokenTable )
{
    3f08:	b510      	push	{r4, lr}
    3f0a:	4604      	mov	r4, r0
    CellularError_t cellularStatus = CELLULAR_SUCCESS;
    CellularContext_t * pContext = NULL;

    /* Init the common library. */
    cellularStatus = _Cellular_LibInit( pCellularHandle, pCommInterface, pTokenTable );
    3f0c:	4b0d      	ldr	r3, [pc, #52]	; (3f44 <Cellular_CommonInit+0x3c>)
    3f0e:	4798      	blx	r3

    /* Init the module. */
    if( cellularStatus == CELLULAR_SUCCESS )
    3f10:	b128      	cbz	r0, 3f1e <Cellular_CommonInit+0x16>
    3f12:	4603      	mov	r3, r0
    CellularContext_t * pContext = NULL;
    3f14:	2400      	movs	r4, #0
        pContext = *pCellularHandle;
        cellularStatus = Cellular_ModuleInit( pContext, &pContext->pModueContext );
    }

    /* Setup UE, URC and query register status. */
    if( cellularStatus == CELLULAR_SUCCESS )
    3f16:	b153      	cbz	r3, 3f2e <Cellular_CommonInit+0x26>
    {
        cellularStatus = Cellular_ModuleEnableUE( pContext );
    }

    if( cellularStatus == CELLULAR_SUCCESS )
    3f18:	b173      	cbz	r3, 3f38 <Cellular_CommonInit+0x30>
    {
        cellularStatus = Cellular_ModuleEnableUrc( pContext );
    }

    return cellularStatus;
}
    3f1a:	4618      	mov	r0, r3
    3f1c:	bd10      	pop	{r4, pc}
        pContext = *pCellularHandle;
    3f1e:	6824      	ldr	r4, [r4, #0]
        cellularStatus = Cellular_ModuleInit( pContext, &pContext->pModueContext );
    3f20:	f604 1154 	addw	r1, r4, #2388	; 0x954
    3f24:	4620      	mov	r0, r4
    3f26:	4b08      	ldr	r3, [pc, #32]	; (3f48 <Cellular_CommonInit+0x40>)
    3f28:	4798      	blx	r3
    3f2a:	4603      	mov	r3, r0
    3f2c:	e7f3      	b.n	3f16 <Cellular_CommonInit+0xe>
        cellularStatus = Cellular_ModuleEnableUE( pContext );
    3f2e:	4620      	mov	r0, r4
    3f30:	4b06      	ldr	r3, [pc, #24]	; (3f4c <Cellular_CommonInit+0x44>)
    3f32:	4798      	blx	r3
    3f34:	4603      	mov	r3, r0
    3f36:	e7ef      	b.n	3f18 <Cellular_CommonInit+0x10>
        cellularStatus = Cellular_ModuleEnableUrc( pContext );
    3f38:	4620      	mov	r0, r4
    3f3a:	4b05      	ldr	r3, [pc, #20]	; (3f50 <Cellular_CommonInit+0x48>)
    3f3c:	4798      	blx	r3
    3f3e:	4603      	mov	r3, r0
    3f40:	e7eb      	b.n	3f1a <Cellular_CommonInit+0x12>
    3f42:	bf00      	nop
    3f44:	00003c99 	.word	0x00003c99
    3f48:	00000ee9 	.word	0x00000ee9
    3f4c:	00000f49 	.word	0x00000f49
    3f50:	00001059 	.word	0x00001059

00003f54 <_Cellular_PktHandlerAcquirePktRequestMutex>:
}

/*-----------------------------------------------------------*/

static void _Cellular_PktHandlerAcquirePktRequestMutex( CellularContext_t * pContext )
{
    3f54:	b508      	push	{r3, lr}
    PlatformMutex_Lock( &pContext->pktRequestMutex );
    3f56:	f500 708e 	add.w	r0, r0, #284	; 0x11c
    3f5a:	4b01      	ldr	r3, [pc, #4]	; (3f60 <_Cellular_PktHandlerAcquirePktRequestMutex+0xc>)
    3f5c:	4798      	blx	r3
    3f5e:	bd08      	pop	{r3, pc}
    3f60:	000054e9 	.word	0x000054e9

00003f64 <_Cellular_PktHandlerReleasePktRequestMutex>:
}

/*-----------------------------------------------------------*/

static void _Cellular_PktHandlerReleasePktRequestMutex( CellularContext_t * pContext )
{
    3f64:	b508      	push	{r3, lr}
    PlatformMutex_Unlock( &pContext->pktRequestMutex );
    3f66:	f500 708e 	add.w	r0, r0, #284	; 0x11c
    3f6a:	4b01      	ldr	r3, [pc, #4]	; (3f70 <_Cellular_PktHandlerReleasePktRequestMutex+0xc>)
    3f6c:	4798      	blx	r3
    3f6e:	bd08      	pop	{r3, pc}
    3f70:	000054f9 	.word	0x000054f9

00003f74 <_convertAndQueueRespPacket>:
{
    3f74:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f76:	b083      	sub	sp, #12
    CellularPktStatus_t pktStatus = CELLULAR_PKT_STATUS_OK;
    3f78:	2300      	movs	r3, #0
    3f7a:	f88d 3007 	strb.w	r3, [sp, #7]
    if( ( pBuf != NULL ) )
    3f7e:	2900      	cmp	r1, #0
    3f80:	d045      	beq.n	400e <_convertAndQueueRespPacket+0x9a>
    3f82:	460d      	mov	r5, r1
    3f84:	4604      	mov	r4, r0
        PlatformMutex_Lock( &pContext->PktRespMutex );
    3f86:	f500 76ba 	add.w	r6, r0, #372	; 0x174
    3f8a:	4630      	mov	r0, r6
    3f8c:	4b22      	ldr	r3, [pc, #136]	; (4018 <_convertAndQueueRespPacket+0xa4>)
    3f8e:	4798      	blx	r3
        if( pAtResp->status == false )
    3f90:	782b      	ldrb	r3, [r5, #0]
    3f92:	b323      	cbz	r3, 3fde <_convertAndQueueRespPacket+0x6a>
        if( ( pContext->pktRespCB != NULL ) && ( pktStatus == CELLULAR_PKT_STATUS_OK ) )
    3f94:	f8d4 71d0 	ldr.w	r7, [r4, #464]	; 0x1d0
    3f98:	b11f      	cbz	r7, 3fa2 <_convertAndQueueRespPacket+0x2e>
    3f9a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3f9e:	2b00      	cmp	r3, #0
    3fa0:	d02b      	beq.n	3ffa <_convertAndQueueRespPacket+0x86>
        if( xQueueSend( pContext->pktRespQueue, ( void * ) &pktStatus, ( TickType_t ) 0 ) != pdPASS )
    3fa2:	2300      	movs	r3, #0
    3fa4:	461a      	mov	r2, r3
    3fa6:	f10d 0107 	add.w	r1, sp, #7
    3faa:	f8d4 01cc 	ldr.w	r0, [r4, #460]	; 0x1cc
    3fae:	4c1b      	ldr	r4, [pc, #108]	; (401c <_convertAndQueueRespPacket+0xa8>)
    3fb0:	47a0      	blx	r4
    3fb2:	2801      	cmp	r0, #1
    3fb4:	d00c      	beq.n	3fd0 <_convertAndQueueRespPacket+0x5c>
            pktStatus = CELLULAR_PKT_STATUS_FAILURE;
    3fb6:	2302      	movs	r3, #2
    3fb8:	f88d 3007 	strb.w	r3, [sp, #7]
            LogError( ( "_convertAndQueueRespPacket: Got a response when the Resp Q is full!!" ) );
    3fbc:	2374      	movs	r3, #116	; 0x74
    3fbe:	4a18      	ldr	r2, [pc, #96]	; (4020 <_convertAndQueueRespPacket+0xac>)
    3fc0:	4918      	ldr	r1, [pc, #96]	; (4024 <_convertAndQueueRespPacket+0xb0>)
    3fc2:	4819      	ldr	r0, [pc, #100]	; (4028 <_convertAndQueueRespPacket+0xb4>)
    3fc4:	4c19      	ldr	r4, [pc, #100]	; (402c <_convertAndQueueRespPacket+0xb8>)
    3fc6:	47a0      	blx	r4
    3fc8:	4819      	ldr	r0, [pc, #100]	; (4030 <_convertAndQueueRespPacket+0xbc>)
    3fca:	47a0      	blx	r4
    3fcc:	4819      	ldr	r0, [pc, #100]	; (4034 <_convertAndQueueRespPacket+0xc0>)
    3fce:	47a0      	blx	r4
        PlatformMutex_Unlock( &pContext->PktRespMutex );
    3fd0:	4630      	mov	r0, r6
    3fd2:	4b19      	ldr	r3, [pc, #100]	; (4038 <_convertAndQueueRespPacket+0xc4>)
    3fd4:	4798      	blx	r3
}
    3fd6:	f89d 0007 	ldrb.w	r0, [sp, #7]
    3fda:	b003      	add	sp, #12
    3fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
            LogError( ( "_convertAndQueueRespPacket: AT response contains error" ) );
    3fde:	2362      	movs	r3, #98	; 0x62
    3fe0:	4a0f      	ldr	r2, [pc, #60]	; (4020 <_convertAndQueueRespPacket+0xac>)
    3fe2:	4910      	ldr	r1, [pc, #64]	; (4024 <_convertAndQueueRespPacket+0xb0>)
    3fe4:	4810      	ldr	r0, [pc, #64]	; (4028 <_convertAndQueueRespPacket+0xb4>)
    3fe6:	4f11      	ldr	r7, [pc, #68]	; (402c <_convertAndQueueRespPacket+0xb8>)
    3fe8:	47b8      	blx	r7
    3fea:	4814      	ldr	r0, [pc, #80]	; (403c <_convertAndQueueRespPacket+0xc8>)
    3fec:	47b8      	blx	r7
    3fee:	4811      	ldr	r0, [pc, #68]	; (4034 <_convertAndQueueRespPacket+0xc0>)
    3ff0:	47b8      	blx	r7
            pktStatus = CELLULAR_PKT_STATUS_FAILURE;
    3ff2:	2302      	movs	r3, #2
    3ff4:	f88d 3007 	strb.w	r3, [sp, #7]
    3ff8:	e7cc      	b.n	3f94 <_convertAndQueueRespPacket+0x20>
            pktStatus = pContext->pktRespCB( pContext,
    3ffa:	f8b4 31e8 	ldrh.w	r3, [r4, #488]	; 0x1e8
    3ffe:	f8d4 21e4 	ldr.w	r2, [r4, #484]	; 0x1e4
    4002:	4629      	mov	r1, r5
    4004:	4620      	mov	r0, r4
    4006:	47b8      	blx	r7
    4008:	f88d 0007 	strb.w	r0, [sp, #7]
    400c:	e7c9      	b.n	3fa2 <_convertAndQueueRespPacket+0x2e>
        pktStatus = CELLULAR_PKT_STATUS_BAD_PARAM;
    400e:	2306      	movs	r3, #6
    4010:	f88d 3007 	strb.w	r3, [sp, #7]
    4014:	e7df      	b.n	3fd6 <_convertAndQueueRespPacket+0x62>
    4016:	bf00      	nop
    4018:	000054e9 	.word	0x000054e9
    401c:	00006b45 	.word	0x00006b45
    4020:	0000d0ac 	.word	0x0000d0ac
    4024:	0000b258 	.word	0x0000b258
    4028:	0000a188 	.word	0x0000a188
    402c:	00005bfd 	.word	0x00005bfd
    4030:	0000d268 	.word	0x0000d268
    4034:	0000dcf4 	.word	0x0000dcf4
    4038:	000054f9 	.word	0x000054f9
    403c:	0000d230 	.word	0x0000d230

00004040 <_searchCompareFunc>:
 * bsearch function syntax mandates the compare function should be of type int.
 * Hence int data type is used instead of typedef datatype. */
/* coverity[misra_c_2012_directive_4_6_violation] */
static int _searchCompareFunc( const void * pInputToken,
                               const void * pBase )
{
    4040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4042:	4607      	mov	r7, r0
    4044:	460e      	mov	r6, r1
     * Hence int data type is used instead of typedef datatype. */
    /* coverity[misra_c_2012_directive_4_6_violation] */
    int compareValue = 0;
    const char * pToken = ( const char * ) pInputToken;
    const CellularAtParseTokenMap_t * pBasePtr = ( const CellularAtParseTokenMap_t * ) pBase;
    uint32_t tokenLen = ( uint32_t ) strlen( pInputToken );
    4046:	4c0d      	ldr	r4, [pc, #52]	; (407c <_searchCompareFunc+0x3c>)
    4048:	47a0      	blx	r4
    404a:	4605      	mov	r5, r0
    uint32_t strLen = ( uint32_t ) strlen( pBasePtr->pStrValue );
    404c:	6836      	ldr	r6, [r6, #0]
    404e:	4630      	mov	r0, r6
    4050:	47a0      	blx	r4
    4052:	4604      	mov	r4, r0

    compareValue = strncmp( pToken,
    4054:	462a      	mov	r2, r5
    4056:	4285      	cmp	r5, r0
    4058:	bf28      	it	cs
    405a:	4602      	movcs	r2, r0
    405c:	4631      	mov	r1, r6
    405e:	4638      	mov	r0, r7
    4060:	4b07      	ldr	r3, [pc, #28]	; (4080 <_searchCompareFunc+0x40>)
    4062:	4798      	blx	r3
                            pBasePtr->pStrValue,
                            MIN( tokenLen, strLen ) );

    /* To avoid undefined behavior, the table should not contain duplicated item and
     * compareValue is 0 only if the string is exactly the same. */
    if( ( compareValue == 0 ) && ( tokenLen != strLen ) )
    4064:	4603      	mov	r3, r0
    4066:	b918      	cbnz	r0, 4070 <_searchCompareFunc+0x30>
    4068:	42a5      	cmp	r5, r4
    406a:	d001      	beq.n	4070 <_searchCompareFunc+0x30>
    {
        if( tokenLen > strLen )
    406c:	d902      	bls.n	4074 <_searchCompareFunc+0x34>
        {
            compareValue = 1;
    406e:	2301      	movs	r3, #1
            compareValue = -1;
        }
    }

    return compareValue;
}
    4070:	4618      	mov	r0, r3
    4072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            compareValue = -1;
    4074:	f04f 33ff 	mov.w	r3, #4294967295
    return compareValue;
    4078:	e7fa      	b.n	4070 <_searchCompareFunc+0x30>
    407a:	bf00      	nop
    407c:	00008df1 	.word	0x00008df1
    4080:	00008e01 	.word	0x00008e01

00004084 <_sortCompareFunc>:
 * qsort function syntax mandates the compare function should be of type int.
 * Hence int data type is used instead of typedef datatype. */
/* coverity[misra_c_2012_directive_4_6_violation] */
static int _sortCompareFunc( const void * pElem1Ptr,
                             const void * pElem2Ptr )
{
    4084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4086:	460f      	mov	r7, r1
     * Hence int data type is used instead of typedef datatype. */
    /* coverity[misra_c_2012_directive_4_6_violation] */
    int compareValue = 0;
    const CellularAtParseTokenMap_t * pElement1Ptr = ( const CellularAtParseTokenMap_t * ) pElem1Ptr;
    const CellularAtParseTokenMap_t * pElement2Ptr = ( const CellularAtParseTokenMap_t * ) pElem2Ptr;
    uint32_t element1PtrLen = ( uint32_t ) strlen( pElement1Ptr->pStrValue );
    4088:	6806      	ldr	r6, [r0, #0]
    408a:	4630      	mov	r0, r6
    408c:	4c0c      	ldr	r4, [pc, #48]	; (40c0 <_sortCompareFunc+0x3c>)
    408e:	47a0      	blx	r4
    4090:	4605      	mov	r5, r0
    uint32_t element2PtrLen = ( uint32_t ) strlen( pElement2Ptr->pStrValue );
    4092:	683f      	ldr	r7, [r7, #0]
    4094:	4638      	mov	r0, r7
    4096:	47a0      	blx	r4
    4098:	4604      	mov	r4, r0

    compareValue = strncmp( pElement1Ptr->pStrValue,
    409a:	462a      	mov	r2, r5
    409c:	4285      	cmp	r5, r0
    409e:	bf28      	it	cs
    40a0:	4602      	movcs	r2, r0
    40a2:	4639      	mov	r1, r7
    40a4:	4630      	mov	r0, r6
    40a6:	4b07      	ldr	r3, [pc, #28]	; (40c4 <_sortCompareFunc+0x40>)
    40a8:	4798      	blx	r3
                            pElement2Ptr->pStrValue,
                            MIN( element1PtrLen, element2PtrLen ) );

    /* To avoid undefined behavior, the table should not contain duplicated item and
     * compareValue is 0 only if the string is exactly the same. */
    if( ( compareValue == 0 ) && ( element1PtrLen != element2PtrLen ) )
    40aa:	4603      	mov	r3, r0
    40ac:	b918      	cbnz	r0, 40b6 <_sortCompareFunc+0x32>
    40ae:	42a5      	cmp	r5, r4
    40b0:	d001      	beq.n	40b6 <_sortCompareFunc+0x32>
    {
        if( element1PtrLen > element2PtrLen )
    40b2:	d902      	bls.n	40ba <_sortCompareFunc+0x36>
        {
            compareValue = 1;
    40b4:	2301      	movs	r3, #1
            compareValue = -1;
        }
    }

    return compareValue;
}
    40b6:	4618      	mov	r0, r3
    40b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            compareValue = -1;
    40ba:	f04f 33ff 	mov.w	r3, #4294967295
    return compareValue;
    40be:	e7fa      	b.n	40b6 <_sortCompareFunc+0x32>
    40c0:	00008df1 	.word	0x00008df1
    40c4:	00008e01 	.word	0x00008e01

000040c8 <_Cellular_ProcessGenericUrc>:

/*-----------------------------------------------------------*/

static void _Cellular_ProcessGenericUrc( const CellularContext_t * pContext,
                                         const char * pInputLine )
{
    40c8:	b508      	push	{r3, lr}
    _Cellular_GenericCallback( pContext, pInputLine );
    40ca:	4b01      	ldr	r3, [pc, #4]	; (40d0 <_Cellular_ProcessGenericUrc+0x8>)
    40cc:	4798      	blx	r3
    40ce:	bd08      	pop	{r3, pc}
    40d0:	00003bfd 	.word	0x00003bfd

000040d4 <_atParseGetHandler>:
/*-----------------------------------------------------------*/

static CellularPktStatus_t _atParseGetHandler( CellularContext_t * pContext,
                                               const char * pTokenPtr,
                                               char * pSavePtr )
{
    40d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    40d6:	b083      	sub	sp, #12
    40d8:	4604      	mov	r4, r0
    40da:	460d      	mov	r5, r1
    40dc:	4617      	mov	r7, r2
     * When two elements are otherwise equal, the comparison function could
     * return a value that indicates their relative order in the initial array.
     * This the token table must be checked without duplicated string. The return value
     * is 0 only if the string is exactly the same. */
    /* coverity[misra_c_2012_rule_21_9_violation] */
    pElementPtr = ( CellularAtParseTokenMap_t * ) bsearch( ( const void * ) pTokenPtr,
    40de:	4b13      	ldr	r3, [pc, #76]	; (412c <_atParseGetHandler+0x58>)
    40e0:	9300      	str	r3, [sp, #0]
    40e2:	2308      	movs	r3, #8
    40e4:	f8d0 20f8 	ldr.w	r2, [r0, #248]	; 0xf8
    40e8:	f8d0 10f4 	ldr.w	r1, [r0, #244]	; 0xf4
    40ec:	4628      	mov	r0, r5
    40ee:	4e10      	ldr	r6, [pc, #64]	; (4130 <_atParseGetHandler+0x5c>)
    40f0:	47b0      	blx	r6
                                                           ( const void * ) pTokenMap,
                                                           tokenMapSize,
                                                           sizeof( CellularAtParseTokenMap_t ),
                                                           _searchCompareFunc );

    if( pElementPtr != NULL )
    40f2:	b1a8      	cbz	r0, 4120 <_atParseGetHandler+0x4c>
    {
        if( pElementPtr->parserFunc != NULL )
    40f4:	6843      	ldr	r3, [r0, #4]
    40f6:	b12b      	cbz	r3, 4104 <_atParseGetHandler+0x30>
        {
            pElementPtr->parserFunc( pContext, pSavePtr );
    40f8:	4639      	mov	r1, r7
    40fa:	4620      	mov	r0, r4
    40fc:	4798      	blx	r3
    CellularPktStatus_t pktStatus = CELLULAR_PKT_STATUS_OK;
    40fe:	2000      	movs	r0, #0
        LogDebug( ( "No URC Callback func avail %s, now trying generic URC Callback", pTokenPtr ) );
        _Cellular_ProcessGenericUrc( pContext, pSavePtr );
    }

    return pktStatus;
}
    4100:	b003      	add	sp, #12
    4102:	bdf0      	pop	{r4, r5, r6, r7, pc}
            LogWarn( ( "No URC Callback func avail %s", pTokenPtr ) );
    4104:	f240 13e1 	movw	r3, #481	; 0x1e1
    4108:	4a0a      	ldr	r2, [pc, #40]	; (4134 <_atParseGetHandler+0x60>)
    410a:	490b      	ldr	r1, [pc, #44]	; (4138 <_atParseGetHandler+0x64>)
    410c:	480b      	ldr	r0, [pc, #44]	; (413c <_atParseGetHandler+0x68>)
    410e:	4c0c      	ldr	r4, [pc, #48]	; (4140 <_atParseGetHandler+0x6c>)
    4110:	47a0      	blx	r4
    4112:	4629      	mov	r1, r5
    4114:	480b      	ldr	r0, [pc, #44]	; (4144 <_atParseGetHandler+0x70>)
    4116:	47a0      	blx	r4
    4118:	480b      	ldr	r0, [pc, #44]	; (4148 <_atParseGetHandler+0x74>)
    411a:	47a0      	blx	r4
            pktStatus = CELLULAR_PKT_STATUS_FAILURE;
    411c:	2002      	movs	r0, #2
    411e:	e7ef      	b.n	4100 <_atParseGetHandler+0x2c>
        _Cellular_ProcessGenericUrc( pContext, pSavePtr );
    4120:	4639      	mov	r1, r7
    4122:	4620      	mov	r0, r4
    4124:	4b09      	ldr	r3, [pc, #36]	; (414c <_atParseGetHandler+0x78>)
    4126:	4798      	blx	r3
    CellularPktStatus_t pktStatus = CELLULAR_PKT_STATUS_OK;
    4128:	2000      	movs	r0, #0
    412a:	e7e9      	b.n	4100 <_atParseGetHandler+0x2c>
    412c:	00004041 	.word	0x00004041
    4130:	00008791 	.word	0x00008791
    4134:	0000d0c8 	.word	0x0000d0c8
    4138:	0000b258 	.word	0x0000b258
    413c:	0000b058 	.word	0x0000b058
    4140:	00005bfd 	.word	0x00005bfd
    4144:	0000d2b0 	.word	0x0000d2b0
    4148:	0000dcf4 	.word	0x0000dcf4
    414c:	000040c9 	.word	0x000040c9

00004150 <urcParseToken>:
{
    4150:	b5f0      	push	{r4, r5, r6, r7, lr}
    4152:	b083      	sub	sp, #12
    4154:	4605      	mov	r5, r0
    4156:	460c      	mov	r4, r1
    char * pSavePtr = pInputLine, * pTokenPtr = pInputLine;
    4158:	9101      	str	r1, [sp, #4]
    if( *pSavePtr == '+' )
    415a:	780b      	ldrb	r3, [r1, #0]
    415c:	2b2b      	cmp	r3, #43	; 0x2b
    415e:	d003      	beq.n	4168 <urcParseToken+0x18>
    CellularPktStatus_t pktStatus = CELLULAR_PKT_STATUS_OK;
    4160:	2000      	movs	r0, #0
    if( pktStatus == CELLULAR_PKT_STATUS_OK )
    4162:	b1d8      	cbz	r0, 419c <urcParseToken+0x4c>
}
    4164:	b003      	add	sp, #12
    4166:	bdf0      	pop	{r4, r5, r6, r7, pc}
        pSavePtr++;
    4168:	1c48      	adds	r0, r1, #1
    416a:	aa02      	add	r2, sp, #8
    416c:	f842 0d04 	str.w	r0, [r2, #-4]!
        pTokenPtr = strtok_r( pSavePtr, ":", &pSavePtr );
    4170:	490d      	ldr	r1, [pc, #52]	; (41a8 <urcParseToken+0x58>)
    4172:	4b0e      	ldr	r3, [pc, #56]	; (41ac <urcParseToken+0x5c>)
    4174:	4798      	blx	r3
        if( pTokenPtr == NULL )
    4176:	4606      	mov	r6, r0
    4178:	b110      	cbz	r0, 4180 <urcParseToken+0x30>
        pTokenPtr = strtok_r( pSavePtr, ":", &pSavePtr );
    417a:	4604      	mov	r4, r0
    CellularPktStatus_t pktStatus = CELLULAR_PKT_STATUS_OK;
    417c:	2000      	movs	r0, #0
    417e:	e7f0      	b.n	4162 <urcParseToken+0x12>
            LogError( ( "_Cellular_AtParse : input string error, start with \"+\" but no token %s", pInputLine ) );
    4180:	239a      	movs	r3, #154	; 0x9a
    4182:	4a0b      	ldr	r2, [pc, #44]	; (41b0 <urcParseToken+0x60>)
    4184:	490b      	ldr	r1, [pc, #44]	; (41b4 <urcParseToken+0x64>)
    4186:	480c      	ldr	r0, [pc, #48]	; (41b8 <urcParseToken+0x68>)
    4188:	4f0c      	ldr	r7, [pc, #48]	; (41bc <urcParseToken+0x6c>)
    418a:	47b8      	blx	r7
    418c:	4621      	mov	r1, r4
    418e:	480c      	ldr	r0, [pc, #48]	; (41c0 <urcParseToken+0x70>)
    4190:	47b8      	blx	r7
    4192:	480c      	ldr	r0, [pc, #48]	; (41c4 <urcParseToken+0x74>)
    4194:	47b8      	blx	r7
        pTokenPtr = strtok_r( pSavePtr, ":", &pSavePtr );
    4196:	4634      	mov	r4, r6
            pktStatus = CELLULAR_PKT_STATUS_BAD_REQUEST;
    4198:	2003      	movs	r0, #3
    419a:	e7e2      	b.n	4162 <urcParseToken+0x12>
        pktStatus = _atParseGetHandler( pContext, pTokenPtr, pSavePtr );
    419c:	9a01      	ldr	r2, [sp, #4]
    419e:	4621      	mov	r1, r4
    41a0:	4628      	mov	r0, r5
    41a2:	4b09      	ldr	r3, [pc, #36]	; (41c8 <urcParseToken+0x78>)
    41a4:	4798      	blx	r3
    41a6:	e7dd      	b.n	4164 <urcParseToken+0x14>
    41a8:	0000ac04 	.word	0x0000ac04
    41ac:	00008f6b 	.word	0x00008f6b
    41b0:	0000d0dc 	.word	0x0000d0dc
    41b4:	0000b258 	.word	0x0000b258
    41b8:	0000a188 	.word	0x0000a188
    41bc:	00005bfd 	.word	0x00005bfd
    41c0:	0000d2d0 	.word	0x0000d2d0
    41c4:	0000dcf4 	.word	0x0000dcf4
    41c8:	000040d5 	.word	0x000040d5

000041cc <_processUrcPacket>:
{
    41cc:	b530      	push	{r4, r5, lr}
    41ce:	b083      	sub	sp, #12
    char * payload = NULL;
    41d0:	2300      	movs	r3, #0
    41d2:	9301      	str	r3, [sp, #4]
    if( pBuf != NULL )
    41d4:	b1f1      	cbz	r1, 4214 <_processUrcPacket+0x48>
    41d6:	460c      	mov	r4, r1
    41d8:	4605      	mov	r5, r0
        atStatus = Cellular_ATStrDup( &payload, pBuf );
    41da:	a801      	add	r0, sp, #4
    41dc:	4b0f      	ldr	r3, [pc, #60]	; (421c <_processUrcPacket+0x50>)
    41de:	4798      	blx	r3
        if( atStatus == CELLULAR_AT_SUCCESS )
    41e0:	b178      	cbz	r0, 4202 <_processUrcPacket+0x36>
            LogWarn( ( "Couldn't allocate memory of %lu for urc", ( uint32_t ) strlen( pBuf ) ) );
    41e2:	23c1      	movs	r3, #193	; 0xc1
    41e4:	4a0e      	ldr	r2, [pc, #56]	; (4220 <_processUrcPacket+0x54>)
    41e6:	490f      	ldr	r1, [pc, #60]	; (4224 <_processUrcPacket+0x58>)
    41e8:	480f      	ldr	r0, [pc, #60]	; (4228 <_processUrcPacket+0x5c>)
    41ea:	4d10      	ldr	r5, [pc, #64]	; (422c <_processUrcPacket+0x60>)
    41ec:	47a8      	blx	r5
    41ee:	4620      	mov	r0, r4
    41f0:	4b0f      	ldr	r3, [pc, #60]	; (4230 <_processUrcPacket+0x64>)
    41f2:	4798      	blx	r3
    41f4:	4601      	mov	r1, r0
    41f6:	480f      	ldr	r0, [pc, #60]	; (4234 <_processUrcPacket+0x68>)
    41f8:	47a8      	blx	r5
    41fa:	480f      	ldr	r0, [pc, #60]	; (4238 <_processUrcPacket+0x6c>)
    41fc:	47a8      	blx	r5
            pktStatus = CELLULAR_PKT_STATUS_FAILURE;
    41fe:	2402      	movs	r4, #2
    4200:	e009      	b.n	4216 <_processUrcPacket+0x4a>
            pktStatus = urcParseToken( pContext, ( char * ) payload );
    4202:	9901      	ldr	r1, [sp, #4]
    4204:	4628      	mov	r0, r5
    4206:	4b0d      	ldr	r3, [pc, #52]	; (423c <_processUrcPacket+0x70>)
    4208:	4798      	blx	r3
    420a:	4604      	mov	r4, r0
            Platform_Free( payload );
    420c:	9801      	ldr	r0, [sp, #4]
    420e:	4b0c      	ldr	r3, [pc, #48]	; (4240 <_processUrcPacket+0x74>)
    4210:	4798      	blx	r3
    4212:	e000      	b.n	4216 <_processUrcPacket+0x4a>
        pktStatus = CELLULAR_PKT_STATUS_BAD_PARAM;
    4214:	2406      	movs	r4, #6
}
    4216:	4620      	mov	r0, r4
    4218:	b003      	add	sp, #12
    421a:	bd30      	pop	{r4, r5, pc}
    421c:	000036f5 	.word	0x000036f5
    4220:	0000d0ec 	.word	0x0000d0ec
    4224:	0000b258 	.word	0x0000b258
    4228:	0000b058 	.word	0x0000b058
    422c:	00005bfd 	.word	0x00005bfd
    4230:	00008df1 	.word	0x00008df1
    4234:	0000d318 	.word	0x0000d318
    4238:	0000dcf4 	.word	0x0000dcf4
    423c:	00004151 	.word	0x00004151
    4240:	00006691 	.word	0x00006691

00004244 <_Cellular_AtcmdRequestTimeoutWithCallbackRaw>:
{
    4244:	b084      	sub	sp, #16
    4246:	b5f0      	push	{r4, r5, r6, r7, lr}
    4248:	b083      	sub	sp, #12
    424a:	4604      	mov	r4, r0
    424c:	a809      	add	r0, sp, #36	; 0x24
    424e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    CellularPktStatus_t respCode = CELLULAR_PKT_STATUS_OK;
    4252:	2300      	movs	r3, #0
    4254:	f88d 3007 	strb.w	r3, [sp, #7]
    if( atReq.pAtCmd == NULL )
    4258:	b361      	cbz	r1, 42b4 <_Cellular_AtcmdRequestTimeoutWithCallbackRaw+0x70>
    425a:	460d      	mov	r5, r1
        pContext->pktRespCB = atReq.respCallback;
    425c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    425e:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
        pContext->pPktUsrData = atReq.pData;
    4262:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4264:	f8c4 31e4 	str.w	r3, [r4, #484]	; 0x1e4
        pContext->PktUsrDataLen = ( uint16_t ) atReq.dataLen;
    4268:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    426c:	f8a4 31e8 	strh.w	r3, [r4, #488]	; 0x1e8
        pContext->pCurrentCmd = atReq.pAtCmd;
    4270:	f8c4 11ec 	str.w	r1, [r4, #492]	; 0x1ec
        pktStatus = _Cellular_PktioSendAtCmd( pContext, atReq.pAtCmd, atReq.atCmdType, atReq.pAtRspPrefix );
    4274:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4276:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
    427a:	4620      	mov	r0, r4
    427c:	4e2b      	ldr	r6, [pc, #172]	; (432c <_Cellular_AtcmdRequestTimeoutWithCallbackRaw+0xe8>)
    427e:	47b0      	blx	r6
        if( pktStatus != CELLULAR_PKT_STATUS_OK )
    4280:	4606      	mov	r6, r0
    4282:	b318      	cbz	r0, 42cc <_Cellular_AtcmdRequestTimeoutWithCallbackRaw+0x88>
            LogError( ( "Can't send req packet" ) );
    4284:	23e6      	movs	r3, #230	; 0xe6
    4286:	4a2a      	ldr	r2, [pc, #168]	; (4330 <_Cellular_AtcmdRequestTimeoutWithCallbackRaw+0xec>)
    4288:	492a      	ldr	r1, [pc, #168]	; (4334 <_Cellular_AtcmdRequestTimeoutWithCallbackRaw+0xf0>)
    428a:	482b      	ldr	r0, [pc, #172]	; (4338 <_Cellular_AtcmdRequestTimeoutWithCallbackRaw+0xf4>)
    428c:	4d2b      	ldr	r5, [pc, #172]	; (433c <_Cellular_AtcmdRequestTimeoutWithCallbackRaw+0xf8>)
    428e:	47a8      	blx	r5
    4290:	482b      	ldr	r0, [pc, #172]	; (4340 <_Cellular_AtcmdRequestTimeoutWithCallbackRaw+0xfc>)
    4292:	47a8      	blx	r5
    4294:	482b      	ldr	r0, [pc, #172]	; (4344 <_Cellular_AtcmdRequestTimeoutWithCallbackRaw+0x100>)
    4296:	47a8      	blx	r5
        pContext->PktioAtCmdType = CELLULAR_AT_NO_COMMAND;
    4298:	2306      	movs	r3, #6
    429a:	f884 3918 	strb.w	r3, [r4, #2328]	; 0x918
        pContext->pktRespCB = NULL;
    429e:	2300      	movs	r3, #0
    42a0:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
        pContext->pCurrentCmd = NULL;
    42a4:	f8c4 31ec 	str.w	r3, [r4, #492]	; 0x1ec
}
    42a8:	4630      	mov	r0, r6
    42aa:	b003      	add	sp, #12
    42ac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    42b0:	b004      	add	sp, #16
    42b2:	4770      	bx	lr
        LogError( ( "PKT_STATUS_BAD_REQUEST, null AT param" ) );
    42b4:	23d7      	movs	r3, #215	; 0xd7
    42b6:	4a1e      	ldr	r2, [pc, #120]	; (4330 <_Cellular_AtcmdRequestTimeoutWithCallbackRaw+0xec>)
    42b8:	491e      	ldr	r1, [pc, #120]	; (4334 <_Cellular_AtcmdRequestTimeoutWithCallbackRaw+0xf0>)
    42ba:	481f      	ldr	r0, [pc, #124]	; (4338 <_Cellular_AtcmdRequestTimeoutWithCallbackRaw+0xf4>)
    42bc:	4c1f      	ldr	r4, [pc, #124]	; (433c <_Cellular_AtcmdRequestTimeoutWithCallbackRaw+0xf8>)
    42be:	47a0      	blx	r4
    42c0:	4821      	ldr	r0, [pc, #132]	; (4348 <_Cellular_AtcmdRequestTimeoutWithCallbackRaw+0x104>)
    42c2:	47a0      	blx	r4
    42c4:	481f      	ldr	r0, [pc, #124]	; (4344 <_Cellular_AtcmdRequestTimeoutWithCallbackRaw+0x100>)
    42c6:	47a0      	blx	r4
        pktStatus = CELLULAR_PKT_STATUS_BAD_REQUEST;
    42c8:	2603      	movs	r6, #3
    42ca:	e7ed      	b.n	42a8 <_Cellular_AtcmdRequestTimeoutWithCallbackRaw+0x64>
            qRet = xQueueReceive( pContext->pktRespQueue, &respCode, pdMS_TO_TICKS( timeoutMS ) );
    42cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    42d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    42d2:	fb02 f203 	mul.w	r2, r2, r3
    42d6:	4b1d      	ldr	r3, [pc, #116]	; (434c <_Cellular_AtcmdRequestTimeoutWithCallbackRaw+0x108>)
    42d8:	fba3 3202 	umull	r3, r2, r3, r2
    42dc:	0992      	lsrs	r2, r2, #6
    42de:	f10d 0107 	add.w	r1, sp, #7
    42e2:	f8d4 01cc 	ldr.w	r0, [r4, #460]	; 0x1cc
    42e6:	4b1a      	ldr	r3, [pc, #104]	; (4350 <_Cellular_AtcmdRequestTimeoutWithCallbackRaw+0x10c>)
    42e8:	4798      	blx	r3
            if( qRet == pdTRUE )
    42ea:	2801      	cmp	r0, #1
    42ec:	d00d      	beq.n	430a <_Cellular_AtcmdRequestTimeoutWithCallbackRaw+0xc6>
                LogError( ( "pkt_recv status=%d, AT cmd %s timed out", pktStatus, atReq.pAtCmd ) );
    42ee:	23fb      	movs	r3, #251	; 0xfb
    42f0:	4a0f      	ldr	r2, [pc, #60]	; (4330 <_Cellular_AtcmdRequestTimeoutWithCallbackRaw+0xec>)
    42f2:	4910      	ldr	r1, [pc, #64]	; (4334 <_Cellular_AtcmdRequestTimeoutWithCallbackRaw+0xf0>)
    42f4:	4810      	ldr	r0, [pc, #64]	; (4338 <_Cellular_AtcmdRequestTimeoutWithCallbackRaw+0xf4>)
    42f6:	4e11      	ldr	r6, [pc, #68]	; (433c <_Cellular_AtcmdRequestTimeoutWithCallbackRaw+0xf8>)
    42f8:	47b0      	blx	r6
    42fa:	462a      	mov	r2, r5
    42fc:	2101      	movs	r1, #1
    42fe:	4815      	ldr	r0, [pc, #84]	; (4354 <_Cellular_AtcmdRequestTimeoutWithCallbackRaw+0x110>)
    4300:	47b0      	blx	r6
    4302:	4810      	ldr	r0, [pc, #64]	; (4344 <_Cellular_AtcmdRequestTimeoutWithCallbackRaw+0x100>)
    4304:	47b0      	blx	r6
                pktStatus = CELLULAR_PKT_STATUS_TIMED_OUT;
    4306:	2601      	movs	r6, #1
    4308:	e7c6      	b.n	4298 <_Cellular_AtcmdRequestTimeoutWithCallbackRaw+0x54>
                pktStatus = ( CellularPktStatus_t ) respCode;
    430a:	f89d 6007 	ldrb.w	r6, [sp, #7]
                if( pktStatus != CELLULAR_PKT_STATUS_OK )
    430e:	2e00      	cmp	r6, #0
    4310:	d0c2      	beq.n	4298 <_Cellular_AtcmdRequestTimeoutWithCallbackRaw+0x54>
                    LogError( ( "pkt_recv status=%d, error in AT cmd %s resp", pktStatus, atReq.pAtCmd ) );
    4312:	23f5      	movs	r3, #245	; 0xf5
    4314:	4a06      	ldr	r2, [pc, #24]	; (4330 <_Cellular_AtcmdRequestTimeoutWithCallbackRaw+0xec>)
    4316:	4907      	ldr	r1, [pc, #28]	; (4334 <_Cellular_AtcmdRequestTimeoutWithCallbackRaw+0xf0>)
    4318:	4807      	ldr	r0, [pc, #28]	; (4338 <_Cellular_AtcmdRequestTimeoutWithCallbackRaw+0xf4>)
    431a:	4f08      	ldr	r7, [pc, #32]	; (433c <_Cellular_AtcmdRequestTimeoutWithCallbackRaw+0xf8>)
    431c:	47b8      	blx	r7
    431e:	462a      	mov	r2, r5
    4320:	4631      	mov	r1, r6
    4322:	480d      	ldr	r0, [pc, #52]	; (4358 <_Cellular_AtcmdRequestTimeoutWithCallbackRaw+0x114>)
    4324:	47b8      	blx	r7
    4326:	4807      	ldr	r0, [pc, #28]	; (4344 <_Cellular_AtcmdRequestTimeoutWithCallbackRaw+0x100>)
    4328:	47b8      	blx	r7
    432a:	e7b5      	b.n	4298 <_Cellular_AtcmdRequestTimeoutWithCallbackRaw+0x54>
    432c:	000050fd 	.word	0x000050fd
    4330:	0000d100 	.word	0x0000d100
    4334:	0000b258 	.word	0x0000b258
    4338:	0000a188 	.word	0x0000a188
    433c:	00005bfd 	.word	0x00005bfd
    4340:	0000d368 	.word	0x0000d368
    4344:	0000dcf4 	.word	0x0000dcf4
    4348:	0000d340 	.word	0x0000d340
    434c:	10624dd3 	.word	0x10624dd3
    4350:	00006fad 	.word	0x00006fad
    4354:	0000d3ac 	.word	0x0000d3ac
    4358:	0000d380 	.word	0x0000d380

0000435c <_Cellular_PktHandlerCleanup>:

/*-----------------------------------------------------------*/

void _Cellular_PktHandlerCleanup( CellularContext_t * pContext )
{
    if( ( pContext != NULL ) && ( pContext->pktRespQueue != NULL ) )
    435c:	b188      	cbz	r0, 4382 <_Cellular_PktHandlerCleanup+0x26>
{
    435e:	b510      	push	{r4, lr}
    4360:	4604      	mov	r4, r0
    if( ( pContext != NULL ) && ( pContext->pktRespQueue != NULL ) )
    4362:	f8d0 31cc 	ldr.w	r3, [r0, #460]	; 0x1cc
    4366:	b15b      	cbz	r3, 4380 <_Cellular_PktHandlerCleanup+0x24>
    {
        /* Wait for response to finish. */
        _Cellular_PktHandlerAcquirePktRequestMutex( pContext );
    4368:	4b06      	ldr	r3, [pc, #24]	; (4384 <_Cellular_PktHandlerCleanup+0x28>)
    436a:	4798      	blx	r3
        /* This is platform dependent api. */
        /* coverity[misra_c_2012_directive_4_6_violation] */
        ( void ) vQueueDelete( pContext->pktRespQueue );
    436c:	f8d4 01cc 	ldr.w	r0, [r4, #460]	; 0x1cc
    4370:	4b05      	ldr	r3, [pc, #20]	; (4388 <_Cellular_PktHandlerCleanup+0x2c>)
    4372:	4798      	blx	r3
        pContext->pktRespQueue = NULL;
    4374:	2300      	movs	r3, #0
    4376:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
        _Cellular_PktHandlerReleasePktRequestMutex( pContext );
    437a:	4620      	mov	r0, r4
    437c:	4b03      	ldr	r3, [pc, #12]	; (438c <_Cellular_PktHandlerCleanup+0x30>)
    437e:	4798      	blx	r3
    4380:	bd10      	pop	{r4, pc}
    4382:	4770      	bx	lr
    4384:	00003f55 	.word	0x00003f55
    4388:	00007365 	.word	0x00007365
    438c:	00003f65 	.word	0x00003f65

00004390 <_Cellular_HandlePacket>:
                                            _atRespType_t atRespType,
                                            const void * pBuf )
{
    CellularPktStatus_t pktStatus = CELLULAR_PKT_STATUS_OK;

    if( pContext != NULL )
    4390:	b1d0      	cbz	r0, 43c8 <_Cellular_HandlePacket+0x38>
{
    4392:	b538      	push	{r3, r4, r5, lr}
    4394:	460c      	mov	r4, r1
    {
        switch( atRespType )
    4396:	b179      	cbz	r1, 43b8 <_Cellular_HandlePacket+0x28>
    4398:	2901      	cmp	r1, #1
    439a:	d011      	beq.n	43c0 <_Cellular_HandlePacket+0x30>
                pktStatus = _processUrcPacket( pContext, pBuf );
                break;

            default:
                pktStatus = CELLULAR_PKT_STATUS_BAD_PARAM;
                LogError( ( "_Cellular_HandlePacket Callback type (%d) error", atRespType ) );
    439c:	f240 2315 	movw	r3, #533	; 0x215
    43a0:	4a0a      	ldr	r2, [pc, #40]	; (43cc <_Cellular_HandlePacket+0x3c>)
    43a2:	490b      	ldr	r1, [pc, #44]	; (43d0 <_Cellular_HandlePacket+0x40>)
    43a4:	480b      	ldr	r0, [pc, #44]	; (43d4 <_Cellular_HandlePacket+0x44>)
    43a6:	4d0c      	ldr	r5, [pc, #48]	; (43d8 <_Cellular_HandlePacket+0x48>)
    43a8:	47a8      	blx	r5
    43aa:	4621      	mov	r1, r4
    43ac:	480b      	ldr	r0, [pc, #44]	; (43dc <_Cellular_HandlePacket+0x4c>)
    43ae:	47a8      	blx	r5
    43b0:	480b      	ldr	r0, [pc, #44]	; (43e0 <_Cellular_HandlePacket+0x50>)
    43b2:	47a8      	blx	r5
                pktStatus = CELLULAR_PKT_STATUS_BAD_PARAM;
    43b4:	2006      	movs	r0, #6
                break;
    43b6:	bd38      	pop	{r3, r4, r5, pc}
                pktStatus = _convertAndQueueRespPacket( pContext, pBuf );
    43b8:	4611      	mov	r1, r2
    43ba:	4b0a      	ldr	r3, [pc, #40]	; (43e4 <_Cellular_HandlePacket+0x54>)
    43bc:	4798      	blx	r3
                break;
    43be:	bd38      	pop	{r3, r4, r5, pc}
                pktStatus = _processUrcPacket( pContext, pBuf );
    43c0:	4611      	mov	r1, r2
    43c2:	4b09      	ldr	r3, [pc, #36]	; (43e8 <_Cellular_HandlePacket+0x58>)
    43c4:	4798      	blx	r3
                break;
    43c6:	bd38      	pop	{r3, r4, r5, pc}
        }
    }
    else
    {
        pktStatus = CELLULAR_PKT_STATUS_INVALID_HANDLE;
    43c8:	2008      	movs	r0, #8
    43ca:	4770      	bx	lr
    43cc:	0000d158 	.word	0x0000d158
    43d0:	0000b258 	.word	0x0000b258
    43d4:	0000a188 	.word	0x0000a188
    43d8:	00005bfd 	.word	0x00005bfd
    43dc:	0000d4e8 	.word	0x0000d4e8
    43e0:	0000dcf4 	.word	0x0000dcf4
    43e4:	00003f75 	.word	0x00003f75
    43e8:	000041cd 	.word	0x000041cd

000043ec <_Cellular_PktHandler_AtcmdRequestWithCallback>:
/*-----------------------------------------------------------*/

CellularPktStatus_t _Cellular_PktHandler_AtcmdRequestWithCallback( CellularContext_t * pContext,
                                                                   CellularAtReq_t atReq,
                                                                   uint32_t timeoutMS )
{
    43ec:	b084      	sub	sp, #16
    43ee:	b530      	push	{r4, r5, lr}
    43f0:	b085      	sub	sp, #20
    43f2:	ac09      	add	r4, sp, #36	; 0x24
    43f4:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    CellularPktStatus_t pktStatus = CELLULAR_PKT_STATUS_OK;

    if( pContext == NULL )
    43f8:	b1c0      	cbz	r0, 442c <_Cellular_PktHandler_AtcmdRequestWithCallback+0x40>
    43fa:	4604      	mov	r4, r0
        LogError( ( "_Cellular_TimeoutAtcmdRequestWithCallback : Invalid cellular context" ) );
        pktStatus = CELLULAR_PKT_STATUS_INVALID_HANDLE;
    }
    else
    {
        _Cellular_PktHandlerAcquirePktRequestMutex( pContext );
    43fc:	4b12      	ldr	r3, [pc, #72]	; (4448 <_Cellular_PktHandler_AtcmdRequestWithCallback+0x5c>)
    43fe:	4798      	blx	r3
        pktStatus = _Cellular_AtcmdRequestTimeoutWithCallbackRaw( pContext, atReq, timeoutMS );
    4400:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4402:	9303      	str	r3, [sp, #12]
    4404:	ab0c      	add	r3, sp, #48	; 0x30
    4406:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    440a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
    440e:	ab09      	add	r3, sp, #36	; 0x24
    4410:	cb0e      	ldmia	r3, {r1, r2, r3}
    4412:	4620      	mov	r0, r4
    4414:	4d0d      	ldr	r5, [pc, #52]	; (444c <_Cellular_PktHandler_AtcmdRequestWithCallback+0x60>)
    4416:	47a8      	blx	r5
    4418:	4605      	mov	r5, r0
        _Cellular_PktHandlerReleasePktRequestMutex( pContext );
    441a:	4620      	mov	r0, r4
    441c:	4b0c      	ldr	r3, [pc, #48]	; (4450 <_Cellular_PktHandler_AtcmdRequestWithCallback+0x64>)
    441e:	4798      	blx	r3
    }

    return pktStatus;
}
    4420:	4628      	mov	r0, r5
    4422:	b005      	add	sp, #20
    4424:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    4428:	b004      	add	sp, #16
    442a:	4770      	bx	lr
        LogError( ( "_Cellular_TimeoutAtcmdRequestWithCallback : Invalid cellular context" ) );
    442c:	f240 232b 	movw	r3, #555	; 0x22b
    4430:	4a08      	ldr	r2, [pc, #32]	; (4454 <_Cellular_PktHandler_AtcmdRequestWithCallback+0x68>)
    4432:	4909      	ldr	r1, [pc, #36]	; (4458 <_Cellular_PktHandler_AtcmdRequestWithCallback+0x6c>)
    4434:	4809      	ldr	r0, [pc, #36]	; (445c <_Cellular_PktHandler_AtcmdRequestWithCallback+0x70>)
    4436:	4c0a      	ldr	r4, [pc, #40]	; (4460 <_Cellular_PktHandler_AtcmdRequestWithCallback+0x74>)
    4438:	47a0      	blx	r4
    443a:	480a      	ldr	r0, [pc, #40]	; (4464 <_Cellular_PktHandler_AtcmdRequestWithCallback+0x78>)
    443c:	47a0      	blx	r4
    443e:	480a      	ldr	r0, [pc, #40]	; (4468 <_Cellular_PktHandler_AtcmdRequestWithCallback+0x7c>)
    4440:	47a0      	blx	r4
        pktStatus = CELLULAR_PKT_STATUS_INVALID_HANDLE;
    4442:	2508      	movs	r5, #8
    4444:	e7ec      	b.n	4420 <_Cellular_PktHandler_AtcmdRequestWithCallback+0x34>
    4446:	bf00      	nop
    4448:	00003f55 	.word	0x00003f55
    444c:	00004245 	.word	0x00004245
    4450:	00003f65 	.word	0x00003f65
    4454:	0000d170 	.word	0x0000d170
    4458:	0000b258 	.word	0x0000b258
    445c:	0000a188 	.word	0x0000a188
    4460:	00005bfd 	.word	0x00005bfd
    4464:	0000d518 	.word	0x0000d518
    4468:	0000dcf4 	.word	0x0000dcf4

0000446c <_Cellular_PktHandlerInit>:

CellularPktStatus_t _Cellular_PktHandlerInit( CellularContext_t * pContext )
{
    CellularPktStatus_t pktStatus = CELLULAR_PKT_STATUS_OK;

    if( pContext != NULL )
    446c:	b158      	cbz	r0, 4486 <_Cellular_PktHandlerInit+0x1a>
{
    446e:	b510      	push	{r4, lr}
    4470:	4604      	mov	r4, r0
    {
        /* Create the response queue which is used to post reponses to the sender. */
        /* This is platform dependent api. */
        /* coverity[misra_c_2012_directive_4_6_violation] */
        /* coverity[misra_c_2012_rule_11_4_violation] */
        pContext->pktRespQueue = xQueueCreate( 1, ( uint32_t ) sizeof( CellularPktStatus_t ) );
    4472:	2200      	movs	r2, #0
    4474:	2101      	movs	r1, #1
    4476:	4608      	mov	r0, r1
    4478:	4b05      	ldr	r3, [pc, #20]	; (4490 <_Cellular_PktHandlerInit+0x24>)
    447a:	4798      	blx	r3
    447c:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc

        if( pContext->pktRespQueue == NULL )
    4480:	b118      	cbz	r0, 448a <_Cellular_PktHandlerInit+0x1e>
    CellularPktStatus_t pktStatus = CELLULAR_PKT_STATUS_OK;
    4482:	2000      	movs	r0, #0
    4484:	bd10      	pop	{r4, pc}
            pktStatus = CELLULAR_PKT_STATUS_FAILURE;
        }
    }
    else
    {
        pktStatus = CELLULAR_PKT_STATUS_FAILURE;
    4486:	2002      	movs	r0, #2
    4488:	4770      	bx	lr
            pktStatus = CELLULAR_PKT_STATUS_FAILURE;
    448a:	2002      	movs	r0, #2
    }

    return pktStatus;
}
    448c:	bd10      	pop	{r4, pc}
    448e:	bf00      	nop
    4490:	00006aa9 	.word	0x00006aa9

00004494 <_Cellular_AtParseInit>:
    const CellularAtParseTokenMap_t * pTokenMap = NULL;
    uint32_t tokenMapSize = 0;
    int32_t result = 0;
    CellularPktStatus_t pktStatus = CELLULAR_PKT_STATUS_OK;

    if( ( pContext != NULL ) && ( pContext->tokenTable.pCellularUrcHandlerTable != NULL ) &&
    4494:	2800      	cmp	r0, #0
    4496:	d058      	beq.n	454a <_Cellular_AtParseInit+0xb6>
{
    4498:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    449c:	b083      	sub	sp, #12
    if( ( pContext != NULL ) && ( pContext->tokenTable.pCellularUrcHandlerTable != NULL ) &&
    449e:	f8d0 50f4 	ldr.w	r5, [r0, #244]	; 0xf4
    44a2:	2d00      	cmp	r5, #0
    44a4:	d053      	beq.n	454e <_Cellular_AtParseInit+0xba>
        ( pContext->tokenTable.cellularPrefixToParserMapSize > 0U ) )
    44a6:	f8d0 70f8 	ldr.w	r7, [r0, #248]	; 0xf8
    if( ( pContext != NULL ) && ( pContext->tokenTable.pCellularUrcHandlerTable != NULL ) &&
    44aa:	bb3f      	cbnz	r7, 44fc <_Cellular_AtParseInit+0x68>
            LogDebug( ( "Callbacks setup for %u : %s", i, pTokenMap[ i ].pStrValue ) );
        }
    }
    else
    {
        pktStatus = CELLULAR_PKT_STATUS_INVALID_HANDLE;
    44ac:	2008      	movs	r0, #8
    }

    return pktStatus;
}
    44ae:	b003      	add	sp, #12
    44b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                LogError( ( "AtParseFail for %lu: %d %s %s", i, (int)result,
    44b4:	f240 23df 	movw	r3, #735	; 0x2df
    44b8:	4a26      	ldr	r2, [pc, #152]	; (4554 <_Cellular_AtParseInit+0xc0>)
    44ba:	4927      	ldr	r1, [pc, #156]	; (4558 <_Cellular_AtParseInit+0xc4>)
    44bc:	4827      	ldr	r0, [pc, #156]	; (455c <_Cellular_AtParseInit+0xc8>)
    44be:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 456c <_Cellular_AtParseInit+0xd8>
    44c2:	47c0      	blx	r8
    44c4:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
    44c8:	f855 2036 	ldr.w	r2, [r5, r6, lsl #3]
    44cc:	9200      	str	r2, [sp, #0]
    44ce:	464a      	mov	r2, r9
    44d0:	4621      	mov	r1, r4
    44d2:	4823      	ldr	r0, [pc, #140]	; (4560 <_Cellular_AtParseInit+0xcc>)
    44d4:	47c0      	blx	r8
    44d6:	4823      	ldr	r0, [pc, #140]	; (4564 <_Cellular_AtParseInit+0xd0>)
    44d8:	47c0      	blx	r8
                finit = false;
    44da:	f04f 0800 	mov.w	r8, #0
    44de:	4634      	mov	r4, r6
        for( i = 0; i < ( tokenMapSize - 1U ); i++ )
    44e0:	1e7b      	subs	r3, r7, #1
    44e2:	429c      	cmp	r4, r3
    44e4:	d20e      	bcs.n	4504 <_Cellular_AtParseInit+0x70>
            result = _sortCompareFunc( &pTokenMap[ i ], &pTokenMap[ i + 1U ] );
    44e6:	1c66      	adds	r6, r4, #1
    44e8:	eb05 01c6 	add.w	r1, r5, r6, lsl #3
    44ec:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    44f0:	4b1d      	ldr	r3, [pc, #116]	; (4568 <_Cellular_AtParseInit+0xd4>)
    44f2:	4798      	blx	r3
            if( result >= 0 )
    44f4:	f1b0 0900 	subs.w	r9, r0, #0
    44f8:	dadc      	bge.n	44b4 <_Cellular_AtParseInit+0x20>
    44fa:	e7f0      	b.n	44de <_Cellular_AtParseInit+0x4a>
    44fc:	f04f 0801 	mov.w	r8, #1
    4500:	2400      	movs	r4, #0
    4502:	e7ed      	b.n	44e0 <_Cellular_AtParseInit+0x4c>
        if( finit != true )
    4504:	f1b8 0f00 	cmp.w	r8, #0
    4508:	d117      	bne.n	453a <_Cellular_AtParseInit+0xa6>
            LogError( ( "AtParseFail URC token table is not sorted" ) );
    450a:	f240 23e7 	movw	r3, #743	; 0x2e7
    450e:	4a11      	ldr	r2, [pc, #68]	; (4554 <_Cellular_AtParseInit+0xc0>)
    4510:	4911      	ldr	r1, [pc, #68]	; (4558 <_Cellular_AtParseInit+0xc4>)
    4512:	4812      	ldr	r0, [pc, #72]	; (455c <_Cellular_AtParseInit+0xc8>)
    4514:	4c15      	ldr	r4, [pc, #84]	; (456c <_Cellular_AtParseInit+0xd8>)
    4516:	47a0      	blx	r4
    4518:	4815      	ldr	r0, [pc, #84]	; (4570 <_Cellular_AtParseInit+0xdc>)
    451a:	47a0      	blx	r4
    451c:	4811      	ldr	r0, [pc, #68]	; (4564 <_Cellular_AtParseInit+0xd0>)
    451e:	47a0      	blx	r4
            pktStatus = CELLULAR_PKT_STATUS_BAD_PARAM;
    4520:	2006      	movs	r0, #6
        configASSERT( finit == true );
    4522:	f1b8 0f00 	cmp.w	r8, #0
    4526:	d10e      	bne.n	4546 <_Cellular_AtParseInit+0xb2>
    4528:	f04f 0380 	mov.w	r3, #128	; 0x80
    452c:	f383 8811 	msr	BASEPRI, r3
    4530:	f3bf 8f6f 	isb	sy
    4534:	f3bf 8f4f 	dsb	sy
    4538:	e7fe      	b.n	4538 <_Cellular_AtParseInit+0xa4>
    CellularPktStatus_t pktStatus = CELLULAR_PKT_STATUS_OK;
    453a:	2000      	movs	r0, #0
    453c:	e7f1      	b.n	4522 <_Cellular_AtParseInit+0x8e>
        for( i = 0; i < tokenMapSize; i++ )
    453e:	3301      	adds	r3, #1
    4540:	42bb      	cmp	r3, r7
    4542:	d3fc      	bcc.n	453e <_Cellular_AtParseInit+0xaa>
    4544:	e7b3      	b.n	44ae <_Cellular_AtParseInit+0x1a>
    4546:	2300      	movs	r3, #0
    4548:	e7fa      	b.n	4540 <_Cellular_AtParseInit+0xac>
        pktStatus = CELLULAR_PKT_STATUS_INVALID_HANDLE;
    454a:	2008      	movs	r0, #8
    454c:	4770      	bx	lr
    454e:	2008      	movs	r0, #8
    4550:	e7ad      	b.n	44ae <_Cellular_AtParseInit+0x1a>
    4552:	bf00      	nop
    4554:	0000d218 	.word	0x0000d218
    4558:	0000b258 	.word	0x0000b258
    455c:	0000a188 	.word	0x0000a188
    4560:	0000d648 	.word	0x0000d648
    4564:	0000dcf4 	.word	0x0000dcf4
    4568:	00004085 	.word	0x00004085
    456c:	00005bfd 	.word	0x00005bfd
    4570:	0000d668 	.word	0x0000d668

00004574 <_Cellular_CreatePktRequestMutex>:

bool _Cellular_CreatePktRequestMutex( CellularContext_t * pContext )
{
    bool status = false;

    if( pContext != NULL )
    4574:	b130      	cbz	r0, 4584 <_Cellular_CreatePktRequestMutex+0x10>
{
    4576:	b508      	push	{r3, lr}
    {
        status = PlatformMutex_Create( &pContext->pktRequestMutex, false );
    4578:	2100      	movs	r1, #0
    457a:	f500 708e 	add.w	r0, r0, #284	; 0x11c
    457e:	4b02      	ldr	r3, [pc, #8]	; (4588 <_Cellular_CreatePktRequestMutex+0x14>)
    4580:	4798      	blx	r3
    4582:	bd08      	pop	{r3, pc}
    bool status = false;
    4584:	2000      	movs	r0, #0
    4586:	4770      	bx	lr
    4588:	00005485 	.word	0x00005485

0000458c <_Cellular_CreatePktResponseMutex>:

bool _Cellular_CreatePktResponseMutex( CellularContext_t * pContext )
{
    bool status = false;

    if( pContext != NULL )
    458c:	b130      	cbz	r0, 459c <_Cellular_CreatePktResponseMutex+0x10>
{
    458e:	b508      	push	{r3, lr}
    {
        status = PlatformMutex_Create( &pContext->PktRespMutex, false );
    4590:	2100      	movs	r1, #0
    4592:	f500 70ba 	add.w	r0, r0, #372	; 0x174
    4596:	4b02      	ldr	r3, [pc, #8]	; (45a0 <_Cellular_CreatePktResponseMutex+0x14>)
    4598:	4798      	blx	r3
    459a:	bd08      	pop	{r3, pc}
    bool status = false;
    459c:	2000      	movs	r0, #0
    459e:	4770      	bx	lr
    45a0:	00005485 	.word	0x00005485

000045a4 <_Cellular_DestroyPktRequestMutex>:

/*-----------------------------------------------------------*/

void _Cellular_DestroyPktRequestMutex( CellularContext_t * pContext )
{
    if( pContext != NULL )
    45a4:	b128      	cbz	r0, 45b2 <_Cellular_DestroyPktRequestMutex+0xe>
{
    45a6:	b508      	push	{r3, lr}
    {
        PlatformMutex_Destroy( &pContext->pktRequestMutex );
    45a8:	f500 708e 	add.w	r0, r0, #284	; 0x11c
    45ac:	4b01      	ldr	r3, [pc, #4]	; (45b4 <_Cellular_DestroyPktRequestMutex+0x10>)
    45ae:	4798      	blx	r3
    45b0:	bd08      	pop	{r3, pc}
    45b2:	4770      	bx	lr
    45b4:	000054c9 	.word	0x000054c9

000045b8 <_Cellular_DestroyPktResponseMutex>:

/*-----------------------------------------------------------*/

void _Cellular_DestroyPktResponseMutex( CellularContext_t * pContext )
{
    if( pContext != NULL )
    45b8:	b128      	cbz	r0, 45c6 <_Cellular_DestroyPktResponseMutex+0xe>
{
    45ba:	b508      	push	{r3, lr}
    {
        PlatformMutex_Destroy( &pContext->PktRespMutex );
    45bc:	f500 70ba 	add.w	r0, r0, #372	; 0x174
    45c0:	4b01      	ldr	r3, [pc, #4]	; (45c8 <_Cellular_DestroyPktResponseMutex+0x10>)
    45c2:	4798      	blx	r3
    45c4:	bd08      	pop	{r3, pc}
    45c6:	4770      	bx	lr
    45c8:	000054c9 	.word	0x000054c9

000045cc <_convertCharPtrDistance>:
                                         const char * pStartPtr )
{
    int32_t ptrDistance = ( int32_t ) ( pEndPtr - pStartPtr );

    return ( uint32_t ) ptrDistance;
}
    45cc:	1a40      	subs	r0, r0, r1
    45ce:	4770      	bx	lr

000045d0 <_findLineInStream>:
    bool keepProcess = true;
    char * pTempLine = pLine;
    uint32_t i = 0;

    /* Handle the complete line here. GetMsgType needs a complete Line or longer then maximum prefix line. */
    for( i = 0; i < bytesRead; i++ )
    45d0:	2300      	movs	r3, #0
    45d2:	4293      	cmp	r3, r2
    45d4:	d217      	bcs.n	4606 <_findLineInStream+0x36>
{
    45d6:	b410      	push	{r4}
    {
        if( ( pTempLine[ i ] == '\0' ) || ( pTempLine[ i ] == '\r' ) || ( pTempLine[ i ] == '\n' ) )
    45d8:	5ccc      	ldrb	r4, [r1, r3]
    45da:	b134      	cbz	r4, 45ea <_findLineInStream+0x1a>
    45dc:	2c0d      	cmp	r4, #13
    45de:	d004      	beq.n	45ea <_findLineInStream+0x1a>
    45e0:	2c0a      	cmp	r4, #10
    45e2:	d002      	beq.n	45ea <_findLineInStream+0x1a>
    for( i = 0; i < bytesRead; i++ )
    45e4:	3301      	adds	r3, #1
    45e6:	4293      	cmp	r3, r2
    45e8:	d3f6      	bcc.n	45d8 <_findLineInStream+0x8>
            break;
        }
    }

    /* A complete Line is found. */
    if( i < bytesRead )
    45ea:	4293      	cmp	r3, r2
    45ec:	d307      	bcc.n	45fe <_findLineInStream+0x2e>
        pTempLine[ i ] = '\0';
    }
    else
    {
        LogDebug( ( "%p is not a complete line", pTempLine ) );
        pContext->pPktioReadPtr = pTempLine;
    45ee:	f8c0 1910 	str.w	r1, [r0, #2320]	; 0x910
        pContext->partialDataRcvdLen = bytesRead;
    45f2:	f8c0 2920 	str.w	r2, [r0, #2336]	; 0x920
        keepProcess = false;
    45f6:	2000      	movs	r0, #0
    }

    return keepProcess;
}
    45f8:	f85d 4b04 	ldr.w	r4, [sp], #4
    45fc:	4770      	bx	lr
        pTempLine[ i ] = '\0';
    45fe:	2200      	movs	r2, #0
    4600:	54ca      	strb	r2, [r1, r3]
    bool keepProcess = true;
    4602:	2001      	movs	r0, #1
    4604:	e7f8      	b.n	45f8 <_findLineInStream+0x28>
    if( i < bytesRead )
    4606:	4293      	cmp	r3, r2
    4608:	d305      	bcc.n	4616 <_findLineInStream+0x46>
        pContext->pPktioReadPtr = pTempLine;
    460a:	f8c0 1910 	str.w	r1, [r0, #2320]	; 0x910
        pContext->partialDataRcvdLen = bytesRead;
    460e:	f8c0 2920 	str.w	r2, [r0, #2336]	; 0x920
        keepProcess = false;
    4612:	2000      	movs	r0, #0
    4614:	4770      	bx	lr
        pTempLine[ i ] = '\0';
    4616:	2200      	movs	r2, #0
    4618:	54ca      	strb	r2, [r1, r3]
    bool keepProcess = true;
    461a:	2001      	movs	r0, #1
    461c:	4770      	bx	lr
	...

00004620 <_preprocessLine>:

static bool _preprocessLine( CellularContext_t * pContext,
                             char * pLine,
                             uint32_t * pBytesRead,
                             char ** ppStartOfData )
{
    4620:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4624:	b083      	sub	sp, #12
    char * pTempLine = pLine;
    bool keepProcess = true;
    CellularPktStatus_t pktStatus = CELLULAR_PKT_STATUS_OK;

    /* The line only has change line. */
    if( *pBytesRead <= 0U )
    4626:	6816      	ldr	r6, [r2, #0]
    4628:	b19e      	cbz	r6, 4652 <_preprocessLine+0x32>
    462a:	4698      	mov	r8, r3
    462c:	4615      	mov	r5, r2
    462e:	460f      	mov	r7, r1
    4630:	4604      	mov	r4, r0
        pContext->partialDataRcvdLen = 0;
        keepProcess = false;
    }
    else
    {
        if( pContext->pktDataSendPrefixCB != NULL )
    4632:	f8d0 31dc 	ldr.w	r3, [r0, #476]	; 0x1dc
    4636:	b323      	cbz	r3, 4682 <_preprocessLine+0x62>
        {
            /* Check if the AT command response is the data send prefix.
             * Data send prefix is an SRC success token for data send AT commmand.
             * It is used to indicate modem can receive data now. */
            /* This function may fix the data stream if the data send prefix is not a line. */
            pktStatus = pContext->pktDataSendPrefixCB( pContext->pDataSendPrefixCBContext, pTempLine, pBytesRead );
    4638:	f8d0 01e0 	ldr.w	r0, [r0, #480]	; 0x1e0
    463c:	4798      	blx	r3

            if( pktStatus != CELLULAR_PKT_STATUS_OK )
    463e:	4606      	mov	r6, r0
    4640:	b980      	cbnz	r0, 4664 <_preprocessLine+0x44>
    bool keepProcess = true;
    4642:	2001      	movs	r0, #1
        {
            /* This is the case AT command don't need data send or data receive prefix. */
            /* MISRA empty else. */
        }

        if( keepProcess == true )
    4644:	b158      	cbz	r0, 465e <_preprocessLine+0x3e>
        {
            keepProcess = _findLineInStream( pContext, pTempLine, *pBytesRead );
    4646:	682a      	ldr	r2, [r5, #0]
    4648:	4639      	mov	r1, r7
    464a:	4620      	mov	r0, r4
    464c:	4b2a      	ldr	r3, [pc, #168]	; (46f8 <_preprocessLine+0xd8>)
    464e:	4798      	blx	r3
    4650:	e005      	b.n	465e <_preprocessLine+0x3e>
        pContext->pPktioReadPtr = pTempLine;
    4652:	f8c0 1910 	str.w	r1, [r0, #2320]	; 0x910
        pContext->partialDataRcvdLen = 0;
    4656:	2300      	movs	r3, #0
    4658:	f8c0 3920 	str.w	r3, [r0, #2336]	; 0x920
        keepProcess = false;
    465c:	4618      	mov	r0, r3
        }
    }

    return keepProcess;
}
    465e:	b003      	add	sp, #12
    4660:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                LogError( ( "pktDataSendPrefixCB returns error %d", pktStatus ) );
    4664:	f44f 7346 	mov.w	r3, #792	; 0x318
    4668:	4a24      	ldr	r2, [pc, #144]	; (46fc <_preprocessLine+0xdc>)
    466a:	4925      	ldr	r1, [pc, #148]	; (4700 <_preprocessLine+0xe0>)
    466c:	4825      	ldr	r0, [pc, #148]	; (4704 <_preprocessLine+0xe4>)
    466e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 4710 <_preprocessLine+0xf0>
    4672:	47c0      	blx	r8
    4674:	4631      	mov	r1, r6
    4676:	4824      	ldr	r0, [pc, #144]	; (4708 <_preprocessLine+0xe8>)
    4678:	47c0      	blx	r8
    467a:	4824      	ldr	r0, [pc, #144]	; (470c <_preprocessLine+0xec>)
    467c:	47c0      	blx	r8
                keepProcess = false;
    467e:	2000      	movs	r0, #0
    4680:	e7e0      	b.n	4644 <_preprocessLine+0x24>
        else if( pContext->pktDataPrefixCB != NULL )
    4682:	f8d0 91d4 	ldr.w	r9, [r0, #468]	; 0x1d4
    4686:	f1b9 0f00 	cmp.w	r9, #0
    468a:	d031      	beq.n	46f0 <_preprocessLine+0xd0>
            pktStatus = pContext->pktDataPrefixCB( pContext->pDataPrefixCBContext,
    468c:	f600 131c 	addw	r3, r0, #2332	; 0x91c
    4690:	9300      	str	r3, [sp, #0]
    4692:	4643      	mov	r3, r8
    4694:	4632      	mov	r2, r6
    4696:	f8d0 01d8 	ldr.w	r0, [r0, #472]	; 0x1d8
    469a:	47c8      	blx	r9
            if( pktStatus == CELLULAR_PKT_STATUS_OK )
    469c:	4681      	mov	r9, r0
    469e:	b980      	cbnz	r0, 46c2 <_preprocessLine+0xa2>
                if( pContext->dataLength > 0U )
    46a0:	f8d4 391c 	ldr.w	r3, [r4, #2332]	; 0x91c
    46a4:	b333      	cbz	r3, 46f4 <_preprocessLine+0xd4>
                    configASSERT( ppStartOfData != NULL );
    46a6:	f1b8 0f00 	cmp.w	r8, #0
    46aa:	d001      	beq.n	46b0 <_preprocessLine+0x90>
    bool keepProcess = true;
    46ac:	2001      	movs	r0, #1
    46ae:	e7c9      	b.n	4644 <_preprocessLine+0x24>
    46b0:	f04f 0380 	mov.w	r3, #128	; 0x80
    46b4:	f383 8811 	msr	BASEPRI, r3
    46b8:	f3bf 8f6f 	isb	sy
    46bc:	f3bf 8f4f 	dsb	sy
    46c0:	e7fe      	b.n	46c0 <_preprocessLine+0xa0>
            else if( pktStatus == CELLULAR_PKT_STATUS_SIZE_MISMATCH )
    46c2:	2805      	cmp	r0, #5
    46c4:	d00d      	beq.n	46e2 <_preprocessLine+0xc2>
                LogError( ( "pktDataPrefixCB returns error %d", pktStatus ) );
    46c6:	f240 333b 	movw	r3, #827	; 0x33b
    46ca:	4a0c      	ldr	r2, [pc, #48]	; (46fc <_preprocessLine+0xdc>)
    46cc:	490c      	ldr	r1, [pc, #48]	; (4700 <_preprocessLine+0xe0>)
    46ce:	480d      	ldr	r0, [pc, #52]	; (4704 <_preprocessLine+0xe4>)
    46d0:	4e0f      	ldr	r6, [pc, #60]	; (4710 <_preprocessLine+0xf0>)
    46d2:	47b0      	blx	r6
    46d4:	4649      	mov	r1, r9
    46d6:	480f      	ldr	r0, [pc, #60]	; (4714 <_preprocessLine+0xf4>)
    46d8:	47b0      	blx	r6
    46da:	480c      	ldr	r0, [pc, #48]	; (470c <_preprocessLine+0xec>)
    46dc:	47b0      	blx	r6
                keepProcess = false;
    46de:	2000      	movs	r0, #0
    46e0:	e7b0      	b.n	4644 <_preprocessLine+0x24>
                pContext->pPktioReadPtr = pTempLine;
    46e2:	f8c4 7910 	str.w	r7, [r4, #2320]	; 0x910
                pContext->partialDataRcvdLen = *pBytesRead;
    46e6:	682b      	ldr	r3, [r5, #0]
    46e8:	f8c4 3920 	str.w	r3, [r4, #2336]	; 0x920
                keepProcess = false;
    46ec:	2000      	movs	r0, #0
    46ee:	e7a9      	b.n	4644 <_preprocessLine+0x24>
    bool keepProcess = true;
    46f0:	2001      	movs	r0, #1
    46f2:	e7a7      	b.n	4644 <_preprocessLine+0x24>
    46f4:	2001      	movs	r0, #1
    46f6:	e7a5      	b.n	4644 <_preprocessLine+0x24>
    46f8:	000045d1 	.word	0x000045d1
    46fc:	0000d694 	.word	0x0000d694
    4700:	0000b258 	.word	0x0000b258
    4704:	0000a188 	.word	0x0000a188
    4708:	0000d75c 	.word	0x0000d75c
    470c:	0000dcf4 	.word	0x0000dcf4
    4710:	00005bfd 	.word	0x00005bfd
    4714:	0000d784 	.word	0x0000d784

00004718 <_PktioInitProcessReadThreadStatus>:
}

/*-----------------------------------------------------------*/

static void _PktioInitProcessReadThreadStatus( CellularContext_t * pContext )
{
    4718:	b530      	push	{r4, r5, lr}
    471a:	b083      	sub	sp, #12
    471c:	4604      	mov	r4, r0
    PlatformEventGroup_EventBits uxBits = 0;

    uxBits = ( PlatformEventGroup_EventBits ) PlatformEventGroup_WaitBits( ( PlatformEventGroupHandle_t ) pContext->pPktioCommEvent,
    471e:	f04f 33ff 	mov.w	r3, #4294967295
    4722:	9300      	str	r3, [sp, #0]
    4724:	2300      	movs	r3, #0
    4726:	2201      	movs	r2, #1
    4728:	2105      	movs	r1, #5
    472a:	f8d0 01f8 	ldr.w	r0, [r0, #504]	; 0x1f8
    472e:	4d05      	ldr	r5, [pc, #20]	; (4744 <_PktioInitProcessReadThreadStatus+0x2c>)
    4730:	47a8      	blx	r5
                                                                           ( ( PlatformEventGroup_EventBits ) PKTIO_EVT_MASK_STARTED | ( PlatformEventGroup_EventBits ) PKTIO_EVT_MASK_ABORTED ),
                                                                           pdTRUE,
                                                                           pdFALSE,
                                                                           ( ( PlatformTickType ) ~( 0UL ) ) );

    if( ( uxBits & ( PlatformEventGroup_EventBits ) PKTIO_EVT_MASK_ABORTED ) != ( PlatformEventGroup_EventBits ) PKTIO_EVT_MASK_ABORTED )
    4732:	f010 0f04 	tst.w	r0, #4
    4736:	d102      	bne.n	473e <_PktioInitProcessReadThreadStatus+0x26>
    {
        pContext->bPktioUp = true;
    4738:	2301      	movs	r3, #1
    473a:	f884 31f0 	strb.w	r3, [r4, #496]	; 0x1f0
    }
}
    473e:	b003      	add	sp, #12
    4740:	bd30      	pop	{r4, r5, pc}
    4742:	bf00      	nop
    4744:	00005df9 	.word	0x00005df9

00004748 <_Cellular_PktRxCallBack>:
{
    4748:	b500      	push	{lr}
    474a:	b083      	sub	sp, #12
    BaseType_t xHigherPriorityTaskWoken = pdFALSE, xResult = pdFALSE;
    474c:	2300      	movs	r3, #0
    474e:	9301      	str	r3, [sp, #4]
    if( pContext->pPktioCommEvent == NULL )
    4750:	f8d0 01f8 	ldr.w	r0, [r0, #504]	; 0x1f8
    4754:	b170      	cbz	r0, 4774 <_Cellular_PktRxCallBack+0x2c>
        xResult = ( BaseType_t ) PlatformEventGroup_SetBitsFromISR( ( PlatformEventGroupHandle_t ) pContext->pPktioCommEvent,
    4756:	aa01      	add	r2, sp, #4
    4758:	2108      	movs	r1, #8
    475a:	4b08      	ldr	r3, [pc, #32]	; (477c <_Cellular_PktRxCallBack+0x34>)
    475c:	4798      	blx	r3
        if( xResult == pdPASS )
    475e:	2801      	cmp	r0, #1
    4760:	d001      	beq.n	4766 <_Cellular_PktRxCallBack+0x1e>
            retComm = IOT_COMM_INTERFACE_FAILURE;
    4762:	2001      	movs	r0, #1
    4764:	e007      	b.n	4776 <_Cellular_PktRxCallBack+0x2e>
            if( xHigherPriorityTaskWoken == pdTRUE )
    4766:	9b01      	ldr	r3, [sp, #4]
    4768:	2b01      	cmp	r3, #1
    476a:	d001      	beq.n	4770 <_Cellular_PktRxCallBack+0x28>
                retComm = IOT_COMM_INTERFACE_BUSY;
    476c:	2006      	movs	r0, #6
    476e:	e002      	b.n	4776 <_Cellular_PktRxCallBack+0x2e>
                retComm = IOT_COMM_INTERFACE_SUCCESS;
    4770:	2000      	movs	r0, #0
    4772:	e000      	b.n	4776 <_Cellular_PktRxCallBack+0x2e>
        retComm = IOT_COMM_INTERFACE_BAD_PARAMETER;
    4774:	2002      	movs	r0, #2
}
    4776:	b003      	add	sp, #12
    4778:	f85d fb04 	ldr.w	pc, [sp], #4
    477c:	0000608d 	.word	0x0000608d

00004780 <_Cellular_AtResponseFree>:
    if( pResp != NULL )
    4780:	b168      	cbz	r0, 479e <_Cellular_AtResponseFree+0x1e>
{
    4782:	b538      	push	{r3, r4, r5, lr}
    4784:	4605      	mov	r5, r0
        pCurrLine = pResp->pItm;
    4786:	6840      	ldr	r0, [r0, #4]
        while( pCurrLine != NULL )
    4788:	e003      	b.n	4792 <_Cellular_AtResponseFree+0x12>
            pCurrLine = pCurrLine->pNext;
    478a:	6804      	ldr	r4, [r0, #0]
            Platform_Free( pToFree );
    478c:	4b04      	ldr	r3, [pc, #16]	; (47a0 <_Cellular_AtResponseFree+0x20>)
    478e:	4798      	blx	r3
            pCurrLine = pCurrLine->pNext;
    4790:	4620      	mov	r0, r4
        while( pCurrLine != NULL )
    4792:	2800      	cmp	r0, #0
    4794:	d1f9      	bne.n	478a <_Cellular_AtResponseFree+0xa>
        Platform_Free( pResp );
    4796:	4628      	mov	r0, r5
    4798:	4b01      	ldr	r3, [pc, #4]	; (47a0 <_Cellular_AtResponseFree+0x20>)
    479a:	4798      	blx	r3
    479c:	bd38      	pop	{r3, r4, r5, pc}
    479e:	4770      	bx	lr
    47a0:	00006691 	.word	0x00006691

000047a4 <_handleLeftoverBuffer>:
{
    47a4:	b538      	push	{r3, r4, r5, lr}
    47a6:	4604      	mov	r4, r0
    ( void ) memmove( pContext->pktioReadBuf, pContext->pPktioReadPtr, pContext->partialDataRcvdLen );
    47a8:	f200 25cd 	addw	r5, r0, #717	; 0x2cd
    47ac:	f8d0 2920 	ldr.w	r2, [r0, #2336]	; 0x920
    47b0:	f8d0 1910 	ldr.w	r1, [r0, #2320]	; 0x910
    47b4:	4628      	mov	r0, r5
    47b6:	4b07      	ldr	r3, [pc, #28]	; (47d4 <_handleLeftoverBuffer+0x30>)
    47b8:	4798      	blx	r3
    pContext->pktioReadBuf[ pContext->partialDataRcvdLen ] = '\0';
    47ba:	f8d4 0920 	ldr.w	r0, [r4, #2336]	; 0x920
    47be:	1823      	adds	r3, r4, r0
    47c0:	2200      	movs	r2, #0
    47c2:	f883 22cd 	strb.w	r2, [r3, #717]	; 0x2cd
    pRead = &pContext->pktioReadBuf[ pContext->partialDataRcvdLen ];
    47c6:	f500 7032 	add.w	r0, r0, #712	; 0x2c8
    47ca:	4420      	add	r0, r4
    pContext->pPktioReadPtr = pContext->pktioReadBuf;
    47cc:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
}
    47d0:	3005      	adds	r0, #5
    47d2:	bd38      	pop	{r3, r4, r5, pc}
    47d4:	0000887b 	.word	0x0000887b

000047d8 <_Cellular_ReadLine>:
{
    47d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    47dc:	b084      	sub	sp, #16
    47de:	4606      	mov	r6, r0
    47e0:	4689      	mov	r9, r1
    uint32_t bytesRead = 0;
    47e2:	2300      	movs	r3, #0
    47e4:	9303      	str	r3, [sp, #12]
    uint32_t partialDataRead = pContext->partialDataRcvdLen;
    47e6:	f8d0 7920 	ldr.w	r7, [r0, #2336]	; 0x920
    pAtBuf = pContext->pktioReadBuf;
    47ea:	f200 2acd 	addw	sl, r0, #717	; 0x2cd
    if( ( pContext->pPktioReadPtr != NULL ) && ( pContext->pPktioReadPtr != pContext->pktioReadBuf ) &&
    47ee:	f8d0 5910 	ldr.w	r5, [r0, #2320]	; 0x910
    47f2:	b11d      	cbz	r5, 47fc <_Cellular_ReadLine+0x24>
    47f4:	45aa      	cmp	sl, r5
    47f6:	d001      	beq.n	47fc <_Cellular_ReadLine+0x24>
    47f8:	b107      	cbz	r7, 47fc <_Cellular_ReadLine+0x24>
        ( pContext->partialDataRcvdLen != 0U ) && ( pAtResp == NULL ) )
    47fa:	b32a      	cbz	r2, 4848 <_Cellular_ReadLine+0x70>
        if( pContext->pPktioReadPtr != NULL )
    47fc:	b36d      	cbz	r5, 485a <_Cellular_ReadLine+0x82>
            pRead = &pContext->pPktioReadPtr[ pContext->partialDataRcvdLen ];
    47fe:	eb05 0807 	add.w	r8, r5, r7
                                  ( int32_t ) pContext->partialDataRcvdLen - ( int32_t ) _convertCharPtrDistance( pContext->pPktioReadPtr, pContext->pktioReadBuf ) );
    4802:	427c      	negs	r4, r7
    4804:	4651      	mov	r1, sl
    4806:	4628      	mov	r0, r5
    4808:	4b24      	ldr	r3, [pc, #144]	; (489c <_Cellular_ReadLine+0xc4>)
    480a:	4798      	blx	r3
    480c:	1a24      	subs	r4, r4, r0
    480e:	f504 62c8 	add.w	r2, r4, #1600	; 0x640
    if( bufferEmptyLength > 0 )
    4812:	2a00      	cmp	r2, #0
    4814:	dd2e      	ble.n	4874 <_Cellular_ReadLine+0x9c>
        ( void ) pContext->pCommIntf->recv( pContext->hPktioCommIntf, ( uint8_t * ) pRead,
    4816:	6833      	ldr	r3, [r6, #0]
    4818:	689c      	ldr	r4, [r3, #8]
    481a:	ab03      	add	r3, sp, #12
    481c:	9300      	str	r3, [sp, #0]
    481e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    4822:	4641      	mov	r1, r8
    4824:	f8d6 01f4 	ldr.w	r0, [r6, #500]	; 0x1f4
    4828:	47a0      	blx	r4
        if( bytesRead > 0U )
    482a:	9b03      	ldr	r3, [sp, #12]
    482c:	b1f3      	cbz	r3, 486c <_Cellular_ReadLine+0x94>
            pRead[ bytesRead ] = '\0';
    482e:	2200      	movs	r2, #0
    4830:	f808 2003 	strb.w	r2, [r8, r3]
            *pBytesRead = bytesRead + partialDataRead;
    4834:	9b03      	ldr	r3, [sp, #12]
    4836:	441f      	add	r7, r3
    4838:	f8c9 7000 	str.w	r7, [r9]
            pContext->partialDataRcvdLen = 0;
    483c:	f8c6 2920 	str.w	r2, [r6, #2336]	; 0x920
}
    4840:	4628      	mov	r0, r5
    4842:	b004      	add	sp, #16
    4844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        pRead = _handleLeftoverBuffer( pContext );
    4848:	4b15      	ldr	r3, [pc, #84]	; (48a0 <_Cellular_ReadLine+0xc8>)
    484a:	4798      	blx	r3
    484c:	4680      	mov	r8, r0
        bufferEmptyLength = ( ( int32_t ) PKTIO_READ_BUFFER_SIZE - ( int32_t ) pContext->partialDataRcvdLen );
    484e:	f8d6 2920 	ldr.w	r2, [r6, #2336]	; 0x920
    4852:	f5c2 62c8 	rsb	r2, r2, #1600	; 0x640
    pAtBuf = pContext->pktioReadBuf;
    4856:	4655      	mov	r5, sl
        bufferEmptyLength = ( ( int32_t ) PKTIO_READ_BUFFER_SIZE - ( int32_t ) pContext->partialDataRcvdLen );
    4858:	e7db      	b.n	4812 <_Cellular_ReadLine+0x3a>
            pRead = &pContext->pktioReadBuf[ pContext->partialDataRcvdLen ];
    485a:	f507 7832 	add.w	r8, r7, #712	; 0x2c8
    485e:	44b0      	add	r8, r6
    4860:	f108 0805 	add.w	r8, r8, #5
            bufferEmptyLength = ( ( int32_t ) PKTIO_READ_BUFFER_SIZE - ( int32_t ) pContext->partialDataRcvdLen );
    4864:	f5c7 62c8 	rsb	r2, r7, #1600	; 0x640
            pAtBuf = pContext->pktioReadBuf;
    4868:	4655      	mov	r5, sl
    486a:	e7d2      	b.n	4812 <_Cellular_ReadLine+0x3a>
            *pBytesRead = 0U;
    486c:	2500      	movs	r5, #0
    486e:	f8c9 5000 	str.w	r5, [r9]
    4872:	e7e5      	b.n	4840 <_Cellular_ReadLine+0x68>
        LogError( ( "No empty space from comm if to handle incoming data, reset all parameter for next incoming data." ) );
    4874:	f44f 7315 	mov.w	r3, #596	; 0x254
    4878:	4a0a      	ldr	r2, [pc, #40]	; (48a4 <_Cellular_ReadLine+0xcc>)
    487a:	490b      	ldr	r1, [pc, #44]	; (48a8 <_Cellular_ReadLine+0xd0>)
    487c:	480b      	ldr	r0, [pc, #44]	; (48ac <_Cellular_ReadLine+0xd4>)
    487e:	4c0c      	ldr	r4, [pc, #48]	; (48b0 <_Cellular_ReadLine+0xd8>)
    4880:	47a0      	blx	r4
    4882:	480c      	ldr	r0, [pc, #48]	; (48b4 <_Cellular_ReadLine+0xdc>)
    4884:	47a0      	blx	r4
    4886:	480c      	ldr	r0, [pc, #48]	; (48b8 <_Cellular_ReadLine+0xe0>)
    4888:	47a0      	blx	r4
        *pBytesRead = 0;
    488a:	2300      	movs	r3, #0
    488c:	f8c9 3000 	str.w	r3, [r9]
        pContext->partialDataRcvdLen = 0;
    4890:	f8c6 3920 	str.w	r3, [r6, #2336]	; 0x920
        pContext->pPktioReadPtr = NULL;
    4894:	f8c6 3910 	str.w	r3, [r6, #2320]	; 0x910
    return pAtBuf;
    4898:	e7d2      	b.n	4840 <_Cellular_ReadLine+0x68>
    489a:	bf00      	nop
    489c:	000045cd 	.word	0x000045cd
    48a0:	000047a5 	.word	0x000047a5
    48a4:	0000d6a4 	.word	0x0000d6a4
    48a8:	0000b258 	.word	0x0000b258
    48ac:	0000a188 	.word	0x0000a188
    48b0:	00005bfd 	.word	0x00005bfd
    48b4:	0000d7a8 	.word	0x0000d7a8
    48b8:	0000dcf4 	.word	0x0000dcf4

000048bc <_saveData>:
{
    48bc:	b538      	push	{r3, r4, r5, lr}
    48be:	4605      	mov	r5, r0
    48c0:	460c      	mov	r4, r1
    pNew = ( CellularATCommandLine_t * ) Platform_Malloc( sizeof( CellularATCommandLine_t ) );
    48c2:	2008      	movs	r0, #8
    48c4:	4b0c      	ldr	r3, [pc, #48]	; (48f8 <_saveData+0x3c>)
    48c6:	4798      	blx	r3
    configASSERT( ( pNew != NULL ) );
    48c8:	b138      	cbz	r0, 48da <_saveData+0x1e>
    48ca:	4601      	mov	r1, r0
    pNew->pLine = pLine;
    48cc:	6045      	str	r5, [r0, #4]
    pNew->pNext = NULL;
    48ce:	2300      	movs	r3, #0
    48d0:	6003      	str	r3, [r0, #0]
    if( pResp->pItm == NULL )
    48d2:	6862      	ldr	r2, [r4, #4]
    48d4:	b95a      	cbnz	r2, 48ee <_saveData+0x32>
        pResp->pItm = pNew;
    48d6:	6060      	str	r0, [r4, #4]
    48d8:	bd38      	pop	{r3, r4, r5, pc}
    48da:	f04f 0380 	mov.w	r3, #128	; 0x80
    48de:	f383 8811 	msr	BASEPRI, r3
    48e2:	f3bf 8f6f 	isb	sy
    48e6:	f3bf 8f4f 	dsb	sy
    48ea:	e7fe      	b.n	48ea <_saveData+0x2e>
            pTemp = pTemp->pNext;
    48ec:	461a      	mov	r2, r3
        while( pTemp->pNext != NULL )
    48ee:	6813      	ldr	r3, [r2, #0]
    48f0:	2b00      	cmp	r3, #0
    48f2:	d1fb      	bne.n	48ec <_saveData+0x30>
        pTemp->pNext = pNew;
    48f4:	6011      	str	r1, [r2, #0]
    48f6:	bd38      	pop	{r3, r4, r5, pc}
    48f8:	0000655d 	.word	0x0000655d

000048fc <_saveRawData>:
{
    48fc:	b508      	push	{r3, lr}
    _saveData( pLine, pResp, dataLen );
    48fe:	4b01      	ldr	r3, [pc, #4]	; (4904 <_saveRawData+0x8>)
    4900:	4798      	blx	r3
    4902:	bd08      	pop	{r3, pc}
    4904:	000048bd 	.word	0x000048bd

00004908 <_handleData>:
{
    4908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    490c:	4607      	mov	r7, r0
    490e:	460d      	mov	r5, r1
    4910:	4690      	mov	r8, r2
    4912:	461e      	mov	r6, r3
    uint32_t bytesBeforeData = _convertCharPtrDistance( pStartOfData, *ppLine );
    4914:	6819      	ldr	r1, [r3, #0]
    4916:	4b14      	ldr	r3, [pc, #80]	; (4968 <_handleData+0x60>)
    4918:	4798      	blx	r3
    bytesDataAndLeft = bytesRead - bytesBeforeData;
    491a:	9c06      	ldr	r4, [sp, #24]
    491c:	1a24      	subs	r4, r4, r0
    if( bytesDataAndLeft >= pContext->dataLength )
    491e:	f8d5 291c 	ldr.w	r2, [r5, #2332]	; 0x91c
    4922:	4294      	cmp	r4, r2
    4924:	d206      	bcs.n	4934 <_handleData+0x2c>
        pContext->pPktioReadPtr = pStartOfData;
    4926:	f8c5 7910 	str.w	r7, [r5, #2320]	; 0x910
        pContext->partialDataRcvdLen = bytesDataAndLeft;
    492a:	f8c5 4920 	str.w	r4, [r5, #2336]	; 0x920
        pkStatus = CELLULAR_PKT_STATUS_PENDING_BUFFER;
    492e:	200d      	movs	r0, #13
}
    4930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        _saveRawData( pStartOfData, pAtResp, pContext->dataLength );
    4934:	4641      	mov	r1, r8
    4936:	4638      	mov	r0, r7
    4938:	4b0c      	ldr	r3, [pc, #48]	; (496c <_handleData+0x64>)
    493a:	4798      	blx	r3
        *ppLine = &pStartOfData[ pContext->dataLength ];
    493c:	f8d5 391c 	ldr.w	r3, [r5, #2332]	; 0x91c
    4940:	441f      	add	r7, r3
    4942:	6037      	str	r7, [r6, #0]
        *pBytesLeft = ( bytesDataAndLeft - pContext->dataLength );
    4944:	f8d5 391c 	ldr.w	r3, [r5, #2332]	; 0x91c
    4948:	1ae4      	subs	r4, r4, r3
    494a:	9b07      	ldr	r3, [sp, #28]
    494c:	601c      	str	r4, [r3, #0]
        pContext->dataLength = 0U;
    494e:	2000      	movs	r0, #0
    4950:	f8c5 091c 	str.w	r0, [r5, #2332]	; 0x91c
        pContext->pPktioReadPtr = *ppLine;
    4954:	6833      	ldr	r3, [r6, #0]
    4956:	f8c5 3910 	str.w	r3, [r5, #2320]	; 0x910
        pContext->partialDataRcvdLen = *pBytesLeft;
    495a:	9b07      	ldr	r3, [sp, #28]
    495c:	681b      	ldr	r3, [r3, #0]
    495e:	f8c5 3920 	str.w	r3, [r5, #2336]	; 0x920
    4962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4966:	bf00      	nop
    4968:	000045cd 	.word	0x000045cd
    496c:	000048fd 	.word	0x000048fd

00004970 <_handleDataResult>:
{
    4970:	b570      	push	{r4, r5, r6, lr}
    4972:	b084      	sub	sp, #16
    4974:	4616      	mov	r6, r2
    4976:	9d08      	ldr	r5, [sp, #32]
    uint32_t bytesLeft = 0;
    4978:	ac04      	add	r4, sp, #16
    497a:	2200      	movs	r2, #0
    497c:	f844 2d04 	str.w	r2, [r4, #-4]!
    ( void ) _handleData( pStartOfData, pContext, *ppAtResp, ppLine, *pBytesRead, &bytesLeft );
    4980:	680a      	ldr	r2, [r1, #0]
    4982:	6829      	ldr	r1, [r5, #0]
    4984:	9401      	str	r4, [sp, #4]
    4986:	9100      	str	r1, [sp, #0]
    4988:	4601      	mov	r1, r0
    498a:	4630      	mov	r0, r6
    498c:	4c04      	ldr	r4, [pc, #16]	; (49a0 <_handleDataResult+0x30>)
    498e:	47a0      	blx	r4
    if( bytesLeft == 0U )
    4990:	9b03      	ldr	r3, [sp, #12]
    4992:	b11b      	cbz	r3, 499c <_handleDataResult+0x2c>
        *pBytesRead = bytesLeft;
    4994:	602b      	str	r3, [r5, #0]
    bool keepProcess = true;
    4996:	2001      	movs	r0, #1
}
    4998:	b004      	add	sp, #16
    499a:	bd70      	pop	{r4, r5, r6, pc}
        keepProcess = false;
    499c:	2000      	movs	r0, #0
    499e:	e7fb      	b.n	4998 <_handleDataResult+0x28>
    49a0:	00004909 	.word	0x00004909

000049a4 <urcTokenWoPrefix>:
{
    49a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    49a6:	460f      	mov	r7, r1
    uint32_t urcTokenTableSize = pContext->tokenTable.cellularUrcTokenWoPrefixTableSize;
    49a8:	f8d0 5110 	ldr.w	r5, [r0, #272]	; 0x110
    const char * const * const pUrcTokenTable = pContext->tokenTable.pCellularUrcTokenWoPrefixTable;
    49ac:	f8d0 610c 	ldr.w	r6, [r0, #268]	; 0x10c
    for( i = 0; i < urcTokenTableSize; i++ )
    49b0:	2400      	movs	r4, #0
    49b2:	42ac      	cmp	r4, r5
    49b4:	d207      	bcs.n	49c6 <urcTokenWoPrefix+0x22>
        if( strcmp( pLine, pUrcTokenTable[ i ] ) == 0 )
    49b6:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
    49ba:	4638      	mov	r0, r7
    49bc:	4b04      	ldr	r3, [pc, #16]	; (49d0 <urcTokenWoPrefix+0x2c>)
    49be:	4798      	blx	r3
    49c0:	b118      	cbz	r0, 49ca <urcTokenWoPrefix+0x26>
    for( i = 0; i < urcTokenTableSize; i++ )
    49c2:	3401      	adds	r4, #1
    49c4:	e7f5      	b.n	49b2 <urcTokenWoPrefix+0xe>
    bool ret = false;
    49c6:	2000      	movs	r0, #0
    49c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            ret = true;
    49ca:	2001      	movs	r0, #1
}
    49cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    49ce:	bf00      	nop
    49d0:	00008ddd 	.word	0x00008ddd

000049d4 <_getMsgType>:
{
    49d4:	b570      	push	{r4, r5, r6, lr}
    49d6:	b082      	sub	sp, #8
    49d8:	4604      	mov	r4, r0
    49da:	4616      	mov	r6, r2
    bool inputWithPrefix = false;
    49dc:	2300      	movs	r3, #0
    49de:	f88d 3007 	strb.w	r3, [sp, #7]
    bool inputWithSrcPrefix = false;
    49e2:	f88d 3006 	strb.w	r3, [sp, #6]
    if( pContext->tokenTable.pCellularUrcTokenWoPrefixTable == NULL )
    49e6:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
    49ea:	b1e3      	cbz	r3, 4a26 <_getMsgType+0x52>
    49ec:	460d      	mov	r5, r1
    else if( urcTokenWoPrefix( pContext, pLine ) == true )
    49ee:	4b24      	ldr	r3, [pc, #144]	; (4a80 <_getMsgType+0xac>)
    49f0:	4798      	blx	r3
    49f2:	b130      	cbz	r0, 4a02 <_getMsgType+0x2e>
    CellularATError_t atStatus = CELLULAR_AT_SUCCESS;
    49f4:	2300      	movs	r3, #0
        atRespType = AT_UNSOLICITED;
    49f6:	2001      	movs	r0, #1
    if( ( atStatus == CELLULAR_AT_SUCCESS ) && ( atRespType == AT_UNDEFINED ) )
    49f8:	b90b      	cbnz	r3, 49fe <_getMsgType+0x2a>
    49fa:	2802      	cmp	r0, #2
    49fc:	d01c      	beq.n	4a38 <_getMsgType+0x64>
}
    49fe:	b002      	add	sp, #8
    4a00:	bd70      	pop	{r4, r5, r6, pc}
        ( void ) Cellular_ATIsPrefixPresent( pLine, &inputWithPrefix );
    4a02:	f10d 0107 	add.w	r1, sp, #7
    4a06:	4628      	mov	r0, r5
    4a08:	4b1e      	ldr	r3, [pc, #120]	; (4a84 <_getMsgType+0xb0>)
    4a0a:	4798      	blx	r3
        if( ( inputWithPrefix == true ) && ( pRespPrefix != NULL ) )
    4a0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    4a10:	b163      	cbz	r3, 4a2c <_getMsgType+0x58>
    4a12:	b176      	cbz	r6, 4a32 <_getMsgType+0x5e>
            atStatus = Cellular_ATStrStartWith( pLine, pRespPrefix, &inputWithSrcPrefix );
    4a14:	f10d 0206 	add.w	r2, sp, #6
    4a18:	4631      	mov	r1, r6
    4a1a:	4628      	mov	r0, r5
    4a1c:	4b1a      	ldr	r3, [pc, #104]	; (4a88 <_getMsgType+0xb4>)
    4a1e:	4798      	blx	r3
    4a20:	4603      	mov	r3, r0
    _atRespType_t atRespType = AT_UNDEFINED;
    4a22:	2002      	movs	r0, #2
    4a24:	e7e8      	b.n	49f8 <_getMsgType+0x24>
        atStatus = CELLULAR_AT_ERROR;
    4a26:	2305      	movs	r3, #5
        atRespType = AT_UNDEFINED;
    4a28:	2002      	movs	r0, #2
    4a2a:	e7e5      	b.n	49f8 <_getMsgType+0x24>
    CellularATError_t atStatus = CELLULAR_AT_SUCCESS;
    4a2c:	2300      	movs	r3, #0
    _atRespType_t atRespType = AT_UNDEFINED;
    4a2e:	2002      	movs	r0, #2
    4a30:	e7e2      	b.n	49f8 <_getMsgType+0x24>
    CellularATError_t atStatus = CELLULAR_AT_SUCCESS;
    4a32:	2300      	movs	r3, #0
    _atRespType_t atRespType = AT_UNDEFINED;
    4a34:	2002      	movs	r0, #2
    4a36:	e7df      	b.n	49f8 <_getMsgType+0x24>
        if( inputWithPrefix == true )
    4a38:	f89d 3007 	ldrb.w	r3, [sp, #7]
    4a3c:	b143      	cbz	r3, 4a50 <_getMsgType+0x7c>
            if( ( pContext->PktioAtCmdType != CELLULAR_AT_NO_COMMAND ) && ( inputWithSrcPrefix == true ) )
    4a3e:	f894 3918 	ldrb.w	r3, [r4, #2328]	; 0x918
    4a42:	2b06      	cmp	r3, #6
    4a44:	d011      	beq.n	4a6a <_getMsgType+0x96>
    4a46:	f89d 3006 	ldrb.w	r3, [sp, #6]
    4a4a:	b983      	cbnz	r3, 4a6e <_getMsgType+0x9a>
                atRespType = AT_UNSOLICITED;
    4a4c:	2001      	movs	r0, #1
    4a4e:	e7d6      	b.n	49fe <_getMsgType+0x2a>
            if( ( ( pContext->PktioAtCmdType != CELLULAR_AT_NO_COMMAND ) && ( pRespPrefix == NULL ) ) ||
    4a50:	f894 3918 	ldrb.w	r3, [r4, #2328]	; 0x918
    4a54:	2b06      	cmp	r3, #6
    4a56:	d000      	beq.n	4a5a <_getMsgType+0x86>
    4a58:	b15e      	cbz	r6, 4a72 <_getMsgType+0x9e>
    4a5a:	2b05      	cmp	r3, #5
    4a5c:	d00b      	beq.n	4a76 <_getMsgType+0xa2>
                ( pContext->PktioAtCmdType == CELLULAR_AT_MULTI_DATA_WO_PREFIX ) ||
    4a5e:	2b02      	cmp	r3, #2
    4a60:	d00b      	beq.n	4a7a <_getMsgType+0xa6>
                ( pContext->PktioAtCmdType == CELLULAR_AT_WITH_PREFIX ) ||
    4a62:	2b03      	cmp	r3, #3
    4a64:	d1cb      	bne.n	49fe <_getMsgType+0x2a>
                atRespType = AT_SOLICITED;
    4a66:	2000      	movs	r0, #0
    4a68:	e7c9      	b.n	49fe <_getMsgType+0x2a>
                atRespType = AT_UNSOLICITED;
    4a6a:	2001      	movs	r0, #1
    4a6c:	e7c7      	b.n	49fe <_getMsgType+0x2a>
                atRespType = AT_SOLICITED;
    4a6e:	2000      	movs	r0, #0
    4a70:	e7c5      	b.n	49fe <_getMsgType+0x2a>
                atRespType = AT_SOLICITED;
    4a72:	2000      	movs	r0, #0
    4a74:	e7c3      	b.n	49fe <_getMsgType+0x2a>
    4a76:	2000      	movs	r0, #0
    4a78:	e7c1      	b.n	49fe <_getMsgType+0x2a>
    4a7a:	2000      	movs	r0, #0
    4a7c:	e7bf      	b.n	49fe <_getMsgType+0x2a>
    4a7e:	bf00      	nop
    4a80:	000049a5 	.word	0x000049a5
    4a84:	000032fd 	.word	0x000032fd
    4a88:	00003391 	.word	0x00003391

00004a8c <_Cellular_AtResponseNew>:
{
    4a8c:	b508      	push	{r3, lr}
    pNew = ( CellularATCommandResponse_t * ) Platform_Malloc( sizeof( CellularATCommandResponse_t ) );
    4a8e:	2008      	movs	r0, #8
    4a90:	4b07      	ldr	r3, [pc, #28]	; (4ab0 <_Cellular_AtResponseNew+0x24>)
    4a92:	4798      	blx	r3
    configASSERT( ( pNew != NULL ) );
    4a94:	b940      	cbnz	r0, 4aa8 <_Cellular_AtResponseNew+0x1c>
    4a96:	f04f 0380 	mov.w	r3, #128	; 0x80
    4a9a:	f383 8811 	msr	BASEPRI, r3
    4a9e:	f3bf 8f6f 	isb	sy
    4aa2:	f3bf 8f4f 	dsb	sy
    4aa6:	e7fe      	b.n	4aa6 <_Cellular_AtResponseNew+0x1a>
    ( void ) memset( ( void * ) pNew, 0, sizeof( CellularATCommandResponse_t ) );
    4aa8:	2200      	movs	r2, #0
    4aaa:	6002      	str	r2, [r0, #0]
    4aac:	6042      	str	r2, [r0, #4]
}
    4aae:	bd08      	pop	{r3, pc}
    4ab0:	0000655d 	.word	0x0000655d

00004ab4 <_saveATData>:
{
    4ab4:	b538      	push	{r3, r4, r5, lr}
    4ab6:	4604      	mov	r4, r0
    4ab8:	460d      	mov	r5, r1
    _saveData( pLine, pResp, ( uint32_t ) ( strlen( pLine ) + 1U ) );
    4aba:	4b04      	ldr	r3, [pc, #16]	; (4acc <_saveATData+0x18>)
    4abc:	4798      	blx	r3
    4abe:	1c42      	adds	r2, r0, #1
    4ac0:	4629      	mov	r1, r5
    4ac2:	4620      	mov	r0, r4
    4ac4:	4b02      	ldr	r3, [pc, #8]	; (4ad0 <_saveATData+0x1c>)
    4ac6:	4798      	blx	r3
    4ac8:	bd38      	pop	{r3, r4, r5, pc}
    4aca:	bf00      	nop
    4acc:	00008df1 	.word	0x00008df1
    4ad0:	000048bd 	.word	0x000048bd

00004ad4 <_processIntermediateResponse>:
{
    4ad4:	b538      	push	{r3, r4, r5, lr}
    4ad6:	4604      	mov	r4, r0
    switch( atType )
    4ad8:	3a01      	subs	r2, #1
    4ada:	2a03      	cmp	r2, #3
    4adc:	d833      	bhi.n	4b46 <_processIntermediateResponse+0x72>
    4ade:	e8df f002 	tbb	[pc, r2]
    4ae2:	1602      	.short	0x1602
    4ae4:	2e2a      	.short	0x2e2a
            if( pResp->pItm == NULL )
    4ae6:	684b      	ldr	r3, [r1, #4]
    4ae8:	b16b      	cbz	r3, 4b06 <_processIntermediateResponse+0x32>
                LogError( ( "CELLULAR_AT_WO_PREFIX AT process ERROR: %s, status: %d ", pLine, pkStatus ) );
    4aea:	23cc      	movs	r3, #204	; 0xcc
    4aec:	4a18      	ldr	r2, [pc, #96]	; (4b50 <_processIntermediateResponse+0x7c>)
    4aee:	4919      	ldr	r1, [pc, #100]	; (4b54 <_processIntermediateResponse+0x80>)
    4af0:	4819      	ldr	r0, [pc, #100]	; (4b58 <_processIntermediateResponse+0x84>)
    4af2:	4d1a      	ldr	r5, [pc, #104]	; (4b5c <_processIntermediateResponse+0x88>)
    4af4:	47a8      	blx	r5
    4af6:	220b      	movs	r2, #11
    4af8:	4621      	mov	r1, r4
    4afa:	4819      	ldr	r0, [pc, #100]	; (4b60 <_processIntermediateResponse+0x8c>)
    4afc:	47a8      	blx	r5
    4afe:	4819      	ldr	r0, [pc, #100]	; (4b64 <_processIntermediateResponse+0x90>)
    4b00:	47a8      	blx	r5
                pkStatus = CELLULAR_PKT_STATUS_INVALID_DATA;
    4b02:	200b      	movs	r0, #11
    4b04:	bd38      	pop	{r3, r4, r5, pc}
                _saveATData( pLine, pResp );
    4b06:	4b18      	ldr	r3, [pc, #96]	; (4b68 <_processIntermediateResponse+0x94>)
    4b08:	4798      	blx	r3
    CellularPktStatus_t pkStatus = CELLULAR_PKT_STATUS_PENDING_DATA;
    4b0a:	200c      	movs	r0, #12
    4b0c:	bd38      	pop	{r3, r4, r5, pc}
            if( pResp->pItm == NULL )
    4b0e:	684b      	ldr	r3, [r1, #4]
    4b10:	b16b      	cbz	r3, 4b2e <_processIntermediateResponse+0x5a>
                LogError( ( "CELLULAR_AT_WITH_PREFIX AT process ERROR: %s, status: %d ", pLine, pkStatus ) );
    4b12:	23de      	movs	r3, #222	; 0xde
    4b14:	4a0e      	ldr	r2, [pc, #56]	; (4b50 <_processIntermediateResponse+0x7c>)
    4b16:	490f      	ldr	r1, [pc, #60]	; (4b54 <_processIntermediateResponse+0x80>)
    4b18:	480f      	ldr	r0, [pc, #60]	; (4b58 <_processIntermediateResponse+0x84>)
    4b1a:	4d10      	ldr	r5, [pc, #64]	; (4b5c <_processIntermediateResponse+0x88>)
    4b1c:	47a8      	blx	r5
    4b1e:	220b      	movs	r2, #11
    4b20:	4621      	mov	r1, r4
    4b22:	4812      	ldr	r0, [pc, #72]	; (4b6c <_processIntermediateResponse+0x98>)
    4b24:	47a8      	blx	r5
    4b26:	480f      	ldr	r0, [pc, #60]	; (4b64 <_processIntermediateResponse+0x90>)
    4b28:	47a8      	blx	r5
                pkStatus = CELLULAR_PKT_STATUS_INVALID_DATA;
    4b2a:	200b      	movs	r0, #11
    4b2c:	bd38      	pop	{r3, r4, r5, pc}
                _saveATData( pLine, pResp );
    4b2e:	4b0e      	ldr	r3, [pc, #56]	; (4b68 <_processIntermediateResponse+0x94>)
    4b30:	4798      	blx	r3
    CellularPktStatus_t pkStatus = CELLULAR_PKT_STATUS_PENDING_DATA;
    4b32:	200c      	movs	r0, #12
    4b34:	bd38      	pop	{r3, r4, r5, pc}
            _saveATData( pLine, pResp );
    4b36:	4b0c      	ldr	r3, [pc, #48]	; (4b68 <_processIntermediateResponse+0x94>)
    4b38:	4798      	blx	r3
    CellularPktStatus_t pkStatus = CELLULAR_PKT_STATUS_PENDING_DATA;
    4b3a:	200c      	movs	r0, #12
            break;
    4b3c:	bd38      	pop	{r3, r4, r5, pc}
            _saveATData( pLine, pResp );
    4b3e:	4b0a      	ldr	r3, [pc, #40]	; (4b68 <_processIntermediateResponse+0x94>)
    4b40:	4798      	blx	r3
    CellularPktStatus_t pkStatus = CELLULAR_PKT_STATUS_PENDING_DATA;
    4b42:	200c      	movs	r0, #12
            break;
    4b44:	bd38      	pop	{r3, r4, r5, pc}
            _saveATData( pLine, pResp );
    4b46:	4b08      	ldr	r3, [pc, #32]	; (4b68 <_processIntermediateResponse+0x94>)
    4b48:	4798      	blx	r3
            pkStatus = CELLULAR_PKT_STATUS_PENDING_BUFFER;
    4b4a:	200d      	movs	r0, #13
}
    4b4c:	bd38      	pop	{r3, r4, r5, pc}
    4b4e:	bf00      	nop
    4b50:	0000d6b8 	.word	0x0000d6b8
    4b54:	0000b258 	.word	0x0000b258
    4b58:	0000a188 	.word	0x0000a188
    4b5c:	00005bfd 	.word	0x00005bfd
    4b60:	0000d80c 	.word	0x0000d80c
    4b64:	0000dcf4 	.word	0x0000dcf4
    4b68:	00004ab5 	.word	0x00004ab5
    4b6c:	0000d844 	.word	0x0000d844

00004b70 <_Cellular_ProcessLine>:
{
    4b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4b74:	b087      	sub	sp, #28
    4b76:	4604      	mov	r4, r0
    4b78:	9102      	str	r1, [sp, #8]
    4b7a:	4616      	mov	r6, r2
    4b7c:	9303      	str	r3, [sp, #12]
    bool result = false;
    4b7e:	2300      	movs	r3, #0
    4b80:	f88d 3017 	strb.w	r3, [sp, #23]
    if( ( pContext->tokenTable.pCellularSrcTokenErrorTable != NULL ) &&
    4b84:	f8d0 50fc 	ldr.w	r5, [r0, #252]	; 0xfc
    4b88:	2d00      	cmp	r5, #0
    4b8a:	d045      	beq.n	4c18 <_Cellular_ProcessLine+0xa8>
    4b8c:	4608      	mov	r0, r1
        ( pContext->tokenTable.pCellularSrcTokenSuccessTable != NULL ) )
    4b8e:	f8d4 7104 	ldr.w	r7, [r4, #260]	; 0x104
    if( ( pContext->tokenTable.pCellularSrcTokenErrorTable != NULL ) &&
    4b92:	2f00      	cmp	r7, #0
    4b94:	d043      	beq.n	4c1e <_Cellular_ProcessLine+0xae>
        tokenSuccessTableSize = pContext->tokenTable.cellularSrcTokenSuccessTableSize;
    4b96:	f8d4 b108 	ldr.w	fp, [r4, #264]	; 0x108
        tokenErrorTableSize = pContext->tokenTable.cellularSrcTokenErrorTableSize;
    4b9a:	f8d4 9100 	ldr.w	r9, [r4, #256]	; 0x100
        ( void ) Cellular_ATcheckErrorCode( pLine, pTokenExtraTable,
    4b9e:	f10d 0317 	add.w	r3, sp, #23
    4ba2:	f8d4 2118 	ldr.w	r2, [r4, #280]	; 0x118
    4ba6:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
    4baa:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 4c6c <_Cellular_ProcessLine+0xfc>
    4bae:	47d0      	blx	sl
        if( result == true )
    4bb0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    4bb4:	b1ab      	cbz	r3, 4be2 <_Cellular_ProcessLine+0x72>
            pResp->status = true;
    4bb6:	2301      	movs	r3, #1
    4bb8:	7033      	strb	r3, [r6, #0]
            pkStatus = CELLULAR_PKT_STATUS_OK;
    4bba:	f04f 0800 	mov.w	r8, #0
        if( result != true )
    4bbe:	f89d 3017 	ldrb.w	r3, [sp, #23]
    4bc2:	bb73      	cbnz	r3, 4c22 <_Cellular_ProcessLine+0xb2>
            ( void ) Cellular_ATcheckErrorCode( pLine, pTokenErrorTable,
    4bc4:	f10d 0317 	add.w	r3, sp, #23
    4bc8:	464a      	mov	r2, r9
    4bca:	4629      	mov	r1, r5
    4bcc:	9802      	ldr	r0, [sp, #8]
    4bce:	4d27      	ldr	r5, [pc, #156]	; (4c6c <_Cellular_ProcessLine+0xfc>)
    4bd0:	47a8      	blx	r5
            if( result == true )
    4bd2:	f89d 3017 	ldrb.w	r3, [sp, #23]
    4bd6:	b1bb      	cbz	r3, 4c08 <_Cellular_ProcessLine+0x98>
                pResp->status = false;
    4bd8:	f04f 0800 	mov.w	r8, #0
    4bdc:	f886 8000 	strb.w	r8, [r6]
    4be0:	e01f      	b.n	4c22 <_Cellular_ProcessLine+0xb2>
            ( void ) Cellular_ATcheckErrorCode( pLine, pTokenSuccessTable,
    4be2:	f10d 0317 	add.w	r3, sp, #23
    4be6:	465a      	mov	r2, fp
    4be8:	4639      	mov	r1, r7
    4bea:	9802      	ldr	r0, [sp, #8]
    4bec:	f8df 807c 	ldr.w	r8, [pc, #124]	; 4c6c <_Cellular_ProcessLine+0xfc>
    4bf0:	47c0      	blx	r8
            if( result == true )
    4bf2:	f89d 3017 	ldrb.w	r3, [sp, #23]
    4bf6:	b123      	cbz	r3, 4c02 <_Cellular_ProcessLine+0x92>
                pResp->status = true;
    4bf8:	2301      	movs	r3, #1
    4bfa:	7033      	strb	r3, [r6, #0]
                pkStatus = CELLULAR_PKT_STATUS_OK;
    4bfc:	f04f 0800 	mov.w	r8, #0
    4c00:	e7dd      	b.n	4bbe <_Cellular_ProcessLine+0x4e>
    CellularPktStatus_t pkStatus = CELLULAR_PKT_STATUS_FAILURE;
    4c02:	f04f 0802 	mov.w	r8, #2
    4c06:	e7da      	b.n	4bbe <_Cellular_ProcessLine+0x4e>
                pkStatus = _processIntermediateResponse( pLine, pResp, atType, pRespPrefix );
    4c08:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4c0a:	9a03      	ldr	r2, [sp, #12]
    4c0c:	4631      	mov	r1, r6
    4c0e:	9802      	ldr	r0, [sp, #8]
    4c10:	4d17      	ldr	r5, [pc, #92]	; (4c70 <_Cellular_ProcessLine+0x100>)
    4c12:	47a8      	blx	r5
    4c14:	4680      	mov	r8, r0
    4c16:	e004      	b.n	4c22 <_Cellular_ProcessLine+0xb2>
    CellularPktStatus_t pkStatus = CELLULAR_PKT_STATUS_FAILURE;
    4c18:	f04f 0802 	mov.w	r8, #2
    4c1c:	e001      	b.n	4c22 <_Cellular_ProcessLine+0xb2>
    4c1e:	f04f 0802 	mov.w	r8, #2
    if( ( result == true ) && ( pResp->status == false ) )
    4c22:	f89d 3017 	ldrb.w	r3, [sp, #23]
    4c26:	b10b      	cbz	r3, 4c2c <_Cellular_ProcessLine+0xbc>
    4c28:	7833      	ldrb	r3, [r6, #0]
    4c2a:	b11b      	cbz	r3, 4c34 <_Cellular_ProcessLine+0xc4>
}
    4c2c:	4640      	mov	r0, r8
    4c2e:	b007      	add	sp, #28
    4c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        LogError( ( "Modem return ERROR: line %s, cmd : %s, respPrefix %s, status: %d",
    4c34:	f240 1371 	movw	r3, #369	; 0x171
    4c38:	4a0e      	ldr	r2, [pc, #56]	; (4c74 <_Cellular_ProcessLine+0x104>)
    4c3a:	490f      	ldr	r1, [pc, #60]	; (4c78 <_Cellular_ProcessLine+0x108>)
    4c3c:	480f      	ldr	r0, [pc, #60]	; (4c7c <_Cellular_ProcessLine+0x10c>)
    4c3e:	4d10      	ldr	r5, [pc, #64]	; (4c80 <_Cellular_ProcessLine+0x110>)
    4c40:	47a8      	blx	r5
    4c42:	f8d4 11ec 	ldr.w	r1, [r4, #492]	; 0x1ec
    4c46:	b159      	cbz	r1, 4c60 <_Cellular_ProcessLine+0xf0>
    4c48:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4c4a:	b15b      	cbz	r3, 4c64 <_Cellular_ProcessLine+0xf4>
    4c4c:	f8cd 8000 	str.w	r8, [sp]
    4c50:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4c52:	9a02      	ldr	r2, [sp, #8]
    4c54:	480b      	ldr	r0, [pc, #44]	; (4c84 <_Cellular_ProcessLine+0x114>)
    4c56:	4c0a      	ldr	r4, [pc, #40]	; (4c80 <_Cellular_ProcessLine+0x110>)
    4c58:	47a0      	blx	r4
    4c5a:	480b      	ldr	r0, [pc, #44]	; (4c88 <_Cellular_ProcessLine+0x118>)
    4c5c:	47a0      	blx	r4
    4c5e:	e7e5      	b.n	4c2c <_Cellular_ProcessLine+0xbc>
    4c60:	490a      	ldr	r1, [pc, #40]	; (4c8c <_Cellular_ProcessLine+0x11c>)
    4c62:	e7f1      	b.n	4c48 <_Cellular_ProcessLine+0xd8>
    4c64:	4b09      	ldr	r3, [pc, #36]	; (4c8c <_Cellular_ProcessLine+0x11c>)
    4c66:	9310      	str	r3, [sp, #64]	; 0x40
    4c68:	e7f0      	b.n	4c4c <_Cellular_ProcessLine+0xdc>
    4c6a:	bf00      	nop
    4c6c:	0000365d 	.word	0x0000365d
    4c70:	00004ad5 	.word	0x00004ad5
    4c74:	0000d6d8 	.word	0x0000d6d8
    4c78:	0000b258 	.word	0x0000b258
    4c7c:	0000a188 	.word	0x0000a188
    4c80:	00005bfd 	.word	0x00005bfd
    4c84:	0000d880 	.word	0x0000d880
    4c88:	0000dcf4 	.word	0x0000dcf4
    4c8c:	0000a1f0 	.word	0x0000a1f0

00004c90 <_handleMsgType>:
{
    4c90:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c92:	b083      	sub	sp, #12
    4c94:	4604      	mov	r4, r0
    4c96:	4616      	mov	r6, r2
    if( pContext->recvdMsgType == AT_UNSOLICITED )
    4c98:	f890 3919 	ldrb.w	r3, [r0, #2329]	; 0x919
    4c9c:	2b01      	cmp	r3, #1
    4c9e:	d01d      	beq.n	4cdc <_handleMsgType+0x4c>
    4ca0:	460d      	mov	r5, r1
    else if( pContext->recvdMsgType == AT_SOLICITED )
    4ca2:	2b00      	cmp	r3, #0
    4ca4:	d146      	bne.n	4d34 <_handleMsgType+0xa4>
        if( *ppAtResp == NULL )
    4ca6:	680b      	ldr	r3, [r1, #0]
    4ca8:	b303      	cbz	r3, 4cec <_handleMsgType+0x5c>
        pkStatus = _Cellular_ProcessLine( pContext, pLine, *ppAtResp, pContext->PktioAtCmdType, pContext->pRespPrefix );
    4caa:	f894 3918 	ldrb.w	r3, [r4, #2328]	; 0x918
    4cae:	f8d4 2914 	ldr.w	r2, [r4, #2324]	; 0x914
    4cb2:	9200      	str	r2, [sp, #0]
    4cb4:	682a      	ldr	r2, [r5, #0]
    4cb6:	4631      	mov	r1, r6
    4cb8:	4620      	mov	r0, r4
    4cba:	4e32      	ldr	r6, [pc, #200]	; (4d84 <_handleMsgType+0xf4>)
    4cbc:	47b0      	blx	r6
        if( pkStatus == CELLULAR_PKT_STATUS_OK )
    4cbe:	4606      	mov	r6, r0
    4cc0:	b9c0      	cbnz	r0, 4cf4 <_handleMsgType+0x64>
            if( pContext->pPktioHandlepktCB != NULL )
    4cc2:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
    4cc6:	b11b      	cbz	r3, 4cd0 <_handleMsgType+0x40>
                ( void ) pContext->pPktioHandlepktCB( pContext, AT_SOLICITED, *ppAtResp );
    4cc8:	682a      	ldr	r2, [r5, #0]
    4cca:	2100      	movs	r1, #0
    4ccc:	4620      	mov	r0, r4
    4cce:	4798      	blx	r3
            FREE_AT_RESPONSE_AND_SET_NULL( *ppAtResp );
    4cd0:	6828      	ldr	r0, [r5, #0]
    4cd2:	4b2d      	ldr	r3, [pc, #180]	; (4d88 <_handleMsgType+0xf8>)
    4cd4:	4798      	blx	r3
    4cd6:	2300      	movs	r3, #0
    4cd8:	602b      	str	r3, [r5, #0]
    4cda:	e04c      	b.n	4d76 <_handleMsgType+0xe6>
        if( pContext->pPktioHandlepktCB != NULL )
    4cdc:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    4ce0:	2b00      	cmp	r3, #0
    4ce2:	d04d      	beq.n	4d80 <_handleMsgType+0xf0>
            ( void ) pContext->pPktioHandlepktCB( pContext, AT_UNSOLICITED, pLine );
    4ce4:	2101      	movs	r1, #1
    4ce6:	4798      	blx	r3
    CellularPktStatus_t pkStatus = CELLULAR_PKT_STATUS_OK;
    4ce8:	2600      	movs	r6, #0
    4cea:	e044      	b.n	4d76 <_handleMsgType+0xe6>
            *ppAtResp = _Cellular_AtResponseNew();
    4cec:	4b27      	ldr	r3, [pc, #156]	; (4d8c <_handleMsgType+0xfc>)
    4cee:	4798      	blx	r3
    4cf0:	6028      	str	r0, [r5, #0]
    4cf2:	e7da      	b.n	4caa <_handleMsgType+0x1a>
        else if( pkStatus == CELLULAR_PKT_STATUS_PENDING_BUFFER )
    4cf4:	280d      	cmp	r0, #13
    4cf6:	d03e      	beq.n	4d76 <_handleMsgType+0xe6>
            if( pkStatus != CELLULAR_PKT_STATUS_PENDING_DATA )
    4cf8:	280c      	cmp	r0, #12
    4cfa:	d03c      	beq.n	4d76 <_handleMsgType+0xe6>
                ( void ) memset( pContext->pktioReadBuf, 0, PKTIO_READ_BUFFER_SIZE + 1U );
    4cfc:	f240 6241 	movw	r2, #1601	; 0x641
    4d00:	2100      	movs	r1, #0
    4d02:	f204 20cd 	addw	r0, r4, #717	; 0x2cd
    4d06:	4b22      	ldr	r3, [pc, #136]	; (4d90 <_handleMsgType+0x100>)
    4d08:	4798      	blx	r3
                pContext->pPktioReadPtr = NULL;
    4d0a:	2700      	movs	r7, #0
    4d0c:	f8c4 7910 	str.w	r7, [r4, #2320]	; 0x910
                FREE_AT_RESPONSE_AND_SET_NULL( *ppAtResp );
    4d10:	6828      	ldr	r0, [r5, #0]
    4d12:	4b1d      	ldr	r3, [pc, #116]	; (4d88 <_handleMsgType+0xf8>)
    4d14:	4798      	blx	r3
    4d16:	602f      	str	r7, [r5, #0]
                LogError( ( "processLine ERROR, cleaning up! Current command %s", pContext->pCurrentCmd ) );
    4d18:	f44f 7331 	mov.w	r3, #708	; 0x2c4
    4d1c:	4a1d      	ldr	r2, [pc, #116]	; (4d94 <_handleMsgType+0x104>)
    4d1e:	491e      	ldr	r1, [pc, #120]	; (4d98 <_handleMsgType+0x108>)
    4d20:	481e      	ldr	r0, [pc, #120]	; (4d9c <_handleMsgType+0x10c>)
    4d22:	4d1f      	ldr	r5, [pc, #124]	; (4da0 <_handleMsgType+0x110>)
    4d24:	47a8      	blx	r5
    4d26:	f8d4 11ec 	ldr.w	r1, [r4, #492]	; 0x1ec
    4d2a:	481e      	ldr	r0, [pc, #120]	; (4da4 <_handleMsgType+0x114>)
    4d2c:	47a8      	blx	r5
    4d2e:	481e      	ldr	r0, [pc, #120]	; (4da8 <_handleMsgType+0x118>)
    4d30:	47a8      	blx	r5
    4d32:	e020      	b.n	4d76 <_handleMsgType+0xe6>
        LogError( ( "recvdMsgType is AT_UNDEFINED for Message: %s, cmd %s",
    4d34:	f44f 7333 	mov.w	r3, #716	; 0x2cc
    4d38:	4a16      	ldr	r2, [pc, #88]	; (4d94 <_handleMsgType+0x104>)
    4d3a:	4917      	ldr	r1, [pc, #92]	; (4d98 <_handleMsgType+0x108>)
    4d3c:	4817      	ldr	r0, [pc, #92]	; (4d9c <_handleMsgType+0x10c>)
    4d3e:	4f18      	ldr	r7, [pc, #96]	; (4da0 <_handleMsgType+0x110>)
    4d40:	47b8      	blx	r7
    4d42:	f8d4 21ec 	ldr.w	r2, [r4, #492]	; 0x1ec
    4d46:	b1ca      	cbz	r2, 4d7c <_handleMsgType+0xec>
    4d48:	4631      	mov	r1, r6
    4d4a:	4818      	ldr	r0, [pc, #96]	; (4dac <_handleMsgType+0x11c>)
    4d4c:	4e14      	ldr	r6, [pc, #80]	; (4da0 <_handleMsgType+0x110>)
    4d4e:	47b0      	blx	r6
    4d50:	4815      	ldr	r0, [pc, #84]	; (4da8 <_handleMsgType+0x118>)
    4d52:	47b0      	blx	r6
        ( void ) memset( pContext->pktioReadBuf, 0, PKTIO_READ_BUFFER_SIZE + 1U );
    4d54:	f240 6241 	movw	r2, #1601	; 0x641
    4d58:	2100      	movs	r1, #0
    4d5a:	f204 20cd 	addw	r0, r4, #717	; 0x2cd
    4d5e:	4b0c      	ldr	r3, [pc, #48]	; (4d90 <_handleMsgType+0x100>)
    4d60:	4798      	blx	r3
        pContext->pPktioReadPtr = NULL;
    4d62:	2600      	movs	r6, #0
    4d64:	f8c4 6910 	str.w	r6, [r4, #2320]	; 0x910
        pContext->partialDataRcvdLen = 0;
    4d68:	f8c4 6920 	str.w	r6, [r4, #2336]	; 0x920
        FREE_AT_RESPONSE_AND_SET_NULL( *ppAtResp );
    4d6c:	6828      	ldr	r0, [r5, #0]
    4d6e:	4b06      	ldr	r3, [pc, #24]	; (4d88 <_handleMsgType+0xf8>)
    4d70:	4798      	blx	r3
    4d72:	602e      	str	r6, [r5, #0]
        pkStatus = CELLULAR_PKT_STATUS_BAD_PARAM;
    4d74:	2606      	movs	r6, #6
}
    4d76:	4630      	mov	r0, r6
    4d78:	b003      	add	sp, #12
    4d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LogError( ( "recvdMsgType is AT_UNDEFINED for Message: %s, cmd %s",
    4d7c:	4a0c      	ldr	r2, [pc, #48]	; (4db0 <_handleMsgType+0x120>)
    4d7e:	e7e3      	b.n	4d48 <_handleMsgType+0xb8>
    CellularPktStatus_t pkStatus = CELLULAR_PKT_STATUS_OK;
    4d80:	2600      	movs	r6, #0
    4d82:	e7f8      	b.n	4d76 <_handleMsgType+0xe6>
    4d84:	00004b71 	.word	0x00004b71
    4d88:	00004781 	.word	0x00004781
    4d8c:	00004a8d 	.word	0x00004a8d
    4d90:	000088af 	.word	0x000088af
    4d94:	0000d6f0 	.word	0x0000d6f0
    4d98:	0000b258 	.word	0x0000b258
    4d9c:	0000a188 	.word	0x0000a188
    4da0:	00005bfd 	.word	0x00005bfd
    4da4:	0000d8c4 	.word	0x0000d8c4
    4da8:	0000dcf4 	.word	0x0000dcf4
    4dac:	0000d8f8 	.word	0x0000d8f8
    4db0:	0000a1f0 	.word	0x0000a1f0

00004db4 <_getNextLine>:
{
    4db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4db6:	4606      	mov	r6, r0
    4db8:	460d      	mov	r5, r1
    4dba:	4614      	mov	r4, r2
    4dbc:	461f      	mov	r7, r3
    stringLength = ( uint32_t ) strnlen( *ppLine, *pBytesRead );
    4dbe:	6811      	ldr	r1, [r2, #0]
    4dc0:	6828      	ldr	r0, [r5, #0]
    4dc2:	4b12      	ldr	r3, [pc, #72]	; (4e0c <_getNextLine+0x58>)
    4dc4:	4798      	blx	r3
    *ppLine = &( ( *ppLine )[ ( stringLength + 1U ) ] );
    4dc6:	682a      	ldr	r2, [r5, #0]
    4dc8:	1c43      	adds	r3, r0, #1
    4dca:	441a      	add	r2, r3
    4dcc:	602a      	str	r2, [r5, #0]
    *pBytesRead = *pBytesRead - ( stringLength + 1U );
    4dce:	6823      	ldr	r3, [r4, #0]
    4dd0:	1a1b      	subs	r3, r3, r0
    4dd2:	3b01      	subs	r3, #1
    4dd4:	6023      	str	r3, [r4, #0]
    pContext->pPktioReadPtr = *ppLine;
    4dd6:	682b      	ldr	r3, [r5, #0]
    4dd8:	f8c6 3910 	str.w	r3, [r6, #2320]	; 0x910
    pContext->partialDataRcvdLen = *pBytesRead;
    4ddc:	6823      	ldr	r3, [r4, #0]
    4dde:	f8c6 3920 	str.w	r3, [r6, #2336]	; 0x920
    if( ( pktStatus == CELLULAR_PKT_STATUS_OK ) && ( pContext->recvdMsgType == AT_SOLICITED ) )
    4de2:	b917      	cbnz	r7, 4dea <_getNextLine+0x36>
    4de4:	f896 3919 	ldrb.w	r3, [r6, #2329]	; 0x919
    4de8:	b10b      	cbz	r3, 4dee <_getNextLine+0x3a>
}
    4dea:	2001      	movs	r0, #1
    4dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ( void ) memmove( pContext->pktioReadBuf, *ppLine, *pBytesRead );
    4dee:	f206 27cd 	addw	r7, r6, #717	; 0x2cd
    4df2:	6822      	ldr	r2, [r4, #0]
    4df4:	6829      	ldr	r1, [r5, #0]
    4df6:	4638      	mov	r0, r7
    4df8:	4b05      	ldr	r3, [pc, #20]	; (4e10 <_getNextLine+0x5c>)
    4dfa:	4798      	blx	r3
        *ppLine = pContext->pktioReadBuf;
    4dfc:	602f      	str	r7, [r5, #0]
        pContext->pPktioReadPtr = pContext->pktioReadBuf;
    4dfe:	f8c6 7910 	str.w	r7, [r6, #2320]	; 0x910
        pContext->partialDataRcvdLen = *pBytesRead;
    4e02:	6823      	ldr	r3, [r4, #0]
    4e04:	f8c6 3920 	str.w	r3, [r6, #2336]	; 0x920
    4e08:	e7ef      	b.n	4dea <_getNextLine+0x36>
    4e0a:	bf00      	nop
    4e0c:	00008e4f 	.word	0x00008e4f
    4e10:	0000887b 	.word	0x0000887b

00004e14 <_handleAllReceived>:
{
    4e14:	b570      	push	{r4, r5, r6, lr}
    4e16:	b086      	sub	sp, #24
    4e18:	4604      	mov	r4, r0
    4e1a:	460d      	mov	r5, r1
    char * pStartOfData = NULL, * pTempLine = pData;
    4e1c:	2100      	movs	r1, #0
    4e1e:	9105      	str	r1, [sp, #20]
    4e20:	9204      	str	r2, [sp, #16]
    uint32_t bytesRead = bytesInBuffer;
    4e22:	9303      	str	r3, [sp, #12]
    bool keepProcess = true;
    4e24:	2301      	movs	r3, #1
    while( keepProcess == true )
    4e26:	e013      	b.n	4e50 <_handleAllReceived+0x3c>
            pTempLine++;
    4e28:	3201      	adds	r2, #1
    4e2a:	9204      	str	r2, [sp, #16]
            bytesRead = bytesRead - 1U;
    4e2c:	3b01      	subs	r3, #1
    4e2e:	9303      	str	r3, [sp, #12]
        while( ( bytesRead > 0U ) && ( ( *pTempLine == '\r' ) || ( *pTempLine == '\n' ) ) )
    4e30:	9b03      	ldr	r3, [sp, #12]
    4e32:	b12b      	cbz	r3, 4e40 <_handleAllReceived+0x2c>
    4e34:	9a04      	ldr	r2, [sp, #16]
    4e36:	7811      	ldrb	r1, [r2, #0]
    4e38:	290d      	cmp	r1, #13
    4e3a:	d0f5      	beq.n	4e28 <_handleAllReceived+0x14>
    4e3c:	290a      	cmp	r1, #10
    4e3e:	d0f3      	beq.n	4e28 <_handleAllReceived+0x14>
        keepProcess = _preprocessLine( pContext, pTempLine, &bytesRead, &pStartOfData );
    4e40:	ab05      	add	r3, sp, #20
    4e42:	aa03      	add	r2, sp, #12
    4e44:	9904      	ldr	r1, [sp, #16]
    4e46:	4620      	mov	r0, r4
    4e48:	4e1c      	ldr	r6, [pc, #112]	; (4ebc <_handleAllReceived+0xa8>)
    4e4a:	47b0      	blx	r6
        if( keepProcess == true )
    4e4c:	4603      	mov	r3, r0
    4e4e:	b918      	cbnz	r0, 4e58 <_handleAllReceived+0x44>
    while( keepProcess == true )
    4e50:	2b00      	cmp	r3, #0
    4e52:	d1ed      	bne.n	4e30 <_handleAllReceived+0x1c>
}
    4e54:	b006      	add	sp, #24
    4e56:	bd70      	pop	{r4, r5, r6, pc}
            pContext->recvdMsgType = _getMsgType( pContext, pTempLine, pContext->pRespPrefix );
    4e58:	f8d4 2914 	ldr.w	r2, [r4, #2324]	; 0x914
    4e5c:	9904      	ldr	r1, [sp, #16]
    4e5e:	4620      	mov	r0, r4
    4e60:	4b17      	ldr	r3, [pc, #92]	; (4ec0 <_handleAllReceived+0xac>)
    4e62:	4798      	blx	r3
    4e64:	f884 0919 	strb.w	r0, [r4, #2329]	; 0x919
            pktStatus = _handleMsgType( pContext, ppAtResp, pTempLine );
    4e68:	9a04      	ldr	r2, [sp, #16]
    4e6a:	4629      	mov	r1, r5
    4e6c:	4620      	mov	r0, r4
    4e6e:	4b15      	ldr	r3, [pc, #84]	; (4ec4 <_handleAllReceived+0xb0>)
    4e70:	4798      	blx	r3
            if( pktStatus == CELLULAR_PKT_STATUS_PENDING_BUFFER )
    4e72:	280d      	cmp	r0, #13
    4e74:	d004      	beq.n	4e80 <_handleAllReceived+0x6c>
            else if( ( pktStatus == CELLULAR_PKT_STATUS_OK ) || ( pktStatus == CELLULAR_PKT_STATUS_PENDING_DATA ) )
    4e76:	b1c0      	cbz	r0, 4eaa <_handleAllReceived+0x96>
    4e78:	280c      	cmp	r0, #12
    4e7a:	d016      	beq.n	4eaa <_handleAllReceived+0x96>
                keepProcess = false;
    4e7c:	2300      	movs	r3, #0
    4e7e:	e7e7      	b.n	4e50 <_handleAllReceived+0x3c>
                if( pContext->dataLength != 0U )
    4e80:	f8d4 391c 	ldr.w	r3, [r4, #2332]	; 0x91c
    4e84:	b14b      	cbz	r3, 4e9a <_handleAllReceived+0x86>
                    keepProcess = _handleDataResult( pContext, ppAtResp, pStartOfData, &pTempLine, &bytesRead );
    4e86:	ab03      	add	r3, sp, #12
    4e88:	9300      	str	r3, [sp, #0]
    4e8a:	ab04      	add	r3, sp, #16
    4e8c:	9a05      	ldr	r2, [sp, #20]
    4e8e:	4629      	mov	r1, r5
    4e90:	4620      	mov	r0, r4
    4e92:	4e0d      	ldr	r6, [pc, #52]	; (4ec8 <_handleAllReceived+0xb4>)
    4e94:	47b0      	blx	r6
    4e96:	4603      	mov	r3, r0
    4e98:	e7da      	b.n	4e50 <_handleAllReceived+0x3c>
                    keepProcess = _getNextLine( pContext, &pTempLine, &bytesRead, pktStatus );
    4e9a:	4603      	mov	r3, r0
    4e9c:	aa03      	add	r2, sp, #12
    4e9e:	a904      	add	r1, sp, #16
    4ea0:	4620      	mov	r0, r4
    4ea2:	4e0a      	ldr	r6, [pc, #40]	; (4ecc <_handleAllReceived+0xb8>)
    4ea4:	47b0      	blx	r6
    4ea6:	4603      	mov	r3, r0
    4ea8:	e7d2      	b.n	4e50 <_handleAllReceived+0x3c>
                keepProcess = _getNextLine( pContext, &pTempLine, &bytesRead, pktStatus );
    4eaa:	4603      	mov	r3, r0
    4eac:	aa03      	add	r2, sp, #12
    4eae:	a904      	add	r1, sp, #16
    4eb0:	4620      	mov	r0, r4
    4eb2:	4e06      	ldr	r6, [pc, #24]	; (4ecc <_handleAllReceived+0xb8>)
    4eb4:	47b0      	blx	r6
    4eb6:	4603      	mov	r3, r0
    4eb8:	e7ca      	b.n	4e50 <_handleAllReceived+0x3c>
    4eba:	bf00      	nop
    4ebc:	00004621 	.word	0x00004621
    4ec0:	000049d5 	.word	0x000049d5
    4ec4:	00004c91 	.word	0x00004c91
    4ec8:	00004971 	.word	0x00004971
    4ecc:	00004db5 	.word	0x00004db5

00004ed0 <_handleRxDataEvent>:
{
    4ed0:	b570      	push	{r4, r5, r6, lr}
    4ed2:	b086      	sub	sp, #24
    4ed4:	4605      	mov	r5, r0
    4ed6:	460c      	mov	r4, r1
    char * pLine = NULL;
    4ed8:	2300      	movs	r3, #0
    4eda:	9305      	str	r3, [sp, #20]
    uint32_t bytesRead = 0;
    4edc:	9304      	str	r3, [sp, #16]
    uint32_t bytesLeft = 0;
    4ede:	9303      	str	r3, [sp, #12]
    pLine = _Cellular_ReadLine( pContext, &bytesRead, *ppAtResp );
    4ee0:	680a      	ldr	r2, [r1, #0]
    4ee2:	a904      	add	r1, sp, #16
    4ee4:	4b10      	ldr	r3, [pc, #64]	; (4f28 <_handleRxDataEvent+0x58>)
    4ee6:	4798      	blx	r3
    4ee8:	9005      	str	r0, [sp, #20]
    if( bytesRead > 0U )
    4eea:	9b04      	ldr	r3, [sp, #16]
    4eec:	b12b      	cbz	r3, 4efa <_handleRxDataEvent+0x2a>
        if( pContext->dataLength != 0U )
    4eee:	f8d5 291c 	ldr.w	r2, [r5, #2332]	; 0x91c
    4ef2:	b92a      	cbnz	r2, 4f00 <_handleRxDataEvent+0x30>
            bytesLeft = bytesRead;
    4ef4:	9303      	str	r3, [sp, #12]
        if( bytesLeft > 0U )
    4ef6:	9b03      	ldr	r3, [sp, #12]
    4ef8:	b95b      	cbnz	r3, 4f12 <_handleRxDataEvent+0x42>
}
    4efa:	9804      	ldr	r0, [sp, #16]
    4efc:	b006      	add	sp, #24
    4efe:	bd70      	pop	{r4, r5, r6, pc}
            ( void ) _handleData( pLine, pContext, *ppAtResp, &pLine, bytesRead, &bytesLeft );
    4f00:	aa03      	add	r2, sp, #12
    4f02:	9201      	str	r2, [sp, #4]
    4f04:	9300      	str	r3, [sp, #0]
    4f06:	ab05      	add	r3, sp, #20
    4f08:	6822      	ldr	r2, [r4, #0]
    4f0a:	4629      	mov	r1, r5
    4f0c:	4e07      	ldr	r6, [pc, #28]	; (4f2c <_handleRxDataEvent+0x5c>)
    4f0e:	47b0      	blx	r6
    4f10:	e7f1      	b.n	4ef6 <_handleRxDataEvent+0x26>
            pLine[ bytesLeft ] = '\0';
    4f12:	2100      	movs	r1, #0
    4f14:	9a05      	ldr	r2, [sp, #20]
    4f16:	54d1      	strb	r1, [r2, r3]
            _handleAllReceived( pContext, ppAtResp, pLine, bytesLeft );
    4f18:	9b03      	ldr	r3, [sp, #12]
    4f1a:	9a05      	ldr	r2, [sp, #20]
    4f1c:	4621      	mov	r1, r4
    4f1e:	4628      	mov	r0, r5
    4f20:	4c03      	ldr	r4, [pc, #12]	; (4f30 <_handleRxDataEvent+0x60>)
    4f22:	47a0      	blx	r4
    4f24:	e7e9      	b.n	4efa <_handleRxDataEvent+0x2a>
    4f26:	bf00      	nop
    4f28:	000047d9 	.word	0x000047d9
    4f2c:	00004909 	.word	0x00004909
    4f30:	00004e15 	.word	0x00004e15

00004f34 <_pktioReadThread>:
{
    4f34:	b530      	push	{r4, r5, lr}
    4f36:	b085      	sub	sp, #20
    4f38:	4604      	mov	r4, r0
    CellularATCommandResponse_t * pAtResp = NULL;
    4f3a:	2300      	movs	r3, #0
    4f3c:	9303      	str	r3, [sp, #12]
    if( ( pContext->pCommIntf != NULL ) &&
    4f3e:	6803      	ldr	r3, [r0, #0]
    4f40:	b133      	cbz	r3, 4f50 <_pktioReadThread+0x1c>
        ( pContext->pCommIntf->open( _Cellular_PktRxCallBack, ( void * ) pContext,
    4f42:	681b      	ldr	r3, [r3, #0]
    4f44:	f500 72fa 	add.w	r2, r0, #500	; 0x1f4
    4f48:	4601      	mov	r1, r0
    4f4a:	4823      	ldr	r0, [pc, #140]	; (4fd8 <_pktioReadThread+0xa4>)
    4f4c:	4798      	blx	r3
    if( ( pContext->pCommIntf != NULL ) &&
    4f4e:	b1b0      	cbz	r0, 4f7e <_pktioReadThread+0x4a>
        LogError( ( "Comm port open failed" ) );
    4f50:	f240 4325 	movw	r3, #1061	; 0x425
    4f54:	4a21      	ldr	r2, [pc, #132]	; (4fdc <_pktioReadThread+0xa8>)
    4f56:	4922      	ldr	r1, [pc, #136]	; (4fe0 <_pktioReadThread+0xac>)
    4f58:	4822      	ldr	r0, [pc, #136]	; (4fe4 <_pktioReadThread+0xb0>)
    4f5a:	4d23      	ldr	r5, [pc, #140]	; (4fe8 <_pktioReadThread+0xb4>)
    4f5c:	47a8      	blx	r5
    4f5e:	4823      	ldr	r0, [pc, #140]	; (4fec <_pktioReadThread+0xb8>)
    4f60:	47a8      	blx	r5
    4f62:	4823      	ldr	r0, [pc, #140]	; (4ff0 <_pktioReadThread+0xbc>)
    4f64:	47a8      	blx	r5
    ( void ) PlatformEventGroup_SetBits( ( PlatformEventGroupHandle_t ) pContext->pPktioCommEvent, ( EventBits_t ) PKTIO_EVT_MASK_ABORTED );
    4f66:	2104      	movs	r1, #4
    4f68:	f8d4 01f8 	ldr.w	r0, [r4, #504]	; 0x1f8
    4f6c:	4b21      	ldr	r3, [pc, #132]	; (4ff4 <_pktioReadThread+0xc0>)
    4f6e:	4798      	blx	r3
    if( pContext->pPktioShutdownCB != NULL )
    4f70:	f8d4 31fc 	ldr.w	r3, [r4, #508]	; 0x1fc
    4f74:	b10b      	cbz	r3, 4f7a <_pktioReadThread+0x46>
        pContext->pPktioShutdownCB( pContext );
    4f76:	4620      	mov	r0, r4
    4f78:	4798      	blx	r3
}
    4f7a:	b005      	add	sp, #20
    4f7c:	bd30      	pop	{r4, r5, pc}
        ( void ) PlatformEventGroup_SetBits( ( PlatformEventGroupHandle_t ) pContext->pPktioCommEvent, ( EventBits_t ) PKTIO_EVT_MASK_STARTED );
    4f7e:	2101      	movs	r1, #1
    4f80:	f8d4 01f8 	ldr.w	r0, [r4, #504]	; 0x1f8
    4f84:	4b1b      	ldr	r3, [pc, #108]	; (4ff4 <_pktioReadThread+0xc0>)
    4f86:	4798      	blx	r3
            uxBits = ( PlatformEventGroup_EventBits ) PlatformEventGroup_WaitBits( ( PlatformEventGroupHandle_t ) pContext->pPktioCommEvent,
    4f88:	f04f 33ff 	mov.w	r3, #4294967295
    4f8c:	9300      	str	r3, [sp, #0]
    4f8e:	2300      	movs	r3, #0
    4f90:	2201      	movs	r2, #1
    4f92:	210a      	movs	r1, #10
    4f94:	f8d4 01f8 	ldr.w	r0, [r4, #504]	; 0x1f8
    4f98:	4d17      	ldr	r5, [pc, #92]	; (4ff8 <_pktioReadThread+0xc4>)
    4f9a:	47a8      	blx	r5
            if( ( uxBits & ( PlatformEventGroup_EventBits ) PKTIO_EVT_MASK_ABORT ) != 0U )
    4f9c:	f010 0f02 	tst.w	r0, #2
    4fa0:	d109      	bne.n	4fb6 <_pktioReadThread+0x82>
            else if( ( uxBits & ( PlatformEventGroup_EventBits ) PKTIO_EVT_MASK_RX_DATA ) != 0U )
    4fa2:	f010 0f08 	tst.w	r0, #8
    4fa6:	d0ef      	beq.n	4f88 <_pktioReadThread+0x54>
                    bytesRead = _handleRxDataEvent( pContext, &pAtResp );
    4fa8:	a903      	add	r1, sp, #12
    4faa:	4620      	mov	r0, r4
    4fac:	4b13      	ldr	r3, [pc, #76]	; (4ffc <_pktioReadThread+0xc8>)
    4fae:	4798      	blx	r3
                } while( ( bytesRead != 0U ) );
    4fb0:	2800      	cmp	r0, #0
    4fb2:	d1f9      	bne.n	4fa8 <_pktioReadThread+0x74>
    4fb4:	e7e8      	b.n	4f88 <_pktioReadThread+0x54>
                FREE_AT_RESPONSE_AND_SET_NULL( pAtResp );
    4fb6:	9803      	ldr	r0, [sp, #12]
    4fb8:	4b11      	ldr	r3, [pc, #68]	; (5000 <_pktioReadThread+0xcc>)
    4fba:	4798      	blx	r3
    4fbc:	2500      	movs	r5, #0
    4fbe:	9503      	str	r5, [sp, #12]
        ( void ) pContext->pCommIntf->close( pContext->hPktioCommIntf );
    4fc0:	6823      	ldr	r3, [r4, #0]
    4fc2:	68db      	ldr	r3, [r3, #12]
    4fc4:	f8d4 01f4 	ldr.w	r0, [r4, #500]	; 0x1f4
    4fc8:	4798      	blx	r3
        pContext->hPktioCommIntf = NULL;
    4fca:	f8c4 51f4 	str.w	r5, [r4, #500]	; 0x1f4
        pContext->pPktioShutdownCB( pContext );
    4fce:	f8d4 31fc 	ldr.w	r3, [r4, #508]	; 0x1fc
    4fd2:	4620      	mov	r0, r4
    4fd4:	4798      	blx	r3
    4fd6:	e7c6      	b.n	4f66 <_pktioReadThread+0x32>
    4fd8:	00004749 	.word	0x00004749
    4fdc:	0000d700 	.word	0x0000d700
    4fe0:	0000b258 	.word	0x0000b258
    4fe4:	0000a188 	.word	0x0000a188
    4fe8:	00005bfd 	.word	0x00005bfd
    4fec:	0000d930 	.word	0x0000d930
    4ff0:	0000dcf4 	.word	0x0000dcf4
    4ff4:	00005f81 	.word	0x00005f81
    4ff8:	00005df9 	.word	0x00005df9
    4ffc:	00004ed1 	.word	0x00004ed1
    5000:	00004781 	.word	0x00004781

00005004 <_Cellular_PktioInit>:

/*-----------------------------------------------------------*/

CellularPktStatus_t _Cellular_PktioInit( CellularContext_t * pContext,
                                         _pPktioHandlePacketCallback_t handlePacketCb )
{
    5004:	b570      	push	{r4, r5, r6, lr}
    5006:	460e      	mov	r6, r1
    CellularPktStatus_t pktStatus = CELLULAR_PKT_STATUS_OK;
    bool status = false;

    if( pContext == NULL )
    5008:	4604      	mov	r4, r0
    500a:	b340      	cbz	r0, 505e <_Cellular_PktioInit+0x5a>
    {
        pktStatus = ( CellularPktStatus_t ) CELLULAR_PKT_STATUS_INVALID_HANDLE;
    }
    else
    {
        pContext->bPktioUp = false;
    500c:	2300      	movs	r3, #0
    500e:	f880 31f0 	strb.w	r3, [r0, #496]	; 0x1f0
        pContext->PktioAtCmdType = CELLULAR_AT_NO_COMMAND;
    5012:	2306      	movs	r3, #6
    5014:	f880 3918 	strb.w	r3, [r0, #2328]	; 0x918
        /* It's platform-dependent declaration. */
        /* coverity[misra_c_2012_directive_4_6_violation] */
        pContext->pPktioCommEvent = ( PlatformEventGroupHandle_t ) PlatformEventGroup_Create();
    5018:	4b2a      	ldr	r3, [pc, #168]	; (50c4 <_Cellular_PktioInit+0xc0>)
    501a:	4798      	blx	r3
    501c:	f8c4 01f8 	str.w	r0, [r4, #504]	; 0x1f8

        if( pContext->pPktioCommEvent == NULL )
    5020:	b180      	cbz	r0, 5044 <_Cellular_PktioInit+0x40>
    CellularPktStatus_t pktStatus = CELLULAR_PKT_STATUS_OK;
    5022:	2500      	movs	r5, #0
            LogError( ( "Can't create event group" ) );
            pktStatus = CELLULAR_PKT_STATUS_CREATION_FAIL;
        }
    }

    if( pktStatus == CELLULAR_PKT_STATUS_OK )
    5024:	b1ed      	cbz	r5, 5062 <_Cellular_PktioInit+0x5e>
            LogError( ( "Can't create reader thread" ) );
            pktStatus = CELLULAR_PKT_STATUS_CREATION_FAIL;
        }
    }

    if( pktStatus == CELLULAR_PKT_STATUS_OK )
    5026:	b15d      	cbz	r5, 5040 <_Cellular_PktioInit+0x3c>
    {
        LogDebug( ( "Thread create: read_thread status:%d", pktStatus ) );
    }
    else
    {
        if( pContext != NULL )
    5028:	b154      	cbz	r4, 5040 <_Cellular_PktioInit+0x3c>
        {
            pContext->pPktioHandlepktCB = NULL;
    502a:	2300      	movs	r3, #0
    502c:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200

            if( pContext->pPktioCommEvent != NULL )
    5030:	f8d4 01f8 	ldr.w	r0, [r4, #504]	; 0x1f8
    5034:	b120      	cbz	r0, 5040 <_Cellular_PktioInit+0x3c>
            {
                /* It's platform-dependent declaration. */
                /* coverity[misra_c_2012_directive_4_6_violation] */
                ( void ) PlatformEventGroup_Delete( ( PlatformEventGroupHandle_t ) pContext->pPktioCommEvent );
    5036:	4b24      	ldr	r3, [pc, #144]	; (50c8 <_Cellular_PktioInit+0xc4>)
    5038:	4798      	blx	r3
                pContext->pPktioCommEvent = ( PlatformEventGroupHandle_t ) ( uintptr_t ) ( uintptr_t * ) NULL;
    503a:	2300      	movs	r3, #0
    503c:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
            }
        }
    }

    return pktStatus;
}
    5040:	4628      	mov	r0, r5
    5042:	bd70      	pop	{r4, r5, r6, pc}
            LogError( ( "Can't create event group" ) );
    5044:	f240 4359 	movw	r3, #1113	; 0x459
    5048:	4a20      	ldr	r2, [pc, #128]	; (50cc <_Cellular_PktioInit+0xc8>)
    504a:	4921      	ldr	r1, [pc, #132]	; (50d0 <_Cellular_PktioInit+0xcc>)
    504c:	4821      	ldr	r0, [pc, #132]	; (50d4 <_Cellular_PktioInit+0xd0>)
    504e:	4d22      	ldr	r5, [pc, #136]	; (50d8 <_Cellular_PktioInit+0xd4>)
    5050:	47a8      	blx	r5
    5052:	4822      	ldr	r0, [pc, #136]	; (50dc <_Cellular_PktioInit+0xd8>)
    5054:	47a8      	blx	r5
    5056:	4822      	ldr	r0, [pc, #136]	; (50e0 <_Cellular_PktioInit+0xdc>)
    5058:	47a8      	blx	r5
            pktStatus = CELLULAR_PKT_STATUS_CREATION_FAIL;
    505a:	2509      	movs	r5, #9
    505c:	e7e2      	b.n	5024 <_Cellular_PktioInit+0x20>
        pktStatus = ( CellularPktStatus_t ) CELLULAR_PKT_STATUS_INVALID_HANDLE;
    505e:	2508      	movs	r5, #8
    5060:	e7e0      	b.n	5024 <_Cellular_PktioInit+0x20>
        pContext->pPktioHandlepktCB = handlePacketCb;
    5062:	f8c4 6200 	str.w	r6, [r4, #512]	; 0x200
        ( void ) PlatformEventGroup_ClearBits( ( PlatformEventGroupHandle_t ) pContext->pPktioCommEvent,
    5066:	210f      	movs	r1, #15
    5068:	f8d4 01f8 	ldr.w	r0, [r4, #504]	; 0x1f8
    506c:	4b1d      	ldr	r3, [pc, #116]	; (50e4 <_Cellular_PktioInit+0xe0>)
    506e:	4798      	blx	r3
        status = Platform_CreateDetachedThread( _pktioReadThread,
    5070:	f44f 6300 	mov.w	r3, #2048	; 0x800
    5074:	2205      	movs	r2, #5
    5076:	4621      	mov	r1, r4
    5078:	481b      	ldr	r0, [pc, #108]	; (50e8 <_Cellular_PktioInit+0xe4>)
    507a:	4e1c      	ldr	r6, [pc, #112]	; (50ec <_Cellular_PktioInit+0xe8>)
    507c:	47b0      	blx	r6
        if( status == true )
    507e:	b960      	cbnz	r0, 509a <_Cellular_PktioInit+0x96>
            LogError( ( "Can't create reader thread" ) );
    5080:	f240 4379 	movw	r3, #1145	; 0x479
    5084:	4a11      	ldr	r2, [pc, #68]	; (50cc <_Cellular_PktioInit+0xc8>)
    5086:	4912      	ldr	r1, [pc, #72]	; (50d0 <_Cellular_PktioInit+0xcc>)
    5088:	4812      	ldr	r0, [pc, #72]	; (50d4 <_Cellular_PktioInit+0xd0>)
    508a:	4d13      	ldr	r5, [pc, #76]	; (50d8 <_Cellular_PktioInit+0xd4>)
    508c:	47a8      	blx	r5
    508e:	4818      	ldr	r0, [pc, #96]	; (50f0 <_Cellular_PktioInit+0xec>)
    5090:	47a8      	blx	r5
    5092:	4813      	ldr	r0, [pc, #76]	; (50e0 <_Cellular_PktioInit+0xdc>)
    5094:	47a8      	blx	r5
            pktStatus = CELLULAR_PKT_STATUS_CREATION_FAIL;
    5096:	2509      	movs	r5, #9
    5098:	e7c5      	b.n	5026 <_Cellular_PktioInit+0x22>
            _PktioInitProcessReadThreadStatus( pContext );
    509a:	4620      	mov	r0, r4
    509c:	4b15      	ldr	r3, [pc, #84]	; (50f4 <_Cellular_PktioInit+0xf0>)
    509e:	4798      	blx	r3
            if( pContext->bPktioUp == false )
    50a0:	f894 31f0 	ldrb.w	r3, [r4, #496]	; 0x1f0
    50a4:	2b00      	cmp	r3, #0
    50a6:	d1be      	bne.n	5026 <_Cellular_PktioInit+0x22>
                LogError( ( "Reader thread aborted" ) );
    50a8:	f240 4373 	movw	r3, #1139	; 0x473
    50ac:	4a07      	ldr	r2, [pc, #28]	; (50cc <_Cellular_PktioInit+0xc8>)
    50ae:	4908      	ldr	r1, [pc, #32]	; (50d0 <_Cellular_PktioInit+0xcc>)
    50b0:	4808      	ldr	r0, [pc, #32]	; (50d4 <_Cellular_PktioInit+0xd0>)
    50b2:	4d09      	ldr	r5, [pc, #36]	; (50d8 <_Cellular_PktioInit+0xd4>)
    50b4:	47a8      	blx	r5
    50b6:	4810      	ldr	r0, [pc, #64]	; (50f8 <_Cellular_PktioInit+0xf4>)
    50b8:	47a8      	blx	r5
    50ba:	4809      	ldr	r0, [pc, #36]	; (50e0 <_Cellular_PktioInit+0xdc>)
    50bc:	47a8      	blx	r5
                pktStatus = CELLULAR_PKT_STATUS_FAILURE;
    50be:	2502      	movs	r5, #2
    50c0:	e7b1      	b.n	5026 <_Cellular_PktioInit+0x22>
    50c2:	bf00      	nop
    50c4:	00005dd5 	.word	0x00005dd5
    50c8:	00006039 	.word	0x00006039
    50cc:	0000d714 	.word	0x0000d714
    50d0:	0000b258 	.word	0x0000b258
    50d4:	0000a188 	.word	0x0000a188
    50d8:	00005bfd 	.word	0x00005bfd
    50dc:	0000d948 	.word	0x0000d948
    50e0:	0000dcf4 	.word	0x0000dcf4
    50e4:	00005f31 	.word	0x00005f31
    50e8:	00004f35 	.word	0x00004f35
    50ec:	000053dd 	.word	0x000053dd
    50f0:	0000d97c 	.word	0x0000d97c
    50f4:	00004719 	.word	0x00004719
    50f8:	0000d964 	.word	0x0000d964

000050fc <_Cellular_PktioSendAtCmd>:
/* Sends the AT command to the modem. */
CellularPktStatus_t _Cellular_PktioSendAtCmd( CellularContext_t * pContext,
                                              const char * pAtCmd,
                                              CellularATCommandType_t atType,
                                              const char * pAtRspPrefix )
{
    50fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5100:	b084      	sub	sp, #16
    5102:	469a      	mov	sl, r3
    uint32_t cmdLen = 0, newCmdLen = 0;
    uint32_t sentLen = 0;
    5104:	2300      	movs	r3, #0
    5106:	9303      	str	r3, [sp, #12]
    CellularPktStatus_t pktStatus = CELLULAR_PKT_STATUS_OK;

    if( pContext == NULL )
    5108:	b1f0      	cbz	r0, 5148 <_Cellular_PktioSendAtCmd+0x4c>
    510a:	460d      	mov	r5, r1
    510c:	4691      	mov	r9, r2
    510e:	4604      	mov	r4, r0
    {
        LogError( ( "_Cellular_PktioSendAtCmd : invalid cellular context" ) );
        pktStatus = CELLULAR_PKT_STATUS_INVALID_HANDLE;
    }
    else if( ( pContext->pCommIntf == NULL ) || ( pContext->hPktioCommIntf == NULL ) )
    5110:	6806      	ldr	r6, [r0, #0]
    5112:	b336      	cbz	r6, 5162 <_Cellular_PktioSendAtCmd+0x66>
    5114:	f8d0 71f4 	ldr.w	r7, [r0, #500]	; 0x1f4
    5118:	b31f      	cbz	r7, 5162 <_Cellular_PktioSendAtCmd+0x66>
    {
        LogError( ( "_Cellular_PktioSendAtCmd : invalid comm interface handle" ) );
        pktStatus = CELLULAR_PKT_STATUS_INVALID_HANDLE;
    }
    else if( pAtCmd == NULL )
    511a:	2900      	cmp	r1, #0
    511c:	d02e      	beq.n	517c <_Cellular_PktioSendAtCmd+0x80>
        LogError( ( "_Cellular_PktioSendAtCmd : invalid pAtCmd" ) );
        pktStatus = CELLULAR_PKT_STATUS_BAD_PARAM;
    }
    else
    {
        cmdLen = ( uint32_t ) strlen( pAtCmd );
    511e:	4608      	mov	r0, r1
    5120:	4b2b      	ldr	r3, [pc, #172]	; (51d0 <_Cellular_PktioSendAtCmd+0xd4>)
    5122:	4798      	blx	r3
    5124:	4680      	mov	r8, r0

        if( cmdLen > PKTIO_WRITE_BUFFER_SIZE )
    5126:	28c8      	cmp	r0, #200	; 0xc8
    5128:	d935      	bls.n	5196 <_Cellular_PktioSendAtCmd+0x9a>
        {
            LogError( ( "_Cellular_PktioSendAtCmd : invalid pAtCmd" ) );
    512a:	f240 43b6 	movw	r3, #1206	; 0x4b6
    512e:	4a29      	ldr	r2, [pc, #164]	; (51d4 <_Cellular_PktioSendAtCmd+0xd8>)
    5130:	4929      	ldr	r1, [pc, #164]	; (51d8 <_Cellular_PktioSendAtCmd+0xdc>)
    5132:	482a      	ldr	r0, [pc, #168]	; (51dc <_Cellular_PktioSendAtCmd+0xe0>)
    5134:	4c2a      	ldr	r4, [pc, #168]	; (51e0 <_Cellular_PktioSendAtCmd+0xe4>)
    5136:	47a0      	blx	r4
    5138:	482a      	ldr	r0, [pc, #168]	; (51e4 <_Cellular_PktioSendAtCmd+0xe8>)
    513a:	47a0      	blx	r4
    513c:	482a      	ldr	r0, [pc, #168]	; (51e8 <_Cellular_PktioSendAtCmd+0xec>)
    513e:	47a0      	blx	r4
            pktStatus = CELLULAR_PKT_STATUS_BAD_PARAM;
    5140:	2006      	movs	r0, #6
                                                CELLULAR_COMM_IF_SEND_TIMEOUT_MS, &sentLen );
        }
    }

    return pktStatus;
}
    5142:	b004      	add	sp, #16
    5144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        LogError( ( "_Cellular_PktioSendAtCmd : invalid cellular context" ) );
    5148:	f240 43a3 	movw	r3, #1187	; 0x4a3
    514c:	4a21      	ldr	r2, [pc, #132]	; (51d4 <_Cellular_PktioSendAtCmd+0xd8>)
    514e:	4922      	ldr	r1, [pc, #136]	; (51d8 <_Cellular_PktioSendAtCmd+0xdc>)
    5150:	4822      	ldr	r0, [pc, #136]	; (51dc <_Cellular_PktioSendAtCmd+0xe0>)
    5152:	4c23      	ldr	r4, [pc, #140]	; (51e0 <_Cellular_PktioSendAtCmd+0xe4>)
    5154:	47a0      	blx	r4
    5156:	4825      	ldr	r0, [pc, #148]	; (51ec <_Cellular_PktioSendAtCmd+0xf0>)
    5158:	47a0      	blx	r4
    515a:	4823      	ldr	r0, [pc, #140]	; (51e8 <_Cellular_PktioSendAtCmd+0xec>)
    515c:	47a0      	blx	r4
        pktStatus = CELLULAR_PKT_STATUS_INVALID_HANDLE;
    515e:	2008      	movs	r0, #8
    5160:	e7ef      	b.n	5142 <_Cellular_PktioSendAtCmd+0x46>
        LogError( ( "_Cellular_PktioSendAtCmd : invalid comm interface handle" ) );
    5162:	f44f 6395 	mov.w	r3, #1192	; 0x4a8
    5166:	4a1b      	ldr	r2, [pc, #108]	; (51d4 <_Cellular_PktioSendAtCmd+0xd8>)
    5168:	491b      	ldr	r1, [pc, #108]	; (51d8 <_Cellular_PktioSendAtCmd+0xdc>)
    516a:	481c      	ldr	r0, [pc, #112]	; (51dc <_Cellular_PktioSendAtCmd+0xe0>)
    516c:	4c1c      	ldr	r4, [pc, #112]	; (51e0 <_Cellular_PktioSendAtCmd+0xe4>)
    516e:	47a0      	blx	r4
    5170:	481f      	ldr	r0, [pc, #124]	; (51f0 <_Cellular_PktioSendAtCmd+0xf4>)
    5172:	47a0      	blx	r4
    5174:	481c      	ldr	r0, [pc, #112]	; (51e8 <_Cellular_PktioSendAtCmd+0xec>)
    5176:	47a0      	blx	r4
        pktStatus = CELLULAR_PKT_STATUS_INVALID_HANDLE;
    5178:	2008      	movs	r0, #8
    517a:	e7e2      	b.n	5142 <_Cellular_PktioSendAtCmd+0x46>
        LogError( ( "_Cellular_PktioSendAtCmd : invalid pAtCmd" ) );
    517c:	f240 43ad 	movw	r3, #1197	; 0x4ad
    5180:	4a14      	ldr	r2, [pc, #80]	; (51d4 <_Cellular_PktioSendAtCmd+0xd8>)
    5182:	4915      	ldr	r1, [pc, #84]	; (51d8 <_Cellular_PktioSendAtCmd+0xdc>)
    5184:	4815      	ldr	r0, [pc, #84]	; (51dc <_Cellular_PktioSendAtCmd+0xe0>)
    5186:	4c16      	ldr	r4, [pc, #88]	; (51e0 <_Cellular_PktioSendAtCmd+0xe4>)
    5188:	47a0      	blx	r4
    518a:	4816      	ldr	r0, [pc, #88]	; (51e4 <_Cellular_PktioSendAtCmd+0xe8>)
    518c:	47a0      	blx	r4
    518e:	4816      	ldr	r0, [pc, #88]	; (51e8 <_Cellular_PktioSendAtCmd+0xec>)
    5190:	47a0      	blx	r4
        pktStatus = CELLULAR_PKT_STATUS_BAD_PARAM;
    5192:	2006      	movs	r0, #6
    5194:	e7d5      	b.n	5142 <_Cellular_PktioSendAtCmd+0x46>
            pContext->pRespPrefix = pAtRspPrefix;
    5196:	f8c4 a914 	str.w	sl, [r4, #2324]	; 0x914
            pContext->PktioAtCmdType = atType;
    519a:	f884 9918 	strb.w	r9, [r4, #2328]	; 0x918
            newCmdLen += 1U; /* Include space for \r. */
    519e:	f100 0a01 	add.w	sl, r0, #1
            ( void ) strncpy( pContext->pktioSendBuf, pAtCmd, cmdLen );
    51a2:	f504 7901 	add.w	r9, r4, #516	; 0x204
    51a6:	4602      	mov	r2, r0
    51a8:	4629      	mov	r1, r5
    51aa:	4648      	mov	r0, r9
    51ac:	4b11      	ldr	r3, [pc, #68]	; (51f4 <_Cellular_PktioSendAtCmd+0xf8>)
    51ae:	4798      	blx	r3
            pContext->pktioSendBuf[ cmdLen ] = '\r';
    51b0:	4444      	add	r4, r8
    51b2:	230d      	movs	r3, #13
    51b4:	f884 3204 	strb.w	r3, [r4, #516]	; 0x204
            ( void ) pContext->pCommIntf->send( pContext->hPktioCommIntf,
    51b8:	6874      	ldr	r4, [r6, #4]
    51ba:	ab03      	add	r3, sp, #12
    51bc:	9300      	str	r3, [sp, #0]
    51be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    51c2:	4652      	mov	r2, sl
    51c4:	4649      	mov	r1, r9
    51c6:	4638      	mov	r0, r7
    51c8:	47a0      	blx	r4
    CellularPktStatus_t pktStatus = CELLULAR_PKT_STATUS_OK;
    51ca:	2000      	movs	r0, #0
    51cc:	e7b9      	b.n	5142 <_Cellular_PktioSendAtCmd+0x46>
    51ce:	bf00      	nop
    51d0:	00008df1 	.word	0x00008df1
    51d4:	0000d728 	.word	0x0000d728
    51d8:	0000b258 	.word	0x0000b258
    51dc:	0000a188 	.word	0x0000a188
    51e0:	00005bfd 	.word	0x00005bfd
    51e4:	0000da08 	.word	0x0000da08
    51e8:	0000dcf4 	.word	0x0000dcf4
    51ec:	0000d998 	.word	0x0000d998
    51f0:	0000d9cc 	.word	0x0000d9cc
    51f4:	00008e25 	.word	0x00008e25

000051f8 <_Cellular_PktioShutdown>:

void _Cellular_PktioShutdown( CellularContext_t * pContext )
{
    PlatformEventGroup_EventBits uxBits = 0;

    if( ( pContext != NULL ) && ( pContext->bPktioUp ) )
    51f8:	b340      	cbz	r0, 524c <_Cellular_PktioShutdown+0x54>
{
    51fa:	b510      	push	{r4, lr}
    51fc:	4604      	mov	r4, r0
    if( ( pContext != NULL ) && ( pContext->bPktioUp ) )
    51fe:	f890 31f0 	ldrb.w	r3, [r0, #496]	; 0x1f0
    5202:	b313      	cbz	r3, 524a <_Cellular_PktioShutdown+0x52>
    {
        if( pContext->pPktioCommEvent != NULL )
    5204:	f8d0 01f8 	ldr.w	r0, [r0, #504]	; 0x1f8
    5208:	b1d0      	cbz	r0, 5240 <_Cellular_PktioShutdown+0x48>
        {
            ( void ) PlatformEventGroup_SetBits( ( PlatformEventGroupHandle_t ) pContext->pPktioCommEvent, ( EventBits_t ) PKTIO_EVT_MASK_ABORT );
    520a:	2102      	movs	r1, #2
    520c:	4b10      	ldr	r3, [pc, #64]	; (5250 <_Cellular_PktioShutdown+0x58>)
    520e:	4798      	blx	r3
            /* It's platform-dependent declaration. */
            /* coverity[misra_c_2012_directive_4_6_violation] */
            uxBits = ( PlatformEventGroup_EventBits ) PlatformEventGroup_GetBits( ( PlatformEventGroupHandle_t ) pContext->pPktioCommEvent );
    5210:	2100      	movs	r1, #0
    5212:	f8d4 01f8 	ldr.w	r0, [r4, #504]	; 0x1f8
    5216:	4b0f      	ldr	r3, [pc, #60]	; (5254 <_Cellular_PktioShutdown+0x5c>)
    5218:	4798      	blx	r3

            while( ( PlatformEventGroup_EventBits ) ( uxBits & PKTIO_EVT_MASK_ABORTED ) != ( PlatformEventGroup_EventBits ) ( PKTIO_EVT_MASK_ABORTED ) )
    521a:	e007      	b.n	522c <_Cellular_PktioShutdown+0x34>
            {
                Platform_Delay( PKTIO_SHUTDOWN_WAIT_INTERVAL_MS );
    521c:	200a      	movs	r0, #10
    521e:	4b0e      	ldr	r3, [pc, #56]	; (5258 <_Cellular_PktioShutdown+0x60>)
    5220:	4798      	blx	r3
                uxBits = ( PlatformEventGroup_EventBits ) PlatformEventGroup_GetBits( ( PlatformEventGroupHandle_t ) pContext->pPktioCommEvent );
    5222:	2100      	movs	r1, #0
    5224:	f8d4 01f8 	ldr.w	r0, [r4, #504]	; 0x1f8
    5228:	4b0a      	ldr	r3, [pc, #40]	; (5254 <_Cellular_PktioShutdown+0x5c>)
    522a:	4798      	blx	r3
            while( ( PlatformEventGroup_EventBits ) ( uxBits & PKTIO_EVT_MASK_ABORTED ) != ( PlatformEventGroup_EventBits ) ( PKTIO_EVT_MASK_ABORTED ) )
    522c:	f010 0f04 	tst.w	r0, #4
    5230:	d0f4      	beq.n	521c <_Cellular_PktioShutdown+0x24>
            }

            ( void ) PlatformEventGroup_Delete( pContext->pPktioCommEvent );
    5232:	f8d4 01f8 	ldr.w	r0, [r4, #504]	; 0x1f8
    5236:	4b09      	ldr	r3, [pc, #36]	; (525c <_Cellular_PktioShutdown+0x64>)
    5238:	4798      	blx	r3
            pContext->pPktioCommEvent = ( PlatformEventGroupHandle_t ) ( uintptr_t ) ( uintptr_t * ) NULL;
    523a:	2300      	movs	r3, #0
    523c:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
        }

        pContext->pPktioHandlepktCB = NULL;
    5240:	2300      	movs	r3, #0
    5242:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        pContext->bPktioUp = false;
    5246:	f884 31f0 	strb.w	r3, [r4, #496]	; 0x1f0
    524a:	bd10      	pop	{r4, pc}
    524c:	4770      	bx	lr
    524e:	bf00      	nop
    5250:	00005f81 	.word	0x00005f81
    5254:	00005f31 	.word	0x00005f31
    5258:	00007c11 	.word	0x00007c11
    525c:	00006039 	.word	0x00006039

00005260 <CellularDemoTask>:
void vApplicationDaemonTaskStartupHook( void ){
	
}
/*-----------------------------------------------------------*/

static void CellularDemoTask(void *pvParameters){
    5260:	b538      	push	{r3, r4, r5, lr}
	bool retCellular = true;
	// Setup cellular
	retCellular = setupCellular();
    5262:	4b11      	ldr	r3, [pc, #68]	; (52a8 <CellularDemoTask+0x48>)
    5264:	4798      	blx	r3
	if(!retCellular){
    5266:	b198      	cbz	r0, 5290 <CellularDemoTask+0x30>
	
	//configASSERT( retCellular == true ); // Stop here if we fail to initialize cellular.
	//vTaskSuspend(NULL);
	
	while(1){
		UBaseType_t uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
    5268:	2000      	movs	r0, #0
    526a:	4b10      	ldr	r3, [pc, #64]	; (52ac <CellularDemoTask+0x4c>)
    526c:	4798      	blx	r3
    526e:	4605      	mov	r5, r0
		LogInfo(("[CellularDemoTask], Stack: %lu", uxHighWaterMark*4));
    5270:	2374      	movs	r3, #116	; 0x74
    5272:	4a0f      	ldr	r2, [pc, #60]	; (52b0 <CellularDemoTask+0x50>)
    5274:	490f      	ldr	r1, [pc, #60]	; (52b4 <CellularDemoTask+0x54>)
    5276:	4810      	ldr	r0, [pc, #64]	; (52b8 <CellularDemoTask+0x58>)
    5278:	4c10      	ldr	r4, [pc, #64]	; (52bc <CellularDemoTask+0x5c>)
    527a:	47a0      	blx	r4
    527c:	00a9      	lsls	r1, r5, #2
    527e:	4810      	ldr	r0, [pc, #64]	; (52c0 <CellularDemoTask+0x60>)
    5280:	47a0      	blx	r4
    5282:	4810      	ldr	r0, [pc, #64]	; (52c4 <CellularDemoTask+0x64>)
    5284:	47a0      	blx	r4
		vTaskDelay(1000);
    5286:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    528a:	4b0f      	ldr	r3, [pc, #60]	; (52c8 <CellularDemoTask+0x68>)
    528c:	4798      	blx	r3
    528e:	e7eb      	b.n	5268 <CellularDemoTask+0x8>
		LogError( ( "Cellular failed to initialize." ) );
    5290:	236c      	movs	r3, #108	; 0x6c
    5292:	4a07      	ldr	r2, [pc, #28]	; (52b0 <CellularDemoTask+0x50>)
    5294:	4907      	ldr	r1, [pc, #28]	; (52b4 <CellularDemoTask+0x54>)
    5296:	480d      	ldr	r0, [pc, #52]	; (52cc <CellularDemoTask+0x6c>)
    5298:	4c08      	ldr	r4, [pc, #32]	; (52bc <CellularDemoTask+0x5c>)
    529a:	47a0      	blx	r4
    529c:	480c      	ldr	r0, [pc, #48]	; (52d0 <CellularDemoTask+0x70>)
    529e:	47a0      	blx	r4
    52a0:	4808      	ldr	r0, [pc, #32]	; (52c4 <CellularDemoTask+0x64>)
    52a2:	47a0      	blx	r4
    52a4:	e7e0      	b.n	5268 <CellularDemoTask+0x8>
    52a6:	bf00      	nop
    52a8:	00005531 	.word	0x00005531
    52ac:	00007fc5 	.word	0x00007fc5
    52b0:	0000dac8 	.word	0x0000dac8
    52b4:	0000b258 	.word	0x0000b258
    52b8:	0000aae8 	.word	0x0000aae8
    52bc:	00005bfd 	.word	0x00005bfd
    52c0:	0000dafc 	.word	0x0000dafc
    52c4:	0000dcf4 	.word	0x0000dcf4
    52c8:	00007c11 	.word	0x00007c11
    52cc:	0000a188 	.word	0x0000a188
    52d0:	0000dadc 	.word	0x0000dadc

000052d4 <vApplicationGetIdleTaskMemory>:
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
    52d4:	4b03      	ldr	r3, [pc, #12]	; (52e4 <vApplicationGetIdleTaskMemory+0x10>)
    52d6:	6003      	str	r3, [r0, #0]
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
    52d8:	3364      	adds	r3, #100	; 0x64
    52da:	600b      	str	r3, [r1, #0]
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
    52dc:	2340      	movs	r3, #64	; 0x40
    52de:	6013      	str	r3, [r2, #0]
    52e0:	4770      	bx	lr
    52e2:	bf00      	nop
    52e4:	20000c90 	.word	0x20000c90

000052e8 <vApplicationGetTimerTaskMemory>:
{
    52e8:	b410      	push	{r4}
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
    52ea:	4b06      	ldr	r3, [pc, #24]	; (5304 <vApplicationGetTimerTaskMemory+0x1c>)
    52ec:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    52f0:	6004      	str	r4, [r0, #0]
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
    52f2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
    52f6:	600b      	str	r3, [r1, #0]
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
    52f8:	2380      	movs	r3, #128	; 0x80
    52fa:	6013      	str	r3, [r2, #0]
}
    52fc:	f85d 4b04 	ldr.w	r4, [sp], #4
    5300:	4770      	bx	lr
    5302:	bf00      	nop
    5304:	20000c90 	.word	0x20000c90

00005308 <vApplicationStackOverflowHook>:
									signed char *pcTaskName ){
    5308:	4770      	bx	lr

0000530a <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook(void){
    530a:	4770      	bx	lr

0000530c <vApplicationIdleHook>:
void vApplicationIdleHook(void){
    530c:	b500      	push	{lr}
    530e:	b083      	sub	sp, #12
	volatile size_t xFreeStackSpace = 0U;
    5310:	2300      	movs	r3, #0
    5312:	9301      	str	r3, [sp, #4]
	xFreeStackSpace = xPortGetFreeHeapSize();
    5314:	4b02      	ldr	r3, [pc, #8]	; (5320 <vApplicationIdleHook+0x14>)
    5316:	4798      	blx	r3
    5318:	9001      	str	r0, [sp, #4]
}
    531a:	b003      	add	sp, #12
    531c:	f85d fb04 	ldr.w	pc, [sp], #4
    5320:	00006719 	.word	0x00006719

00005324 <main>:
	}
	
}

int main(void)
{
    5324:	b510      	push	{r4, lr}
    5326:	b082      	sub	sp, #8
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    5328:	4b0f      	ldr	r3, [pc, #60]	; (5368 <main+0x44>)
    532a:	4798      	blx	r3
	
	/* Spawn the logging task */
	if(xLoggingTaskInitialize(LOGGING_TASK_STACK_SIZE, tskIDLE_PRIORITY, LOGGING_MESSAGE_QUEUE_LENGTH ) != pdPASS){
    532c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5330:	2100      	movs	r1, #0
    5332:	f44f 7080 	mov.w	r0, #256	; 0x100
    5336:	4b0d      	ldr	r3, [pc, #52]	; (536c <main+0x48>)
    5338:	4798      	blx	r3
    533a:	2801      	cmp	r0, #1
    533c:	d000      	beq.n	5340 <main+0x1c>
    533e:	e7fe      	b.n	533e <main+0x1a>
		while(1);
	}
	
	/* Spawn the cellular task */
	if (xTaskCreate(CellularDemoTask, "Cell", CELLULAR_TASK_SIZE, NULL, CELLULAR_TASK_PRIORITY, &cellular_task_handler) != pdPASS) {
    5340:	4b0b      	ldr	r3, [pc, #44]	; (5370 <main+0x4c>)
    5342:	9301      	str	r3, [sp, #4]
    5344:	2301      	movs	r3, #1
    5346:	9300      	str	r3, [sp, #0]
    5348:	2300      	movs	r3, #0
    534a:	f240 1245 	movw	r2, #325	; 0x145
    534e:	4909      	ldr	r1, [pc, #36]	; (5374 <main+0x50>)
    5350:	4809      	ldr	r0, [pc, #36]	; (5378 <main+0x54>)
    5352:	4c0a      	ldr	r4, [pc, #40]	; (537c <main+0x58>)
    5354:	47a0      	blx	r4
    5356:	2801      	cmp	r0, #1
    5358:	d000      	beq.n	535c <main+0x38>
    535a:	e7fe      	b.n	535a <main+0x36>
	/* Spawn the example task */
//	if (xTaskCreate(TARGET_IO_example_task, "Task1", TASK1_STACK_SIZE, NULL, TASK1_PRIORITY, &task1_handler) != pdPASS) {
//		while (1);
//	}
	
	vTaskStartScheduler();
    535c:	4b08      	ldr	r3, [pc, #32]	; (5380 <main+0x5c>)
    535e:	4798      	blx	r3
	
	return 0;
}
    5360:	2000      	movs	r0, #0
    5362:	b002      	add	sp, #8
    5364:	bd10      	pop	{r4, pc}
    5366:	bf00      	nop
    5368:	000002d1 	.word	0x000002d1
    536c:	00005b95 	.word	0x00005b95
    5370:	20001058 	.word	0x20001058
    5374:	0000db1c 	.word	0x0000db1c
    5378:	00005261 	.word	0x00005261
    537c:	000077b5 	.word	0x000077b5
    5380:	00007921 	.word	0x00007921

00005384 <prvThreadRoutineWrapper>:
                                 TickType_t timeout );

/*-----------------------------------------------------------*/

static void prvThreadRoutineWrapper( void * pArgument )
{
    5384:	b510      	push	{r4, lr}
    5386:	4604      	mov	r4, r0
    threadInfo_t * pThreadInfo = ( threadInfo_t * ) pArgument;

    /* Run the thread routine. */
    pThreadInfo->threadRoutine( pThreadInfo->pArgument );
    5388:	6843      	ldr	r3, [r0, #4]
    538a:	6800      	ldr	r0, [r0, #0]
    538c:	4798      	blx	r3
    Platform_Free( pThreadInfo );
    538e:	4620      	mov	r0, r4
    5390:	4b02      	ldr	r3, [pc, #8]	; (539c <prvThreadRoutineWrapper+0x18>)
    5392:	4798      	blx	r3

    vTaskDelete( NULL );
    5394:	2000      	movs	r0, #0
    5396:	4b02      	ldr	r3, [pc, #8]	; (53a0 <prvThreadRoutineWrapper+0x1c>)
    5398:	4798      	blx	r3
    539a:	bd10      	pop	{r4, pc}
    539c:	00006691 	.word	0x00006691
    53a0:	0000782d 	.word	0x0000782d

000053a4 <prIotMutexTimedLock>:

/*-----------------------------------------------------------*/

static bool prIotMutexTimedLock( PlatformMutex_t * pMutex,
                                 TickType_t timeout )
{
    53a4:	b508      	push	{r3, lr}
    BaseType_t lockResult = pdTRUE;

    configASSERT( pMutex != NULL );
    53a6:	b148      	cbz	r0, 53bc <prIotMutexTimedLock+0x18>

    CellularLogDebug( "Locking mutex %p.", pMutex );

    /* Call the correct FreeRTOS mutex take function based on mutex type. */
    if( pMutex->recursive == pdTRUE )
    53a8:	6d43      	ldr	r3, [r0, #84]	; 0x54
    53aa:	2b01      	cmp	r3, #1
    53ac:	d00f      	beq.n	53ce <prIotMutexTimedLock+0x2a>
    {
        lockResult = xSemaphoreTakeRecursive( ( SemaphoreHandle_t ) &pMutex->xMutex, timeout );
    }
    else
    {
        lockResult = xSemaphoreTake( ( SemaphoreHandle_t ) &pMutex->xMutex, timeout );
    53ae:	4b09      	ldr	r3, [pc, #36]	; (53d4 <prIotMutexTimedLock+0x30>)
    53b0:	4798      	blx	r3
    }

    return( lockResult == pdTRUE );
}
    53b2:	2801      	cmp	r0, #1
    53b4:	bf14      	ite	ne
    53b6:	2000      	movne	r0, #0
    53b8:	2001      	moveq	r0, #1
    53ba:	bd08      	pop	{r3, pc}
    53bc:	f04f 0380 	mov.w	r3, #128	; 0x80
    53c0:	f383 8811 	msr	BASEPRI, r3
    53c4:	f3bf 8f6f 	isb	sy
    53c8:	f3bf 8f4f 	dsb	sy
    53cc:	e7fe      	b.n	53cc <prIotMutexTimedLock+0x28>
        lockResult = xSemaphoreTakeRecursive( ( SemaphoreHandle_t ) &pMutex->xMutex, timeout );
    53ce:	4b02      	ldr	r3, [pc, #8]	; (53d8 <prIotMutexTimedLock+0x34>)
    53d0:	4798      	blx	r3
    53d2:	e7ee      	b.n	53b2 <prIotMutexTimedLock+0xe>
    53d4:	00007139 	.word	0x00007139
    53d8:	00007319 	.word	0x00007319

000053dc <Platform_CreateDetachedThread>:
                                    size_t stackSize )
{
    bool status = true;
    threadInfo_t * pThreadInfo = NULL;

    configASSERT( threadRoutine != NULL );
    53dc:	2800      	cmp	r0, #0
    53de:	d02f      	beq.n	5440 <Platform_CreateDetachedThread+0x64>
{
    53e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    53e4:	b083      	sub	sp, #12
    53e6:	4681      	mov	r9, r0
    53e8:	461e      	mov	r6, r3
    53ea:	4617      	mov	r7, r2
    53ec:	4688      	mov	r8, r1

    CellularLogDebug( "Creating new thread." );

    pThreadInfo = Platform_Malloc( sizeof( threadInfo_t ) );
    53ee:	2008      	movs	r0, #8
    53f0:	4b19      	ldr	r3, [pc, #100]	; (5458 <Platform_CreateDetachedThread+0x7c>)
    53f2:	4798      	blx	r3

    if( pThreadInfo == NULL )
    53f4:	4605      	mov	r5, r0
    53f6:	2800      	cmp	r0, #0
    53f8:	d02b      	beq.n	5452 <Platform_CreateDetachedThread+0x76>
    bool status = true;
    53fa:	2401      	movs	r4, #1
        CellularLogDebug( "Unable to allocate memory for threadRoutine %p.", threadRoutine );
        status = false;
    }

    /* Create the FreeRTOS task that will run the thread. */
    if( status == true )
    53fc:	b1e4      	cbz	r4, 5438 <Platform_CreateDetachedThread+0x5c>
    {
        pThreadInfo->threadRoutine = threadRoutine;
    53fe:	f8c5 9004 	str.w	r9, [r5, #4]
        pThreadInfo->pArgument = pArgument;
    5402:	f8c5 8000 	str.w	r8, [r5]

        if( xTaskCreate( prvThreadRoutineWrapper,
    5406:	2300      	movs	r3, #0
    5408:	9301      	str	r3, [sp, #4]
    540a:	9700      	str	r7, [sp, #0]
    540c:	462b      	mov	r3, r5
    540e:	b2b2      	uxth	r2, r6
    5410:	4912      	ldr	r1, [pc, #72]	; (545c <Platform_CreateDetachedThread+0x80>)
    5412:	4813      	ldr	r0, [pc, #76]	; (5460 <Platform_CreateDetachedThread+0x84>)
    5414:	4e13      	ldr	r6, [pc, #76]	; (5464 <Platform_CreateDetachedThread+0x88>)
    5416:	47b0      	blx	r6
    5418:	2801      	cmp	r0, #1
    541a:	d00d      	beq.n	5438 <Platform_CreateDetachedThread+0x5c>
                         pThreadInfo,
                         priority,
                         NULL ) != pdPASS )
        {
            /* Task creation failed. */
            CellularLogWarn( "Failed to create thread." );
    541c:	2372      	movs	r3, #114	; 0x72
    541e:	4a12      	ldr	r2, [pc, #72]	; (5468 <Platform_CreateDetachedThread+0x8c>)
    5420:	4912      	ldr	r1, [pc, #72]	; (546c <Platform_CreateDetachedThread+0x90>)
    5422:	4813      	ldr	r0, [pc, #76]	; (5470 <Platform_CreateDetachedThread+0x94>)
    5424:	4c13      	ldr	r4, [pc, #76]	; (5474 <Platform_CreateDetachedThread+0x98>)
    5426:	47a0      	blx	r4
    5428:	4813      	ldr	r0, [pc, #76]	; (5478 <Platform_CreateDetachedThread+0x9c>)
    542a:	47a0      	blx	r4
    542c:	4813      	ldr	r0, [pc, #76]	; (547c <Platform_CreateDetachedThread+0xa0>)
    542e:	47a0      	blx	r4
            Platform_Free( pThreadInfo );
    5430:	4628      	mov	r0, r5
    5432:	4b13      	ldr	r3, [pc, #76]	; (5480 <Platform_CreateDetachedThread+0xa4>)
    5434:	4798      	blx	r3
            status = false;
    5436:	2400      	movs	r4, #0
            CellularLogDebug( "New thread created." );
        }
    }

    return status;
}
    5438:	4620      	mov	r0, r4
    543a:	b003      	add	sp, #12
    543c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5440:	f04f 0380 	mov.w	r3, #128	; 0x80
    5444:	f383 8811 	msr	BASEPRI, r3
    5448:	f3bf 8f6f 	isb	sy
    544c:	f3bf 8f4f 	dsb	sy
    5450:	e7fe      	b.n	5450 <Platform_CreateDetachedThread+0x74>
        status = false;
    5452:	2400      	movs	r4, #0
    5454:	e7d2      	b.n	53fc <Platform_CreateDetachedThread+0x20>
    5456:	bf00      	nop
    5458:	0000655d 	.word	0x0000655d
    545c:	0000db44 	.word	0x0000db44
    5460:	00005385 	.word	0x00005385
    5464:	000077b5 	.word	0x000077b5
    5468:	0000db24 	.word	0x0000db24
    546c:	0000a174 	.word	0x0000a174
    5470:	0000b058 	.word	0x0000b058
    5474:	00005bfd 	.word	0x00005bfd
    5478:	0000db54 	.word	0x0000db54
    547c:	0000dcf4 	.word	0x0000dcf4
    5480:	00006691 	.word	0x00006691

00005484 <PlatformMutex_Create>:

/*-----------------------------------------------------------*/

bool PlatformMutex_Create( PlatformMutex_t * pNewMutex,
                           bool recursive )
{
    5484:	b538      	push	{r3, r4, r5, lr}
    SemaphoreHandle_t xSemaphore = NULL;
    bool retMutexCreate = false;

    configASSERT( pNewMutex != NULL );
    5486:	b160      	cbz	r0, 54a2 <PlatformMutex_Create+0x1e>
    5488:	4604      	mov	r4, r0
    548a:	460d      	mov	r5, r1

    CellularLogDebug( "Creating new mutex %p.", pNewMutex );

    if( recursive == true )
    548c:	b191      	cbz	r1, 54b4 <PlatformMutex_Create+0x30>
    {
        xSemaphore = xSemaphoreCreateRecursiveMutexStatic( &pNewMutex->xMutex );
    548e:	4601      	mov	r1, r0
    5490:	2004      	movs	r0, #4
    5492:	4b0c      	ldr	r3, [pc, #48]	; (54c4 <PlatformMutex_Create+0x40>)
    5494:	4798      	blx	r3
    {
        xSemaphore = xSemaphoreCreateMutexStatic( &pNewMutex->xMutex );
    }

    /* Remember the type of mutex. */
    if( recursive == true )
    5496:	b195      	cbz	r5, 54be <PlatformMutex_Create+0x3a>
    {
        pNewMutex->recursive = pdTRUE;
    5498:	2301      	movs	r3, #1
    549a:	6563      	str	r3, [r4, #84]	; 0x54
    {
        pNewMutex->recursive = pdFALSE;
    }

    /* Check the handle value returned by the mutex create function. */
    if( xSemaphore == NULL )
    549c:	b100      	cbz	r0, 54a0 <PlatformMutex_Create+0x1c>
    {
        retMutexCreate = false;
    }
    else
    {
        retMutexCreate = true;
    549e:	2001      	movs	r0, #1
    }

    return retMutexCreate;
}
    54a0:	bd38      	pop	{r3, r4, r5, pc}
    54a2:	f04f 0380 	mov.w	r3, #128	; 0x80
    54a6:	f383 8811 	msr	BASEPRI, r3
    54aa:	f3bf 8f6f 	isb	sy
    54ae:	f3bf 8f4f 	dsb	sy
    54b2:	e7fe      	b.n	54b2 <PlatformMutex_Create+0x2e>
        xSemaphore = xSemaphoreCreateMutexStatic( &pNewMutex->xMutex );
    54b4:	4601      	mov	r1, r0
    54b6:	2001      	movs	r0, #1
    54b8:	4b02      	ldr	r3, [pc, #8]	; (54c4 <PlatformMutex_Create+0x40>)
    54ba:	4798      	blx	r3
    54bc:	e7eb      	b.n	5496 <PlatformMutex_Create+0x12>
        pNewMutex->recursive = pdFALSE;
    54be:	2300      	movs	r3, #0
    54c0:	6563      	str	r3, [r4, #84]	; 0x54
    54c2:	e7eb      	b.n	549c <PlatformMutex_Create+0x18>
    54c4:	00006d41 	.word	0x00006d41

000054c8 <PlatformMutex_Destroy>:

/*-----------------------------------------------------------*/

void PlatformMutex_Destroy( PlatformMutex_t * pMutex )
{
    54c8:	b508      	push	{r3, lr}
    configASSERT( pMutex != NULL );
    54ca:	b940      	cbnz	r0, 54de <PlatformMutex_Destroy+0x16>
    54cc:	f04f 0380 	mov.w	r3, #128	; 0x80
    54d0:	f383 8811 	msr	BASEPRI, r3
    54d4:	f3bf 8f6f 	isb	sy
    54d8:	f3bf 8f4f 	dsb	sy
    54dc:	e7fe      	b.n	54dc <PlatformMutex_Destroy+0x14>

    vSemaphoreDelete( ( SemaphoreHandle_t ) &pMutex->xMutex );
    54de:	4b01      	ldr	r3, [pc, #4]	; (54e4 <PlatformMutex_Destroy+0x1c>)
    54e0:	4798      	blx	r3
    54e2:	bd08      	pop	{r3, pc}
    54e4:	00007365 	.word	0x00007365

000054e8 <PlatformMutex_Lock>:
}

/*-----------------------------------------------------------*/

void PlatformMutex_Lock( PlatformMutex_t * pMutex )
{
    54e8:	b508      	push	{r3, lr}
    prIotMutexTimedLock( pMutex, portMAX_DELAY );
    54ea:	f04f 31ff 	mov.w	r1, #4294967295
    54ee:	4b01      	ldr	r3, [pc, #4]	; (54f4 <PlatformMutex_Lock+0xc>)
    54f0:	4798      	blx	r3
    54f2:	bd08      	pop	{r3, pc}
    54f4:	000053a5 	.word	0x000053a5

000054f8 <PlatformMutex_Unlock>:

/*-----------------------------------------------------------*/

void PlatformMutex_Unlock( PlatformMutex_t * pMutex )
{
    configASSERT( pMutex != NULL );
    54f8:	b148      	cbz	r0, 550e <PlatformMutex_Unlock+0x16>
{
    54fa:	b510      	push	{r4, lr}

    CellularLogDebug( "Unlocking mutex %p.", pMutex );

    /* Call the correct FreeRTOS mutex unlock function based on mutex type. */
    if( pMutex->recursive == pdTRUE )
    54fc:	6d43      	ldr	r3, [r0, #84]	; 0x54
    54fe:	2b01      	cmp	r3, #1
    5500:	d00e      	beq.n	5520 <PlatformMutex_Unlock+0x28>
    {
        ( void ) xSemaphoreGiveRecursive( ( SemaphoreHandle_t ) &pMutex->xMutex );
    }
    else
    {
        ( void ) xSemaphoreGive( ( SemaphoreHandle_t ) &pMutex->xMutex );
    5502:	2300      	movs	r3, #0
    5504:	461a      	mov	r2, r3
    5506:	4619      	mov	r1, r3
    5508:	4c07      	ldr	r4, [pc, #28]	; (5528 <PlatformMutex_Unlock+0x30>)
    550a:	47a0      	blx	r4
    550c:	bd10      	pop	{r4, pc}
    550e:	f04f 0380 	mov.w	r3, #128	; 0x80
    5512:	f383 8811 	msr	BASEPRI, r3
    5516:	f3bf 8f6f 	isb	sy
    551a:	f3bf 8f4f 	dsb	sy
    551e:	e7fe      	b.n	551e <PlatformMutex_Unlock+0x26>
        ( void ) xSemaphoreGiveRecursive( ( SemaphoreHandle_t ) &pMutex->xMutex );
    5520:	4b02      	ldr	r3, [pc, #8]	; (552c <PlatformMutex_Unlock+0x34>)
    5522:	4798      	blx	r3
    5524:	bd10      	pop	{r4, pc}
    5526:	bf00      	nop
    5528:	00006b45 	.word	0x00006b45
    552c:	00006d69 	.word	0x00006d69

00005530 <setupCellular>:
uint8_t CellularSocketPdnContextId = CELLULAR_PDN_CONTEXT_ID;

/*-----------------------------------------------------------*/

bool setupCellular( void )
{
    5530:	b570      	push	{r4, r5, r6, lr}
    5532:	b0d4      	sub	sp, #336	; 0x150
    bool cellularRet = true;
    CellularError_t cellularStatus = CELLULAR_SUCCESS;
    CellularSimCardStatus_t simStatus = { 0 };
    5534:	2400      	movs	r4, #0
    5536:	f8ad 414c 	strh.w	r4, [sp, #332]	; 0x14c
    CellularServiceStatus_t serviceStatus = { 0 };
    553a:	2232      	movs	r2, #50	; 0x32
    553c:	4621      	mov	r1, r4
    553e:	a846      	add	r0, sp, #280	; 0x118
    5540:	4d77      	ldr	r5, [pc, #476]	; (5720 <setupCellular+0x1f0>)
    5542:	47a8      	blx	r5
    CellularCommInterface_t * pCommIntf = &CellularCommInterface;
    uint8_t tries = 0;
    CellularPdnConfig_t pdnConfig = { CELLULAR_PDN_CONTEXT_IPV4, CELLULAR_PDN_AUTH_NONE, CELLULAR_APN, "", "" };
    5544:	2285      	movs	r2, #133	; 0x85
    5546:	4977      	ldr	r1, [pc, #476]	; (5724 <setupCellular+0x1f4>)
    5548:	a824      	add	r0, sp, #144	; 0x90
    554a:	4b77      	ldr	r3, [pc, #476]	; (5728 <setupCellular+0x1f8>)
    554c:	4798      	blx	r3
    CellularPdnStatus_t PdnStatusBuffers = { 0 };
    554e:	2245      	movs	r2, #69	; 0x45
    5550:	4621      	mov	r1, r4
    5552:	a812      	add	r0, sp, #72	; 0x48
    5554:	47a8      	blx	r5
    char localIP[ CELLULAR_IP_ADDRESS_MAX_SIZE ] = { '\0' };
    5556:	2240      	movs	r2, #64	; 0x40
    5558:	4621      	mov	r1, r4
    555a:	a802      	add	r0, sp, #8
    555c:	47a8      	blx	r5
    uint32_t timeoutCountLimit = ( CELLULAR_PDN_CONNECT_TIMEOUT / CELLULAR_PDN_CONNECT_WAIT_INTERVAL_MS ) + 1U;
    uint32_t timeoutCount = 0;
    uint8_t NumStatus = 1;
    555e:	2301      	movs	r3, #1
    5560:	f88d 3007 	strb.w	r3, [sp, #7]

    /* Initialize Cellular Comm Interface. */
    cellularStatus = Cellular_Init( &CellularHandle, pCommIntf );
    5564:	4971      	ldr	r1, [pc, #452]	; (572c <setupCellular+0x1fc>)
    5566:	4872      	ldr	r0, [pc, #456]	; (5730 <setupCellular+0x200>)
    5568:	4b72      	ldr	r3, [pc, #456]	; (5734 <setupCellular+0x204>)
    556a:	4798      	blx	r3

    if( cellularStatus == CELLULAR_SUCCESS )
    556c:	4606      	mov	r6, r0
    556e:	2800      	cmp	r0, #0
    5570:	d055      	beq.n	561e <setupCellular+0xee>
            vTaskDelay( pdMS_TO_TICKS( CELLULAR_SIM_CARD_WAIT_INTERVAL_MS ) );
        }
    }

    /* Setup the PDN config. */
    if( cellularStatus == CELLULAR_SUCCESS )
    5572:	2e00      	cmp	r6, #0
    5574:	d155      	bne.n	5622 <setupCellular+0xf2>
    {
        cellularStatus = Cellular_SetPdnConfig( CellularHandle, CellularSocketPdnContextId, &pdnConfig );
    5576:	aa24      	add	r2, sp, #144	; 0x90
    5578:	4b6f      	ldr	r3, [pc, #444]	; (5738 <setupCellular+0x208>)
    557a:	7819      	ldrb	r1, [r3, #0]
    557c:	4b6c      	ldr	r3, [pc, #432]	; (5730 <setupCellular+0x200>)
    557e:	6818      	ldr	r0, [r3, #0]
    5580:	4b6e      	ldr	r3, [pc, #440]	; (573c <setupCellular+0x20c>)
    5582:	4798      	blx	r3
    5584:	4606      	mov	r6, r0
    {
        LogError( ( ">>>  Cellular SIM failure  <<<\r\n" ) );
    }

    /* Rescan network. */
    if( cellularStatus == CELLULAR_SUCCESS )
    5586:	2e00      	cmp	r6, #0
    5588:	d056      	beq.n	5638 <setupCellular+0x108>
    {
        cellularStatus = Cellular_RfOff( CellularHandle );
    }

    if( cellularStatus == CELLULAR_SUCCESS )
    558a:	2e00      	cmp	r6, #0
    558c:	d05a      	beq.n	5644 <setupCellular+0x114>
    {
        cellularStatus = Cellular_RfOn( CellularHandle );
    }

    /* Get service status. */
    if( cellularStatus == CELLULAR_SUCCESS )
    558e:	2e00      	cmp	r6, #0
    5590:	f000 8097 	beq.w	56c2 <setupCellular+0x192>

            vTaskDelay( pdMS_TO_TICKS( CELLULAR_PDN_CONNECT_WAIT_INTERVAL_MS ) );
        }
    }

    if( cellularStatus == CELLULAR_SUCCESS )
    5594:	2e00      	cmp	r6, #0
    5596:	f000 8096 	beq.w	56c6 <setupCellular+0x196>
    {
        cellularStatus = Cellular_ActivatePdn( CellularHandle, CellularSocketPdnContextId );
    }

    if( cellularStatus == CELLULAR_SUCCESS )
    559a:	2e00      	cmp	r6, #0
    559c:	f000 809b 	beq.w	56d6 <setupCellular+0x1a6>
    {
        cellularStatus = Cellular_GetIPAddress( CellularHandle, CellularSocketPdnContextId, localIP, sizeof( localIP ) );
    }

    if( cellularStatus == CELLULAR_SUCCESS )
    55a0:	2e00      	cmp	r6, #0
    55a2:	f000 80a2 	beq.w	56ea <setupCellular+0x1ba>
    {
        cellularStatus = Cellular_GetPdnStatus( CellularHandle, &PdnStatusBuffers, CellularSocketPdnContextId, &NumStatus );
    }

    if( ( cellularStatus == CELLULAR_SUCCESS ) && ( PdnStatusBuffers.state == 1 ) )
    55a6:	2e00      	cmp	r6, #0
    55a8:	f040 80b7 	bne.w	571a <setupCellular+0x1ea>
    55ac:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    55b0:	2b01      	cmp	r3, #1
    55b2:	f000 80a5 	beq.w	5700 <setupCellular+0x1d0>
        LogInfo( ( ">>>  Cellular module registered, IP address %s  <<<\r\n", localIP ) );
        cellularRet = true;
    }
    else
    {
        cellularRet = false;
    55b6:	2000      	movs	r0, #0
    }

    return cellularRet;
}
    55b8:	b054      	add	sp, #336	; 0x150
    55ba:	bd70      	pop	{r4, r5, r6, pc}
                LogInfo( ( ">>>  Cellular SIM card state %d, Lock State %d <<<\r\n",
    55bc:	235b      	movs	r3, #91	; 0x5b
    55be:	4a60      	ldr	r2, [pc, #384]	; (5740 <setupCellular+0x210>)
    55c0:	4960      	ldr	r1, [pc, #384]	; (5744 <setupCellular+0x214>)
    55c2:	4861      	ldr	r0, [pc, #388]	; (5748 <setupCellular+0x218>)
    55c4:	4d61      	ldr	r5, [pc, #388]	; (574c <setupCellular+0x21c>)
    55c6:	47a8      	blx	r5
    55c8:	f89d 214d 	ldrb.w	r2, [sp, #333]	; 0x14d
    55cc:	f89d 114c 	ldrb.w	r1, [sp, #332]	; 0x14c
    55d0:	485f      	ldr	r0, [pc, #380]	; (5750 <setupCellular+0x220>)
    55d2:	47a8      	blx	r5
    55d4:	485f      	ldr	r0, [pc, #380]	; (5754 <setupCellular+0x224>)
    55d6:	47a8      	blx	r5
            vTaskDelay( pdMS_TO_TICKS( CELLULAR_SIM_CARD_WAIT_INTERVAL_MS ) );
    55d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    55dc:	4b5e      	ldr	r3, [pc, #376]	; (5758 <setupCellular+0x228>)
    55de:	4798      	blx	r3
        for( tries = 0; tries < CELLULAR_MAX_SIM_RETRY; tries++ )
    55e0:	3401      	adds	r4, #1
    55e2:	b2e4      	uxtb	r4, r4
    55e4:	2c04      	cmp	r4, #4
    55e6:	d8c4      	bhi.n	5572 <setupCellular+0x42>
            cellularStatus = Cellular_GetSimCardStatus( CellularHandle, &simStatus );
    55e8:	a953      	add	r1, sp, #332	; 0x14c
    55ea:	4b51      	ldr	r3, [pc, #324]	; (5730 <setupCellular+0x200>)
    55ec:	6818      	ldr	r0, [r3, #0]
    55ee:	4b5b      	ldr	r3, [pc, #364]	; (575c <setupCellular+0x22c>)
    55f0:	4798      	blx	r3
            if( ( cellularStatus == CELLULAR_SUCCESS ) &&
    55f2:	4606      	mov	r6, r0
    55f4:	2800      	cmp	r0, #0
    55f6:	d1e1      	bne.n	55bc <setupCellular+0x8c>
                ( ( simStatus.simCardState == CELLULAR_SIM_CARD_INSERTED ) &&
    55f8:	f89d 314c 	ldrb.w	r3, [sp, #332]	; 0x14c
            if( ( cellularStatus == CELLULAR_SUCCESS ) &&
    55fc:	2b01      	cmp	r3, #1
    55fe:	d1dd      	bne.n	55bc <setupCellular+0x8c>
                  ( simStatus.simCardLockState == CELLULAR_SIM_CARD_READY ) ) )
    5600:	f89d 314d 	ldrb.w	r3, [sp, #333]	; 0x14d
                ( ( simStatus.simCardState == CELLULAR_SIM_CARD_INSERTED ) &&
    5604:	2b00      	cmp	r3, #0
    5606:	d1d9      	bne.n	55bc <setupCellular+0x8c>
                LogInfo( ( ">>>  Cellular SIM okay  <<<\r\n" ) );
    5608:	2354      	movs	r3, #84	; 0x54
    560a:	4a4d      	ldr	r2, [pc, #308]	; (5740 <setupCellular+0x210>)
    560c:	494d      	ldr	r1, [pc, #308]	; (5744 <setupCellular+0x214>)
    560e:	484e      	ldr	r0, [pc, #312]	; (5748 <setupCellular+0x218>)
    5610:	4c4e      	ldr	r4, [pc, #312]	; (574c <setupCellular+0x21c>)
    5612:	47a0      	blx	r4
    5614:	4852      	ldr	r0, [pc, #328]	; (5760 <setupCellular+0x230>)
    5616:	47a0      	blx	r4
    5618:	484e      	ldr	r0, [pc, #312]	; (5754 <setupCellular+0x224>)
    561a:	47a0      	blx	r4
                break;
    561c:	e7a9      	b.n	5572 <setupCellular+0x42>
    561e:	2400      	movs	r4, #0
    5620:	e7e0      	b.n	55e4 <setupCellular+0xb4>
        LogError( ( ">>>  Cellular SIM failure  <<<\r\n" ) );
    5622:	2369      	movs	r3, #105	; 0x69
    5624:	4a46      	ldr	r2, [pc, #280]	; (5740 <setupCellular+0x210>)
    5626:	4947      	ldr	r1, [pc, #284]	; (5744 <setupCellular+0x214>)
    5628:	484e      	ldr	r0, [pc, #312]	; (5764 <setupCellular+0x234>)
    562a:	4c48      	ldr	r4, [pc, #288]	; (574c <setupCellular+0x21c>)
    562c:	47a0      	blx	r4
    562e:	484e      	ldr	r0, [pc, #312]	; (5768 <setupCellular+0x238>)
    5630:	47a0      	blx	r4
    5632:	4848      	ldr	r0, [pc, #288]	; (5754 <setupCellular+0x224>)
    5634:	47a0      	blx	r4
    5636:	e7a6      	b.n	5586 <setupCellular+0x56>
        cellularStatus = Cellular_RfOff( CellularHandle );
    5638:	4b3d      	ldr	r3, [pc, #244]	; (5730 <setupCellular+0x200>)
    563a:	6818      	ldr	r0, [r3, #0]
    563c:	4b4b      	ldr	r3, [pc, #300]	; (576c <setupCellular+0x23c>)
    563e:	4798      	blx	r3
    5640:	4606      	mov	r6, r0
    5642:	e7a2      	b.n	558a <setupCellular+0x5a>
        cellularStatus = Cellular_RfOn( CellularHandle );
    5644:	4b3a      	ldr	r3, [pc, #232]	; (5730 <setupCellular+0x200>)
    5646:	6818      	ldr	r0, [r3, #0]
    5648:	4b49      	ldr	r3, [pc, #292]	; (5770 <setupCellular+0x240>)
    564a:	4798      	blx	r3
    564c:	4606      	mov	r6, r0
    564e:	e79e      	b.n	558e <setupCellular+0x5e>
                LogError( ( ">>>  Cellular GetServiceStatus failed %d, ps registration status %d  <<<\r\n",
    5650:	2388      	movs	r3, #136	; 0x88
    5652:	4a3b      	ldr	r2, [pc, #236]	; (5740 <setupCellular+0x210>)
    5654:	493b      	ldr	r1, [pc, #236]	; (5744 <setupCellular+0x214>)
    5656:	4843      	ldr	r0, [pc, #268]	; (5764 <setupCellular+0x234>)
    5658:	4d3c      	ldr	r5, [pc, #240]	; (574c <setupCellular+0x21c>)
    565a:	47a8      	blx	r5
    565c:	f89d 211b 	ldrb.w	r2, [sp, #283]	; 0x11b
    5660:	4631      	mov	r1, r6
    5662:	4844      	ldr	r0, [pc, #272]	; (5774 <setupCellular+0x244>)
    5664:	47a8      	blx	r5
    5666:	483b      	ldr	r0, [pc, #236]	; (5754 <setupCellular+0x224>)
    5668:	47a8      	blx	r5
            timeoutCount++;
    566a:	3401      	adds	r4, #1
            if( timeoutCount >= timeoutCountLimit )
    566c:	2c64      	cmp	r4, #100	; 0x64
    566e:	d81e      	bhi.n	56ae <setupCellular+0x17e>
            vTaskDelay( pdMS_TO_TICKS( CELLULAR_PDN_CONNECT_WAIT_INTERVAL_MS ) );
    5670:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    5674:	4b38      	ldr	r3, [pc, #224]	; (5758 <setupCellular+0x228>)
    5676:	4798      	blx	r3
        while( timeoutCount < timeoutCountLimit )
    5678:	2c64      	cmp	r4, #100	; 0x64
    567a:	d88b      	bhi.n	5594 <setupCellular+0x64>
            cellularStatus = Cellular_GetServiceStatus( CellularHandle, &serviceStatus );
    567c:	a946      	add	r1, sp, #280	; 0x118
    567e:	4b2c      	ldr	r3, [pc, #176]	; (5730 <setupCellular+0x200>)
    5680:	6818      	ldr	r0, [r3, #0]
    5682:	4b3d      	ldr	r3, [pc, #244]	; (5778 <setupCellular+0x248>)
    5684:	4798      	blx	r3
            if( ( cellularStatus == CELLULAR_SUCCESS ) &&
    5686:	4606      	mov	r6, r0
    5688:	2800      	cmp	r0, #0
    568a:	d1e1      	bne.n	5650 <setupCellular+0x120>
                ( ( serviceStatus.psRegistrationStatus == REGISTRATION_STATUS_REGISTERED_HOME) ||
    568c:	f89d 311b 	ldrb.w	r3, [sp, #283]	; 0x11b
            if( ( cellularStatus == CELLULAR_SUCCESS ) &&
    5690:	2b01      	cmp	r3, #1
    5692:	d001      	beq.n	5698 <setupCellular+0x168>
                ( ( serviceStatus.psRegistrationStatus == REGISTRATION_STATUS_REGISTERED_HOME) ||
    5694:	2b05      	cmp	r3, #5
    5696:	d1db      	bne.n	5650 <setupCellular+0x120>
                LogInfo( ( ">>>  Cellular module registered  <<<\r\n" ) );
    5698:	2382      	movs	r3, #130	; 0x82
    569a:	4a29      	ldr	r2, [pc, #164]	; (5740 <setupCellular+0x210>)
    569c:	4929      	ldr	r1, [pc, #164]	; (5744 <setupCellular+0x214>)
    569e:	482a      	ldr	r0, [pc, #168]	; (5748 <setupCellular+0x218>)
    56a0:	4c2a      	ldr	r4, [pc, #168]	; (574c <setupCellular+0x21c>)
    56a2:	47a0      	blx	r4
    56a4:	4835      	ldr	r0, [pc, #212]	; (577c <setupCellular+0x24c>)
    56a6:	47a0      	blx	r4
    56a8:	482a      	ldr	r0, [pc, #168]	; (5754 <setupCellular+0x224>)
    56aa:	47a0      	blx	r4
                break;
    56ac:	e772      	b.n	5594 <setupCellular+0x64>
                LogError( ( ">>>  Cellular module can't be registered  <<<\r\n" ) );
    56ae:	238f      	movs	r3, #143	; 0x8f
    56b0:	4a23      	ldr	r2, [pc, #140]	; (5740 <setupCellular+0x210>)
    56b2:	4924      	ldr	r1, [pc, #144]	; (5744 <setupCellular+0x214>)
    56b4:	482b      	ldr	r0, [pc, #172]	; (5764 <setupCellular+0x234>)
    56b6:	47a8      	blx	r5
    56b8:	4831      	ldr	r0, [pc, #196]	; (5780 <setupCellular+0x250>)
    56ba:	47a8      	blx	r5
    56bc:	4825      	ldr	r0, [pc, #148]	; (5754 <setupCellular+0x224>)
    56be:	47a8      	blx	r5
    56c0:	e7d6      	b.n	5670 <setupCellular+0x140>
    56c2:	2400      	movs	r4, #0
    56c4:	e7d8      	b.n	5678 <setupCellular+0x148>
        cellularStatus = Cellular_ActivatePdn( CellularHandle, CellularSocketPdnContextId );
    56c6:	4b1c      	ldr	r3, [pc, #112]	; (5738 <setupCellular+0x208>)
    56c8:	7819      	ldrb	r1, [r3, #0]
    56ca:	4b19      	ldr	r3, [pc, #100]	; (5730 <setupCellular+0x200>)
    56cc:	6818      	ldr	r0, [r3, #0]
    56ce:	4b2d      	ldr	r3, [pc, #180]	; (5784 <setupCellular+0x254>)
    56d0:	4798      	blx	r3
    56d2:	4606      	mov	r6, r0
    56d4:	e761      	b.n	559a <setupCellular+0x6a>
        cellularStatus = Cellular_GetIPAddress( CellularHandle, CellularSocketPdnContextId, localIP, sizeof( localIP ) );
    56d6:	2340      	movs	r3, #64	; 0x40
    56d8:	aa02      	add	r2, sp, #8
    56da:	4917      	ldr	r1, [pc, #92]	; (5738 <setupCellular+0x208>)
    56dc:	7809      	ldrb	r1, [r1, #0]
    56de:	4814      	ldr	r0, [pc, #80]	; (5730 <setupCellular+0x200>)
    56e0:	6800      	ldr	r0, [r0, #0]
    56e2:	4c29      	ldr	r4, [pc, #164]	; (5788 <setupCellular+0x258>)
    56e4:	47a0      	blx	r4
    56e6:	4606      	mov	r6, r0
    56e8:	e75a      	b.n	55a0 <setupCellular+0x70>
        cellularStatus = Cellular_GetPdnStatus( CellularHandle, &PdnStatusBuffers, CellularSocketPdnContextId, &NumStatus );
    56ea:	f10d 0307 	add.w	r3, sp, #7
    56ee:	4a12      	ldr	r2, [pc, #72]	; (5738 <setupCellular+0x208>)
    56f0:	7812      	ldrb	r2, [r2, #0]
    56f2:	a912      	add	r1, sp, #72	; 0x48
    56f4:	480e      	ldr	r0, [pc, #56]	; (5730 <setupCellular+0x200>)
    56f6:	6800      	ldr	r0, [r0, #0]
    56f8:	4c24      	ldr	r4, [pc, #144]	; (578c <setupCellular+0x25c>)
    56fa:	47a0      	blx	r4
    56fc:	4606      	mov	r6, r0
    56fe:	e752      	b.n	55a6 <setupCellular+0x76>
        LogInfo( ( ">>>  Cellular module registered, IP address %s  <<<\r\n", localIP ) );
    5700:	23a7      	movs	r3, #167	; 0xa7
    5702:	4a0f      	ldr	r2, [pc, #60]	; (5740 <setupCellular+0x210>)
    5704:	490f      	ldr	r1, [pc, #60]	; (5744 <setupCellular+0x214>)
    5706:	4810      	ldr	r0, [pc, #64]	; (5748 <setupCellular+0x218>)
    5708:	4c10      	ldr	r4, [pc, #64]	; (574c <setupCellular+0x21c>)
    570a:	47a0      	blx	r4
    570c:	a902      	add	r1, sp, #8
    570e:	4820      	ldr	r0, [pc, #128]	; (5790 <setupCellular+0x260>)
    5710:	47a0      	blx	r4
    5712:	4810      	ldr	r0, [pc, #64]	; (5754 <setupCellular+0x224>)
    5714:	47a0      	blx	r4
        cellularRet = true;
    5716:	2001      	movs	r0, #1
    5718:	e74e      	b.n	55b8 <setupCellular+0x88>
        cellularRet = false;
    571a:	2000      	movs	r0, #0
    571c:	e74c      	b.n	55b8 <setupCellular+0x88>
    571e:	bf00      	nop
    5720:	000088af 	.word	0x000088af
    5724:	0000db70 	.word	0x0000db70
    5728:	00008865 	.word	0x00008865
    572c:	200000c0 	.word	0x200000c0
    5730:	2000105c 	.word	0x2000105c
    5734:	00001a7d 	.word	0x00001a7d
    5738:	200000a0 	.word	0x200000a0
    573c:	00001801 	.word	0x00001801
    5740:	0000dbf8 	.word	0x0000dbf8
    5744:	0000b258 	.word	0x0000b258
    5748:	0000aae8 	.word	0x0000aae8
    574c:	00005bfd 	.word	0x00005bfd
    5750:	0000dc28 	.word	0x0000dc28
    5754:	0000dcf4 	.word	0x0000dcf4
    5758:	00007c11 	.word	0x00007c11
    575c:	000019cd 	.word	0x000019cd
    5760:	0000dc08 	.word	0x0000dc08
    5764:	0000a188 	.word	0x0000a188
    5768:	0000dc60 	.word	0x0000dc60
    576c:	000022d9 	.word	0x000022d9
    5770:	000022cd 	.word	0x000022cd
    5774:	0000dcac 	.word	0x0000dcac
    5778:	000022f1 	.word	0x000022f1
    577c:	0000dc84 	.word	0x0000dc84
    5780:	0000dcf8 	.word	0x0000dcf8
    5784:	00001731 	.word	0x00001731
    5788:	000022e5 	.word	0x000022e5
    578c:	00001909 	.word	0x00001909
    5790:	0000dd28 	.word	0x0000dd28

00005794 <_getCellularCommContext>:
};
/*-----------------------------------------------------------*/

static _cellularCommContext_t * _getCellularCommContext( void ){
	return &_iotCellularCommContext;
}
    5794:	4800      	ldr	r0, [pc, #0]	; (5798 <_getCellularCommContext+0x4>)
    5796:	4770      	bx	lr
    5798:	200000a4 	.word	0x200000a4

0000579c <_prvCommIntfClose>:
static CellularCommInterfaceError_t _prvCommIntfClose( CellularCommInterfaceHandle_t commInterfaceHandle ){
	CellularCommInterfaceError_t commIntRet = IOT_COMM_INTERFACE_SUCCESS;
	
	return commIntRet;
	
}
    579c:	2000      	movs	r0, #0
    579e:	4770      	bx	lr

000057a0 <_prvCommIntfReceive>:
														 uint32_t timeoutMilliseconds, uint32_t * pDataReceivedLength ){
    57a0:	b570      	push	{r4, r5, r6, lr}
    57a2:	b082      	sub	sp, #8
    57a4:	460d      	mov	r5, r1
    57a6:	4616      	mov	r6, r2
    if( pCellularCommContext == NULL ){
    57a8:	b1a0      	cbz	r0, 57d4 <_prvCommIntfReceive+0x34>
    }else if( ( pCellularCommContext->commStatus & CELLULAR_COMM_OPEN_BIT ) == 0 ){
    57aa:	7a03      	ldrb	r3, [r0, #8]
    57ac:	f013 0f01 	tst.w	r3, #1
    57b0:	d004      	beq.n	57bc <_prvCommIntfReceive+0x1c>
	CellularCommInterfaceError_t commIntRet = IOT_COMM_INTERFACE_SUCCESS;
    57b2:	2400      	movs	r4, #0
	if( commIntRet == IOT_COMM_INTERFACE_SUCCESS ){
    57b4:	b184      	cbz	r4, 57d8 <_prvCommIntfReceive+0x38>
}
    57b6:	4620      	mov	r0, r4
    57b8:	b002      	add	sp, #8
    57ba:	bd70      	pop	{r4, r5, r6, pc}
	    CellularLogError( "Cellular read comm interface is not opened before." );
    57bc:	23b7      	movs	r3, #183	; 0xb7
    57be:	4a14      	ldr	r2, [pc, #80]	; (5810 <_prvCommIntfReceive+0x70>)
    57c0:	4914      	ldr	r1, [pc, #80]	; (5814 <_prvCommIntfReceive+0x74>)
    57c2:	4815      	ldr	r0, [pc, #84]	; (5818 <_prvCommIntfReceive+0x78>)
    57c4:	4c15      	ldr	r4, [pc, #84]	; (581c <_prvCommIntfReceive+0x7c>)
    57c6:	47a0      	blx	r4
    57c8:	4815      	ldr	r0, [pc, #84]	; (5820 <_prvCommIntfReceive+0x80>)
    57ca:	47a0      	blx	r4
    57cc:	4815      	ldr	r0, [pc, #84]	; (5824 <_prvCommIntfReceive+0x84>)
    57ce:	47a0      	blx	r4
	    commIntRet = IOT_COMM_INTERFACE_FAILURE;
    57d0:	2401      	movs	r4, #1
    57d2:	e7ef      	b.n	57b4 <_prvCommIntfReceive+0x14>
	    commIntRet = IOT_COMM_INTERFACE_BAD_PARAMETER;
    57d4:	2402      	movs	r4, #2
    57d6:	e7ed      	b.n	57b4 <_prvCommIntfReceive+0x14>
		usart_os_get_io(&SERCOM_1_UART, &io);
    57d8:	a901      	add	r1, sp, #4
    57da:	4813      	ldr	r0, [pc, #76]	; (5828 <_prvCommIntfReceive+0x88>)
    57dc:	4b13      	ldr	r3, [pc, #76]	; (582c <_prvCommIntfReceive+0x8c>)
    57de:	4798      	blx	r3
		int32_t dwRead = io->read(io, pBuffer, bufferLength);
    57e0:	9801      	ldr	r0, [sp, #4]
    57e2:	6843      	ldr	r3, [r0, #4]
    57e4:	b2b2      	uxth	r2, r6
    57e6:	4629      	mov	r1, r5
    57e8:	4798      	blx	r3
		if(dwRead < 0){
    57ea:	1e05      	subs	r5, r0, #0
    57ec:	db02      	blt.n	57f4 <_prvCommIntfReceive+0x54>
			*pDataReceivedLength = ( uint32_t ) dwRead;
    57ee:	9b06      	ldr	r3, [sp, #24]
    57f0:	601d      	str	r5, [r3, #0]
    57f2:	e7e0      	b.n	57b6 <_prvCommIntfReceive+0x16>
            CellularLogError( "Cellular ReadFile fail %d", dwRead );
    57f4:	23c1      	movs	r3, #193	; 0xc1
    57f6:	4a06      	ldr	r2, [pc, #24]	; (5810 <_prvCommIntfReceive+0x70>)
    57f8:	4906      	ldr	r1, [pc, #24]	; (5814 <_prvCommIntfReceive+0x74>)
    57fa:	4807      	ldr	r0, [pc, #28]	; (5818 <_prvCommIntfReceive+0x78>)
    57fc:	4c07      	ldr	r4, [pc, #28]	; (581c <_prvCommIntfReceive+0x7c>)
    57fe:	47a0      	blx	r4
    5800:	4629      	mov	r1, r5
    5802:	480b      	ldr	r0, [pc, #44]	; (5830 <_prvCommIntfReceive+0x90>)
    5804:	47a0      	blx	r4
    5806:	4807      	ldr	r0, [pc, #28]	; (5824 <_prvCommIntfReceive+0x84>)
    5808:	47a0      	blx	r4
            commIntRet = IOT_COMM_INTERFACE_FAILURE;
    580a:	2401      	movs	r4, #1
    580c:	e7d3      	b.n	57b6 <_prvCommIntfReceive+0x16>
    580e:	bf00      	nop
    5810:	0000dd60 	.word	0x0000dd60
    5814:	0000a174 	.word	0x0000a174
    5818:	0000a188 	.word	0x0000a188
    581c:	00005bfd 	.word	0x00005bfd
    5820:	0000dd9c 	.word	0x0000dd9c
    5824:	0000dcf4 	.word	0x0000dcf4
    5828:	20010ce4 	.word	0x20010ce4
    582c:	00000861 	.word	0x00000861
    5830:	0000ddd0 	.word	0x0000ddd0

00005834 <_prvCommIntfSend>:
    if( pCellularCommContext == NULL ){
    5834:	2800      	cmp	r0, #0
    5836:	d030      	beq.n	589a <_prvCommIntfSend+0x66>
													  uint32_t timeoutMilliseconds, uint32_t * pDataSentLength ){
    5838:	b530      	push	{r4, r5, lr}
    583a:	b083      	sub	sp, #12
    583c:	4615      	mov	r5, r2
    583e:	460c      	mov	r4, r1
    }else if( ( pCellularCommContext->commStatus & CELLULAR_COMM_OPEN_BIT ) == 0 ){
    5840:	7a03      	ldrb	r3, [r0, #8]
    5842:	f013 0f01 	tst.w	r3, #1
    5846:	d00f      	beq.n	5868 <_prvCommIntfSend+0x34>
		usart_os_get_io(&SERCOM_1_UART, &io);
    5848:	a901      	add	r1, sp, #4
    584a:	4815      	ldr	r0, [pc, #84]	; (58a0 <_prvCommIntfSend+0x6c>)
    584c:	4b15      	ldr	r3, [pc, #84]	; (58a4 <_prvCommIntfSend+0x70>)
    584e:	4798      	blx	r3
		int32_t dwWritten = io->write(io,  pData, dataLength);
    5850:	9801      	ldr	r0, [sp, #4]
    5852:	6803      	ldr	r3, [r0, #0]
    5854:	b2aa      	uxth	r2, r5
    5856:	4621      	mov	r1, r4
    5858:	4798      	blx	r3
		if(dwWritten < 0){
    585a:	1e04      	subs	r4, r0, #0
    585c:	db10      	blt.n	5880 <_prvCommIntfSend+0x4c>
			*pDataSentLength = (uint32_t)dwWritten;
    585e:	9b06      	ldr	r3, [sp, #24]
    5860:	601c      	str	r4, [r3, #0]
	CellularCommInterfaceError_t commIntRet = IOT_COMM_INTERFACE_SUCCESS;
    5862:	2000      	movs	r0, #0
}
    5864:	b003      	add	sp, #12
    5866:	bd30      	pop	{r4, r5, pc}
	    CellularLogError( "Cellular send comm interface is not opened before." );
    5868:	239c      	movs	r3, #156	; 0x9c
    586a:	4a0f      	ldr	r2, [pc, #60]	; (58a8 <_prvCommIntfSend+0x74>)
    586c:	490f      	ldr	r1, [pc, #60]	; (58ac <_prvCommIntfSend+0x78>)
    586e:	4810      	ldr	r0, [pc, #64]	; (58b0 <_prvCommIntfSend+0x7c>)
    5870:	4c10      	ldr	r4, [pc, #64]	; (58b4 <_prvCommIntfSend+0x80>)
    5872:	47a0      	blx	r4
    5874:	4810      	ldr	r0, [pc, #64]	; (58b8 <_prvCommIntfSend+0x84>)
    5876:	47a0      	blx	r4
    5878:	4810      	ldr	r0, [pc, #64]	; (58bc <_prvCommIntfSend+0x88>)
    587a:	47a0      	blx	r4
	    commIntRet = IOT_COMM_INTERFACE_FAILURE;
    587c:	2001      	movs	r0, #1
    587e:	e7f1      	b.n	5864 <_prvCommIntfSend+0x30>
			CellularLogError( "Cellular Write fail %d",dwWritten);
    5880:	23a4      	movs	r3, #164	; 0xa4
    5882:	4a09      	ldr	r2, [pc, #36]	; (58a8 <_prvCommIntfSend+0x74>)
    5884:	4909      	ldr	r1, [pc, #36]	; (58ac <_prvCommIntfSend+0x78>)
    5886:	480a      	ldr	r0, [pc, #40]	; (58b0 <_prvCommIntfSend+0x7c>)
    5888:	4d0a      	ldr	r5, [pc, #40]	; (58b4 <_prvCommIntfSend+0x80>)
    588a:	47a8      	blx	r5
    588c:	4621      	mov	r1, r4
    588e:	480c      	ldr	r0, [pc, #48]	; (58c0 <_prvCommIntfSend+0x8c>)
    5890:	47a8      	blx	r5
    5892:	480a      	ldr	r0, [pc, #40]	; (58bc <_prvCommIntfSend+0x88>)
    5894:	47a8      	blx	r5
			commIntRet = IOT_COMM_INTERFACE_FAILURE;
    5896:	2001      	movs	r0, #1
    5898:	e7e4      	b.n	5864 <_prvCommIntfSend+0x30>
	    commIntRet = IOT_COMM_INTERFACE_BAD_PARAMETER;
    589a:	2002      	movs	r0, #2
    589c:	4770      	bx	lr
    589e:	bf00      	nop
    58a0:	20010ce4 	.word	0x20010ce4
    58a4:	00000861 	.word	0x00000861
    58a8:	0000dd74 	.word	0x0000dd74
    58ac:	0000a174 	.word	0x0000a174
    58b0:	0000a188 	.word	0x0000a188
    58b4:	00005bfd 	.word	0x00005bfd
    58b8:	0000ddec 	.word	0x0000ddec
    58bc:	0000dcf4 	.word	0x0000dcf4
    58c0:	0000de20 	.word	0x0000de20

000058c4 <_prvCommIntfOpen>:
														CellularCommInterfaceHandle_t * pCommInterfaceHandle ){
    58c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    58c8:	4680      	mov	r8, r0
    58ca:	460f      	mov	r7, r1
    58cc:	4616      	mov	r6, r2
	_cellularCommContext_t * pCellularCommContext = _getCellularCommContext(); 
    58ce:	4b15      	ldr	r3, [pc, #84]	; (5924 <_prvCommIntfOpen+0x60>)
    58d0:	4798      	blx	r3
	if( pCellularCommContext == NULL ){
    58d2:	4604      	mov	r4, r0
    58d4:	b320      	cbz	r0, 5920 <_prvCommIntfOpen+0x5c>
	}else if( ( pCellularCommContext->commStatus & CELLULAR_COMM_OPEN_BIT ) != 0 ){
    58d6:	7a03      	ldrb	r3, [r0, #8]
    58d8:	f013 0f01 	tst.w	r3, #1
    58dc:	d016      	beq.n	590c <_prvCommIntfOpen+0x48>
		   CellularLogError( "Cellular comm interface opened already" );
    58de:	237e      	movs	r3, #126	; 0x7e
    58e0:	4a11      	ldr	r2, [pc, #68]	; (5928 <_prvCommIntfOpen+0x64>)
    58e2:	4912      	ldr	r1, [pc, #72]	; (592c <_prvCommIntfOpen+0x68>)
    58e4:	4812      	ldr	r0, [pc, #72]	; (5930 <_prvCommIntfOpen+0x6c>)
    58e6:	4d13      	ldr	r5, [pc, #76]	; (5934 <_prvCommIntfOpen+0x70>)
    58e8:	47a8      	blx	r5
    58ea:	4813      	ldr	r0, [pc, #76]	; (5938 <_prvCommIntfOpen+0x74>)
    58ec:	47a8      	blx	r5
    58ee:	4813      	ldr	r0, [pc, #76]	; (593c <_prvCommIntfOpen+0x78>)
    58f0:	47a8      	blx	r5
		   commIntRet = IOT_COMM_INTERFACE_FAILURE;
    58f2:	2001      	movs	r0, #1
   if( commIntRet == IOT_COMM_INTERFACE_SUCCESS ){
    58f4:	b908      	cbnz	r0, 58fa <_prvCommIntfOpen+0x36>
	   pCellularCommContext->commReceiveCallback = receiveCallback;
    58f6:	f8c4 8000 	str.w	r8, [r4]
  if( commIntRet == IOT_COMM_INTERFACE_SUCCESS ){
    58fa:	b928      	cbnz	r0, 5908 <_prvCommIntfOpen+0x44>
	  pCellularCommContext->pUserData = pUserData;
    58fc:	60e7      	str	r7, [r4, #12]
	  *pCommInterfaceHandle = ( CellularCommInterfaceHandle_t ) pCellularCommContext;
    58fe:	6034      	str	r4, [r6, #0]
	  pCellularCommContext->commStatus |= CELLULAR_COMM_OPEN_BIT;
    5900:	7a23      	ldrb	r3, [r4, #8]
    5902:	f043 0301 	orr.w	r3, r3, #1
    5906:	7223      	strb	r3, [r4, #8]
}
    5908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memset( pCellularCommContext, 0, sizeof( _cellularCommContext_t ) );
    590c:	2000      	movs	r0, #0
    590e:	6020      	str	r0, [r4, #0]
    5910:	6060      	str	r0, [r4, #4]
    5912:	60a0      	str	r0, [r4, #8]
    5914:	60e0      	str	r0, [r4, #12]
    5916:	6160      	str	r0, [r4, #20]
    5918:	61a0      	str	r0, [r4, #24]
		pCellularCommContext->pCommInterface = &CellularCommInterface;
    591a:	4b09      	ldr	r3, [pc, #36]	; (5940 <_prvCommIntfOpen+0x7c>)
    591c:	6123      	str	r3, [r4, #16]
    591e:	e7e9      	b.n	58f4 <_prvCommIntfOpen+0x30>
		   commIntRet = IOT_COMM_INTERFACE_FAILURE;
    5920:	2001      	movs	r0, #1
    5922:	e7e7      	b.n	58f4 <_prvCommIntfOpen+0x30>
    5924:	00005795 	.word	0x00005795
    5928:	0000dd88 	.word	0x0000dd88
    592c:	0000a174 	.word	0x0000a174
    5930:	0000a188 	.word	0x0000a188
    5934:	00005bfd 	.word	0x00005bfd
    5938:	0000de38 	.word	0x0000de38
    593c:	0000dcf4 	.word	0x0000dcf4
    5940:	200000c0 	.word	0x200000c0

00005944 <UART_writeString>:
#include "stdint.h"
#include "string.h" 
#include "driver_init.h"
#include "iot_logging_helper_fxns.h"

void UART_writeString(const char *buff){
    5944:	b570      	push	{r4, r5, r6, lr}
    5946:	b082      	sub	sp, #8
    5948:	4605      	mov	r5, r0
	struct io_descriptor *io;
	usart_os_get_io(&TARGET_IO, &io);
    594a:	a901      	add	r1, sp, #4
    594c:	4806      	ldr	r0, [pc, #24]	; (5968 <UART_writeString+0x24>)
    594e:	4b07      	ldr	r3, [pc, #28]	; (596c <UART_writeString+0x28>)
    5950:	4798      	blx	r3
	io->write(io, (uint8_t*)buff, strlen(buff));
    5952:	9c01      	ldr	r4, [sp, #4]
    5954:	6826      	ldr	r6, [r4, #0]
    5956:	4628      	mov	r0, r5
    5958:	4b05      	ldr	r3, [pc, #20]	; (5970 <UART_writeString+0x2c>)
    595a:	4798      	blx	r3
    595c:	b282      	uxth	r2, r0
    595e:	4629      	mov	r1, r5
    5960:	4620      	mov	r0, r4
    5962:	47b0      	blx	r6
}
    5964:	b002      	add	sp, #8
    5966:	bd70      	pop	{r4, r5, r6, pc}
    5968:	20010c78 	.word	0x20010c78
    596c:	00000861 	.word	0x00000861
    5970:	00008df1 	.word	0x00008df1

00005974 <prvLoggingTask>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static void prvLoggingTask( void * pvParameters )
{
    5974:	b500      	push	{lr}
    5976:	b083      	sub	sp, #12
    /* Disable unused parameter warning. */
    ( void ) pvParameters;

    char * pcReceivedString = NULL;
    5978:	2300      	movs	r3, #0
    597a:	9301      	str	r3, [sp, #4]

    for( ; ; )
    {
        /* Block to wait for the next string to print. */
        if( xQueueReceive( xQueue, &pcReceivedString, portMAX_DELAY ) == pdPASS )
    597c:	f04f 32ff 	mov.w	r2, #4294967295
    5980:	a901      	add	r1, sp, #4
    5982:	4b06      	ldr	r3, [pc, #24]	; (599c <prvLoggingTask+0x28>)
    5984:	6818      	ldr	r0, [r3, #0]
    5986:	4b06      	ldr	r3, [pc, #24]	; (59a0 <prvLoggingTask+0x2c>)
    5988:	4798      	blx	r3
    598a:	2801      	cmp	r0, #1
    598c:	d1f6      	bne.n	597c <prvLoggingTask+0x8>
        {
            configPRINT_STRING( pcReceivedString );
    598e:	9801      	ldr	r0, [sp, #4]
    5990:	4b04      	ldr	r3, [pc, #16]	; (59a4 <prvLoggingTask+0x30>)
    5992:	4798      	blx	r3
            vPortFree( ( void * ) pcReceivedString );
    5994:	9801      	ldr	r0, [sp, #4]
    5996:	4b04      	ldr	r3, [pc, #16]	; (59a8 <prvLoggingTask+0x34>)
    5998:	4798      	blx	r3
    599a:	e7ef      	b.n	597c <prvLoggingTask+0x8>
    599c:	20001060 	.word	0x20001060
    59a0:	00006fad 	.word	0x00006fad
    59a4:	00005945 	.word	0x00005945
    59a8:	00006691 	.word	0x00006691

000059ac <vsnprintf_safe>:
{
    59ac:	b538      	push	{r3, r4, r5, lr}
    59ae:	460c      	mov	r4, r1
    ret = vsnprintf( s, n, format, arg );
    59b0:	4d04      	ldr	r5, [pc, #16]	; (59c4 <vsnprintf_safe+0x18>)
    59b2:	47a8      	blx	r5
    if( ret >= n )
    59b4:	4284      	cmp	r4, r0
    59b6:	d801      	bhi.n	59bc <vsnprintf_safe+0x10>
        ret = n - 1;
    59b8:	1e60      	subs	r0, r4, #1
    59ba:	bd38      	pop	{r3, r4, r5, pc}
    else if( ret < 0 )
    59bc:	2800      	cmp	r0, #0
    59be:	da00      	bge.n	59c2 <vsnprintf_safe+0x16>
        ret = 0;
    59c0:	2000      	movs	r0, #0
}
    59c2:	bd38      	pop	{r3, r4, r5, pc}
    59c4:	000090f5 	.word	0x000090f5

000059c8 <snprintf_safe>:
{
    59c8:	b40c      	push	{r2, r3}
    59ca:	b510      	push	{r4, lr}
    59cc:	b082      	sub	sp, #8
    59ce:	ab04      	add	r3, sp, #16
    59d0:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start( args, format );
    59d4:	9301      	str	r3, [sp, #4]
    ret = vsnprintf_safe( s, n, format, args );
    59d6:	4c03      	ldr	r4, [pc, #12]	; (59e4 <snprintf_safe+0x1c>)
    59d8:	47a0      	blx	r4
}
    59da:	b002      	add	sp, #8
    59dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    59e0:	b002      	add	sp, #8
    59e2:	4770      	bx	lr
    59e4:	000059ad 	.word	0x000059ad

000059e8 <prvLoggingPrintfCommon>:
static void prvLoggingPrintfCommon( uint8_t usLoggingLevel,
                                    const char * pcFile,
                                    size_t fileLineNo,
                                    const char * pcFormat,
                                    va_list args )
{
    59e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    59ea:	b085      	sub	sp, #20
    59ec:	461e      	mov	r6, r3
    size_t xLength = 0;
    char * pcPrintString = NULL;
    59ee:	2300      	movs	r3, #0
    59f0:	9303      	str	r3, [sp, #12]

    configASSERT( usLoggingLevel <= LOG_DEBUG );
    59f2:	2804      	cmp	r0, #4
    59f4:	d908      	bls.n	5a08 <prvLoggingPrintfCommon+0x20>
    59f6:	f04f 0380 	mov.w	r3, #128	; 0x80
    59fa:	f383 8811 	msr	BASEPRI, r3
    59fe:	f3bf 8f6f 	isb	sy
    5a02:	f3bf 8f4f 	dsb	sy
    5a06:	e7fe      	b.n	5a06 <prvLoggingPrintfCommon+0x1e>
    5a08:	4604      	mov	r4, r0
    5a0a:	460d      	mov	r5, r1
    5a0c:	4617      	mov	r7, r2
    configASSERT( pcFormat != NULL );
    5a0e:	b18e      	cbz	r6, 5a34 <prvLoggingPrintfCommon+0x4c>
    configASSERT( configLOGGING_MAX_MESSAGE_LENGTH > 0 );

    /* The queue is created by xLoggingTaskInitialize().  Check
     * xLoggingTaskInitialize() has been called. */
    configASSERT( xQueue );
    5a10:	4b4f      	ldr	r3, [pc, #316]	; (5b50 <prvLoggingPrintfCommon+0x168>)
    5a12:	681b      	ldr	r3, [r3, #0]
    5a14:	b1bb      	cbz	r3, 5a46 <prvLoggingPrintfCommon+0x5e>

    /* Allocate a buffer to hold the log message. */
    pcPrintString = pvPortMalloc( configLOGGING_MAX_MESSAGE_LENGTH );
    5a16:	f44f 7000 	mov.w	r0, #512	; 0x200
    5a1a:	4b4e      	ldr	r3, [pc, #312]	; (5b54 <prvLoggingPrintfCommon+0x16c>)
    5a1c:	4798      	blx	r3
    5a1e:	9003      	str	r0, [sp, #12]

    if( pcPrintString != NULL )
    5a20:	2800      	cmp	r0, #0
    5a22:	f000 808f 	beq.w	5b44 <prvLoggingPrintfCommon+0x15c>
                }
            #endif /* if ( configLOGGING_INCLUDE_TIME_AND_TASK_NAME == 1 ) */
        }

        /* Choose the string for the log level metadata for the log message. */
        switch( usLoggingLevel )
    5a26:	3c01      	subs	r4, #1
    5a28:	2c03      	cmp	r4, #3
    5a2a:	d815      	bhi.n	5a58 <prvLoggingPrintfCommon+0x70>
    5a2c:	e8df f004 	tbb	[pc, r4]
    5a30:	3e3c3a40 	.word	0x3e3c3a40
    5a34:	f04f 0380 	mov.w	r3, #128	; 0x80
    5a38:	f383 8811 	msr	BASEPRI, r3
    5a3c:	f3bf 8f6f 	isb	sy
    5a40:	f3bf 8f4f 	dsb	sy
    5a44:	e7fe      	b.n	5a44 <prvLoggingPrintfCommon+0x5c>
    5a46:	f04f 0380 	mov.w	r3, #128	; 0x80
    5a4a:	f383 8811 	msr	BASEPRI, r3
    5a4e:	f3bf 8f6f 	isb	sy
    5a52:	f3bf 8f4f 	dsb	sy
    5a56:	e7fe      	b.n	5a56 <prvLoggingPrintfCommon+0x6e>
        const char * pcLevelString = NULL;
    5a58:	2300      	movs	r3, #0
            case LOG_DEBUG:
                pcLevelString = "DEBUG";
        }

        /* Add the chosen log level information as prefix for the message. */
        if( ( pcLevelString != NULL ) && ( xLength < configLOGGING_MAX_MESSAGE_LENGTH ) )
    5a5a:	b35b      	cbz	r3, 5ab4 <prvLoggingPrintfCommon+0xcc>
        {
            xLength += snprintf_safe( pcPrintString + xLength, configLOGGING_MAX_MESSAGE_LENGTH - xLength, "[%s] ", pcLevelString );
    5a5c:	4a3e      	ldr	r2, [pc, #248]	; (5b58 <prvLoggingPrintfCommon+0x170>)
    5a5e:	f44f 7100 	mov.w	r1, #512	; 0x200
    5a62:	4c3e      	ldr	r4, [pc, #248]	; (5b5c <prvLoggingPrintfCommon+0x174>)
    5a64:	47a0      	blx	r4
    5a66:	4604      	mov	r4, r0
        }

        /* If provided, add the source file and line number metadata in the message. */
        if( ( pcFile != NULL ) && ( xLength < configLOGGING_MAX_MESSAGE_LENGTH ) )
    5a68:	b375      	cbz	r5, 5ac8 <prvLoggingPrintfCommon+0xe0>
    5a6a:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    5a6e:	d22b      	bcs.n	5ac8 <prvLoggingPrintfCommon+0xe0>
            /* If a file path is provided, extract only the file name from the string
             * by looking for '/' or '\' directory seperator. */
            const char * pcFileName = NULL;

            /* Check if file path contains "\" as the directory separator. */
            if( strrchr( pcFile, '\\' ) != NULL )
    5a70:	215c      	movs	r1, #92	; 0x5c
    5a72:	4628      	mov	r0, r5
    5a74:	4b3a      	ldr	r3, [pc, #232]	; (5b60 <prvLoggingPrintfCommon+0x178>)
    5a76:	4798      	blx	r3
    5a78:	b1f0      	cbz	r0, 5ab8 <prvLoggingPrintfCommon+0xd0>
            {
                pcFileName = strrchr( pcFile, '\\' ) + 1;
    5a7a:	1c45      	adds	r5, r0, #1
            {
                /* File path contains only file name. */
                pcFileName = pcFile;
            }

            xLength += snprintf_safe( pcPrintString + xLength, configLOGGING_MAX_MESSAGE_LENGTH - xLength, "[%s:%d] ", pcFileName, fileLineNo );
    5a7c:	9700      	str	r7, [sp, #0]
    5a7e:	462b      	mov	r3, r5
    5a80:	4a38      	ldr	r2, [pc, #224]	; (5b64 <prvLoggingPrintfCommon+0x17c>)
    5a82:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
    5a86:	9803      	ldr	r0, [sp, #12]
    5a88:	4420      	add	r0, r4
    5a8a:	4d34      	ldr	r5, [pc, #208]	; (5b5c <prvLoggingPrintfCommon+0x174>)
    5a8c:	47a8      	blx	r5
            configASSERT( xLength > 0 );
    5a8e:	1824      	adds	r4, r4, r0
    5a90:	d11a      	bne.n	5ac8 <prvLoggingPrintfCommon+0xe0>
    5a92:	f04f 0380 	mov.w	r3, #128	; 0x80
    5a96:	f383 8811 	msr	BASEPRI, r3
    5a9a:	f3bf 8f6f 	isb	sy
    5a9e:	f3bf 8f4f 	dsb	sy
    5aa2:	e7fe      	b.n	5aa2 <prvLoggingPrintfCommon+0xba>
                pcLevelString = "WARN";
    5aa4:	4b30      	ldr	r3, [pc, #192]	; (5b68 <prvLoggingPrintfCommon+0x180>)
                break;
    5aa6:	e7d8      	b.n	5a5a <prvLoggingPrintfCommon+0x72>
                pcLevelString = "INFO";
    5aa8:	4b30      	ldr	r3, [pc, #192]	; (5b6c <prvLoggingPrintfCommon+0x184>)
                break;
    5aaa:	e7d6      	b.n	5a5a <prvLoggingPrintfCommon+0x72>
                pcLevelString = "DEBUG";
    5aac:	4b30      	ldr	r3, [pc, #192]	; (5b70 <prvLoggingPrintfCommon+0x188>)
    5aae:	e7d4      	b.n	5a5a <prvLoggingPrintfCommon+0x72>
                pcLevelString = "ERROR";
    5ab0:	4b30      	ldr	r3, [pc, #192]	; (5b74 <prvLoggingPrintfCommon+0x18c>)
    5ab2:	e7d2      	b.n	5a5a <prvLoggingPrintfCommon+0x72>
    size_t xLength = 0;
    5ab4:	2400      	movs	r4, #0
    5ab6:	e7d7      	b.n	5a68 <prvLoggingPrintfCommon+0x80>
            else if( strrchr( pcFile, '/' ) != NULL )
    5ab8:	212f      	movs	r1, #47	; 0x2f
    5aba:	4628      	mov	r0, r5
    5abc:	4b28      	ldr	r3, [pc, #160]	; (5b60 <prvLoggingPrintfCommon+0x178>)
    5abe:	4798      	blx	r3
    5ac0:	2800      	cmp	r0, #0
    5ac2:	d0db      	beq.n	5a7c <prvLoggingPrintfCommon+0x94>
                pcFileName = strrchr( pcFile, '/' ) + 1;
    5ac4:	1c45      	adds	r5, r0, #1
    5ac6:	e7d9      	b.n	5a7c <prvLoggingPrintfCommon+0x94>
        }

        if( xLength < configLOGGING_MAX_MESSAGE_LENGTH )
    5ac8:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    5acc:	d208      	bcs.n	5ae0 <prvLoggingPrintfCommon+0xf8>
        {
            xLength += vsnprintf_safe( pcPrintString + xLength, configLOGGING_MAX_MESSAGE_LENGTH - xLength, pcFormat, args );
    5ace:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5ad0:	4632      	mov	r2, r6
    5ad2:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
    5ad6:	9803      	ldr	r0, [sp, #12]
    5ad8:	4420      	add	r0, r4
    5ada:	4d27      	ldr	r5, [pc, #156]	; (5b78 <prvLoggingPrintfCommon+0x190>)
    5adc:	47a8      	blx	r5
    5ade:	4404      	add	r4, r0
        }

        /* Add newline characters if the message does not end with them.*/
        ulFormatLen = strlen( pcFormat );
    5ae0:	4630      	mov	r0, r6
    5ae2:	4b26      	ldr	r3, [pc, #152]	; (5b7c <prvLoggingPrintfCommon+0x194>)
    5ae4:	4798      	blx	r3

        if( ( ulFormatLen >= 2 ) &&
    5ae6:	2801      	cmp	r0, #1
    5ae8:	d911      	bls.n	5b0e <prvLoggingPrintfCommon+0x126>
            ( strncmp( pcFormat + ulFormatLen, "\r\n", 2 ) != 0 ) &&
    5aea:	2202      	movs	r2, #2
    5aec:	4924      	ldr	r1, [pc, #144]	; (5b80 <prvLoggingPrintfCommon+0x198>)
    5aee:	4430      	add	r0, r6
    5af0:	4b24      	ldr	r3, [pc, #144]	; (5b84 <prvLoggingPrintfCommon+0x19c>)
    5af2:	4798      	blx	r3
        if( ( ulFormatLen >= 2 ) &&
    5af4:	b158      	cbz	r0, 5b0e <prvLoggingPrintfCommon+0x126>
            ( strncmp( pcFormat + ulFormatLen, "\r\n", 2 ) != 0 ) &&
    5af6:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    5afa:	d208      	bcs.n	5b0e <prvLoggingPrintfCommon+0x126>
            ( xLength < configLOGGING_MAX_MESSAGE_LENGTH ) )
        {
            xLength += snprintf_safe( pcPrintString + xLength, configLOGGING_MAX_MESSAGE_LENGTH - xLength, "%s", "\r\n" );
    5afc:	4b20      	ldr	r3, [pc, #128]	; (5b80 <prvLoggingPrintfCommon+0x198>)
    5afe:	4a22      	ldr	r2, [pc, #136]	; (5b88 <prvLoggingPrintfCommon+0x1a0>)
    5b00:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
    5b04:	9803      	ldr	r0, [sp, #12]
    5b06:	4420      	add	r0, r4
    5b08:	4d14      	ldr	r5, [pc, #80]	; (5b5c <prvLoggingPrintfCommon+0x174>)
    5b0a:	47a8      	blx	r5
    5b0c:	4404      	add	r4, r0
        }

        /* The standard says that snprintf writes the terminating NULL
         * character. Just re-write it in case some buggy implementation does
         * not. */
        configASSERT( xLength < configLOGGING_MAX_MESSAGE_LENGTH );
    5b0e:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    5b12:	d308      	bcc.n	5b26 <prvLoggingPrintfCommon+0x13e>
    5b14:	f04f 0380 	mov.w	r3, #128	; 0x80
    5b18:	f383 8811 	msr	BASEPRI, r3
    5b1c:	f3bf 8f6f 	isb	sy
    5b20:	f3bf 8f4f 	dsb	sy
    5b24:	e7fe      	b.n	5b24 <prvLoggingPrintfCommon+0x13c>
        pcPrintString[ xLength ] = '\0';
    5b26:	2200      	movs	r2, #0
    5b28:	9b03      	ldr	r3, [sp, #12]
    5b2a:	551a      	strb	r2, [r3, r4]

        /* Only send the buffer to the logging task if it is
         * not empty. */
        if( xLength > 0 )
    5b2c:	b164      	cbz	r4, 5b48 <prvLoggingPrintfCommon+0x160>
        {
            /* Send the string to the logging task for IO. */
            if( xQueueSend( xQueue, &pcPrintString, loggingDONT_BLOCK ) != pdPASS )
    5b2e:	4613      	mov	r3, r2
    5b30:	a903      	add	r1, sp, #12
    5b32:	4807      	ldr	r0, [pc, #28]	; (5b50 <prvLoggingPrintfCommon+0x168>)
    5b34:	6800      	ldr	r0, [r0, #0]
    5b36:	4c15      	ldr	r4, [pc, #84]	; (5b8c <prvLoggingPrintfCommon+0x1a4>)
    5b38:	47a0      	blx	r4
    5b3a:	2801      	cmp	r0, #1
    5b3c:	d002      	beq.n	5b44 <prvLoggingPrintfCommon+0x15c>
            {
                /* The buffer was not sent so must be freed again. */
                vPortFree( ( void * ) pcPrintString );
    5b3e:	9803      	ldr	r0, [sp, #12]
    5b40:	4b13      	ldr	r3, [pc, #76]	; (5b90 <prvLoggingPrintfCommon+0x1a8>)
    5b42:	4798      	blx	r3
            /* The buffer was not sent, so it must be
             * freed. */
            vPortFree( ( void * ) pcPrintString );
        }
    }
}
    5b44:	b005      	add	sp, #20
    5b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
            vPortFree( ( void * ) pcPrintString );
    5b48:	9803      	ldr	r0, [sp, #12]
    5b4a:	4b11      	ldr	r3, [pc, #68]	; (5b90 <prvLoggingPrintfCommon+0x1a8>)
    5b4c:	4798      	blx	r3
}
    5b4e:	e7f9      	b.n	5b44 <prvLoggingPrintfCommon+0x15c>
    5b50:	20001060 	.word	0x20001060
    5b54:	0000655d 	.word	0x0000655d
    5b58:	0000de78 	.word	0x0000de78
    5b5c:	000059c9 	.word	0x000059c9
    5b60:	00008e67 	.word	0x00008e67
    5b64:	0000b064 	.word	0x0000b064
    5b68:	0000de60 	.word	0x0000de60
    5b6c:	0000de68 	.word	0x0000de68
    5b70:	0000de70 	.word	0x0000de70
    5b74:	00009d08 	.word	0x00009d08
    5b78:	000059ad 	.word	0x000059ad
    5b7c:	00008df1 	.word	0x00008df1
    5b80:	0000dcf4 	.word	0x0000dcf4
    5b84:	00008e01 	.word	0x00008e01
    5b88:	0000c02c 	.word	0x0000c02c
    5b8c:	00006b45 	.word	0x00006b45
    5b90:	00006691 	.word	0x00006691

00005b94 <xLoggingTaskInitialize>:
    if( xQueue == NULL )
    5b94:	4b13      	ldr	r3, [pc, #76]	; (5be4 <xLoggingTaskInitialize+0x50>)
    5b96:	681b      	ldr	r3, [r3, #0]
    5b98:	b10b      	cbz	r3, 5b9e <xLoggingTaskInitialize+0xa>
    BaseType_t xReturn = pdFAIL;
    5b9a:	2000      	movs	r0, #0
    5b9c:	4770      	bx	lr
{
    5b9e:	b530      	push	{r4, r5, lr}
    5ba0:	b083      	sub	sp, #12
    5ba2:	4613      	mov	r3, r2
    5ba4:	460d      	mov	r5, r1
    5ba6:	4604      	mov	r4, r0
        xQueue = xQueueCreate( uxQueueLength, sizeof( char ** ) );
    5ba8:	2200      	movs	r2, #0
    5baa:	2104      	movs	r1, #4
    5bac:	4618      	mov	r0, r3
    5bae:	4b0e      	ldr	r3, [pc, #56]	; (5be8 <xLoggingTaskInitialize+0x54>)
    5bb0:	4798      	blx	r3
    5bb2:	4b0c      	ldr	r3, [pc, #48]	; (5be4 <xLoggingTaskInitialize+0x50>)
    5bb4:	6018      	str	r0, [r3, #0]
        if( xQueue != NULL )
    5bb6:	b180      	cbz	r0, 5bda <xLoggingTaskInitialize+0x46>
            if( xTaskCreate( prvLoggingTask, "Logging", usStackSize, NULL, uxPriority, NULL ) == pdPASS )
    5bb8:	2300      	movs	r3, #0
    5bba:	9301      	str	r3, [sp, #4]
    5bbc:	9500      	str	r5, [sp, #0]
    5bbe:	4622      	mov	r2, r4
    5bc0:	490a      	ldr	r1, [pc, #40]	; (5bec <xLoggingTaskInitialize+0x58>)
    5bc2:	480b      	ldr	r0, [pc, #44]	; (5bf0 <xLoggingTaskInitialize+0x5c>)
    5bc4:	4c0b      	ldr	r4, [pc, #44]	; (5bf4 <xLoggingTaskInitialize+0x60>)
    5bc6:	47a0      	blx	r4
    5bc8:	2801      	cmp	r0, #1
    5bca:	d008      	beq.n	5bde <xLoggingTaskInitialize+0x4a>
                vQueueDelete( xQueue );
    5bcc:	4b05      	ldr	r3, [pc, #20]	; (5be4 <xLoggingTaskInitialize+0x50>)
    5bce:	6818      	ldr	r0, [r3, #0]
    5bd0:	4b09      	ldr	r3, [pc, #36]	; (5bf8 <xLoggingTaskInitialize+0x64>)
    5bd2:	4798      	blx	r3
    BaseType_t xReturn = pdFAIL;
    5bd4:	2000      	movs	r0, #0
}
    5bd6:	b003      	add	sp, #12
    5bd8:	bd30      	pop	{r4, r5, pc}
    BaseType_t xReturn = pdFAIL;
    5bda:	2000      	movs	r0, #0
    5bdc:	e7fb      	b.n	5bd6 <xLoggingTaskInitialize+0x42>
                xReturn = pdPASS;
    5bde:	2001      	movs	r0, #1
    return xReturn;
    5be0:	e7f9      	b.n	5bd6 <xLoggingTaskInitialize+0x42>
    5be2:	bf00      	nop
    5be4:	20001060 	.word	0x20001060
    5be8:	00006aa9 	.word	0x00006aa9
    5bec:	0000de80 	.word	0x0000de80
    5bf0:	00005975 	.word	0x00005975
    5bf4:	000077b5 	.word	0x000077b5
    5bf8:	00007365 	.word	0x00007365

00005bfc <vLoggingPrintf>:
 * print statement.
 *
 */
void vLoggingPrintf( const char * pcFormat,
                     ... )
{
    5bfc:	b40f      	push	{r0, r1, r2, r3}
    5bfe:	b510      	push	{r4, lr}
    5c00:	b084      	sub	sp, #16
    5c02:	aa06      	add	r2, sp, #24
    5c04:	f852 3b04 	ldr.w	r3, [r2], #4
    va_list args;

    va_start( args, pcFormat );
    5c08:	9203      	str	r2, [sp, #12]
	// pass log config as none, this will be override by logInfo,logError or logDebug.
    prvLoggingPrintfCommon( LOG_NONE, NULL, 0, pcFormat, args );
    5c0a:	9200      	str	r2, [sp, #0]
    5c0c:	2200      	movs	r2, #0
    5c0e:	4611      	mov	r1, r2
    5c10:	4610      	mov	r0, r2
    5c12:	4c03      	ldr	r4, [pc, #12]	; (5c20 <vLoggingPrintf+0x24>)
    5c14:	47a0      	blx	r4

    va_end( args );
}
    5c16:	b004      	add	sp, #16
    5c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5c1c:	b004      	add	sp, #16
    5c1e:	4770      	bx	lr
    5c20:	000059e9 	.word	0x000059e9

00005c24 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
    5c24:	b958      	cbnz	r0, 5c3e <_read+0x1a>
{
    5c26:	b508      	push	{r3, lr}
    5c28:	460b      	mov	r3, r1
    5c2a:	4611      	mov	r1, r2
    5c2c:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    5c2e:	4b05      	ldr	r3, [pc, #20]	; (5c44 <_read+0x20>)
    5c30:	4798      	blx	r3
	if (n < 0) {
    5c32:	2800      	cmp	r0, #0
    5c34:	db00      	blt.n	5c38 <_read+0x14>
		return -1;
	}

	return n;
}
    5c36:	bd08      	pop	{r3, pc}
		return -1;
    5c38:	f04f 30ff 	mov.w	r0, #4294967295
    5c3c:	bd08      	pop	{r3, pc}
		return -1;
    5c3e:	f04f 30ff 	mov.w	r0, #4294967295
    5c42:	4770      	bx	lr
    5c44:	00005c9d 	.word	0x00005c9d

00005c48 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    5c48:	3801      	subs	r0, #1
    5c4a:	2802      	cmp	r0, #2
    5c4c:	d80b      	bhi.n	5c66 <_write+0x1e>
{
    5c4e:	b508      	push	{r3, lr}
    5c50:	460b      	mov	r3, r1
    5c52:	4611      	mov	r1, r2
    5c54:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    5c56:	4b05      	ldr	r3, [pc, #20]	; (5c6c <_write+0x24>)
    5c58:	4798      	blx	r3
	if (n < 0) {
    5c5a:	2800      	cmp	r0, #0
    5c5c:	db00      	blt.n	5c60 <_write+0x18>
		return -1;
	}

	return n;
}
    5c5e:	bd08      	pop	{r3, pc}
		return -1;
    5c60:	f04f 30ff 	mov.w	r0, #4294967295
    5c64:	bd08      	pop	{r3, pc}
		return -1;
    5c66:	f04f 30ff 	mov.w	r0, #4294967295
    5c6a:	4770      	bx	lr
    5c6c:	00005cc1 	.word	0x00005cc1

00005c70 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    5c70:	b570      	push	{r4, r5, r6, lr}
    5c72:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    5c74:	4d06      	ldr	r5, [pc, #24]	; (5c90 <stdio_io_init+0x20>)
    5c76:	682b      	ldr	r3, [r5, #0]
    5c78:	2100      	movs	r1, #0
    5c7a:	6898      	ldr	r0, [r3, #8]
    5c7c:	4c05      	ldr	r4, [pc, #20]	; (5c94 <stdio_io_init+0x24>)
    5c7e:	47a0      	blx	r4
	setbuf(stdin, NULL);
    5c80:	682b      	ldr	r3, [r5, #0]
    5c82:	2100      	movs	r1, #0
    5c84:	6858      	ldr	r0, [r3, #4]
    5c86:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    5c88:	4b03      	ldr	r3, [pc, #12]	; (5c98 <stdio_io_init+0x28>)
    5c8a:	601e      	str	r6, [r3, #0]
    5c8c:	bd70      	pop	{r4, r5, r6, pc}
    5c8e:	bf00      	nop
    5c90:	200000d4 	.word	0x200000d4
    5c94:	00008bed 	.word	0x00008bed
    5c98:	20001064 	.word	0x20001064

00005c9c <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    5c9c:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    5c9e:	4b06      	ldr	r3, [pc, #24]	; (5cb8 <stdio_io_read+0x1c>)
    5ca0:	681b      	ldr	r3, [r3, #0]
    5ca2:	b133      	cbz	r3, 5cb2 <stdio_io_read+0x16>
    5ca4:	460a      	mov	r2, r1
    5ca6:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
    5ca8:	b292      	uxth	r2, r2
    5caa:	4618      	mov	r0, r3
    5cac:	4b03      	ldr	r3, [pc, #12]	; (5cbc <stdio_io_read+0x20>)
    5cae:	4798      	blx	r3
    5cb0:	bd08      	pop	{r3, pc}
		return 0;
    5cb2:	2000      	movs	r0, #0
}
    5cb4:	bd08      	pop	{r3, pc}
    5cb6:	bf00      	nop
    5cb8:	20001064 	.word	0x20001064
    5cbc:	000005a1 	.word	0x000005a1

00005cc0 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    5cc0:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    5cc2:	4b06      	ldr	r3, [pc, #24]	; (5cdc <stdio_io_write+0x1c>)
    5cc4:	681b      	ldr	r3, [r3, #0]
    5cc6:	b133      	cbz	r3, 5cd6 <stdio_io_write+0x16>
    5cc8:	460a      	mov	r2, r1
    5cca:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
    5ccc:	b292      	uxth	r2, r2
    5cce:	4618      	mov	r0, r3
    5cd0:	4b03      	ldr	r3, [pc, #12]	; (5ce0 <stdio_io_write+0x20>)
    5cd2:	4798      	blx	r3
    5cd4:	bd08      	pop	{r3, pc}
		return 0;
    5cd6:	2000      	movs	r0, #0
}
    5cd8:	bd08      	pop	{r3, pc}
    5cda:	bf00      	nop
    5cdc:	20001064 	.word	0x20001064
    5ce0:	0000056d 	.word	0x0000056d

00005ce4 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    5ce4:	b510      	push	{r4, lr}

	usart_os_enable(&TARGET_IO);
    5ce6:	4c04      	ldr	r4, [pc, #16]	; (5cf8 <stdio_redirect_init+0x14>)
    5ce8:	4620      	mov	r0, r4
    5cea:	4b04      	ldr	r3, [pc, #16]	; (5cfc <stdio_redirect_init+0x18>)
    5cec:	4798      	blx	r3
	stdio_io_init(&TARGET_IO.io);
    5cee:	4620      	mov	r0, r4
    5cf0:	4b03      	ldr	r3, [pc, #12]	; (5d00 <stdio_redirect_init+0x1c>)
    5cf2:	4798      	blx	r3
    5cf4:	bd10      	pop	{r4, pc}
    5cf6:	bf00      	nop
    5cf8:	20010c78 	.word	0x20010c78
    5cfc:	00000835 	.word	0x00000835
    5d00:	00005c71 	.word	0x00005c71

00005d04 <sem_init>:

/**
 * \brief Semaphore initialization
 */
int32_t sem_init(sem_t *sem, uint32_t count)
{
    5d04:	b538      	push	{r3, r4, r5, lr}
    5d06:	4605      	mov	r5, r0
    5d08:	460c      	mov	r4, r1
	ASSERT(count <= SEMAPHORE_MAX_COUNT);
    5d0a:	222b      	movs	r2, #43	; 0x2b
    5d0c:	4908      	ldr	r1, [pc, #32]	; (5d30 <sem_init+0x2c>)
    5d0e:	2c01      	cmp	r4, #1
    5d10:	bf8c      	ite	hi
    5d12:	2000      	movhi	r0, #0
    5d14:	2001      	movls	r0, #1
    5d16:	4b07      	ldr	r3, [pc, #28]	; (5d34 <sem_init+0x30>)
    5d18:	4798      	blx	r3

	*sem = xSemaphoreCreateCounting((uint32_t)SEMAPHORE_MAX_COUNT, count);
    5d1a:	4621      	mov	r1, r4
    5d1c:	2001      	movs	r0, #1
    5d1e:	4b06      	ldr	r3, [pc, #24]	; (5d38 <sem_init+0x34>)
    5d20:	4798      	blx	r3
    5d22:	6028      	str	r0, [r5, #0]

	return *sem ? ERR_NONE : ERR_NOT_INITIALIZED;
    5d24:	b108      	cbz	r0, 5d2a <sem_init+0x26>
    5d26:	2000      	movs	r0, #0
    5d28:	bd38      	pop	{r3, r4, r5, pc}
    5d2a:	f06f 0013 	mvn.w	r0, #19
}
    5d2e:	bd38      	pop	{r3, r4, r5, pc}
    5d30:	0000de88 	.word	0x0000de88
    5d34:	0000088d 	.word	0x0000088d
    5d38:	00006b01 	.word	0x00006b01

00005d3c <sem_up>:

/**
 * \brief Semaphore up
 */
int32_t sem_up(sem_t *sem)
{
    5d3c:	b510      	push	{r4, lr}
 * \brief Check if it's in ISR handling
 * \return \c true if it's in ISR
 */
static inline bool _is_in_isr(void)
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk);
    5d3e:	4b0d      	ldr	r3, [pc, #52]	; (5d74 <sem_up+0x38>)
    5d40:	685b      	ldr	r3, [r3, #4]
    5d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
	return is_in_isr() ? (xSemaphoreGiveFromISR(*sem, pdFALSE) ? 0 : ERR_ABORTED)
	                   : (xSemaphoreGive(*sem) ? ERR_NONE : ERR_ABORTED);
    5d46:	b133      	cbz	r3, 5d56 <sem_up+0x1a>
	return is_in_isr() ? (xSemaphoreGiveFromISR(*sem, pdFALSE) ? 0 : ERR_ABORTED)
    5d48:	2100      	movs	r1, #0
    5d4a:	6800      	ldr	r0, [r0, #0]
    5d4c:	4b0a      	ldr	r3, [pc, #40]	; (5d78 <sem_up+0x3c>)
    5d4e:	4798      	blx	r3
	                   : (xSemaphoreGive(*sem) ? ERR_NONE : ERR_ABORTED);
    5d50:	b150      	cbz	r0, 5d68 <sem_up+0x2c>
    5d52:	2000      	movs	r0, #0
    5d54:	bd10      	pop	{r4, pc}
    5d56:	2300      	movs	r3, #0
    5d58:	461a      	mov	r2, r3
    5d5a:	4619      	mov	r1, r3
    5d5c:	6800      	ldr	r0, [r0, #0]
    5d5e:	4c07      	ldr	r4, [pc, #28]	; (5d7c <sem_up+0x40>)
    5d60:	47a0      	blx	r4
    5d62:	b120      	cbz	r0, 5d6e <sem_up+0x32>
    5d64:	2000      	movs	r0, #0
    5d66:	bd10      	pop	{r4, pc}
    5d68:	f06f 0002 	mvn.w	r0, #2
    5d6c:	bd10      	pop	{r4, pc}
    5d6e:	f06f 0002 	mvn.w	r0, #2
}
    5d72:	bd10      	pop	{r4, pc}
    5d74:	e000ed00 	.word	0xe000ed00
    5d78:	00006ec5 	.word	0x00006ec5
    5d7c:	00006b45 	.word	0x00006b45

00005d80 <sem_down>:

/**
 * \brief Semaphore down, may suspend the caller thread
 */
int32_t sem_down(sem_t *sem, uint32_t timeout)
{
    5d80:	b508      	push	{r3, lr}
	return xSemaphoreTake(*sem, timeout) ? ERR_NONE : ERR_TIMEOUT;
    5d82:	6800      	ldr	r0, [r0, #0]
    5d84:	4b03      	ldr	r3, [pc, #12]	; (5d94 <sem_down+0x14>)
    5d86:	4798      	blx	r3
    5d88:	b108      	cbz	r0, 5d8e <sem_down+0xe>
    5d8a:	2000      	movs	r0, #0
    5d8c:	bd08      	pop	{r3, pc}
    5d8e:	f06f 0007 	mvn.w	r0, #7
}
    5d92:	bd08      	pop	{r3, pc}
    5d94:	00007139 	.word	0x00007139

00005d98 <sem_deinit>:
/**
 * \brief Semaphore deinitialization
 */
int32_t sem_deinit(sem_t *sem)
{
	if (*sem != NULL) {
    5d98:	6803      	ldr	r3, [r0, #0]
    5d9a:	b143      	cbz	r3, 5dae <sem_deinit+0x16>
{
    5d9c:	b510      	push	{r4, lr}
    5d9e:	4604      	mov	r4, r0
		vSemaphoreDelete(*sem);
    5da0:	4618      	mov	r0, r3
    5da2:	4b04      	ldr	r3, [pc, #16]	; (5db4 <sem_deinit+0x1c>)
    5da4:	4798      	blx	r3
		*sem = NULL;
    5da6:	2300      	movs	r3, #0
    5da8:	6023      	str	r3, [r4, #0]
	}

	return ERR_NONE;
}
    5daa:	2000      	movs	r0, #0
    5dac:	bd10      	pop	{r4, pc}
    5dae:	2000      	movs	r0, #0
    5db0:	4770      	bx	lr
    5db2:	bf00      	nop
    5db4:	00007365 	.word	0x00007365

00005db8 <prvTestWaitCondition>:
static BaseType_t prvTestWaitCondition(const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor,
                                       const BaseType_t xWaitForAllBits)
{
	BaseType_t xWaitConditionMet = pdFALSE;

	if (xWaitForAllBits == pdFALSE) {
    5db8:	b91a      	cbnz	r2, 5dc2 <prvTestWaitCondition+0xa>
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if ((uxCurrentEventBits & uxBitsToWaitFor) != (EventBits_t)0) {
    5dba:	4208      	tst	r0, r1
    5dbc:	d106      	bne.n	5dcc <prvTestWaitCondition+0x14>
	BaseType_t xWaitConditionMet = pdFALSE;
    5dbe:	2000      	movs	r0, #0
    5dc0:	4770      	bx	lr
			mtCOVERAGE_TEST_MARKER();
		}
	} else {
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if ((uxCurrentEventBits & uxBitsToWaitFor) == uxBitsToWaitFor) {
    5dc2:	ea31 0300 	bics.w	r3, r1, r0
    5dc6:	d003      	beq.n	5dd0 <prvTestWaitCondition+0x18>
	BaseType_t xWaitConditionMet = pdFALSE;
    5dc8:	2000      	movs	r0, #0
    5dca:	4770      	bx	lr
			xWaitConditionMet = pdTRUE;
    5dcc:	2001      	movs	r0, #1
    5dce:	4770      	bx	lr
			xWaitConditionMet = pdTRUE;
    5dd0:	2001      	movs	r0, #1
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
}
    5dd2:	4770      	bx	lr

00005dd4 <xEventGroupCreate>:
{
    5dd4:	b538      	push	{r3, r4, r5, lr}
	pxEventBits = (EventGroup_t *)pvPortMalloc(sizeof(EventGroup_t));
    5dd6:	2020      	movs	r0, #32
    5dd8:	4b05      	ldr	r3, [pc, #20]	; (5df0 <xEventGroupCreate+0x1c>)
    5dda:	4798      	blx	r3
	if (pxEventBits != NULL) {
    5ddc:	4604      	mov	r4, r0
    5dde:	b128      	cbz	r0, 5dec <xEventGroupCreate+0x18>
		pxEventBits->uxEventBits = 0;
    5de0:	2500      	movs	r5, #0
    5de2:	f840 5b04 	str.w	r5, [r0], #4
		vListInitialise(&(pxEventBits->xTasksWaitingForBits));
    5de6:	4b03      	ldr	r3, [pc, #12]	; (5df4 <xEventGroupCreate+0x20>)
    5de8:	4798      	blx	r3
			pxEventBits->ucStaticallyAllocated = pdFALSE;
    5dea:	7725      	strb	r5, [r4, #28]
}
    5dec:	4620      	mov	r0, r4
    5dee:	bd38      	pop	{r3, r4, r5, pc}
    5df0:	0000655d 	.word	0x0000655d
    5df4:	000060a5 	.word	0x000060a5

00005df8 <xEventGroupWaitBits>:
{
    5df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5dfc:	f8dd 9020 	ldr.w	r9, [sp, #32]
	configASSERT(xEventGroup);
    5e00:	b160      	cbz	r0, 5e1c <xEventGroupWaitBits+0x24>
    5e02:	4606      	mov	r6, r0
	configASSERT((uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES) == 0);
    5e04:	f011 4a7f 	ands.w	sl, r1, #4278190080	; 0xff000000
    5e08:	d011      	beq.n	5e2e <xEventGroupWaitBits+0x36>
    5e0a:	f04f 0380 	mov.w	r3, #128	; 0x80
    5e0e:	f383 8811 	msr	BASEPRI, r3
    5e12:	f3bf 8f6f 	isb	sy
    5e16:	f3bf 8f4f 	dsb	sy
    5e1a:	e7fe      	b.n	5e1a <xEventGroupWaitBits+0x22>
    5e1c:	f04f 0380 	mov.w	r3, #128	; 0x80
    5e20:	f383 8811 	msr	BASEPRI, r3
    5e24:	f3bf 8f6f 	isb	sy
    5e28:	f3bf 8f4f 	dsb	sy
    5e2c:	e7fe      	b.n	5e2c <xEventGroupWaitBits+0x34>
	configASSERT(uxBitsToWaitFor != 0);
    5e2e:	b941      	cbnz	r1, 5e42 <xEventGroupWaitBits+0x4a>
    5e30:	f04f 0380 	mov.w	r3, #128	; 0x80
    5e34:	f383 8811 	msr	BASEPRI, r3
    5e38:	f3bf 8f6f 	isb	sy
    5e3c:	f3bf 8f4f 	dsb	sy
    5e40:	e7fe      	b.n	5e40 <xEventGroupWaitBits+0x48>
    5e42:	4698      	mov	r8, r3
    5e44:	4617      	mov	r7, r2
    5e46:	460d      	mov	r5, r1
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    5e48:	4b30      	ldr	r3, [pc, #192]	; (5f0c <xEventGroupWaitBits+0x114>)
    5e4a:	4798      	blx	r3
    5e4c:	b968      	cbnz	r0, 5e6a <xEventGroupWaitBits+0x72>
    5e4e:	f1b9 0f00 	cmp.w	r9, #0
    5e52:	d10c      	bne.n	5e6e <xEventGroupWaitBits+0x76>
    5e54:	2301      	movs	r3, #1
    5e56:	b963      	cbnz	r3, 5e72 <xEventGroupWaitBits+0x7a>
    5e58:	f04f 0380 	mov.w	r3, #128	; 0x80
    5e5c:	f383 8811 	msr	BASEPRI, r3
    5e60:	f3bf 8f6f 	isb	sy
    5e64:	f3bf 8f4f 	dsb	sy
    5e68:	e7fe      	b.n	5e68 <xEventGroupWaitBits+0x70>
    5e6a:	2301      	movs	r3, #1
    5e6c:	e7f3      	b.n	5e56 <xEventGroupWaitBits+0x5e>
    5e6e:	2300      	movs	r3, #0
    5e70:	e7f1      	b.n	5e56 <xEventGroupWaitBits+0x5e>
	vTaskSuspendAll();
    5e72:	4b27      	ldr	r3, [pc, #156]	; (5f10 <xEventGroupWaitBits+0x118>)
    5e74:	4798      	blx	r3
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
    5e76:	6834      	ldr	r4, [r6, #0]
		xWaitConditionMet = prvTestWaitCondition(uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits);
    5e78:	4642      	mov	r2, r8
    5e7a:	4629      	mov	r1, r5
    5e7c:	4620      	mov	r0, r4
    5e7e:	4b25      	ldr	r3, [pc, #148]	; (5f14 <xEventGroupWaitBits+0x11c>)
    5e80:	4798      	blx	r3
		if (xWaitConditionMet != pdFALSE) {
    5e82:	b358      	cbz	r0, 5edc <xEventGroupWaitBits+0xe4>
			if (xClearOnExit != pdFALSE) {
    5e84:	b117      	cbz	r7, 5e8c <xEventGroupWaitBits+0x94>
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    5e86:	ea24 0305 	bic.w	r3, r4, r5
    5e8a:	6033      	str	r3, [r6, #0]
	xAlreadyYielded = xTaskResumeAll();
    5e8c:	4b22      	ldr	r3, [pc, #136]	; (5f18 <xEventGroupWaitBits+0x120>)
    5e8e:	4798      	blx	r3
	if (xTicksToWait != (TickType_t)0) {
    5e90:	f1ba 0f00 	cmp.w	sl, #0
    5e94:	d01f      	beq.n	5ed6 <xEventGroupWaitBits+0xde>
		if (xAlreadyYielded == pdFALSE) {
    5e96:	b938      	cbnz	r0, 5ea8 <xEventGroupWaitBits+0xb0>
			portYIELD_WITHIN_API();
    5e98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5e9c:	4b1f      	ldr	r3, [pc, #124]	; (5f1c <xEventGroupWaitBits+0x124>)
    5e9e:	601a      	str	r2, [r3, #0]
    5ea0:	f3bf 8f4f 	dsb	sy
    5ea4:	f3bf 8f6f 	isb	sy
		uxReturn = uxTaskResetEventItemValue();
    5ea8:	4b1d      	ldr	r3, [pc, #116]	; (5f20 <xEventGroupWaitBits+0x128>)
    5eaa:	4798      	blx	r3
    5eac:	4604      	mov	r4, r0
		if ((uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET) == (EventBits_t)0) {
    5eae:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
    5eb2:	d10e      	bne.n	5ed2 <xEventGroupWaitBits+0xda>
			taskENTER_CRITICAL();
    5eb4:	4b1b      	ldr	r3, [pc, #108]	; (5f24 <xEventGroupWaitBits+0x12c>)
    5eb6:	4798      	blx	r3
				uxReturn = pxEventBits->uxEventBits;
    5eb8:	6834      	ldr	r4, [r6, #0]
				if (prvTestWaitCondition(uxReturn, uxBitsToWaitFor, xWaitForAllBits) != pdFALSE) {
    5eba:	4642      	mov	r2, r8
    5ebc:	4629      	mov	r1, r5
    5ebe:	4620      	mov	r0, r4
    5ec0:	4b14      	ldr	r3, [pc, #80]	; (5f14 <xEventGroupWaitBits+0x11c>)
    5ec2:	4798      	blx	r3
    5ec4:	b118      	cbz	r0, 5ece <xEventGroupWaitBits+0xd6>
					if (xClearOnExit != pdFALSE) {
    5ec6:	b117      	cbz	r7, 5ece <xEventGroupWaitBits+0xd6>
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    5ec8:	ea24 0505 	bic.w	r5, r4, r5
    5ecc:	6035      	str	r5, [r6, #0]
			taskEXIT_CRITICAL();
    5ece:	4b16      	ldr	r3, [pc, #88]	; (5f28 <xEventGroupWaitBits+0x130>)
    5ed0:	4798      	blx	r3
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
    5ed2:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
}
    5ed6:	4620      	mov	r0, r4
    5ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (xTicksToWait == (TickType_t)0) {
    5edc:	f1b9 0f00 	cmp.w	r9, #0
    5ee0:	d011      	beq.n	5f06 <xEventGroupWaitBits+0x10e>
			if (xClearOnExit != pdFALSE) {
    5ee2:	b96f      	cbnz	r7, 5f00 <xEventGroupWaitBits+0x108>
	EventBits_t   uxReturn, uxControlBits = 0;
    5ee4:	2100      	movs	r1, #0
			if (xWaitForAllBits != pdFALSE) {
    5ee6:	f1b8 0f00 	cmp.w	r8, #0
    5eea:	d001      	beq.n	5ef0 <xEventGroupWaitBits+0xf8>
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
    5eec:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
			vTaskPlaceOnUnorderedEventList(
    5ef0:	464a      	mov	r2, r9
    5ef2:	4329      	orrs	r1, r5
    5ef4:	1d30      	adds	r0, r6, #4
    5ef6:	4b0d      	ldr	r3, [pc, #52]	; (5f2c <xEventGroupWaitBits+0x134>)
    5ef8:	4798      	blx	r3
    5efa:	46ca      	mov	sl, r9
			uxReturn = 0;
    5efc:	2400      	movs	r4, #0
    5efe:	e7c5      	b.n	5e8c <xEventGroupWaitBits+0x94>
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
    5f00:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    5f04:	e7ef      	b.n	5ee6 <xEventGroupWaitBits+0xee>
    5f06:	46ca      	mov	sl, r9
    5f08:	e7c0      	b.n	5e8c <xEventGroupWaitBits+0x94>
    5f0a:	bf00      	nop
    5f0c:	00007ff1 	.word	0x00007ff1
    5f10:	000079c5 	.word	0x000079c5
    5f14:	00005db9 	.word	0x00005db9
    5f18:	00007b05 	.word	0x00007b05
    5f1c:	e000ed04 	.word	0xe000ed04
    5f20:	00008281 	.word	0x00008281
    5f24:	00006205 	.word	0x00006205
    5f28:	00006249 	.word	0x00006249
    5f2c:	00007d59 	.word	0x00007d59

00005f30 <xEventGroupClearBits>:
	configASSERT(xEventGroup);
    5f30:	b168      	cbz	r0, 5f4e <xEventGroupClearBits+0x1e>
{
    5f32:	b570      	push	{r4, r5, r6, lr}
    5f34:	4605      	mov	r5, r0
	configASSERT((uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES) == 0);
    5f36:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
    5f3a:	d011      	beq.n	5f60 <xEventGroupClearBits+0x30>
    5f3c:	f04f 0380 	mov.w	r3, #128	; 0x80
    5f40:	f383 8811 	msr	BASEPRI, r3
    5f44:	f3bf 8f6f 	isb	sy
    5f48:	f3bf 8f4f 	dsb	sy
    5f4c:	e7fe      	b.n	5f4c <xEventGroupClearBits+0x1c>
    5f4e:	f04f 0380 	mov.w	r3, #128	; 0x80
    5f52:	f383 8811 	msr	BASEPRI, r3
    5f56:	f3bf 8f6f 	isb	sy
    5f5a:	f3bf 8f4f 	dsb	sy
    5f5e:	e7fe      	b.n	5f5e <xEventGroupClearBits+0x2e>
    5f60:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
    5f62:	4b05      	ldr	r3, [pc, #20]	; (5f78 <xEventGroupClearBits+0x48>)
    5f64:	4798      	blx	r3
		uxReturn = pxEventBits->uxEventBits;
    5f66:	682e      	ldr	r6, [r5, #0]
		pxEventBits->uxEventBits &= ~uxBitsToClear;
    5f68:	ea26 0404 	bic.w	r4, r6, r4
    5f6c:	602c      	str	r4, [r5, #0]
	taskEXIT_CRITICAL();
    5f6e:	4b03      	ldr	r3, [pc, #12]	; (5f7c <xEventGroupClearBits+0x4c>)
    5f70:	4798      	blx	r3
}
    5f72:	4630      	mov	r0, r6
    5f74:	bd70      	pop	{r4, r5, r6, pc}
    5f76:	bf00      	nop
    5f78:	00006205 	.word	0x00006205
    5f7c:	00006249 	.word	0x00006249

00005f80 <xEventGroupSetBits>:
{
    5f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT(xEventGroup);
    5f82:	b160      	cbz	r0, 5f9e <xEventGroupSetBits+0x1e>
    5f84:	4604      	mov	r4, r0
	configASSERT((uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES) == 0);
    5f86:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
    5f8a:	d011      	beq.n	5fb0 <xEventGroupSetBits+0x30>
    5f8c:	f04f 0380 	mov.w	r3, #128	; 0x80
    5f90:	f383 8811 	msr	BASEPRI, r3
    5f94:	f3bf 8f6f 	isb	sy
    5f98:	f3bf 8f4f 	dsb	sy
    5f9c:	e7fe      	b.n	5f9c <xEventGroupSetBits+0x1c>
    5f9e:	f04f 0380 	mov.w	r3, #128	; 0x80
    5fa2:	f383 8811 	msr	BASEPRI, r3
    5fa6:	f3bf 8f6f 	isb	sy
    5faa:	f3bf 8f4f 	dsb	sy
    5fae:	e7fe      	b.n	5fae <xEventGroupSetBits+0x2e>
    5fb0:	460d      	mov	r5, r1
	pxListEnd = listGET_END_MARKER(pxList); /*lint !e826 !e740 The mini list structure is used as the list end to save
    5fb2:	f100 060c 	add.w	r6, r0, #12
	vTaskSuspendAll();
    5fb6:	4b1a      	ldr	r3, [pc, #104]	; (6020 <xEventGroupSetBits+0xa0>)
    5fb8:	4798      	blx	r3
		pxListItem = listGET_HEAD_ENTRY(pxList);
    5fba:	6920      	ldr	r0, [r4, #16]
		pxEventBits->uxEventBits |= uxBitsToSet;
    5fbc:	6823      	ldr	r3, [r4, #0]
    5fbe:	432b      	orrs	r3, r5
    5fc0:	6023      	str	r3, [r4, #0]
	EventBits_t       uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
    5fc2:	2500      	movs	r5, #0
		while (pxListItem != pxListEnd) {
    5fc4:	e00f      	b.n	5fe6 <xEventGroupSetBits+0x66>
			} else if ((uxBitsWaitedFor & pxEventBits->uxEventBits) == uxBitsWaitedFor) {
    5fc6:	6823      	ldr	r3, [r4, #0]
    5fc8:	ea32 0303 	bics.w	r3, r2, r3
    5fcc:	d003      	beq.n	5fd6 <xEventGroupSetBits+0x56>
			xMatchFound     = pdFALSE;
    5fce:	2300      	movs	r3, #0
    5fd0:	e016      	b.n	6000 <xEventGroupSetBits+0x80>
					xMatchFound = pdTRUE;
    5fd2:	2301      	movs	r3, #1
    5fd4:	e014      	b.n	6000 <xEventGroupSetBits+0x80>
				xMatchFound = pdTRUE;
    5fd6:	2301      	movs	r3, #1
    5fd8:	e012      	b.n	6000 <xEventGroupSetBits+0x80>
				vTaskRemoveFromUnorderedEventList(pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET);
    5fda:	6821      	ldr	r1, [r4, #0]
    5fdc:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
    5fe0:	4b10      	ldr	r3, [pc, #64]	; (6024 <xEventGroupSetBits+0xa4>)
    5fe2:	4798      	blx	r3
			xMatchFound     = pdFALSE;
    5fe4:	4638      	mov	r0, r7
		while (pxListItem != pxListEnd) {
    5fe6:	42b0      	cmp	r0, r6
    5fe8:	d011      	beq.n	600e <xEventGroupSetBits+0x8e>
			pxNext          = listGET_NEXT(pxListItem);
    5fea:	6847      	ldr	r7, [r0, #4]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE(pxListItem);
    5fec:	6801      	ldr	r1, [r0, #0]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
    5fee:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
			if ((uxControlBits & eventWAIT_FOR_ALL_BITS) == (EventBits_t)0) {
    5ff2:	f011 6f80 	tst.w	r1, #67108864	; 0x4000000
    5ff6:	d1e6      	bne.n	5fc6 <xEventGroupSetBits+0x46>
				if ((uxBitsWaitedFor & pxEventBits->uxEventBits) != (EventBits_t)0) {
    5ff8:	6823      	ldr	r3, [r4, #0]
    5ffa:	421a      	tst	r2, r3
    5ffc:	d1e9      	bne.n	5fd2 <xEventGroupSetBits+0x52>
			xMatchFound     = pdFALSE;
    5ffe:	2300      	movs	r3, #0
			if (xMatchFound != pdFALSE) {
    6000:	2b00      	cmp	r3, #0
    6002:	d0ef      	beq.n	5fe4 <xEventGroupSetBits+0x64>
				if ((uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT) != (EventBits_t)0) {
    6004:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
    6008:	d0e7      	beq.n	5fda <xEventGroupSetBits+0x5a>
					uxBitsToClear |= uxBitsWaitedFor;
    600a:	4315      	orrs	r5, r2
    600c:	e7e5      	b.n	5fda <xEventGroupSetBits+0x5a>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
    600e:	6823      	ldr	r3, [r4, #0]
    6010:	ea23 0305 	bic.w	r3, r3, r5
    6014:	6023      	str	r3, [r4, #0]
	(void)xTaskResumeAll();
    6016:	4b04      	ldr	r3, [pc, #16]	; (6028 <xEventGroupSetBits+0xa8>)
    6018:	4798      	blx	r3
}
    601a:	6820      	ldr	r0, [r4, #0]
    601c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    601e:	bf00      	nop
    6020:	000079c5 	.word	0x000079c5
    6024:	00007e8d 	.word	0x00007e8d
    6028:	00007b05 	.word	0x00007b05

0000602c <vEventGroupSetBitsCallback>:
{
    602c:	b508      	push	{r3, lr}
	(void)xEventGroupSetBits(pvEventGroup, (EventBits_t)ulBitsToSet);
    602e:	4b01      	ldr	r3, [pc, #4]	; (6034 <vEventGroupSetBitsCallback+0x8>)
    6030:	4798      	blx	r3
    6032:	bd08      	pop	{r3, pc}
    6034:	00005f81 	.word	0x00005f81

00006038 <vEventGroupDelete>:
{
    6038:	b510      	push	{r4, lr}
    603a:	4604      	mov	r4, r0
	vTaskSuspendAll();
    603c:	4b0f      	ldr	r3, [pc, #60]	; (607c <vEventGroupDelete+0x44>)
    603e:	4798      	blx	r3
		while (listCURRENT_LIST_LENGTH(pxTasksWaitingForBits) > (UBaseType_t)0) {
    6040:	6863      	ldr	r3, [r4, #4]
    6042:	b193      	cbz	r3, 606a <vEventGroupDelete+0x32>
			configASSERT(pxTasksWaitingForBits->xListEnd.pxNext
    6044:	6920      	ldr	r0, [r4, #16]
    6046:	f104 030c 	add.w	r3, r4, #12
    604a:	4298      	cmp	r0, r3
    604c:	d004      	beq.n	6058 <vEventGroupDelete+0x20>
			vTaskRemoveFromUnorderedEventList(pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET);
    604e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    6052:	4b0b      	ldr	r3, [pc, #44]	; (6080 <vEventGroupDelete+0x48>)
    6054:	4798      	blx	r3
    6056:	e7f3      	b.n	6040 <vEventGroupDelete+0x8>
    6058:	f04f 0380 	mov.w	r3, #128	; 0x80
    605c:	f383 8811 	msr	BASEPRI, r3
    6060:	f3bf 8f6f 	isb	sy
    6064:	f3bf 8f4f 	dsb	sy
    6068:	e7fe      	b.n	6068 <vEventGroupDelete+0x30>
			if (pxEventBits->ucStaticallyAllocated == (uint8_t)pdFALSE) {
    606a:	7f23      	ldrb	r3, [r4, #28]
    606c:	b113      	cbz	r3, 6074 <vEventGroupDelete+0x3c>
	(void)xTaskResumeAll();
    606e:	4b05      	ldr	r3, [pc, #20]	; (6084 <vEventGroupDelete+0x4c>)
    6070:	4798      	blx	r3
    6072:	bd10      	pop	{r4, pc}
				vPortFree(pxEventBits);
    6074:	4620      	mov	r0, r4
    6076:	4b04      	ldr	r3, [pc, #16]	; (6088 <vEventGroupDelete+0x50>)
    6078:	4798      	blx	r3
    607a:	e7f8      	b.n	606e <vEventGroupDelete+0x36>
    607c:	000079c5 	.word	0x000079c5
    6080:	00007e8d 	.word	0x00007e8d
    6084:	00007b05 	.word	0x00007b05
    6088:	00006691 	.word	0x00006691

0000608c <xEventGroupSetBitsFromISR>:

#if ((configUSE_TRACE_FACILITY == 1) && (INCLUDE_xTimerPendFunctionCall == 1) && (configUSE_TIMERS == 1))

BaseType_t xEventGroupSetBitsFromISR(EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet,
                                     BaseType_t *pxHigherPriorityTaskWoken)
{
    608c:	b510      	push	{r4, lr}
	BaseType_t xReturn;

	traceEVENT_GROUP_SET_BITS_FROM_ISR(xEventGroup, uxBitsToSet);
	xReturn = xTimerPendFunctionCallFromISR(
    608e:	4613      	mov	r3, r2
    6090:	460a      	mov	r2, r1
    6092:	4601      	mov	r1, r0
    6094:	4801      	ldr	r0, [pc, #4]	; (609c <xEventGroupSetBitsFromISR+0x10>)
    6096:	4c02      	ldr	r4, [pc, #8]	; (60a0 <xEventGroupSetBitsFromISR+0x14>)
    6098:	47a0      	blx	r4
	    vEventGroupSetBitsCallback, (void *)xEventGroup, (uint32_t)uxBitsToSet, pxHigherPriorityTaskWoken);

	return xReturn;
}
    609a:	bd10      	pop	{r4, pc}
    609c:	0000602d 	.word	0x0000602d
    60a0:	00008765 	.word	0x00008765

000060a4 <vListInitialise>:
void vListInitialise(List_t *const pxList)
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = (ListItem_t *)&(
    60a4:	f100 0308 	add.w	r3, r0, #8
    60a8:	6043      	str	r3, [r0, #4]
	    pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is
	                          checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    60aa:	f04f 32ff 	mov.w	r2, #4294967295
    60ae:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = (ListItem_t *)&(pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as
    60b0:	60c3      	str	r3, [r0, #12]
	                                                                the list end to save RAM.  This is checked and
	                                                                valid. */
	pxList->xListEnd.pxPrevious = (ListItem_t *)&(
    60b2:	6103      	str	r3, [r0, #16]
	    pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is
	                          checked and valid. */

	pxList->uxNumberOfItems = (UBaseType_t)0U;
    60b4:	2300      	movs	r3, #0
    60b6:	6003      	str	r3, [r0, #0]
    60b8:	4770      	bx	lr

000060ba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem(ListItem_t *const pxItem)
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    60ba:	2300      	movs	r3, #0
    60bc:	6103      	str	r3, [r0, #16]
    60be:	4770      	bx	lr

000060c0 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd(List_t *const pxList, ListItem_t *const pxNewListItem)
{
	ListItem_t *const pxIndex = pxList->pxIndex;
    60c0:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY(pxNewListItem);

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext     = pxIndex;
    60c2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    60c4:	689a      	ldr	r2, [r3, #8]
    60c6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    60c8:	689a      	ldr	r2, [r3, #8]
    60ca:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious         = pxNewListItem;
    60cc:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = (void *)pxList;
    60ce:	6108      	str	r0, [r1, #16]

	(pxList->uxNumberOfItems)++;
    60d0:	6803      	ldr	r3, [r0, #0]
    60d2:	3301      	adds	r3, #1
    60d4:	6003      	str	r3, [r0, #0]
    60d6:	4770      	bx	lr

000060d8 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert(List_t *const pxList, ListItem_t *const pxNewListItem)
{
    60d8:	b430      	push	{r4, r5}
	ListItem_t *     pxIterator;
	const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    60da:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if (xValueOfInsertion == portMAX_DELAY) {
    60dc:	f1b5 3fff 	cmp.w	r5, #4294967295
    60e0:	d002      	beq.n	60e8 <vListInsert+0x10>
		    4) Using a queue or semaphore before it has been initialised or
		       before the scheduler has been started (are interrupts firing
		       before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
    60e2:	f100 0208 	add.w	r2, r0, #8
    60e6:	e002      	b.n	60ee <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
    60e8:	6902      	ldr	r2, [r0, #16]
    60ea:	e004      	b.n	60f6 <vListInsert+0x1e>
		     pxIterator
		     = pxIterator
    60ec:	461a      	mov	r2, r3
		for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
    60ee:	6853      	ldr	r3, [r2, #4]
    60f0:	681c      	ldr	r4, [r3, #0]
    60f2:	42a5      	cmp	r5, r4
    60f4:	d2fa      	bcs.n	60ec <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext             = pxIterator->pxNext;
    60f6:	6853      	ldr	r3, [r2, #4]
    60f8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    60fa:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious         = pxIterator;
    60fc:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext                = pxNewListItem;
    60fe:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = (void *)pxList;
    6100:	6108      	str	r0, [r1, #16]

	(pxList->uxNumberOfItems)++;
    6102:	6803      	ldr	r3, [r0, #0]
    6104:	3301      	adds	r3, #1
    6106:	6003      	str	r3, [r0, #0]
}
    6108:	bc30      	pop	{r4, r5}
    610a:	4770      	bx	lr

0000610c <uxListRemove>:

UBaseType_t uxListRemove(ListItem_t *const pxItemToRemove)
{
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	List_t *const pxList = (List_t *)pxItemToRemove->pvContainer;
    610c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    610e:	6842      	ldr	r2, [r0, #4]
    6110:	6881      	ldr	r1, [r0, #8]
    6112:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    6114:	6882      	ldr	r2, [r0, #8]
    6116:	6841      	ldr	r1, [r0, #4]
    6118:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if (pxList->pxIndex == pxItemToRemove) {
    611a:	685a      	ldr	r2, [r3, #4]
    611c:	4290      	cmp	r0, r2
    611e:	d006      	beq.n	612e <uxListRemove+0x22>
		pxList->pxIndex = pxItemToRemove->pxPrevious;
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    6120:	2200      	movs	r2, #0
    6122:	6102      	str	r2, [r0, #16]
	(pxList->uxNumberOfItems)--;
    6124:	681a      	ldr	r2, [r3, #0]
    6126:	3a01      	subs	r2, #1
    6128:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    612a:	6818      	ldr	r0, [r3, #0]
}
    612c:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    612e:	6882      	ldr	r2, [r0, #8]
    6130:	605a      	str	r2, [r3, #4]
    6132:	e7f5      	b.n	6120 <uxListRemove+0x14>

00006134 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError(void)
{
    6134:	b082      	sub	sp, #8
	volatile uint32_t ulDummy = 0;
    6136:	2300      	movs	r3, #0
    6138:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT(uxCriticalNesting == ~0UL);
    613a:	4b0d      	ldr	r3, [pc, #52]	; (6170 <prvTaskExitError+0x3c>)
    613c:	681b      	ldr	r3, [r3, #0]
    613e:	f1b3 3fff 	cmp.w	r3, #4294967295
    6142:	d008      	beq.n	6156 <prvTaskExitError+0x22>
    6144:	f04f 0380 	mov.w	r3, #128	; 0x80
    6148:	f383 8811 	msr	BASEPRI, r3
    614c:	f3bf 8f6f 	isb	sy
    6150:	f3bf 8f4f 	dsb	sy
    6154:	e7fe      	b.n	6154 <prvTaskExitError+0x20>
    6156:	f04f 0380 	mov.w	r3, #128	; 0x80
    615a:	f383 8811 	msr	BASEPRI, r3
    615e:	f3bf 8f6f 	isb	sy
    6162:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while (ulDummy == 0) {
    6166:	9b01      	ldr	r3, [sp, #4]
    6168:	2b00      	cmp	r3, #0
    616a:	d0fc      	beq.n	6166 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    616c:	b002      	add	sp, #8
    616e:	4770      	bx	lr
    6170:	200000d0 	.word	0x200000d0

00006174 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
    6174:	4808      	ldr	r0, [pc, #32]	; (6198 <prvPortStartFirstTask+0x24>)
    6176:	6800      	ldr	r0, [r0, #0]
    6178:	6800      	ldr	r0, [r0, #0]
    617a:	f380 8808 	msr	MSP, r0
    617e:	f04f 0000 	mov.w	r0, #0
    6182:	f380 8814 	msr	CONTROL, r0
    6186:	b662      	cpsie	i
    6188:	b661      	cpsie	f
    618a:	f3bf 8f4f 	dsb	sy
    618e:	f3bf 8f6f 	isb	sy
    6192:	df00      	svc	0
    6194:	bf00      	nop
    6196:	0000      	.short	0x0000
    6198:	e000ed08 	.word	0xe000ed08

0000619c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP(void)
{
	__asm volatile("	ldr.w r0, =0xE000ED88		\n" /* The FPU enable bits are in the CPACR. */
    619c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 61ac <vPortEnableVFP+0x10>
    61a0:	6801      	ldr	r1, [r0, #0]
    61a2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    61a6:	6001      	str	r1, [r0, #0]
    61a8:	4770      	bx	lr
    61aa:	0000      	.short	0x0000
    61ac:	e000ed88 	.word	0xe000ed88

000061b0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR; /* xPSR */
    61b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    61b4:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ((StackType_t)pxCode) & portSTART_ADDRESS_MASK; /* PC */
    61b8:	f021 0101 	bic.w	r1, r1, #1
    61bc:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = (StackType_t)portTASK_RETURN_ADDRESS; /* LR */
    61c0:	4b05      	ldr	r3, [pc, #20]	; (61d8 <pxPortInitialiseStack+0x28>)
    61c2:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = (StackType_t)pvParameters; /* R0 */
    61c6:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
    61ca:	f06f 0302 	mvn.w	r3, #2
    61ce:	f840 3c24 	str.w	r3, [r0, #-36]
}
    61d2:	3844      	subs	r0, #68	; 0x44
    61d4:	4770      	bx	lr
    61d6:	bf00      	nop
    61d8:	00006135 	.word	0x00006135
    61dc:	00000000 	.word	0x00000000

000061e0 <SVCall_Handler>:
	__asm volatile("	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
    61e0:	4b07      	ldr	r3, [pc, #28]	; (6200 <pxCurrentTCBConst2>)
    61e2:	6819      	ldr	r1, [r3, #0]
    61e4:	6808      	ldr	r0, [r1, #0]
    61e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    61ea:	f380 8809 	msr	PSP, r0
    61ee:	f3bf 8f6f 	isb	sy
    61f2:	f04f 0000 	mov.w	r0, #0
    61f6:	f380 8811 	msr	BASEPRI, r0
    61fa:	4770      	bx	lr
    61fc:	f3af 8000 	nop.w

00006200 <pxCurrentTCBConst2>:
    6200:	20010b68 	.word	0x20010b68

00006204 <vPortEnterCritical>:
    6204:	f04f 0380 	mov.w	r3, #128	; 0x80
    6208:	f383 8811 	msr	BASEPRI, r3
    620c:	f3bf 8f6f 	isb	sy
    6210:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
    6214:	4a0a      	ldr	r2, [pc, #40]	; (6240 <vPortEnterCritical+0x3c>)
    6216:	6813      	ldr	r3, [r2, #0]
    6218:	3301      	adds	r3, #1
    621a:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 1) {
    621c:	2b01      	cmp	r3, #1
    621e:	d10d      	bne.n	623c <vPortEnterCritical+0x38>
		configASSERT((portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK) == 0);
    6220:	4b08      	ldr	r3, [pc, #32]	; (6244 <vPortEnterCritical+0x40>)
    6222:	681b      	ldr	r3, [r3, #0]
    6224:	f013 0fff 	tst.w	r3, #255	; 0xff
    6228:	d008      	beq.n	623c <vPortEnterCritical+0x38>
    622a:	f04f 0380 	mov.w	r3, #128	; 0x80
    622e:	f383 8811 	msr	BASEPRI, r3
    6232:	f3bf 8f6f 	isb	sy
    6236:	f3bf 8f4f 	dsb	sy
    623a:	e7fe      	b.n	623a <vPortEnterCritical+0x36>
    623c:	4770      	bx	lr
    623e:	bf00      	nop
    6240:	200000d0 	.word	0x200000d0
    6244:	e000ed04 	.word	0xe000ed04

00006248 <vPortExitCritical>:
	configASSERT(uxCriticalNesting);
    6248:	4b09      	ldr	r3, [pc, #36]	; (6270 <vPortExitCritical+0x28>)
    624a:	681b      	ldr	r3, [r3, #0]
    624c:	b943      	cbnz	r3, 6260 <vPortExitCritical+0x18>
    624e:	f04f 0380 	mov.w	r3, #128	; 0x80
    6252:	f383 8811 	msr	BASEPRI, r3
    6256:	f3bf 8f6f 	isb	sy
    625a:	f3bf 8f4f 	dsb	sy
    625e:	e7fe      	b.n	625e <vPortExitCritical+0x16>
	uxCriticalNesting--;
    6260:	3b01      	subs	r3, #1
    6262:	4a03      	ldr	r2, [pc, #12]	; (6270 <vPortExitCritical+0x28>)
    6264:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 0) {
    6266:	b90b      	cbnz	r3, 626c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI(uint32_t ulNewMaskValue)
{
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    6268:	f383 8811 	msr	BASEPRI, r3
    626c:	4770      	bx	lr
    626e:	bf00      	nop
    6270:	200000d0 	.word	0x200000d0
	...

00006280 <PendSV_Handler>:
	__asm volatile(
    6280:	f3ef 8009 	mrs	r0, PSP
    6284:	f3bf 8f6f 	isb	sy
    6288:	4b15      	ldr	r3, [pc, #84]	; (62e0 <pxCurrentTCBConst>)
    628a:	681a      	ldr	r2, [r3, #0]
    628c:	f01e 0f10 	tst.w	lr, #16
    6290:	bf08      	it	eq
    6292:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    6296:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    629a:	6010      	str	r0, [r2, #0]
    629c:	e92d 0009 	stmdb	sp!, {r0, r3}
    62a0:	f04f 0080 	mov.w	r0, #128	; 0x80
    62a4:	f380 8811 	msr	BASEPRI, r0
    62a8:	f3bf 8f4f 	dsb	sy
    62ac:	f3bf 8f6f 	isb	sy
    62b0:	f001 fcdc 	bl	7c6c <vTaskSwitchContext>
    62b4:	f04f 0000 	mov.w	r0, #0
    62b8:	f380 8811 	msr	BASEPRI, r0
    62bc:	bc09      	pop	{r0, r3}
    62be:	6819      	ldr	r1, [r3, #0]
    62c0:	6808      	ldr	r0, [r1, #0]
    62c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    62c6:	f01e 0f10 	tst.w	lr, #16
    62ca:	bf08      	it	eq
    62cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    62d0:	f380 8809 	msr	PSP, r0
    62d4:	f3bf 8f6f 	isb	sy
    62d8:	4770      	bx	lr
    62da:	bf00      	nop
    62dc:	f3af 8000 	nop.w

000062e0 <pxCurrentTCBConst>:
    62e0:	20010b68 	.word	0x20010b68

000062e4 <SysTick_Handler>:
{
    62e4:	b508      	push	{r3, lr}
	__asm volatile("	mov %0, %1												\n"
    62e6:	f04f 0380 	mov.w	r3, #128	; 0x80
    62ea:	f383 8811 	msr	BASEPRI, r3
    62ee:	f3bf 8f6f 	isb	sy
    62f2:	f3bf 8f4f 	dsb	sy
		if (xTaskIncrementTick() != pdFALSE) {
    62f6:	4b05      	ldr	r3, [pc, #20]	; (630c <SysTick_Handler+0x28>)
    62f8:	4798      	blx	r3
    62fa:	b118      	cbz	r0, 6304 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
    62fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    6300:	4b03      	ldr	r3, [pc, #12]	; (6310 <SysTick_Handler+0x2c>)
    6302:	601a      	str	r2, [r3, #0]
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    6304:	2300      	movs	r3, #0
    6306:	f383 8811 	msr	BASEPRI, r3
    630a:	bd08      	pop	{r3, pc}
    630c:	000079e5 	.word	0x000079e5
    6310:	e000ed04 	.word	0xe000ed04

00006314 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG          = 0UL;
    6314:	4b05      	ldr	r3, [pc, #20]	; (632c <vPortSetupTimerInterrupt+0x18>)
    6316:	2200      	movs	r2, #0
    6318:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
    631a:	4905      	ldr	r1, [pc, #20]	; (6330 <vPortSetupTimerInterrupt+0x1c>)
    631c:	600a      	str	r2, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = (configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
    631e:	f642 61df 	movw	r1, #11999	; 0x2edf
    6322:	4a04      	ldr	r2, [pc, #16]	; (6334 <vPortSetupTimerInterrupt+0x20>)
    6324:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = (portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT);
    6326:	2207      	movs	r2, #7
    6328:	601a      	str	r2, [r3, #0]
    632a:	4770      	bx	lr
    632c:	e000e010 	.word	0xe000e010
    6330:	e000e018 	.word	0xe000e018
    6334:	e000e014 	.word	0xe000e014

00006338 <xPortStartScheduler>:
	configASSERT(portCPUID != portCORTEX_M7_r0p1_ID);
    6338:	4b39      	ldr	r3, [pc, #228]	; (6420 <xPortStartScheduler+0xe8>)
    633a:	681a      	ldr	r2, [r3, #0]
    633c:	4b39      	ldr	r3, [pc, #228]	; (6424 <xPortStartScheduler+0xec>)
    633e:	429a      	cmp	r2, r3
    6340:	d108      	bne.n	6354 <xPortStartScheduler+0x1c>
	__asm volatile("	mov %0, %1												\n"
    6342:	f04f 0380 	mov.w	r3, #128	; 0x80
    6346:	f383 8811 	msr	BASEPRI, r3
    634a:	f3bf 8f6f 	isb	sy
    634e:	f3bf 8f4f 	dsb	sy
    6352:	e7fe      	b.n	6352 <xPortStartScheduler+0x1a>
	configASSERT(portCPUID != portCORTEX_M7_r0p0_ID);
    6354:	4b32      	ldr	r3, [pc, #200]	; (6420 <xPortStartScheduler+0xe8>)
    6356:	681a      	ldr	r2, [r3, #0]
    6358:	4b33      	ldr	r3, [pc, #204]	; (6428 <xPortStartScheduler+0xf0>)
    635a:	429a      	cmp	r2, r3
    635c:	d108      	bne.n	6370 <xPortStartScheduler+0x38>
    635e:	f04f 0380 	mov.w	r3, #128	; 0x80
    6362:	f383 8811 	msr	BASEPRI, r3
    6366:	f3bf 8f6f 	isb	sy
    636a:	f3bf 8f4f 	dsb	sy
    636e:	e7fe      	b.n	636e <xPortStartScheduler+0x36>
{
    6370:	b510      	push	{r4, lr}
    6372:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
    6374:	4b2d      	ldr	r3, [pc, #180]	; (642c <xPortStartScheduler+0xf4>)
    6376:	781a      	ldrb	r2, [r3, #0]
    6378:	b2d2      	uxtb	r2, r2
    637a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
    637c:	22ff      	movs	r2, #255	; 0xff
    637e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
    6380:	781b      	ldrb	r3, [r3, #0]
    6382:	b2db      	uxtb	r3, r3
    6384:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
    6388:	f89d 3003 	ldrb.w	r3, [sp, #3]
    638c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    6390:	4a27      	ldr	r2, [pc, #156]	; (6430 <xPortStartScheduler+0xf8>)
    6392:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
    6394:	2307      	movs	r3, #7
    6396:	6053      	str	r3, [r2, #4]
		while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
    6398:	e009      	b.n	63ae <xPortStartScheduler+0x76>
			ulMaxPRIGROUPValue--;
    639a:	4a25      	ldr	r2, [pc, #148]	; (6430 <xPortStartScheduler+0xf8>)
    639c:	6853      	ldr	r3, [r2, #4]
    639e:	3b01      	subs	r3, #1
    63a0:	6053      	str	r3, [r2, #4]
			ucMaxPriorityValue <<= (uint8_t)0x01;
    63a2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    63a6:	005b      	lsls	r3, r3, #1
    63a8:	b2db      	uxtb	r3, r3
    63aa:	f88d 3003 	strb.w	r3, [sp, #3]
		while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
    63ae:	f89d 3003 	ldrb.w	r3, [sp, #3]
    63b2:	f013 0f80 	tst.w	r3, #128	; 0x80
    63b6:	d1f0      	bne.n	639a <xPortStartScheduler+0x62>
			configASSERT((portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue) == configPRIO_BITS);
    63b8:	4b1d      	ldr	r3, [pc, #116]	; (6430 <xPortStartScheduler+0xf8>)
    63ba:	685b      	ldr	r3, [r3, #4]
    63bc:	2b04      	cmp	r3, #4
    63be:	d008      	beq.n	63d2 <xPortStartScheduler+0x9a>
    63c0:	f04f 0380 	mov.w	r3, #128	; 0x80
    63c4:	f383 8811 	msr	BASEPRI, r3
    63c8:	f3bf 8f6f 	isb	sy
    63cc:	f3bf 8f4f 	dsb	sy
    63d0:	e7fe      	b.n	63d0 <xPortStartScheduler+0x98>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
    63d2:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
    63d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    63d8:	4a15      	ldr	r2, [pc, #84]	; (6430 <xPortStartScheduler+0xf8>)
    63da:	6053      	str	r3, [r2, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
    63dc:	9b01      	ldr	r3, [sp, #4]
    63de:	b2db      	uxtb	r3, r3
    63e0:	4a12      	ldr	r2, [pc, #72]	; (642c <xPortStartScheduler+0xf4>)
    63e2:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
    63e4:	4b13      	ldr	r3, [pc, #76]	; (6434 <xPortStartScheduler+0xfc>)
    63e6:	681a      	ldr	r2, [r3, #0]
    63e8:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
    63ec:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
    63ee:	681a      	ldr	r2, [r3, #0]
    63f0:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
    63f4:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
    63f6:	4b10      	ldr	r3, [pc, #64]	; (6438 <xPortStartScheduler+0x100>)
    63f8:	4798      	blx	r3
	uxCriticalNesting = 0;
    63fa:	2400      	movs	r4, #0
    63fc:	4b0f      	ldr	r3, [pc, #60]	; (643c <xPortStartScheduler+0x104>)
    63fe:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
    6400:	4b0f      	ldr	r3, [pc, #60]	; (6440 <xPortStartScheduler+0x108>)
    6402:	4798      	blx	r3
	*(portFPCCR) |= portASPEN_AND_LSPEN_BITS;
    6404:	4a0f      	ldr	r2, [pc, #60]	; (6444 <xPortStartScheduler+0x10c>)
    6406:	6813      	ldr	r3, [r2, #0]
    6408:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    640c:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
    640e:	4b0e      	ldr	r3, [pc, #56]	; (6448 <xPortStartScheduler+0x110>)
    6410:	4798      	blx	r3
	vTaskSwitchContext();
    6412:	4b0e      	ldr	r3, [pc, #56]	; (644c <xPortStartScheduler+0x114>)
    6414:	4798      	blx	r3
	prvTaskExitError();
    6416:	4b0e      	ldr	r3, [pc, #56]	; (6450 <xPortStartScheduler+0x118>)
    6418:	4798      	blx	r3
}
    641a:	4620      	mov	r0, r4
    641c:	b002      	add	sp, #8
    641e:	bd10      	pop	{r4, pc}
    6420:	e000ed00 	.word	0xe000ed00
    6424:	410fc271 	.word	0x410fc271
    6428:	410fc270 	.word	0x410fc270
    642c:	e000e400 	.word	0xe000e400
    6430:	20001068 	.word	0x20001068
    6434:	e000ed20 	.word	0xe000ed20
    6438:	00006315 	.word	0x00006315
    643c:	200000d0 	.word	0x200000d0
    6440:	0000619d 	.word	0x0000619d
    6444:	e000ef34 	.word	0xe000ef34
    6448:	00006175 	.word	0x00006175
    644c:	00007c6d 	.word	0x00007c6d
    6450:	00006135 	.word	0x00006135

00006454 <vPortValidateInterruptPriority>:
{
	uint32_t ulCurrentInterrupt;
	uint8_t  ucCurrentPriority;

	/* Obtain the number of the currently executing interrupt. */
	__asm volatile("mrs %0, ipsr" : "=r"(ulCurrentInterrupt)::"memory");
    6454:	f3ef 8305 	mrs	r3, IPSR

	/* Is the interrupt number a user defined interrupt? */
	if (ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER) {
    6458:	2b0f      	cmp	r3, #15
    645a:	d90f      	bls.n	647c <vPortValidateInterruptPriority+0x28>
		/* Look up the interrupt's priority. */
		ucCurrentPriority = pcInterruptPriorityRegisters[ulCurrentInterrupt];
    645c:	4a10      	ldr	r2, [pc, #64]	; (64a0 <vPortValidateInterruptPriority+0x4c>)
    645e:	5c9b      	ldrb	r3, [r3, r2]
    6460:	b2db      	uxtb	r3, r3
		interrupt entry is as fast and simple as possible.

		The following links provide detailed information:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html
		http://www.freertos.org/FAQHelp.html */
		configASSERT(ucCurrentPriority >= ucMaxSysCallPriority);
    6462:	4a10      	ldr	r2, [pc, #64]	; (64a4 <vPortValidateInterruptPriority+0x50>)
    6464:	7812      	ldrb	r2, [r2, #0]
    6466:	4293      	cmp	r3, r2
    6468:	d208      	bcs.n	647c <vPortValidateInterruptPriority+0x28>
    646a:	f04f 0380 	mov.w	r3, #128	; 0x80
    646e:	f383 8811 	msr	BASEPRI, r3
    6472:	f3bf 8f6f 	isb	sy
    6476:	f3bf 8f4f 	dsb	sy
    647a:	e7fe      	b.n	647a <vPortValidateInterruptPriority+0x26>
	configuration then the correct setting can be achieved on all Cortex-M
	devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
	scheduler.  Note however that some vendor specific peripheral libraries
	assume a non-zero priority group setting, in which cases using a value
	of zero will result in unpredictable behaviour. */
	configASSERT((portAIRCR_REG & portPRIORITY_GROUP_MASK) <= ulMaxPRIGROUPValue);
    647c:	4b0a      	ldr	r3, [pc, #40]	; (64a8 <vPortValidateInterruptPriority+0x54>)
    647e:	681b      	ldr	r3, [r3, #0]
    6480:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    6484:	4a07      	ldr	r2, [pc, #28]	; (64a4 <vPortValidateInterruptPriority+0x50>)
    6486:	6852      	ldr	r2, [r2, #4]
    6488:	4293      	cmp	r3, r2
    648a:	d908      	bls.n	649e <vPortValidateInterruptPriority+0x4a>
    648c:	f04f 0380 	mov.w	r3, #128	; 0x80
    6490:	f383 8811 	msr	BASEPRI, r3
    6494:	f3bf 8f6f 	isb	sy
    6498:	f3bf 8f4f 	dsb	sy
    649c:	e7fe      	b.n	649c <vPortValidateInterruptPriority+0x48>
    649e:	4770      	bx	lr
    64a0:	e000e3f0 	.word	0xe000e3f0
    64a4:	20001068 	.word	0x20001068
    64a8:	e000ed0c 	.word	0xe000ed0c

000064ac <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
    64ac:	4a13      	ldr	r2, [pc, #76]	; (64fc <prvHeapInit+0x50>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
    64ae:	f012 0f07 	tst.w	r2, #7
    64b2:	d020      	beq.n	64f6 <prvHeapInit+0x4a>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
    64b4:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    64b6:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
    64ba:	f5c1 437a 	rsb	r3, r1, #64000	; 0xfa00
    64be:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    64c0:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    64c2:	490f      	ldr	r1, [pc, #60]	; (6500 <prvHeapInit+0x54>)
    64c4:	f8c1 2c70 	str.w	r2, [r1, #3184]	; 0xc70
	xStart.xBlockSize = ( size_t ) 0;
    64c8:	2000      	movs	r0, #0
    64ca:	f8c1 0c74 	str.w	r0, [r1, #3188]	; 0xc74

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    64ce:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
    64d0:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    64d2:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
    64d6:	f8c1 3c78 	str.w	r3, [r1, #3192]	; 0xc78
	pxEnd->xBlockSize = 0;
    64da:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
    64dc:	6018      	str	r0, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    64de:	1a98      	subs	r0, r3, r2
    64e0:	6050      	str	r0, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    64e2:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    64e4:	f8c1 0c7c 	str.w	r0, [r1, #3196]	; 0xc7c
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    64e8:	f8c1 0c80 	str.w	r0, [r1, #3200]	; 0xc80

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    64ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    64f0:	f8c1 3c84 	str.w	r3, [r1, #3204]	; 0xc84
    64f4:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
    64f6:	f44f 437a 	mov.w	r3, #64000	; 0xfa00
    64fa:	e7e2      	b.n	64c2 <prvHeapInit+0x16>
    64fc:	20001070 	.word	0x20001070
    6500:	2000fe00 	.word	0x2000fe00

00006504 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
    6504:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    6506:	4b13      	ldr	r3, [pc, #76]	; (6554 <prvInsertBlockIntoFreeList+0x50>)
    6508:	681a      	ldr	r2, [r3, #0]
    650a:	4282      	cmp	r2, r0
    650c:	d31c      	bcc.n	6548 <prvInsertBlockIntoFreeList+0x44>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    650e:	6859      	ldr	r1, [r3, #4]
    6510:	185c      	adds	r4, r3, r1
    6512:	42a0      	cmp	r0, r4
    6514:	d103      	bne.n	651e <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    6516:	6840      	ldr	r0, [r0, #4]
    6518:	4401      	add	r1, r0
    651a:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
    651c:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    651e:	6841      	ldr	r1, [r0, #4]
    6520:	1844      	adds	r4, r0, r1
    6522:	42a2      	cmp	r2, r4
    6524:	d114      	bne.n	6550 <prvInsertBlockIntoFreeList+0x4c>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
    6526:	4c0c      	ldr	r4, [pc, #48]	; (6558 <prvInsertBlockIntoFreeList+0x54>)
    6528:	f8d4 4c78 	ldr.w	r4, [r4, #3192]	; 0xc78
    652c:	42a2      	cmp	r2, r4
    652e:	d00d      	beq.n	654c <prvInsertBlockIntoFreeList+0x48>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    6530:	6852      	ldr	r2, [r2, #4]
    6532:	4411      	add	r1, r2
    6534:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    6536:	681a      	ldr	r2, [r3, #0]
    6538:	6812      	ldr	r2, [r2, #0]
    653a:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
    653c:	4298      	cmp	r0, r3
    653e:	d000      	beq.n	6542 <prvInsertBlockIntoFreeList+0x3e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
    6540:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    6542:	f85d 4b04 	ldr.w	r4, [sp], #4
    6546:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    6548:	4613      	mov	r3, r2
    654a:	e7dd      	b.n	6508 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
    654c:	6004      	str	r4, [r0, #0]
    654e:	e7f5      	b.n	653c <prvInsertBlockIntoFreeList+0x38>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    6550:	6002      	str	r2, [r0, #0]
    6552:	e7f3      	b.n	653c <prvInsertBlockIntoFreeList+0x38>
    6554:	20010a70 	.word	0x20010a70
    6558:	2000fe00 	.word	0x2000fe00

0000655c <pvPortMalloc>:
{
    655c:	b570      	push	{r4, r5, r6, lr}
    655e:	4604      	mov	r4, r0
	vTaskSuspendAll();
    6560:	4b45      	ldr	r3, [pc, #276]	; (6678 <pvPortMalloc+0x11c>)
    6562:	4798      	blx	r3
		if( pxEnd == NULL )
    6564:	4b45      	ldr	r3, [pc, #276]	; (667c <pvPortMalloc+0x120>)
    6566:	f8d3 3c78 	ldr.w	r3, [r3, #3192]	; 0xc78
    656a:	b1c3      	cbz	r3, 659e <pvPortMalloc+0x42>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    656c:	4b43      	ldr	r3, [pc, #268]	; (667c <pvPortMalloc+0x120>)
    656e:	f8d3 3c84 	ldr.w	r3, [r3, #3204]	; 0xc84
    6572:	421c      	tst	r4, r3
    6574:	d172      	bne.n	665c <pvPortMalloc+0x100>
			if( xWantedSize > 0 )
    6576:	b1ac      	cbz	r4, 65a4 <pvPortMalloc+0x48>
				xWantedSize += xHeapStructSize;
    6578:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
    657a:	f014 0f07 	tst.w	r4, #7
    657e:	d011      	beq.n	65a4 <pvPortMalloc+0x48>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    6580:	f024 0407 	bic.w	r4, r4, #7
    6584:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
    6586:	f004 0307 	and.w	r3, r4, #7
    658a:	b15b      	cbz	r3, 65a4 <pvPortMalloc+0x48>
    658c:	f04f 0380 	mov.w	r3, #128	; 0x80
    6590:	f383 8811 	msr	BASEPRI, r3
    6594:	f3bf 8f6f 	isb	sy
    6598:	f3bf 8f4f 	dsb	sy
    659c:	e7fe      	b.n	659c <pvPortMalloc+0x40>
			prvHeapInit();
    659e:	4b38      	ldr	r3, [pc, #224]	; (6680 <pvPortMalloc+0x124>)
    65a0:	4798      	blx	r3
    65a2:	e7e3      	b.n	656c <pvPortMalloc+0x10>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    65a4:	2c00      	cmp	r4, #0
    65a6:	d05b      	beq.n	6660 <pvPortMalloc+0x104>
    65a8:	4b34      	ldr	r3, [pc, #208]	; (667c <pvPortMalloc+0x120>)
    65aa:	f8d3 3c80 	ldr.w	r3, [r3, #3200]	; 0xc80
    65ae:	429c      	cmp	r4, r3
    65b0:	d858      	bhi.n	6664 <pvPortMalloc+0x108>
				pxBlock = xStart.pxNextFreeBlock;
    65b2:	4b32      	ldr	r3, [pc, #200]	; (667c <pvPortMalloc+0x120>)
    65b4:	f8d3 5c70 	ldr.w	r5, [r3, #3184]	; 0xc70
				pxPreviousBlock = &xStart;
    65b8:	f503 6347 	add.w	r3, r3, #3184	; 0xc70
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    65bc:	e001      	b.n	65c2 <pvPortMalloc+0x66>
					pxPreviousBlock = pxBlock;
    65be:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
    65c0:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    65c2:	686a      	ldr	r2, [r5, #4]
    65c4:	4294      	cmp	r4, r2
    65c6:	d902      	bls.n	65ce <pvPortMalloc+0x72>
    65c8:	682a      	ldr	r2, [r5, #0]
    65ca:	2a00      	cmp	r2, #0
    65cc:	d1f7      	bne.n	65be <pvPortMalloc+0x62>
				if( pxBlock != pxEnd )
    65ce:	4a2b      	ldr	r2, [pc, #172]	; (667c <pvPortMalloc+0x120>)
    65d0:	f8d2 2c78 	ldr.w	r2, [r2, #3192]	; 0xc78
    65d4:	4295      	cmp	r5, r2
    65d6:	d047      	beq.n	6668 <pvPortMalloc+0x10c>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    65d8:	681e      	ldr	r6, [r3, #0]
    65da:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    65dc:	682a      	ldr	r2, [r5, #0]
    65de:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    65e0:	686b      	ldr	r3, [r5, #4]
    65e2:	1b1b      	subs	r3, r3, r4
    65e4:	2b10      	cmp	r3, #16
    65e6:	d910      	bls.n	660a <pvPortMalloc+0xae>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    65e8:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
    65ea:	f010 0f07 	tst.w	r0, #7
    65ee:	d008      	beq.n	6602 <pvPortMalloc+0xa6>
    65f0:	f04f 0380 	mov.w	r3, #128	; 0x80
    65f4:	f383 8811 	msr	BASEPRI, r3
    65f8:	f3bf 8f6f 	isb	sy
    65fc:	f3bf 8f4f 	dsb	sy
    6600:	e7fe      	b.n	6600 <pvPortMalloc+0xa4>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    6602:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
    6604:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
    6606:	4b1f      	ldr	r3, [pc, #124]	; (6684 <pvPortMalloc+0x128>)
    6608:	4798      	blx	r3
					xFreeBytesRemaining -= pxBlock->xBlockSize;
    660a:	6869      	ldr	r1, [r5, #4]
    660c:	4a1b      	ldr	r2, [pc, #108]	; (667c <pvPortMalloc+0x120>)
    660e:	f8d2 3c80 	ldr.w	r3, [r2, #3200]	; 0xc80
    6612:	1a5b      	subs	r3, r3, r1
    6614:	f8c2 3c80 	str.w	r3, [r2, #3200]	; 0xc80
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    6618:	f8d2 2c7c 	ldr.w	r2, [r2, #3196]	; 0xc7c
    661c:	4293      	cmp	r3, r2
    661e:	d202      	bcs.n	6626 <pvPortMalloc+0xca>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    6620:	4a16      	ldr	r2, [pc, #88]	; (667c <pvPortMalloc+0x120>)
    6622:	f8c2 3c7c 	str.w	r3, [r2, #3196]	; 0xc7c
					pxBlock->xBlockSize |= xBlockAllocatedBit;
    6626:	4b15      	ldr	r3, [pc, #84]	; (667c <pvPortMalloc+0x120>)
    6628:	f8d3 2c84 	ldr.w	r2, [r3, #3204]	; 0xc84
    662c:	430a      	orrs	r2, r1
    662e:	606a      	str	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
    6630:	2200      	movs	r2, #0
    6632:	602a      	str	r2, [r5, #0]
					xNumberOfSuccessfulAllocations++;
    6634:	f8d3 2c88 	ldr.w	r2, [r3, #3208]	; 0xc88
    6638:	3201      	adds	r2, #1
    663a:	f8c3 2c88 	str.w	r2, [r3, #3208]	; 0xc88
	( void ) xTaskResumeAll();
    663e:	4b12      	ldr	r3, [pc, #72]	; (6688 <pvPortMalloc+0x12c>)
    6640:	4798      	blx	r3
		if( pvReturn == NULL )
    6642:	b19e      	cbz	r6, 666c <pvPortMalloc+0x110>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    6644:	f016 0f07 	tst.w	r6, #7
    6648:	d013      	beq.n	6672 <pvPortMalloc+0x116>
    664a:	f04f 0380 	mov.w	r3, #128	; 0x80
    664e:	f383 8811 	msr	BASEPRI, r3
    6652:	f3bf 8f6f 	isb	sy
    6656:	f3bf 8f4f 	dsb	sy
    665a:	e7fe      	b.n	665a <pvPortMalloc+0xfe>
void *pvReturn = NULL;
    665c:	2600      	movs	r6, #0
    665e:	e7ee      	b.n	663e <pvPortMalloc+0xe2>
    6660:	2600      	movs	r6, #0
    6662:	e7ec      	b.n	663e <pvPortMalloc+0xe2>
    6664:	2600      	movs	r6, #0
    6666:	e7ea      	b.n	663e <pvPortMalloc+0xe2>
    6668:	2600      	movs	r6, #0
    666a:	e7e8      	b.n	663e <pvPortMalloc+0xe2>
			vApplicationMallocFailedHook();
    666c:	4b07      	ldr	r3, [pc, #28]	; (668c <pvPortMalloc+0x130>)
    666e:	4798      	blx	r3
    6670:	e7e8      	b.n	6644 <pvPortMalloc+0xe8>
}
    6672:	4630      	mov	r0, r6
    6674:	bd70      	pop	{r4, r5, r6, pc}
    6676:	bf00      	nop
    6678:	000079c5 	.word	0x000079c5
    667c:	2000fe00 	.word	0x2000fe00
    6680:	000064ad 	.word	0x000064ad
    6684:	00006505 	.word	0x00006505
    6688:	00007b05 	.word	0x00007b05
    668c:	0000530b 	.word	0x0000530b

00006690 <vPortFree>:
	if( pv != NULL )
    6690:	2800      	cmp	r0, #0
    6692:	d038      	beq.n	6706 <vPortFree+0x76>
{
    6694:	b538      	push	{r3, r4, r5, lr}
    6696:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
    6698:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
    669c:	f850 2c04 	ldr.w	r2, [r0, #-4]
    66a0:	4919      	ldr	r1, [pc, #100]	; (6708 <vPortFree+0x78>)
    66a2:	f8d1 1c84 	ldr.w	r1, [r1, #3204]	; 0xc84
    66a6:	420a      	tst	r2, r1
    66a8:	d108      	bne.n	66bc <vPortFree+0x2c>
    66aa:	f04f 0380 	mov.w	r3, #128	; 0x80
    66ae:	f383 8811 	msr	BASEPRI, r3
    66b2:	f3bf 8f6f 	isb	sy
    66b6:	f3bf 8f4f 	dsb	sy
    66ba:	e7fe      	b.n	66ba <vPortFree+0x2a>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
    66bc:	f850 0c08 	ldr.w	r0, [r0, #-8]
    66c0:	b140      	cbz	r0, 66d4 <vPortFree+0x44>
    66c2:	f04f 0380 	mov.w	r3, #128	; 0x80
    66c6:	f383 8811 	msr	BASEPRI, r3
    66ca:	f3bf 8f6f 	isb	sy
    66ce:	f3bf 8f4f 	dsb	sy
    66d2:	e7fe      	b.n	66d2 <vPortFree+0x42>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
    66d4:	ea22 0201 	bic.w	r2, r2, r1
    66d8:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
    66dc:	4b0b      	ldr	r3, [pc, #44]	; (670c <vPortFree+0x7c>)
    66de:	4798      	blx	r3
					xFreeBytesRemaining += pxLink->xBlockSize;
    66e0:	f854 2c04 	ldr.w	r2, [r4, #-4]
    66e4:	4c08      	ldr	r4, [pc, #32]	; (6708 <vPortFree+0x78>)
    66e6:	f8d4 3c80 	ldr.w	r3, [r4, #3200]	; 0xc80
    66ea:	4413      	add	r3, r2
    66ec:	f8c4 3c80 	str.w	r3, [r4, #3200]	; 0xc80
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    66f0:	4628      	mov	r0, r5
    66f2:	4b07      	ldr	r3, [pc, #28]	; (6710 <vPortFree+0x80>)
    66f4:	4798      	blx	r3
					xNumberOfSuccessfulFrees++;
    66f6:	f8d4 3c8c 	ldr.w	r3, [r4, #3212]	; 0xc8c
    66fa:	3301      	adds	r3, #1
    66fc:	f8c4 3c8c 	str.w	r3, [r4, #3212]	; 0xc8c
				( void ) xTaskResumeAll();
    6700:	4b04      	ldr	r3, [pc, #16]	; (6714 <vPortFree+0x84>)
    6702:	4798      	blx	r3
    6704:	bd38      	pop	{r3, r4, r5, pc}
    6706:	4770      	bx	lr
    6708:	2000fe00 	.word	0x2000fe00
    670c:	000079c5 	.word	0x000079c5
    6710:	00006505 	.word	0x00006505
    6714:	00007b05 	.word	0x00007b05

00006718 <xPortGetFreeHeapSize>:
}
    6718:	4b01      	ldr	r3, [pc, #4]	; (6720 <xPortGetFreeHeapSize+0x8>)
    671a:	f8d3 0c80 	ldr.w	r0, [r3, #3200]	; 0xc80
    671e:	4770      	bx	lr
    6720:	2000fe00 	.word	0x2000fe00

00006724 <prvGetDisinheritPriorityAfterTimeout>:
	priority, but the waiting task times out, then the holder should
	disinherit the priority - but only down to the highest priority of any
	other tasks that are waiting for the same mutex.  For this purpose,
	return the priority of the highest priority task that is waiting for the
	mutex. */
	if (listCURRENT_LIST_LENGTH(&(pxQueue->xTasksWaitingToReceive)) > 0) {
    6724:	6a43      	ldr	r3, [r0, #36]	; 0x24
    6726:	b123      	cbz	r3, 6732 <prvGetDisinheritPriorityAfterTimeout+0xe>
		uxHighestPriorityOfWaitingTasks
		    = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY(&(pxQueue->xTasksWaitingToReceive));
    6728:	6b03      	ldr	r3, [r0, #48]	; 0x30
    672a:	6818      	ldr	r0, [r3, #0]
    672c:	f1c0 0005 	rsb	r0, r0, #5
    6730:	4770      	bx	lr
	} else {
		uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
    6732:	2000      	movs	r0, #0
	}

	return uxHighestPriorityOfWaitingTasks;
}
    6734:	4770      	bx	lr
	...

00006738 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull(const Queue_t *pxQueue)
{
    6738:	b510      	push	{r4, lr}
    673a:	4604      	mov	r4, r0
	BaseType_t xReturn;

	taskENTER_CRITICAL();
    673c:	4b06      	ldr	r3, [pc, #24]	; (6758 <prvIsQueueFull+0x20>)
    673e:	4798      	blx	r3
	{
		if (pxQueue->uxMessagesWaiting == pxQueue->uxLength) {
    6740:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    6742:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    6744:	429a      	cmp	r2, r3
    6746:	d004      	beq.n	6752 <prvIsQueueFull+0x1a>
			xReturn = pdTRUE;
		} else {
			xReturn = pdFALSE;
    6748:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
    674a:	4b04      	ldr	r3, [pc, #16]	; (675c <prvIsQueueFull+0x24>)
    674c:	4798      	blx	r3

	return xReturn;
}
    674e:	4620      	mov	r0, r4
    6750:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
    6752:	2401      	movs	r4, #1
    6754:	e7f9      	b.n	674a <prvIsQueueFull+0x12>
    6756:	bf00      	nop
    6758:	00006205 	.word	0x00006205
    675c:	00006249 	.word	0x00006249

00006760 <prvIsQueueEmpty>:
{
    6760:	b510      	push	{r4, lr}
    6762:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
    6764:	4b05      	ldr	r3, [pc, #20]	; (677c <prvIsQueueEmpty+0x1c>)
    6766:	4798      	blx	r3
		if (pxQueue->uxMessagesWaiting == (UBaseType_t)0) {
    6768:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    676a:	b123      	cbz	r3, 6776 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
    676c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
    676e:	4b04      	ldr	r3, [pc, #16]	; (6780 <prvIsQueueEmpty+0x20>)
    6770:	4798      	blx	r3
}
    6772:	4620      	mov	r0, r4
    6774:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
    6776:	2401      	movs	r4, #1
    6778:	e7f9      	b.n	676e <prvIsQueueEmpty+0xe>
    677a:	bf00      	nop
    677c:	00006205 	.word	0x00006205
    6780:	00006249 	.word	0x00006249

00006784 <prvCopyDataToQueue>:
{
    6784:	b570      	push	{r4, r5, r6, lr}
    6786:	4604      	mov	r4, r0
    6788:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    678a:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if (pxQueue->uxItemSize == (UBaseType_t)0) {
    678c:	6c02      	ldr	r2, [r0, #64]	; 0x40
    678e:	b952      	cbnz	r2, 67a6 <prvCopyDataToQueue+0x22>
			if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    6790:	6803      	ldr	r3, [r0, #0]
    6792:	2b00      	cmp	r3, #0
    6794:	d12a      	bne.n	67ec <prvCopyDataToQueue+0x68>
				xReturn                = xTaskPriorityDisinherit((void *)pxQueue->pxMutexHolder);
    6796:	6840      	ldr	r0, [r0, #4]
    6798:	4b18      	ldr	r3, [pc, #96]	; (67fc <prvCopyDataToQueue+0x78>)
    679a:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
    679c:	2300      	movs	r3, #0
    679e:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + (UBaseType_t)1;
    67a0:	3501      	adds	r5, #1
    67a2:	63a5      	str	r5, [r4, #56]	; 0x38
}
    67a4:	bd70      	pop	{r4, r5, r6, pc}
	} else if (xPosition == queueSEND_TO_BACK) {
    67a6:	b96e      	cbnz	r6, 67c4 <prvCopyDataToQueue+0x40>
		(void)memcpy((void *)pxQueue->pcWriteTo,
    67a8:	6880      	ldr	r0, [r0, #8]
    67aa:	4b15      	ldr	r3, [pc, #84]	; (6800 <prvCopyDataToQueue+0x7c>)
    67ac:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    67ae:	6c22      	ldr	r2, [r4, #64]	; 0x40
    67b0:	68a3      	ldr	r3, [r4, #8]
    67b2:	4413      	add	r3, r2
    67b4:	60a3      	str	r3, [r4, #8]
		if (pxQueue->pcWriteTo >= pxQueue->pcTail) /*lint !e946 MISRA exception justified as comparison of pointers is
    67b6:	6862      	ldr	r2, [r4, #4]
    67b8:	4293      	cmp	r3, r2
    67ba:	d319      	bcc.n	67f0 <prvCopyDataToQueue+0x6c>
			pxQueue->pcWriteTo = pxQueue->pcHead;
    67bc:	6823      	ldr	r3, [r4, #0]
    67be:	60a3      	str	r3, [r4, #8]
	BaseType_t  xReturn = pdFALSE;
    67c0:	2000      	movs	r0, #0
    67c2:	e7ed      	b.n	67a0 <prvCopyDataToQueue+0x1c>
		(void)memcpy((void *)pxQueue->u.pcReadFrom,
    67c4:	68c0      	ldr	r0, [r0, #12]
    67c6:	4b0e      	ldr	r3, [pc, #56]	; (6800 <prvCopyDataToQueue+0x7c>)
    67c8:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    67ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
    67cc:	425b      	negs	r3, r3
    67ce:	68e2      	ldr	r2, [r4, #12]
    67d0:	441a      	add	r2, r3
    67d2:	60e2      	str	r2, [r4, #12]
		    < pxQueue->pcHead) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest
    67d4:	6821      	ldr	r1, [r4, #0]
		if (pxQueue->u.pcReadFrom
    67d6:	428a      	cmp	r2, r1
    67d8:	d202      	bcs.n	67e0 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = (pxQueue->pcTail - pxQueue->uxItemSize);
    67da:	6862      	ldr	r2, [r4, #4]
    67dc:	4413      	add	r3, r2
    67de:	60e3      	str	r3, [r4, #12]
		if (xPosition == queueOVERWRITE) {
    67e0:	2e02      	cmp	r6, #2
    67e2:	d107      	bne.n	67f4 <prvCopyDataToQueue+0x70>
			if (uxMessagesWaiting > (UBaseType_t)0) {
    67e4:	b145      	cbz	r5, 67f8 <prvCopyDataToQueue+0x74>
				--uxMessagesWaiting;
    67e6:	3d01      	subs	r5, #1
	BaseType_t  xReturn = pdFALSE;
    67e8:	2000      	movs	r0, #0
    67ea:	e7d9      	b.n	67a0 <prvCopyDataToQueue+0x1c>
    67ec:	2000      	movs	r0, #0
    67ee:	e7d7      	b.n	67a0 <prvCopyDataToQueue+0x1c>
    67f0:	2000      	movs	r0, #0
    67f2:	e7d5      	b.n	67a0 <prvCopyDataToQueue+0x1c>
    67f4:	2000      	movs	r0, #0
    67f6:	e7d3      	b.n	67a0 <prvCopyDataToQueue+0x1c>
    67f8:	2000      	movs	r0, #0
    67fa:	e7d1      	b.n	67a0 <prvCopyDataToQueue+0x1c>
    67fc:	000080e5 	.word	0x000080e5
    6800:	00008865 	.word	0x00008865

00006804 <prvNotifyQueueSetContainer>:
	/*-----------------------------------------------------------*/

#if (configUSE_QUEUE_SETS == 1)

static BaseType_t prvNotifyQueueSetContainer(const Queue_t *const pxQueue, const BaseType_t xCopyPosition)
{
    6804:	b570      	push	{r4, r5, r6, lr}
    6806:	b082      	sub	sp, #8
    6808:	9001      	str	r0, [sp, #4]
	Queue_t *  pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    680a:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn             = pdFALSE;

	/* This function must be called form a critical section. */

	configASSERT(pxQueueSetContainer);
    680c:	b164      	cbz	r4, 6828 <prvNotifyQueueSetContainer+0x24>
	configASSERT(pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength);
    680e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    6810:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    6812:	429a      	cmp	r2, r3
    6814:	d311      	bcc.n	683a <prvNotifyQueueSetContainer+0x36>
    6816:	f04f 0380 	mov.w	r3, #128	; 0x80
    681a:	f383 8811 	msr	BASEPRI, r3
    681e:	f3bf 8f6f 	isb	sy
    6822:	f3bf 8f4f 	dsb	sy
    6826:	e7fe      	b.n	6826 <prvNotifyQueueSetContainer+0x22>
    6828:	f04f 0380 	mov.w	r3, #128	; 0x80
    682c:	f383 8811 	msr	BASEPRI, r3
    6830:	f3bf 8f6f 	isb	sy
    6834:	f3bf 8f4f 	dsb	sy
    6838:	e7fe      	b.n	6838 <prvNotifyQueueSetContainer+0x34>

	if (pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength) {
    683a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    683c:	4293      	cmp	r3, r2
    683e:	d803      	bhi.n	6848 <prvNotifyQueueSetContainer+0x44>
	BaseType_t xReturn             = pdFALSE;
    6840:	2600      	movs	r6, #0
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
    6842:	4630      	mov	r0, r6
    6844:	b002      	add	sp, #8
    6846:	bd70      	pop	{r4, r5, r6, pc}
    6848:	460a      	mov	r2, r1
		const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    684a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
    684e:	b26d      	sxtb	r5, r5
		xReturn = prvCopyDataToQueue(pxQueueSetContainer, &pxQueue, xCopyPosition);
    6850:	a901      	add	r1, sp, #4
    6852:	4620      	mov	r0, r4
    6854:	4b0a      	ldr	r3, [pc, #40]	; (6880 <prvNotifyQueueSetContainer+0x7c>)
    6856:	4798      	blx	r3
    6858:	4606      	mov	r6, r0
		if (cTxLock == queueUNLOCKED) {
    685a:	f1b5 3fff 	cmp.w	r5, #4294967295
    685e:	d10a      	bne.n	6876 <prvNotifyQueueSetContainer+0x72>
			if (listLIST_IS_EMPTY(&(pxQueueSetContainer->xTasksWaitingToReceive)) == pdFALSE) {
    6860:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6862:	2b00      	cmp	r3, #0
    6864:	d0ed      	beq.n	6842 <prvNotifyQueueSetContainer+0x3e>
				if (xTaskRemoveFromEventList(&(pxQueueSetContainer->xTasksWaitingToReceive)) != pdFALSE) {
    6866:	f104 0024 	add.w	r0, r4, #36	; 0x24
    686a:	4b06      	ldr	r3, [pc, #24]	; (6884 <prvNotifyQueueSetContainer+0x80>)
    686c:	4798      	blx	r3
    686e:	2800      	cmp	r0, #0
    6870:	d0e7      	beq.n	6842 <prvNotifyQueueSetContainer+0x3e>
					xReturn = pdTRUE;
    6872:	2601      	movs	r6, #1
	return xReturn;
    6874:	e7e5      	b.n	6842 <prvNotifyQueueSetContainer+0x3e>
			pxQueueSetContainer->cTxLock = (int8_t)(cTxLock + 1);
    6876:	1c6b      	adds	r3, r5, #1
    6878:	b25b      	sxtb	r3, r3
    687a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    687e:	e7e0      	b.n	6842 <prvNotifyQueueSetContainer+0x3e>
    6880:	00006785 	.word	0x00006785
    6884:	00007e01 	.word	0x00007e01

00006888 <prvCopyDataFromQueue>:
	if (pxQueue->uxItemSize != (UBaseType_t)0) {
    6888:	6c02      	ldr	r2, [r0, #64]	; 0x40
    688a:	b172      	cbz	r2, 68aa <prvCopyDataFromQueue+0x22>
{
    688c:	b510      	push	{r4, lr}
    688e:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    6890:	68c4      	ldr	r4, [r0, #12]
    6892:	4414      	add	r4, r2
    6894:	60c4      	str	r4, [r0, #12]
		if (pxQueue->u.pcReadFrom >= pxQueue->pcTail) /*lint !e946 MISRA exception justified as use of the relational
    6896:	6840      	ldr	r0, [r0, #4]
    6898:	4284      	cmp	r4, r0
    689a:	d301      	bcc.n	68a0 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    689c:	6818      	ldr	r0, [r3, #0]
    689e:	60d8      	str	r0, [r3, #12]
    68a0:	4608      	mov	r0, r1
		(void)memcpy((void *)pvBuffer,
    68a2:	68d9      	ldr	r1, [r3, #12]
    68a4:	4b01      	ldr	r3, [pc, #4]	; (68ac <prvCopyDataFromQueue+0x24>)
    68a6:	4798      	blx	r3
    68a8:	bd10      	pop	{r4, pc}
    68aa:	4770      	bx	lr
    68ac:	00008865 	.word	0x00008865

000068b0 <prvUnlockQueue>:
{
    68b0:	b538      	push	{r3, r4, r5, lr}
    68b2:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
    68b4:	4b1f      	ldr	r3, [pc, #124]	; (6934 <prvUnlockQueue+0x84>)
    68b6:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
    68b8:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
    68bc:	b264      	sxtb	r4, r4
		while (cTxLock > queueLOCKED_UNMODIFIED) {
    68be:	e008      	b.n	68d2 <prvUnlockQueue+0x22>
					if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    68c0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    68c2:	b1bb      	cbz	r3, 68f4 <prvUnlockQueue+0x44>
						if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    68c4:	f105 0024 	add.w	r0, r5, #36	; 0x24
    68c8:	4b1b      	ldr	r3, [pc, #108]	; (6938 <prvUnlockQueue+0x88>)
    68ca:	4798      	blx	r3
    68cc:	b978      	cbnz	r0, 68ee <prvUnlockQueue+0x3e>
			--cTxLock;
    68ce:	3c01      	subs	r4, #1
    68d0:	b264      	sxtb	r4, r4
		while (cTxLock > queueLOCKED_UNMODIFIED) {
    68d2:	2c00      	cmp	r4, #0
    68d4:	dd0e      	ble.n	68f4 <prvUnlockQueue+0x44>
				if (pxQueue->pxQueueSetContainer != NULL) {
    68d6:	6cab      	ldr	r3, [r5, #72]	; 0x48
    68d8:	2b00      	cmp	r3, #0
    68da:	d0f1      	beq.n	68c0 <prvUnlockQueue+0x10>
					if (prvNotifyQueueSetContainer(pxQueue, queueSEND_TO_BACK) != pdFALSE) {
    68dc:	2100      	movs	r1, #0
    68de:	4628      	mov	r0, r5
    68e0:	4b16      	ldr	r3, [pc, #88]	; (693c <prvUnlockQueue+0x8c>)
    68e2:	4798      	blx	r3
    68e4:	2800      	cmp	r0, #0
    68e6:	d0f2      	beq.n	68ce <prvUnlockQueue+0x1e>
						vTaskMissedYield();
    68e8:	4b15      	ldr	r3, [pc, #84]	; (6940 <prvUnlockQueue+0x90>)
    68ea:	4798      	blx	r3
    68ec:	e7ef      	b.n	68ce <prvUnlockQueue+0x1e>
							vTaskMissedYield();
    68ee:	4b14      	ldr	r3, [pc, #80]	; (6940 <prvUnlockQueue+0x90>)
    68f0:	4798      	blx	r3
    68f2:	e7ec      	b.n	68ce <prvUnlockQueue+0x1e>
		pxQueue->cTxLock = queueUNLOCKED;
    68f4:	23ff      	movs	r3, #255	; 0xff
    68f6:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
    68fa:	4b12      	ldr	r3, [pc, #72]	; (6944 <prvUnlockQueue+0x94>)
    68fc:	4798      	blx	r3
	taskENTER_CRITICAL();
    68fe:	4b0d      	ldr	r3, [pc, #52]	; (6934 <prvUnlockQueue+0x84>)
    6900:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
    6902:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
    6906:	b264      	sxtb	r4, r4
		while (cRxLock > queueLOCKED_UNMODIFIED) {
    6908:	e001      	b.n	690e <prvUnlockQueue+0x5e>
				--cRxLock;
    690a:	3c01      	subs	r4, #1
    690c:	b264      	sxtb	r4, r4
		while (cRxLock > queueLOCKED_UNMODIFIED) {
    690e:	2c00      	cmp	r4, #0
    6910:	dd0a      	ble.n	6928 <prvUnlockQueue+0x78>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    6912:	692b      	ldr	r3, [r5, #16]
    6914:	b143      	cbz	r3, 6928 <prvUnlockQueue+0x78>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    6916:	f105 0010 	add.w	r0, r5, #16
    691a:	4b07      	ldr	r3, [pc, #28]	; (6938 <prvUnlockQueue+0x88>)
    691c:	4798      	blx	r3
    691e:	2800      	cmp	r0, #0
    6920:	d0f3      	beq.n	690a <prvUnlockQueue+0x5a>
					vTaskMissedYield();
    6922:	4b07      	ldr	r3, [pc, #28]	; (6940 <prvUnlockQueue+0x90>)
    6924:	4798      	blx	r3
    6926:	e7f0      	b.n	690a <prvUnlockQueue+0x5a>
		pxQueue->cRxLock = queueUNLOCKED;
    6928:	23ff      	movs	r3, #255	; 0xff
    692a:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
    692e:	4b05      	ldr	r3, [pc, #20]	; (6944 <prvUnlockQueue+0x94>)
    6930:	4798      	blx	r3
    6932:	bd38      	pop	{r3, r4, r5, pc}
    6934:	00006205 	.word	0x00006205
    6938:	00007e01 	.word	0x00007e01
    693c:	00006805 	.word	0x00006805
    6940:	00007fb5 	.word	0x00007fb5
    6944:	00006249 	.word	0x00006249

00006948 <xQueueGenericReset>:
{
    6948:	b538      	push	{r3, r4, r5, lr}
	configASSERT(pxQueue);
    694a:	b330      	cbz	r0, 699a <xQueueGenericReset+0x52>
    694c:	4604      	mov	r4, r0
    694e:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
    6950:	4b1c      	ldr	r3, [pc, #112]	; (69c4 <xQueueGenericReset+0x7c>)
    6952:	4798      	blx	r3
		pxQueue->pcTail            = pxQueue->pcHead + (pxQueue->uxLength * pxQueue->uxItemSize);
    6954:	6821      	ldr	r1, [r4, #0]
    6956:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    6958:	6c23      	ldr	r3, [r4, #64]	; 0x40
    695a:	fb03 1002 	mla	r0, r3, r2, r1
    695e:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = (UBaseType_t)0U;
    6960:	2000      	movs	r0, #0
    6962:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo         = pxQueue->pcHead;
    6964:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom      = pxQueue->pcHead + ((pxQueue->uxLength - (UBaseType_t)1U) * pxQueue->uxItemSize);
    6966:	3a01      	subs	r2, #1
    6968:	fb02 1303 	mla	r3, r2, r3, r1
    696c:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock           = queueUNLOCKED;
    696e:	23ff      	movs	r3, #255	; 0xff
    6970:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock           = queueUNLOCKED;
    6974:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if (xNewQueue == pdFALSE) {
    6978:	b9c5      	cbnz	r5, 69ac <xQueueGenericReset+0x64>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    697a:	6923      	ldr	r3, [r4, #16]
    697c:	b1eb      	cbz	r3, 69ba <xQueueGenericReset+0x72>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    697e:	f104 0010 	add.w	r0, r4, #16
    6982:	4b11      	ldr	r3, [pc, #68]	; (69c8 <xQueueGenericReset+0x80>)
    6984:	4798      	blx	r3
    6986:	b1c0      	cbz	r0, 69ba <xQueueGenericReset+0x72>
					queueYIELD_IF_USING_PREEMPTION();
    6988:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    698c:	4b0f      	ldr	r3, [pc, #60]	; (69cc <xQueueGenericReset+0x84>)
    698e:	601a      	str	r2, [r3, #0]
    6990:	f3bf 8f4f 	dsb	sy
    6994:	f3bf 8f6f 	isb	sy
    6998:	e00f      	b.n	69ba <xQueueGenericReset+0x72>
    699a:	f04f 0380 	mov.w	r3, #128	; 0x80
    699e:	f383 8811 	msr	BASEPRI, r3
    69a2:	f3bf 8f6f 	isb	sy
    69a6:	f3bf 8f4f 	dsb	sy
    69aa:	e7fe      	b.n	69aa <xQueueGenericReset+0x62>
			vListInitialise(&(pxQueue->xTasksWaitingToSend));
    69ac:	f104 0010 	add.w	r0, r4, #16
    69b0:	4d07      	ldr	r5, [pc, #28]	; (69d0 <xQueueGenericReset+0x88>)
    69b2:	47a8      	blx	r5
			vListInitialise(&(pxQueue->xTasksWaitingToReceive));
    69b4:	f104 0024 	add.w	r0, r4, #36	; 0x24
    69b8:	47a8      	blx	r5
	taskEXIT_CRITICAL();
    69ba:	4b06      	ldr	r3, [pc, #24]	; (69d4 <xQueueGenericReset+0x8c>)
    69bc:	4798      	blx	r3
}
    69be:	2001      	movs	r0, #1
    69c0:	bd38      	pop	{r3, r4, r5, pc}
    69c2:	bf00      	nop
    69c4:	00006205 	.word	0x00006205
    69c8:	00007e01 	.word	0x00007e01
    69cc:	e000ed04 	.word	0xe000ed04
    69d0:	000060a5 	.word	0x000060a5
    69d4:	00006249 	.word	0x00006249

000069d8 <prvInitialiseNewQueue>:
{
    69d8:	b538      	push	{r3, r4, r5, lr}
    69da:	461d      	mov	r5, r3
    69dc:	9c04      	ldr	r4, [sp, #16]
	if (uxItemSize == (UBaseType_t)0) {
    69de:	460b      	mov	r3, r1
    69e0:	b159      	cbz	r1, 69fa <prvInitialiseNewQueue+0x22>
		pxNewQueue->pcHead = (int8_t *)pucQueueStorage;
    69e2:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength   = uxQueueLength;
    69e4:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    69e6:	6423      	str	r3, [r4, #64]	; 0x40
	(void)xQueueGenericReset(pxNewQueue, pdTRUE);
    69e8:	2101      	movs	r1, #1
    69ea:	4620      	mov	r0, r4
    69ec:	4b04      	ldr	r3, [pc, #16]	; (6a00 <prvInitialiseNewQueue+0x28>)
    69ee:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
    69f0:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
		pxNewQueue->pxQueueSetContainer = NULL;
    69f4:	2300      	movs	r3, #0
    69f6:	64a3      	str	r3, [r4, #72]	; 0x48
    69f8:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = (int8_t *)pxNewQueue;
    69fa:	6024      	str	r4, [r4, #0]
    69fc:	e7f2      	b.n	69e4 <prvInitialiseNewQueue+0xc>
    69fe:	bf00      	nop
    6a00:	00006949 	.word	0x00006949

00006a04 <xQueueGenericCreateStatic>:
	configASSERT(uxQueueLength > (UBaseType_t)0);
    6a04:	b940      	cbnz	r0, 6a18 <xQueueGenericCreateStatic+0x14>
    6a06:	f04f 0380 	mov.w	r3, #128	; 0x80
    6a0a:	f383 8811 	msr	BASEPRI, r3
    6a0e:	f3bf 8f6f 	isb	sy
    6a12:	f3bf 8f4f 	dsb	sy
    6a16:	e7fe      	b.n	6a16 <xQueueGenericCreateStatic+0x12>
{
    6a18:	b530      	push	{r4, r5, lr}
    6a1a:	b085      	sub	sp, #20
    6a1c:	4604      	mov	r4, r0
	configASSERT(pxStaticQueue != NULL);
    6a1e:	b163      	cbz	r3, 6a3a <xQueueGenericCreateStatic+0x36>
	configASSERT(!((pucQueueStorage != NULL) && (uxItemSize == 0)));
    6a20:	b1a2      	cbz	r2, 6a4c <xQueueGenericCreateStatic+0x48>
    6a22:	b1a9      	cbz	r1, 6a50 <xQueueGenericCreateStatic+0x4c>
    6a24:	2001      	movs	r0, #1
    6a26:	b9a8      	cbnz	r0, 6a54 <xQueueGenericCreateStatic+0x50>
    6a28:	f04f 0380 	mov.w	r3, #128	; 0x80
    6a2c:	f383 8811 	msr	BASEPRI, r3
    6a30:	f3bf 8f6f 	isb	sy
    6a34:	f3bf 8f4f 	dsb	sy
    6a38:	e7fe      	b.n	6a38 <xQueueGenericCreateStatic+0x34>
    6a3a:	f04f 0380 	mov.w	r3, #128	; 0x80
    6a3e:	f383 8811 	msr	BASEPRI, r3
    6a42:	f3bf 8f6f 	isb	sy
    6a46:	f3bf 8f4f 	dsb	sy
    6a4a:	e7fe      	b.n	6a4a <xQueueGenericCreateStatic+0x46>
    6a4c:	2001      	movs	r0, #1
    6a4e:	e7ea      	b.n	6a26 <xQueueGenericCreateStatic+0x22>
    6a50:	2000      	movs	r0, #0
    6a52:	e7e8      	b.n	6a26 <xQueueGenericCreateStatic+0x22>
	configASSERT(!((pucQueueStorage == NULL) && (uxItemSize != 0)));
    6a54:	b90a      	cbnz	r2, 6a5a <xQueueGenericCreateStatic+0x56>
    6a56:	b101      	cbz	r1, 6a5a <xQueueGenericCreateStatic+0x56>
    6a58:	2000      	movs	r0, #0
    6a5a:	b940      	cbnz	r0, 6a6e <xQueueGenericCreateStatic+0x6a>
    6a5c:	f04f 0380 	mov.w	r3, #128	; 0x80
    6a60:	f383 8811 	msr	BASEPRI, r3
    6a64:	f3bf 8f6f 	isb	sy
    6a68:	f3bf 8f4f 	dsb	sy
    6a6c:	e7fe      	b.n	6a6c <xQueueGenericCreateStatic+0x68>
		volatile size_t xSize = sizeof(StaticQueue_t);
    6a6e:	2054      	movs	r0, #84	; 0x54
    6a70:	9003      	str	r0, [sp, #12]
		configASSERT(xSize == sizeof(Queue_t));
    6a72:	9803      	ldr	r0, [sp, #12]
    6a74:	2854      	cmp	r0, #84	; 0x54
    6a76:	d008      	beq.n	6a8a <xQueueGenericCreateStatic+0x86>
    6a78:	f04f 0380 	mov.w	r3, #128	; 0x80
    6a7c:	f383 8811 	msr	BASEPRI, r3
    6a80:	f3bf 8f6f 	isb	sy
    6a84:	f3bf 8f4f 	dsb	sy
    6a88:	e7fe      	b.n	6a88 <xQueueGenericCreateStatic+0x84>
    6a8a:	4620      	mov	r0, r4
    6a8c:	461c      	mov	r4, r3
			pxNewQueue->ucStaticallyAllocated = pdTRUE;
    6a8e:	2301      	movs	r3, #1
    6a90:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
		prvInitialiseNewQueue(uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue);
    6a94:	9400      	str	r4, [sp, #0]
    6a96:	f89d 3020 	ldrb.w	r3, [sp, #32]
    6a9a:	4d02      	ldr	r5, [pc, #8]	; (6aa4 <xQueueGenericCreateStatic+0xa0>)
    6a9c:	47a8      	blx	r5
}
    6a9e:	4620      	mov	r0, r4
    6aa0:	b005      	add	sp, #20
    6aa2:	bd30      	pop	{r4, r5, pc}
    6aa4:	000069d9 	.word	0x000069d9

00006aa8 <xQueueGenericCreate>:
	configASSERT(uxQueueLength > (UBaseType_t)0);
    6aa8:	b940      	cbnz	r0, 6abc <xQueueGenericCreate+0x14>
    6aaa:	f04f 0380 	mov.w	r3, #128	; 0x80
    6aae:	f383 8811 	msr	BASEPRI, r3
    6ab2:	f3bf 8f6f 	isb	sy
    6ab6:	f3bf 8f4f 	dsb	sy
    6aba:	e7fe      	b.n	6aba <xQueueGenericCreate+0x12>
{
    6abc:	b5f0      	push	{r4, r5, r6, r7, lr}
    6abe:	b083      	sub	sp, #12
    6ac0:	4607      	mov	r7, r0
	if (uxItemSize == (UBaseType_t)0) {
    6ac2:	b111      	cbz	r1, 6aca <xQueueGenericCreate+0x22>
		xQueueSizeInBytes = (size_t)(
    6ac4:	fb01 f000 	mul.w	r0, r1, r0
    6ac8:	e000      	b.n	6acc <xQueueGenericCreate+0x24>
		xQueueSizeInBytes = (size_t)0;
    6aca:	2000      	movs	r0, #0
    6acc:	4616      	mov	r6, r2
    6ace:	460c      	mov	r4, r1
	pxNewQueue = (Queue_t *)pvPortMalloc(sizeof(Queue_t) + xQueueSizeInBytes);
    6ad0:	3054      	adds	r0, #84	; 0x54
    6ad2:	4b09      	ldr	r3, [pc, #36]	; (6af8 <xQueueGenericCreate+0x50>)
    6ad4:	4798      	blx	r3
	if (pxNewQueue != NULL) {
    6ad6:	4605      	mov	r5, r0
    6ad8:	b150      	cbz	r0, 6af0 <xQueueGenericCreate+0x48>
			pxNewQueue->ucStaticallyAllocated = pdFALSE;
    6ada:	2300      	movs	r3, #0
    6adc:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
		prvInitialiseNewQueue(uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue);
    6ae0:	9000      	str	r0, [sp, #0]
    6ae2:	4633      	mov	r3, r6
    6ae4:	f100 0254 	add.w	r2, r0, #84	; 0x54
    6ae8:	4621      	mov	r1, r4
    6aea:	4638      	mov	r0, r7
    6aec:	4c03      	ldr	r4, [pc, #12]	; (6afc <xQueueGenericCreate+0x54>)
    6aee:	47a0      	blx	r4
}
    6af0:	4628      	mov	r0, r5
    6af2:	b003      	add	sp, #12
    6af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6af6:	bf00      	nop
    6af8:	0000655d 	.word	0x0000655d
    6afc:	000069d9 	.word	0x000069d9

00006b00 <xQueueCreateCountingSemaphore>:
	configASSERT(uxMaxCount != 0);
    6b00:	b940      	cbnz	r0, 6b14 <xQueueCreateCountingSemaphore+0x14>
    6b02:	f04f 0380 	mov.w	r3, #128	; 0x80
    6b06:	f383 8811 	msr	BASEPRI, r3
    6b0a:	f3bf 8f6f 	isb	sy
    6b0e:	f3bf 8f4f 	dsb	sy
    6b12:	e7fe      	b.n	6b12 <xQueueCreateCountingSemaphore+0x12>
	configASSERT(uxInitialCount <= uxMaxCount);
    6b14:	4288      	cmp	r0, r1
    6b16:	d208      	bcs.n	6b2a <xQueueCreateCountingSemaphore+0x2a>
    6b18:	f04f 0380 	mov.w	r3, #128	; 0x80
    6b1c:	f383 8811 	msr	BASEPRI, r3
    6b20:	f3bf 8f6f 	isb	sy
    6b24:	f3bf 8f4f 	dsb	sy
    6b28:	e7fe      	b.n	6b28 <xQueueCreateCountingSemaphore+0x28>
{
    6b2a:	b510      	push	{r4, lr}
    6b2c:	460c      	mov	r4, r1
	xHandle = xQueueGenericCreate(uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE);
    6b2e:	2202      	movs	r2, #2
    6b30:	2100      	movs	r1, #0
    6b32:	4b03      	ldr	r3, [pc, #12]	; (6b40 <xQueueCreateCountingSemaphore+0x40>)
    6b34:	4798      	blx	r3
	if (xHandle != NULL) {
    6b36:	4603      	mov	r3, r0
    6b38:	b100      	cbz	r0, 6b3c <xQueueCreateCountingSemaphore+0x3c>
		((Queue_t *)xHandle)->uxMessagesWaiting = uxInitialCount;
    6b3a:	6384      	str	r4, [r0, #56]	; 0x38
}
    6b3c:	4618      	mov	r0, r3
    6b3e:	bd10      	pop	{r4, pc}
    6b40:	00006aa9 	.word	0x00006aa9

00006b44 <xQueueGenericSend>:
{
    6b44:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b46:	b085      	sub	sp, #20
    6b48:	9201      	str	r2, [sp, #4]
	configASSERT(pxQueue);
    6b4a:	b160      	cbz	r0, 6b66 <xQueueGenericSend+0x22>
    6b4c:	4604      	mov	r4, r0
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    6b4e:	b199      	cbz	r1, 6b78 <xQueueGenericSend+0x34>
    6b50:	2501      	movs	r5, #1
    6b52:	b9bd      	cbnz	r5, 6b84 <xQueueGenericSend+0x40>
    6b54:	f04f 0380 	mov.w	r3, #128	; 0x80
    6b58:	f383 8811 	msr	BASEPRI, r3
    6b5c:	f3bf 8f6f 	isb	sy
    6b60:	f3bf 8f4f 	dsb	sy
    6b64:	e7fe      	b.n	6b64 <xQueueGenericSend+0x20>
    6b66:	f04f 0380 	mov.w	r3, #128	; 0x80
    6b6a:	f383 8811 	msr	BASEPRI, r3
    6b6e:	f3bf 8f6f 	isb	sy
    6b72:	f3bf 8f4f 	dsb	sy
    6b76:	e7fe      	b.n	6b76 <xQueueGenericSend+0x32>
    6b78:	6c02      	ldr	r2, [r0, #64]	; 0x40
    6b7a:	b90a      	cbnz	r2, 6b80 <xQueueGenericSend+0x3c>
    6b7c:	2501      	movs	r5, #1
    6b7e:	e7e8      	b.n	6b52 <xQueueGenericSend+0xe>
    6b80:	2500      	movs	r5, #0
    6b82:	e7e6      	b.n	6b52 <xQueueGenericSend+0xe>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    6b84:	2b02      	cmp	r3, #2
    6b86:	d009      	beq.n	6b9c <xQueueGenericSend+0x58>
    6b88:	b96d      	cbnz	r5, 6ba6 <xQueueGenericSend+0x62>
    6b8a:	f04f 0380 	mov.w	r3, #128	; 0x80
    6b8e:	f383 8811 	msr	BASEPRI, r3
    6b92:	f3bf 8f6f 	isb	sy
    6b96:	f3bf 8f4f 	dsb	sy
    6b9a:	e7fe      	b.n	6b9a <xQueueGenericSend+0x56>
    6b9c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    6b9e:	2a01      	cmp	r2, #1
    6ba0:	d0f2      	beq.n	6b88 <xQueueGenericSend+0x44>
    6ba2:	2500      	movs	r5, #0
    6ba4:	e7f0      	b.n	6b88 <xQueueGenericSend+0x44>
    6ba6:	461e      	mov	r6, r3
    6ba8:	460f      	mov	r7, r1
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    6baa:	4b50      	ldr	r3, [pc, #320]	; (6cec <xQueueGenericSend+0x1a8>)
    6bac:	4798      	blx	r3
    6bae:	b910      	cbnz	r0, 6bb6 <xQueueGenericSend+0x72>
    6bb0:	9b01      	ldr	r3, [sp, #4]
    6bb2:	b103      	cbz	r3, 6bb6 <xQueueGenericSend+0x72>
    6bb4:	2500      	movs	r5, #0
    6bb6:	b945      	cbnz	r5, 6bca <xQueueGenericSend+0x86>
    6bb8:	f04f 0380 	mov.w	r3, #128	; 0x80
    6bbc:	f383 8811 	msr	BASEPRI, r3
    6bc0:	f3bf 8f6f 	isb	sy
    6bc4:	f3bf 8f4f 	dsb	sy
    6bc8:	e7fe      	b.n	6bc8 <xQueueGenericSend+0x84>
    6bca:	2500      	movs	r5, #0
    6bcc:	e03d      	b.n	6c4a <xQueueGenericSend+0x106>
				xYieldRequired = prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
    6bce:	4632      	mov	r2, r6
    6bd0:	4639      	mov	r1, r7
    6bd2:	4620      	mov	r0, r4
    6bd4:	4b46      	ldr	r3, [pc, #280]	; (6cf0 <xQueueGenericSend+0x1ac>)
    6bd6:	4798      	blx	r3
					if (pxQueue->pxQueueSetContainer != NULL) {
    6bd8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    6bda:	b18b      	cbz	r3, 6c00 <xQueueGenericSend+0xbc>
						if (prvNotifyQueueSetContainer(pxQueue, xCopyPosition) != pdFALSE) {
    6bdc:	4631      	mov	r1, r6
    6bde:	4620      	mov	r0, r4
    6be0:	4b44      	ldr	r3, [pc, #272]	; (6cf4 <xQueueGenericSend+0x1b0>)
    6be2:	4798      	blx	r3
    6be4:	b138      	cbz	r0, 6bf6 <xQueueGenericSend+0xb2>
							queueYIELD_IF_USING_PREEMPTION();
    6be6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    6bea:	4b43      	ldr	r3, [pc, #268]	; (6cf8 <xQueueGenericSend+0x1b4>)
    6bec:	601a      	str	r2, [r3, #0]
    6bee:	f3bf 8f4f 	dsb	sy
    6bf2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    6bf6:	4b41      	ldr	r3, [pc, #260]	; (6cfc <xQueueGenericSend+0x1b8>)
    6bf8:	4798      	blx	r3
				return pdPASS;
    6bfa:	2001      	movs	r0, #1
}
    6bfc:	b005      	add	sp, #20
    6bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    6c00:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6c02:	b173      	cbz	r3, 6c22 <xQueueGenericSend+0xde>
							if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    6c04:	f104 0024 	add.w	r0, r4, #36	; 0x24
    6c08:	4b3d      	ldr	r3, [pc, #244]	; (6d00 <xQueueGenericSend+0x1bc>)
    6c0a:	4798      	blx	r3
    6c0c:	2800      	cmp	r0, #0
    6c0e:	d0f2      	beq.n	6bf6 <xQueueGenericSend+0xb2>
								queueYIELD_IF_USING_PREEMPTION();
    6c10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    6c14:	4b38      	ldr	r3, [pc, #224]	; (6cf8 <xQueueGenericSend+0x1b4>)
    6c16:	601a      	str	r2, [r3, #0]
    6c18:	f3bf 8f4f 	dsb	sy
    6c1c:	f3bf 8f6f 	isb	sy
    6c20:	e7e9      	b.n	6bf6 <xQueueGenericSend+0xb2>
						} else if (xYieldRequired != pdFALSE) {
    6c22:	2800      	cmp	r0, #0
    6c24:	d0e7      	beq.n	6bf6 <xQueueGenericSend+0xb2>
							queueYIELD_IF_USING_PREEMPTION();
    6c26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    6c2a:	4b33      	ldr	r3, [pc, #204]	; (6cf8 <xQueueGenericSend+0x1b4>)
    6c2c:	601a      	str	r2, [r3, #0]
    6c2e:	f3bf 8f4f 	dsb	sy
    6c32:	f3bf 8f6f 	isb	sy
    6c36:	e7de      	b.n	6bf6 <xQueueGenericSend+0xb2>
					taskEXIT_CRITICAL();
    6c38:	4b30      	ldr	r3, [pc, #192]	; (6cfc <xQueueGenericSend+0x1b8>)
    6c3a:	4798      	blx	r3
					return errQUEUE_FULL;
    6c3c:	2000      	movs	r0, #0
    6c3e:	e7dd      	b.n	6bfc <xQueueGenericSend+0xb8>
				prvUnlockQueue(pxQueue);
    6c40:	4620      	mov	r0, r4
    6c42:	4b30      	ldr	r3, [pc, #192]	; (6d04 <xQueueGenericSend+0x1c0>)
    6c44:	4798      	blx	r3
				(void)xTaskResumeAll();
    6c46:	4b30      	ldr	r3, [pc, #192]	; (6d08 <xQueueGenericSend+0x1c4>)
    6c48:	4798      	blx	r3
		taskENTER_CRITICAL();
    6c4a:	4b30      	ldr	r3, [pc, #192]	; (6d0c <xQueueGenericSend+0x1c8>)
    6c4c:	4798      	blx	r3
			if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
    6c4e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    6c50:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    6c52:	429a      	cmp	r2, r3
    6c54:	d3bb      	bcc.n	6bce <xQueueGenericSend+0x8a>
    6c56:	2e02      	cmp	r6, #2
    6c58:	d0b9      	beq.n	6bce <xQueueGenericSend+0x8a>
				if (xTicksToWait == (TickType_t)0) {
    6c5a:	9b01      	ldr	r3, [sp, #4]
    6c5c:	2b00      	cmp	r3, #0
    6c5e:	d0eb      	beq.n	6c38 <xQueueGenericSend+0xf4>
				} else if (xEntryTimeSet == pdFALSE) {
    6c60:	b91d      	cbnz	r5, 6c6a <xQueueGenericSend+0x126>
					vTaskInternalSetTimeOutState(&xTimeOut);
    6c62:	a802      	add	r0, sp, #8
    6c64:	4b2a      	ldr	r3, [pc, #168]	; (6d10 <xQueueGenericSend+0x1cc>)
    6c66:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    6c68:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
    6c6a:	4b24      	ldr	r3, [pc, #144]	; (6cfc <xQueueGenericSend+0x1b8>)
    6c6c:	4798      	blx	r3
		vTaskSuspendAll();
    6c6e:	4b29      	ldr	r3, [pc, #164]	; (6d14 <xQueueGenericSend+0x1d0>)
    6c70:	4798      	blx	r3
		prvLockQueue(pxQueue);
    6c72:	4b26      	ldr	r3, [pc, #152]	; (6d0c <xQueueGenericSend+0x1c8>)
    6c74:	4798      	blx	r3
    6c76:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    6c7a:	b25b      	sxtb	r3, r3
    6c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
    6c80:	d102      	bne.n	6c88 <xQueueGenericSend+0x144>
    6c82:	2300      	movs	r3, #0
    6c84:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    6c88:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    6c8c:	b25b      	sxtb	r3, r3
    6c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
    6c92:	d102      	bne.n	6c9a <xQueueGenericSend+0x156>
    6c94:	2300      	movs	r3, #0
    6c96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    6c9a:	4b18      	ldr	r3, [pc, #96]	; (6cfc <xQueueGenericSend+0x1b8>)
    6c9c:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    6c9e:	a901      	add	r1, sp, #4
    6ca0:	a802      	add	r0, sp, #8
    6ca2:	4b1d      	ldr	r3, [pc, #116]	; (6d18 <xQueueGenericSend+0x1d4>)
    6ca4:	4798      	blx	r3
    6ca6:	b9c8      	cbnz	r0, 6cdc <xQueueGenericSend+0x198>
			if (prvIsQueueFull(pxQueue) != pdFALSE) {
    6ca8:	4620      	mov	r0, r4
    6caa:	4b1c      	ldr	r3, [pc, #112]	; (6d1c <xQueueGenericSend+0x1d8>)
    6cac:	4798      	blx	r3
    6cae:	2800      	cmp	r0, #0
    6cb0:	d0c6      	beq.n	6c40 <xQueueGenericSend+0xfc>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToSend), xTicksToWait);
    6cb2:	9901      	ldr	r1, [sp, #4]
    6cb4:	f104 0010 	add.w	r0, r4, #16
    6cb8:	4b19      	ldr	r3, [pc, #100]	; (6d20 <xQueueGenericSend+0x1dc>)
    6cba:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    6cbc:	4620      	mov	r0, r4
    6cbe:	4b11      	ldr	r3, [pc, #68]	; (6d04 <xQueueGenericSend+0x1c0>)
    6cc0:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    6cc2:	4b11      	ldr	r3, [pc, #68]	; (6d08 <xQueueGenericSend+0x1c4>)
    6cc4:	4798      	blx	r3
    6cc6:	2800      	cmp	r0, #0
    6cc8:	d1bf      	bne.n	6c4a <xQueueGenericSend+0x106>
					portYIELD_WITHIN_API();
    6cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    6cce:	4b0a      	ldr	r3, [pc, #40]	; (6cf8 <xQueueGenericSend+0x1b4>)
    6cd0:	601a      	str	r2, [r3, #0]
    6cd2:	f3bf 8f4f 	dsb	sy
    6cd6:	f3bf 8f6f 	isb	sy
    6cda:	e7b6      	b.n	6c4a <xQueueGenericSend+0x106>
			prvUnlockQueue(pxQueue);
    6cdc:	4620      	mov	r0, r4
    6cde:	4b09      	ldr	r3, [pc, #36]	; (6d04 <xQueueGenericSend+0x1c0>)
    6ce0:	4798      	blx	r3
			(void)xTaskResumeAll();
    6ce2:	4b09      	ldr	r3, [pc, #36]	; (6d08 <xQueueGenericSend+0x1c4>)
    6ce4:	4798      	blx	r3
			return errQUEUE_FULL;
    6ce6:	2000      	movs	r0, #0
    6ce8:	e788      	b.n	6bfc <xQueueGenericSend+0xb8>
    6cea:	bf00      	nop
    6cec:	00007ff1 	.word	0x00007ff1
    6cf0:	00006785 	.word	0x00006785
    6cf4:	00006805 	.word	0x00006805
    6cf8:	e000ed04 	.word	0xe000ed04
    6cfc:	00006249 	.word	0x00006249
    6d00:	00007e01 	.word	0x00007e01
    6d04:	000068b1 	.word	0x000068b1
    6d08:	00007b05 	.word	0x00007b05
    6d0c:	00006205 	.word	0x00006205
    6d10:	00007f15 	.word	0x00007f15
    6d14:	000079c5 	.word	0x000079c5
    6d18:	00007f29 	.word	0x00007f29
    6d1c:	00006739 	.word	0x00006739
    6d20:	00007d1d 	.word	0x00007d1d

00006d24 <prvInitialiseMutex>:
	if (pxNewQueue != NULL) {
    6d24:	b148      	cbz	r0, 6d3a <prvInitialiseMutex+0x16>
{
    6d26:	b510      	push	{r4, lr}
		pxNewQueue->pxMutexHolder = NULL;
    6d28:	2100      	movs	r1, #0
    6d2a:	6041      	str	r1, [r0, #4]
		pxNewQueue->uxQueueType   = queueQUEUE_IS_MUTEX;
    6d2c:	6001      	str	r1, [r0, #0]
		pxNewQueue->u.uxRecursiveCallCount = 0;
    6d2e:	60c1      	str	r1, [r0, #12]
		(void)xQueueGenericSend(pxNewQueue, NULL, (TickType_t)0U, queueSEND_TO_BACK);
    6d30:	460b      	mov	r3, r1
    6d32:	460a      	mov	r2, r1
    6d34:	4c01      	ldr	r4, [pc, #4]	; (6d3c <prvInitialiseMutex+0x18>)
    6d36:	47a0      	blx	r4
    6d38:	bd10      	pop	{r4, pc}
    6d3a:	4770      	bx	lr
    6d3c:	00006b45 	.word	0x00006b45

00006d40 <xQueueCreateMutexStatic>:
{
    6d40:	b510      	push	{r4, lr}
    6d42:	b082      	sub	sp, #8
	pxNewQueue = (Queue_t *)xQueueGenericCreateStatic(uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType);
    6d44:	9000      	str	r0, [sp, #0]
    6d46:	460b      	mov	r3, r1
    6d48:	2200      	movs	r2, #0
    6d4a:	4611      	mov	r1, r2
    6d4c:	2001      	movs	r0, #1
    6d4e:	4c04      	ldr	r4, [pc, #16]	; (6d60 <xQueueCreateMutexStatic+0x20>)
    6d50:	47a0      	blx	r4
    6d52:	4604      	mov	r4, r0
	prvInitialiseMutex(pxNewQueue);
    6d54:	4b03      	ldr	r3, [pc, #12]	; (6d64 <xQueueCreateMutexStatic+0x24>)
    6d56:	4798      	blx	r3
}
    6d58:	4620      	mov	r0, r4
    6d5a:	b002      	add	sp, #8
    6d5c:	bd10      	pop	{r4, pc}
    6d5e:	bf00      	nop
    6d60:	00006a05 	.word	0x00006a05
    6d64:	00006d25 	.word	0x00006d25

00006d68 <xQueueGiveMutexRecursive>:
{
    6d68:	b538      	push	{r3, r4, r5, lr}
	configASSERT(pxMutex);
    6d6a:	b138      	cbz	r0, 6d7c <xQueueGiveMutexRecursive+0x14>
    6d6c:	4604      	mov	r4, r0
	if (pxMutex->pxMutexHolder
    6d6e:	6845      	ldr	r5, [r0, #4]
	    == (void *)xTaskGetCurrentTaskHandle()) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
    6d70:	4b0d      	ldr	r3, [pc, #52]	; (6da8 <xQueueGiveMutexRecursive+0x40>)
    6d72:	4798      	blx	r3
	if (pxMutex->pxMutexHolder
    6d74:	4285      	cmp	r5, r0
    6d76:	d00a      	beq.n	6d8e <xQueueGiveMutexRecursive+0x26>
		xReturn = pdFAIL;
    6d78:	2000      	movs	r0, #0
    6d7a:	bd38      	pop	{r3, r4, r5, pc}
    6d7c:	f04f 0380 	mov.w	r3, #128	; 0x80
    6d80:	f383 8811 	msr	BASEPRI, r3
    6d84:	f3bf 8f6f 	isb	sy
    6d88:	f3bf 8f4f 	dsb	sy
    6d8c:	e7fe      	b.n	6d8c <xQueueGiveMutexRecursive+0x24>
		(pxMutex->u.uxRecursiveCallCount)--;
    6d8e:	68e3      	ldr	r3, [r4, #12]
    6d90:	3b01      	subs	r3, #1
    6d92:	60e3      	str	r3, [r4, #12]
		if (pxMutex->u.uxRecursiveCallCount == (UBaseType_t)0) {
    6d94:	b10b      	cbz	r3, 6d9a <xQueueGiveMutexRecursive+0x32>
		xReturn = pdPASS;
    6d96:	2001      	movs	r0, #1
}
    6d98:	bd38      	pop	{r3, r4, r5, pc}
			(void)xQueueGenericSend(pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK);
    6d9a:	461a      	mov	r2, r3
    6d9c:	4619      	mov	r1, r3
    6d9e:	4620      	mov	r0, r4
    6da0:	4c02      	ldr	r4, [pc, #8]	; (6dac <xQueueGiveMutexRecursive+0x44>)
    6da2:	47a0      	blx	r4
		xReturn = pdPASS;
    6da4:	2001      	movs	r0, #1
    6da6:	bd38      	pop	{r3, r4, r5, pc}
    6da8:	00007fe5 	.word	0x00007fe5
    6dac:	00006b45 	.word	0x00006b45

00006db0 <xQueueGenericSendFromISR>:
{
    6db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT(pxQueue);
    6db4:	b160      	cbz	r0, 6dd0 <xQueueGenericSendFromISR+0x20>
    6db6:	4604      	mov	r4, r0
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    6db8:	b199      	cbz	r1, 6de2 <xQueueGenericSendFromISR+0x32>
    6dba:	2001      	movs	r0, #1
    6dbc:	b9b8      	cbnz	r0, 6dee <xQueueGenericSendFromISR+0x3e>
    6dbe:	f04f 0380 	mov.w	r3, #128	; 0x80
    6dc2:	f383 8811 	msr	BASEPRI, r3
    6dc6:	f3bf 8f6f 	isb	sy
    6dca:	f3bf 8f4f 	dsb	sy
    6dce:	e7fe      	b.n	6dce <xQueueGenericSendFromISR+0x1e>
    6dd0:	f04f 0380 	mov.w	r3, #128	; 0x80
    6dd4:	f383 8811 	msr	BASEPRI, r3
    6dd8:	f3bf 8f6f 	isb	sy
    6ddc:	f3bf 8f4f 	dsb	sy
    6de0:	e7fe      	b.n	6de0 <xQueueGenericSendFromISR+0x30>
    6de2:	6c00      	ldr	r0, [r0, #64]	; 0x40
    6de4:	b908      	cbnz	r0, 6dea <xQueueGenericSendFromISR+0x3a>
    6de6:	2001      	movs	r0, #1
    6de8:	e7e8      	b.n	6dbc <xQueueGenericSendFromISR+0xc>
    6dea:	2000      	movs	r0, #0
    6dec:	e7e6      	b.n	6dbc <xQueueGenericSendFromISR+0xc>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    6dee:	2b02      	cmp	r3, #2
    6df0:	d009      	beq.n	6e06 <xQueueGenericSendFromISR+0x56>
    6df2:	b968      	cbnz	r0, 6e10 <xQueueGenericSendFromISR+0x60>
    6df4:	f04f 0380 	mov.w	r3, #128	; 0x80
    6df8:	f383 8811 	msr	BASEPRI, r3
    6dfc:	f3bf 8f6f 	isb	sy
    6e00:	f3bf 8f4f 	dsb	sy
    6e04:	e7fe      	b.n	6e04 <xQueueGenericSendFromISR+0x54>
    6e06:	6be5      	ldr	r5, [r4, #60]	; 0x3c
    6e08:	2d01      	cmp	r5, #1
    6e0a:	d0f2      	beq.n	6df2 <xQueueGenericSendFromISR+0x42>
    6e0c:	2000      	movs	r0, #0
    6e0e:	e7f0      	b.n	6df2 <xQueueGenericSendFromISR+0x42>
    6e10:	461f      	mov	r7, r3
    6e12:	4690      	mov	r8, r2
    6e14:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
    6e16:	4b27      	ldr	r3, [pc, #156]	; (6eb4 <xQueueGenericSendFromISR+0x104>)
    6e18:	4798      	blx	r3
	__asm volatile("	mrs %0, basepri											\n"
    6e1a:	f3ef 8611 	mrs	r6, BASEPRI
    6e1e:	f04f 0380 	mov.w	r3, #128	; 0x80
    6e22:	f383 8811 	msr	BASEPRI, r3
    6e26:	f3bf 8f6f 	isb	sy
    6e2a:	f3bf 8f4f 	dsb	sy
		if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
    6e2e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    6e30:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    6e32:	429a      	cmp	r2, r3
    6e34:	d301      	bcc.n	6e3a <xQueueGenericSendFromISR+0x8a>
    6e36:	2f02      	cmp	r7, #2
    6e38:	d12f      	bne.n	6e9a <xQueueGenericSendFromISR+0xea>
			const int8_t cTxLock = pxQueue->cTxLock;
    6e3a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
    6e3e:	b26d      	sxtb	r5, r5
			(void)prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
    6e40:	463a      	mov	r2, r7
    6e42:	4649      	mov	r1, r9
    6e44:	4620      	mov	r0, r4
    6e46:	4b1c      	ldr	r3, [pc, #112]	; (6eb8 <xQueueGenericSendFromISR+0x108>)
    6e48:	4798      	blx	r3
			if (cTxLock == queueUNLOCKED) {
    6e4a:	f1b5 3fff 	cmp.w	r5, #4294967295
    6e4e:	d11e      	bne.n	6e8e <xQueueGenericSendFromISR+0xde>
					if (pxQueue->pxQueueSetContainer != NULL) {
    6e50:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    6e52:	b173      	cbz	r3, 6e72 <xQueueGenericSendFromISR+0xc2>
						if (prvNotifyQueueSetContainer(pxQueue, xCopyPosition) != pdFALSE) {
    6e54:	4639      	mov	r1, r7
    6e56:	4620      	mov	r0, r4
    6e58:	4b18      	ldr	r3, [pc, #96]	; (6ebc <xQueueGenericSendFromISR+0x10c>)
    6e5a:	4798      	blx	r3
    6e5c:	b1f8      	cbz	r0, 6e9e <xQueueGenericSendFromISR+0xee>
							if (pxHigherPriorityTaskWoken != NULL) {
    6e5e:	f1b8 0f00 	cmp.w	r8, #0
    6e62:	d01e      	beq.n	6ea2 <xQueueGenericSendFromISR+0xf2>
								*pxHigherPriorityTaskWoken = pdTRUE;
    6e64:	2001      	movs	r0, #1
    6e66:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    6e6a:	f386 8811 	msr	BASEPRI, r6
}
    6e6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
						if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    6e72:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6e74:	b1bb      	cbz	r3, 6ea6 <xQueueGenericSendFromISR+0xf6>
							if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    6e76:	f104 0024 	add.w	r0, r4, #36	; 0x24
    6e7a:	4b11      	ldr	r3, [pc, #68]	; (6ec0 <xQueueGenericSendFromISR+0x110>)
    6e7c:	4798      	blx	r3
    6e7e:	b1a0      	cbz	r0, 6eaa <xQueueGenericSendFromISR+0xfa>
								if (pxHigherPriorityTaskWoken != NULL) {
    6e80:	f1b8 0f00 	cmp.w	r8, #0
    6e84:	d013      	beq.n	6eae <xQueueGenericSendFromISR+0xfe>
									*pxHigherPriorityTaskWoken = pdTRUE;
    6e86:	2001      	movs	r0, #1
    6e88:	f8c8 0000 	str.w	r0, [r8]
    6e8c:	e7ed      	b.n	6e6a <xQueueGenericSendFromISR+0xba>
				pxQueue->cTxLock = (int8_t)(cTxLock + 1);
    6e8e:	1c6b      	adds	r3, r5, #1
    6e90:	b25b      	sxtb	r3, r3
    6e92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
    6e96:	2001      	movs	r0, #1
    6e98:	e7e7      	b.n	6e6a <xQueueGenericSendFromISR+0xba>
			xReturn = errQUEUE_FULL;
    6e9a:	2000      	movs	r0, #0
    6e9c:	e7e5      	b.n	6e6a <xQueueGenericSendFromISR+0xba>
			xReturn = pdPASS;
    6e9e:	2001      	movs	r0, #1
    6ea0:	e7e3      	b.n	6e6a <xQueueGenericSendFromISR+0xba>
    6ea2:	2001      	movs	r0, #1
    6ea4:	e7e1      	b.n	6e6a <xQueueGenericSendFromISR+0xba>
    6ea6:	2001      	movs	r0, #1
    6ea8:	e7df      	b.n	6e6a <xQueueGenericSendFromISR+0xba>
    6eaa:	2001      	movs	r0, #1
    6eac:	e7dd      	b.n	6e6a <xQueueGenericSendFromISR+0xba>
    6eae:	2001      	movs	r0, #1
    6eb0:	e7db      	b.n	6e6a <xQueueGenericSendFromISR+0xba>
    6eb2:	bf00      	nop
    6eb4:	00006455 	.word	0x00006455
    6eb8:	00006785 	.word	0x00006785
    6ebc:	00006805 	.word	0x00006805
    6ec0:	00007e01 	.word	0x00007e01

00006ec4 <xQueueGiveFromISR>:
	configASSERT(pxQueue);
    6ec4:	b160      	cbz	r0, 6ee0 <xQueueGiveFromISR+0x1c>
{
    6ec6:	b570      	push	{r4, r5, r6, lr}
    6ec8:	4604      	mov	r4, r0
	configASSERT(pxQueue->uxItemSize == 0);
    6eca:	6c03      	ldr	r3, [r0, #64]	; 0x40
    6ecc:	b18b      	cbz	r3, 6ef2 <xQueueGiveFromISR+0x2e>
	__asm volatile("	mov %0, %1												\n"
    6ece:	f04f 0380 	mov.w	r3, #128	; 0x80
    6ed2:	f383 8811 	msr	BASEPRI, r3
    6ed6:	f3bf 8f6f 	isb	sy
    6eda:	f3bf 8f4f 	dsb	sy
    6ede:	e7fe      	b.n	6ede <xQueueGiveFromISR+0x1a>
    6ee0:	f04f 0380 	mov.w	r3, #128	; 0x80
    6ee4:	f383 8811 	msr	BASEPRI, r3
    6ee8:	f3bf 8f6f 	isb	sy
    6eec:	f3bf 8f4f 	dsb	sy
    6ef0:	e7fe      	b.n	6ef0 <xQueueGiveFromISR+0x2c>
	configASSERT(!((pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) && (pxQueue->pxMutexHolder != NULL)));
    6ef2:	6803      	ldr	r3, [r0, #0]
    6ef4:	b153      	cbz	r3, 6f0c <xQueueGiveFromISR+0x48>
    6ef6:	2301      	movs	r3, #1
    6ef8:	b973      	cbnz	r3, 6f18 <xQueueGiveFromISR+0x54>
    6efa:	f04f 0380 	mov.w	r3, #128	; 0x80
    6efe:	f383 8811 	msr	BASEPRI, r3
    6f02:	f3bf 8f6f 	isb	sy
    6f06:	f3bf 8f4f 	dsb	sy
    6f0a:	e7fe      	b.n	6f0a <xQueueGiveFromISR+0x46>
    6f0c:	6843      	ldr	r3, [r0, #4]
    6f0e:	b90b      	cbnz	r3, 6f14 <xQueueGiveFromISR+0x50>
    6f10:	2301      	movs	r3, #1
    6f12:	e7f1      	b.n	6ef8 <xQueueGiveFromISR+0x34>
    6f14:	2300      	movs	r3, #0
    6f16:	e7ef      	b.n	6ef8 <xQueueGiveFromISR+0x34>
    6f18:	460e      	mov	r6, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
    6f1a:	4b21      	ldr	r3, [pc, #132]	; (6fa0 <xQueueGiveFromISR+0xdc>)
    6f1c:	4798      	blx	r3
	__asm volatile("	mrs %0, basepri											\n"
    6f1e:	f3ef 8511 	mrs	r5, BASEPRI
    6f22:	f04f 0380 	mov.w	r3, #128	; 0x80
    6f26:	f383 8811 	msr	BASEPRI, r3
    6f2a:	f3bf 8f6f 	isb	sy
    6f2e:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    6f32:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if (uxMessagesWaiting < pxQueue->uxLength) {
    6f34:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    6f36:	429a      	cmp	r2, r3
    6f38:	d225      	bcs.n	6f86 <xQueueGiveFromISR+0xc2>
			const int8_t cTxLock = pxQueue->cTxLock;
    6f3a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    6f3e:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + (UBaseType_t)1;
    6f40:	3201      	adds	r2, #1
    6f42:	63a2      	str	r2, [r4, #56]	; 0x38
			if (cTxLock == queueUNLOCKED) {
    6f44:	f1b3 3fff 	cmp.w	r3, #4294967295
    6f48:	d117      	bne.n	6f7a <xQueueGiveFromISR+0xb6>
					if (pxQueue->pxQueueSetContainer != NULL) {
    6f4a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    6f4c:	b153      	cbz	r3, 6f64 <xQueueGiveFromISR+0xa0>
						if (prvNotifyQueueSetContainer(pxQueue, queueSEND_TO_BACK) != pdFALSE) {
    6f4e:	2100      	movs	r1, #0
    6f50:	4620      	mov	r0, r4
    6f52:	4b14      	ldr	r3, [pc, #80]	; (6fa4 <xQueueGiveFromISR+0xe0>)
    6f54:	4798      	blx	r3
    6f56:	b1c0      	cbz	r0, 6f8a <xQueueGiveFromISR+0xc6>
							if (pxHigherPriorityTaskWoken != NULL) {
    6f58:	b1ce      	cbz	r6, 6f8e <xQueueGiveFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
    6f5a:	2001      	movs	r0, #1
    6f5c:	6030      	str	r0, [r6, #0]
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    6f5e:	f385 8811 	msr	BASEPRI, r5
}
    6f62:	bd70      	pop	{r4, r5, r6, pc}
						if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    6f64:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6f66:	b1a3      	cbz	r3, 6f92 <xQueueGiveFromISR+0xce>
							if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    6f68:	f104 0024 	add.w	r0, r4, #36	; 0x24
    6f6c:	4b0e      	ldr	r3, [pc, #56]	; (6fa8 <xQueueGiveFromISR+0xe4>)
    6f6e:	4798      	blx	r3
    6f70:	b188      	cbz	r0, 6f96 <xQueueGiveFromISR+0xd2>
								if (pxHigherPriorityTaskWoken != NULL) {
    6f72:	b196      	cbz	r6, 6f9a <xQueueGiveFromISR+0xd6>
									*pxHigherPriorityTaskWoken = pdTRUE;
    6f74:	2001      	movs	r0, #1
    6f76:	6030      	str	r0, [r6, #0]
    6f78:	e7f1      	b.n	6f5e <xQueueGiveFromISR+0x9a>
				pxQueue->cTxLock = (int8_t)(cTxLock + 1);
    6f7a:	3301      	adds	r3, #1
    6f7c:	b25b      	sxtb	r3, r3
    6f7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
    6f82:	2001      	movs	r0, #1
    6f84:	e7eb      	b.n	6f5e <xQueueGiveFromISR+0x9a>
			xReturn = errQUEUE_FULL;
    6f86:	2000      	movs	r0, #0
    6f88:	e7e9      	b.n	6f5e <xQueueGiveFromISR+0x9a>
			xReturn = pdPASS;
    6f8a:	2001      	movs	r0, #1
    6f8c:	e7e7      	b.n	6f5e <xQueueGiveFromISR+0x9a>
    6f8e:	2001      	movs	r0, #1
    6f90:	e7e5      	b.n	6f5e <xQueueGiveFromISR+0x9a>
    6f92:	2001      	movs	r0, #1
    6f94:	e7e3      	b.n	6f5e <xQueueGiveFromISR+0x9a>
    6f96:	2001      	movs	r0, #1
    6f98:	e7e1      	b.n	6f5e <xQueueGiveFromISR+0x9a>
    6f9a:	2001      	movs	r0, #1
    6f9c:	e7df      	b.n	6f5e <xQueueGiveFromISR+0x9a>
    6f9e:	bf00      	nop
    6fa0:	00006455 	.word	0x00006455
    6fa4:	00006805 	.word	0x00006805
    6fa8:	00007e01 	.word	0x00007e01

00006fac <xQueueReceive>:
{
    6fac:	b5f0      	push	{r4, r5, r6, r7, lr}
    6fae:	b085      	sub	sp, #20
    6fb0:	9201      	str	r2, [sp, #4]
	configASSERT((pxQueue));
    6fb2:	b160      	cbz	r0, 6fce <xQueueReceive+0x22>
    6fb4:	4604      	mov	r4, r0
	configASSERT(!(((pvBuffer) == NULL) && ((pxQueue)->uxItemSize != (UBaseType_t)0U)));
    6fb6:	b199      	cbz	r1, 6fe0 <xQueueReceive+0x34>
    6fb8:	2501      	movs	r5, #1
    6fba:	b9bd      	cbnz	r5, 6fec <xQueueReceive+0x40>
	__asm volatile("	mov %0, %1												\n"
    6fbc:	f04f 0380 	mov.w	r3, #128	; 0x80
    6fc0:	f383 8811 	msr	BASEPRI, r3
    6fc4:	f3bf 8f6f 	isb	sy
    6fc8:	f3bf 8f4f 	dsb	sy
    6fcc:	e7fe      	b.n	6fcc <xQueueReceive+0x20>
    6fce:	f04f 0380 	mov.w	r3, #128	; 0x80
    6fd2:	f383 8811 	msr	BASEPRI, r3
    6fd6:	f3bf 8f6f 	isb	sy
    6fda:	f3bf 8f4f 	dsb	sy
    6fde:	e7fe      	b.n	6fde <xQueueReceive+0x32>
    6fe0:	6c03      	ldr	r3, [r0, #64]	; 0x40
    6fe2:	b90b      	cbnz	r3, 6fe8 <xQueueReceive+0x3c>
    6fe4:	2501      	movs	r5, #1
    6fe6:	e7e8      	b.n	6fba <xQueueReceive+0xe>
    6fe8:	2500      	movs	r5, #0
    6fea:	e7e6      	b.n	6fba <xQueueReceive+0xe>
    6fec:	460e      	mov	r6, r1
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    6fee:	4b45      	ldr	r3, [pc, #276]	; (7104 <xQueueReceive+0x158>)
    6ff0:	4798      	blx	r3
    6ff2:	b910      	cbnz	r0, 6ffa <xQueueReceive+0x4e>
    6ff4:	9b01      	ldr	r3, [sp, #4]
    6ff6:	b103      	cbz	r3, 6ffa <xQueueReceive+0x4e>
    6ff8:	2500      	movs	r5, #0
    6ffa:	b945      	cbnz	r5, 700e <xQueueReceive+0x62>
    6ffc:	f04f 0380 	mov.w	r3, #128	; 0x80
    7000:	f383 8811 	msr	BASEPRI, r3
    7004:	f3bf 8f6f 	isb	sy
    7008:	f3bf 8f4f 	dsb	sy
    700c:	e7fe      	b.n	700c <xQueueReceive+0x60>
    700e:	2700      	movs	r7, #0
    7010:	e02f      	b.n	7072 <xQueueReceive+0xc6>
				prvCopyDataFromQueue(pxQueue, pvBuffer);
    7012:	4631      	mov	r1, r6
    7014:	4620      	mov	r0, r4
    7016:	4b3c      	ldr	r3, [pc, #240]	; (7108 <xQueueReceive+0x15c>)
    7018:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - (UBaseType_t)1;
    701a:	3d01      	subs	r5, #1
    701c:	63a5      	str	r5, [r4, #56]	; 0x38
				if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    701e:	6923      	ldr	r3, [r4, #16]
    7020:	b163      	cbz	r3, 703c <xQueueReceive+0x90>
					if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    7022:	f104 0010 	add.w	r0, r4, #16
    7026:	4b39      	ldr	r3, [pc, #228]	; (710c <xQueueReceive+0x160>)
    7028:	4798      	blx	r3
    702a:	b138      	cbz	r0, 703c <xQueueReceive+0x90>
						queueYIELD_IF_USING_PREEMPTION();
    702c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    7030:	4b37      	ldr	r3, [pc, #220]	; (7110 <xQueueReceive+0x164>)
    7032:	601a      	str	r2, [r3, #0]
    7034:	f3bf 8f4f 	dsb	sy
    7038:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    703c:	4b35      	ldr	r3, [pc, #212]	; (7114 <xQueueReceive+0x168>)
    703e:	4798      	blx	r3
				return pdPASS;
    7040:	2001      	movs	r0, #1
}
    7042:	b005      	add	sp, #20
    7044:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
    7046:	4b33      	ldr	r3, [pc, #204]	; (7114 <xQueueReceive+0x168>)
    7048:	4798      	blx	r3
					return errQUEUE_EMPTY;
    704a:	2000      	movs	r0, #0
    704c:	e7f9      	b.n	7042 <xQueueReceive+0x96>
					vTaskInternalSetTimeOutState(&xTimeOut);
    704e:	a802      	add	r0, sp, #8
    7050:	4b31      	ldr	r3, [pc, #196]	; (7118 <xQueueReceive+0x16c>)
    7052:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    7054:	2701      	movs	r7, #1
    7056:	e016      	b.n	7086 <xQueueReceive+0xda>
		prvLockQueue(pxQueue);
    7058:	2300      	movs	r3, #0
    705a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    705e:	e01e      	b.n	709e <xQueueReceive+0xf2>
    7060:	2300      	movs	r3, #0
    7062:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    7066:	e020      	b.n	70aa <xQueueReceive+0xfe>
				prvUnlockQueue(pxQueue);
    7068:	4620      	mov	r0, r4
    706a:	4b2c      	ldr	r3, [pc, #176]	; (711c <xQueueReceive+0x170>)
    706c:	4798      	blx	r3
				(void)xTaskResumeAll();
    706e:	4b2c      	ldr	r3, [pc, #176]	; (7120 <xQueueReceive+0x174>)
    7070:	4798      	blx	r3
		taskENTER_CRITICAL();
    7072:	4b2c      	ldr	r3, [pc, #176]	; (7124 <xQueueReceive+0x178>)
    7074:	4798      	blx	r3
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    7076:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if (uxMessagesWaiting > (UBaseType_t)0) {
    7078:	2d00      	cmp	r5, #0
    707a:	d1ca      	bne.n	7012 <xQueueReceive+0x66>
				if (xTicksToWait == (TickType_t)0) {
    707c:	9b01      	ldr	r3, [sp, #4]
    707e:	2b00      	cmp	r3, #0
    7080:	d0e1      	beq.n	7046 <xQueueReceive+0x9a>
				} else if (xEntryTimeSet == pdFALSE) {
    7082:	2f00      	cmp	r7, #0
    7084:	d0e3      	beq.n	704e <xQueueReceive+0xa2>
		taskEXIT_CRITICAL();
    7086:	4b23      	ldr	r3, [pc, #140]	; (7114 <xQueueReceive+0x168>)
    7088:	4798      	blx	r3
		vTaskSuspendAll();
    708a:	4b27      	ldr	r3, [pc, #156]	; (7128 <xQueueReceive+0x17c>)
    708c:	4798      	blx	r3
		prvLockQueue(pxQueue);
    708e:	4b25      	ldr	r3, [pc, #148]	; (7124 <xQueueReceive+0x178>)
    7090:	4798      	blx	r3
    7092:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    7096:	b25b      	sxtb	r3, r3
    7098:	f1b3 3fff 	cmp.w	r3, #4294967295
    709c:	d0dc      	beq.n	7058 <xQueueReceive+0xac>
    709e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    70a2:	b25b      	sxtb	r3, r3
    70a4:	f1b3 3fff 	cmp.w	r3, #4294967295
    70a8:	d0da      	beq.n	7060 <xQueueReceive+0xb4>
    70aa:	4b1a      	ldr	r3, [pc, #104]	; (7114 <xQueueReceive+0x168>)
    70ac:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    70ae:	a901      	add	r1, sp, #4
    70b0:	a802      	add	r0, sp, #8
    70b2:	4b1e      	ldr	r3, [pc, #120]	; (712c <xQueueReceive+0x180>)
    70b4:	4798      	blx	r3
    70b6:	b9c8      	cbnz	r0, 70ec <xQueueReceive+0x140>
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    70b8:	4620      	mov	r0, r4
    70ba:	4b1d      	ldr	r3, [pc, #116]	; (7130 <xQueueReceive+0x184>)
    70bc:	4798      	blx	r3
    70be:	2800      	cmp	r0, #0
    70c0:	d0d2      	beq.n	7068 <xQueueReceive+0xbc>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToReceive), xTicksToWait);
    70c2:	9901      	ldr	r1, [sp, #4]
    70c4:	f104 0024 	add.w	r0, r4, #36	; 0x24
    70c8:	4b1a      	ldr	r3, [pc, #104]	; (7134 <xQueueReceive+0x188>)
    70ca:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    70cc:	4620      	mov	r0, r4
    70ce:	4b13      	ldr	r3, [pc, #76]	; (711c <xQueueReceive+0x170>)
    70d0:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    70d2:	4b13      	ldr	r3, [pc, #76]	; (7120 <xQueueReceive+0x174>)
    70d4:	4798      	blx	r3
    70d6:	2800      	cmp	r0, #0
    70d8:	d1cb      	bne.n	7072 <xQueueReceive+0xc6>
					portYIELD_WITHIN_API();
    70da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    70de:	4b0c      	ldr	r3, [pc, #48]	; (7110 <xQueueReceive+0x164>)
    70e0:	601a      	str	r2, [r3, #0]
    70e2:	f3bf 8f4f 	dsb	sy
    70e6:	f3bf 8f6f 	isb	sy
    70ea:	e7c2      	b.n	7072 <xQueueReceive+0xc6>
			prvUnlockQueue(pxQueue);
    70ec:	4620      	mov	r0, r4
    70ee:	4b0b      	ldr	r3, [pc, #44]	; (711c <xQueueReceive+0x170>)
    70f0:	4798      	blx	r3
			(void)xTaskResumeAll();
    70f2:	4b0b      	ldr	r3, [pc, #44]	; (7120 <xQueueReceive+0x174>)
    70f4:	4798      	blx	r3
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    70f6:	4620      	mov	r0, r4
    70f8:	4b0d      	ldr	r3, [pc, #52]	; (7130 <xQueueReceive+0x184>)
    70fa:	4798      	blx	r3
    70fc:	2800      	cmp	r0, #0
    70fe:	d0b8      	beq.n	7072 <xQueueReceive+0xc6>
				return errQUEUE_EMPTY;
    7100:	2000      	movs	r0, #0
    7102:	e79e      	b.n	7042 <xQueueReceive+0x96>
    7104:	00007ff1 	.word	0x00007ff1
    7108:	00006889 	.word	0x00006889
    710c:	00007e01 	.word	0x00007e01
    7110:	e000ed04 	.word	0xe000ed04
    7114:	00006249 	.word	0x00006249
    7118:	00007f15 	.word	0x00007f15
    711c:	000068b1 	.word	0x000068b1
    7120:	00007b05 	.word	0x00007b05
    7124:	00006205 	.word	0x00006205
    7128:	000079c5 	.word	0x000079c5
    712c:	00007f29 	.word	0x00007f29
    7130:	00006761 	.word	0x00006761
    7134:	00007d1d 	.word	0x00007d1d

00007138 <xQueueSemaphoreTake>:
{
    7138:	b570      	push	{r4, r5, r6, lr}
    713a:	b084      	sub	sp, #16
    713c:	9101      	str	r1, [sp, #4]
	configASSERT((pxQueue));
    713e:	b158      	cbz	r0, 7158 <xQueueSemaphoreTake+0x20>
    7140:	4604      	mov	r4, r0
	configASSERT(pxQueue->uxItemSize == 0);
    7142:	6c03      	ldr	r3, [r0, #64]	; 0x40
    7144:	b18b      	cbz	r3, 716a <xQueueSemaphoreTake+0x32>
    7146:	f04f 0380 	mov.w	r3, #128	; 0x80
    714a:	f383 8811 	msr	BASEPRI, r3
    714e:	f3bf 8f6f 	isb	sy
    7152:	f3bf 8f4f 	dsb	sy
    7156:	e7fe      	b.n	7156 <xQueueSemaphoreTake+0x1e>
    7158:	f04f 0380 	mov.w	r3, #128	; 0x80
    715c:	f383 8811 	msr	BASEPRI, r3
    7160:	f3bf 8f6f 	isb	sy
    7164:	f3bf 8f4f 	dsb	sy
    7168:	e7fe      	b.n	7168 <xQueueSemaphoreTake+0x30>
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    716a:	4b5b      	ldr	r3, [pc, #364]	; (72d8 <xQueueSemaphoreTake+0x1a0>)
    716c:	4798      	blx	r3
    716e:	b960      	cbnz	r0, 718a <xQueueSemaphoreTake+0x52>
    7170:	9b01      	ldr	r3, [sp, #4]
    7172:	b963      	cbnz	r3, 718e <xQueueSemaphoreTake+0x56>
    7174:	2301      	movs	r3, #1
    7176:	b963      	cbnz	r3, 7192 <xQueueSemaphoreTake+0x5a>
    7178:	f04f 0380 	mov.w	r3, #128	; 0x80
    717c:	f383 8811 	msr	BASEPRI, r3
    7180:	f3bf 8f6f 	isb	sy
    7184:	f3bf 8f4f 	dsb	sy
    7188:	e7fe      	b.n	7188 <xQueueSemaphoreTake+0x50>
    718a:	2301      	movs	r3, #1
    718c:	e7f3      	b.n	7176 <xQueueSemaphoreTake+0x3e>
    718e:	2300      	movs	r3, #0
    7190:	e7f1      	b.n	7176 <xQueueSemaphoreTake+0x3e>
    7192:	2500      	movs	r5, #0
    7194:	462e      	mov	r6, r5
    7196:	e04e      	b.n	7236 <xQueueSemaphoreTake+0xfe>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - (UBaseType_t)1;
    7198:	3b01      	subs	r3, #1
    719a:	63a3      	str	r3, [r4, #56]	; 0x38
					if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    719c:	6823      	ldr	r3, [r4, #0]
    719e:	b913      	cbnz	r3, 71a6 <xQueueSemaphoreTake+0x6e>
						    = (int8_t *)pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as
    71a0:	4b4e      	ldr	r3, [pc, #312]	; (72dc <xQueueSemaphoreTake+0x1a4>)
    71a2:	4798      	blx	r3
    71a4:	6060      	str	r0, [r4, #4]
				if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    71a6:	6923      	ldr	r3, [r4, #16]
    71a8:	b163      	cbz	r3, 71c4 <xQueueSemaphoreTake+0x8c>
					if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    71aa:	f104 0010 	add.w	r0, r4, #16
    71ae:	4b4c      	ldr	r3, [pc, #304]	; (72e0 <xQueueSemaphoreTake+0x1a8>)
    71b0:	4798      	blx	r3
    71b2:	b138      	cbz	r0, 71c4 <xQueueSemaphoreTake+0x8c>
						queueYIELD_IF_USING_PREEMPTION();
    71b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    71b8:	4b4a      	ldr	r3, [pc, #296]	; (72e4 <xQueueSemaphoreTake+0x1ac>)
    71ba:	601a      	str	r2, [r3, #0]
    71bc:	f3bf 8f4f 	dsb	sy
    71c0:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    71c4:	4b48      	ldr	r3, [pc, #288]	; (72e8 <xQueueSemaphoreTake+0x1b0>)
    71c6:	4798      	blx	r3
				return pdPASS;
    71c8:	2501      	movs	r5, #1
}
    71ca:	4628      	mov	r0, r5
    71cc:	b004      	add	sp, #16
    71ce:	bd70      	pop	{r4, r5, r6, pc}
						configASSERT(xInheritanceOccurred == pdFALSE);
    71d0:	b145      	cbz	r5, 71e4 <xQueueSemaphoreTake+0xac>
    71d2:	f04f 0380 	mov.w	r3, #128	; 0x80
    71d6:	f383 8811 	msr	BASEPRI, r3
    71da:	f3bf 8f6f 	isb	sy
    71de:	f3bf 8f4f 	dsb	sy
    71e2:	e7fe      	b.n	71e2 <xQueueSemaphoreTake+0xaa>
					taskEXIT_CRITICAL();
    71e4:	4b40      	ldr	r3, [pc, #256]	; (72e8 <xQueueSemaphoreTake+0x1b0>)
    71e6:	4798      	blx	r3
					return errQUEUE_EMPTY;
    71e8:	e7ef      	b.n	71ca <xQueueSemaphoreTake+0x92>
					vTaskInternalSetTimeOutState(&xTimeOut);
    71ea:	a802      	add	r0, sp, #8
    71ec:	4b3f      	ldr	r3, [pc, #252]	; (72ec <xQueueSemaphoreTake+0x1b4>)
    71ee:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    71f0:	2601      	movs	r6, #1
    71f2:	e02a      	b.n	724a <xQueueSemaphoreTake+0x112>
		prvLockQueue(pxQueue);
    71f4:	2300      	movs	r3, #0
    71f6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    71fa:	e032      	b.n	7262 <xQueueSemaphoreTake+0x12a>
    71fc:	2300      	movs	r3, #0
    71fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    7202:	e034      	b.n	726e <xQueueSemaphoreTake+0x136>
						taskENTER_CRITICAL();
    7204:	4b3a      	ldr	r3, [pc, #232]	; (72f0 <xQueueSemaphoreTake+0x1b8>)
    7206:	4798      	blx	r3
							xInheritanceOccurred = xTaskPriorityInherit((void *)pxQueue->pxMutexHolder);
    7208:	6860      	ldr	r0, [r4, #4]
    720a:	4b3a      	ldr	r3, [pc, #232]	; (72f4 <xQueueSemaphoreTake+0x1bc>)
    720c:	4798      	blx	r3
    720e:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
    7210:	4b35      	ldr	r3, [pc, #212]	; (72e8 <xQueueSemaphoreTake+0x1b0>)
    7212:	4798      	blx	r3
    7214:	e03b      	b.n	728e <xQueueSemaphoreTake+0x156>
				prvUnlockQueue(pxQueue);
    7216:	4620      	mov	r0, r4
    7218:	4b37      	ldr	r3, [pc, #220]	; (72f8 <xQueueSemaphoreTake+0x1c0>)
    721a:	4798      	blx	r3
				(void)xTaskResumeAll();
    721c:	4b37      	ldr	r3, [pc, #220]	; (72fc <xQueueSemaphoreTake+0x1c4>)
    721e:	4798      	blx	r3
    7220:	e009      	b.n	7236 <xQueueSemaphoreTake+0xfe>
			prvUnlockQueue(pxQueue);
    7222:	4620      	mov	r0, r4
    7224:	4b34      	ldr	r3, [pc, #208]	; (72f8 <xQueueSemaphoreTake+0x1c0>)
    7226:	4798      	blx	r3
			(void)xTaskResumeAll();
    7228:	4b34      	ldr	r3, [pc, #208]	; (72fc <xQueueSemaphoreTake+0x1c4>)
    722a:	4798      	blx	r3
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    722c:	4620      	mov	r0, r4
    722e:	4b34      	ldr	r3, [pc, #208]	; (7300 <xQueueSemaphoreTake+0x1c8>)
    7230:	4798      	blx	r3
    7232:	2800      	cmp	r0, #0
    7234:	d140      	bne.n	72b8 <xQueueSemaphoreTake+0x180>
		taskENTER_CRITICAL();
    7236:	4b2e      	ldr	r3, [pc, #184]	; (72f0 <xQueueSemaphoreTake+0x1b8>)
    7238:	4798      	blx	r3
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    723a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if (uxSemaphoreCount > (UBaseType_t)0) {
    723c:	2b00      	cmp	r3, #0
    723e:	d1ab      	bne.n	7198 <xQueueSemaphoreTake+0x60>
				if (xTicksToWait == (TickType_t)0) {
    7240:	9b01      	ldr	r3, [sp, #4]
    7242:	2b00      	cmp	r3, #0
    7244:	d0c4      	beq.n	71d0 <xQueueSemaphoreTake+0x98>
				} else if (xEntryTimeSet == pdFALSE) {
    7246:	2e00      	cmp	r6, #0
    7248:	d0cf      	beq.n	71ea <xQueueSemaphoreTake+0xb2>
		taskEXIT_CRITICAL();
    724a:	4b27      	ldr	r3, [pc, #156]	; (72e8 <xQueueSemaphoreTake+0x1b0>)
    724c:	4798      	blx	r3
		vTaskSuspendAll();
    724e:	4b2d      	ldr	r3, [pc, #180]	; (7304 <xQueueSemaphoreTake+0x1cc>)
    7250:	4798      	blx	r3
		prvLockQueue(pxQueue);
    7252:	4b27      	ldr	r3, [pc, #156]	; (72f0 <xQueueSemaphoreTake+0x1b8>)
    7254:	4798      	blx	r3
    7256:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    725a:	b25b      	sxtb	r3, r3
    725c:	f1b3 3fff 	cmp.w	r3, #4294967295
    7260:	d0c8      	beq.n	71f4 <xQueueSemaphoreTake+0xbc>
    7262:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    7266:	b25b      	sxtb	r3, r3
    7268:	f1b3 3fff 	cmp.w	r3, #4294967295
    726c:	d0c6      	beq.n	71fc <xQueueSemaphoreTake+0xc4>
    726e:	4b1e      	ldr	r3, [pc, #120]	; (72e8 <xQueueSemaphoreTake+0x1b0>)
    7270:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    7272:	a901      	add	r1, sp, #4
    7274:	a802      	add	r0, sp, #8
    7276:	4b24      	ldr	r3, [pc, #144]	; (7308 <xQueueSemaphoreTake+0x1d0>)
    7278:	4798      	blx	r3
    727a:	2800      	cmp	r0, #0
    727c:	d1d1      	bne.n	7222 <xQueueSemaphoreTake+0xea>
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    727e:	4620      	mov	r0, r4
    7280:	4b1f      	ldr	r3, [pc, #124]	; (7300 <xQueueSemaphoreTake+0x1c8>)
    7282:	4798      	blx	r3
    7284:	2800      	cmp	r0, #0
    7286:	d0c6      	beq.n	7216 <xQueueSemaphoreTake+0xde>
					if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    7288:	6823      	ldr	r3, [r4, #0]
    728a:	2b00      	cmp	r3, #0
    728c:	d0ba      	beq.n	7204 <xQueueSemaphoreTake+0xcc>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToReceive), xTicksToWait);
    728e:	9901      	ldr	r1, [sp, #4]
    7290:	f104 0024 	add.w	r0, r4, #36	; 0x24
    7294:	4b1d      	ldr	r3, [pc, #116]	; (730c <xQueueSemaphoreTake+0x1d4>)
    7296:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    7298:	4620      	mov	r0, r4
    729a:	4b17      	ldr	r3, [pc, #92]	; (72f8 <xQueueSemaphoreTake+0x1c0>)
    729c:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    729e:	4b17      	ldr	r3, [pc, #92]	; (72fc <xQueueSemaphoreTake+0x1c4>)
    72a0:	4798      	blx	r3
    72a2:	2800      	cmp	r0, #0
    72a4:	d1c7      	bne.n	7236 <xQueueSemaphoreTake+0xfe>
					portYIELD_WITHIN_API();
    72a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    72aa:	4b0e      	ldr	r3, [pc, #56]	; (72e4 <xQueueSemaphoreTake+0x1ac>)
    72ac:	601a      	str	r2, [r3, #0]
    72ae:	f3bf 8f4f 	dsb	sy
    72b2:	f3bf 8f6f 	isb	sy
    72b6:	e7be      	b.n	7236 <xQueueSemaphoreTake+0xfe>
					if (xInheritanceOccurred != pdFALSE) {
    72b8:	2d00      	cmp	r5, #0
    72ba:	d086      	beq.n	71ca <xQueueSemaphoreTake+0x92>
						taskENTER_CRITICAL();
    72bc:	4b0c      	ldr	r3, [pc, #48]	; (72f0 <xQueueSemaphoreTake+0x1b8>)
    72be:	4798      	blx	r3
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout(pxQueue);
    72c0:	4620      	mov	r0, r4
    72c2:	4b13      	ldr	r3, [pc, #76]	; (7310 <xQueueSemaphoreTake+0x1d8>)
    72c4:	4798      	blx	r3
							vTaskPriorityDisinheritAfterTimeout((void *)pxQueue->pxMutexHolder,
    72c6:	4601      	mov	r1, r0
    72c8:	6860      	ldr	r0, [r4, #4]
    72ca:	4b12      	ldr	r3, [pc, #72]	; (7314 <xQueueSemaphoreTake+0x1dc>)
    72cc:	4798      	blx	r3
						taskEXIT_CRITICAL();
    72ce:	4b06      	ldr	r3, [pc, #24]	; (72e8 <xQueueSemaphoreTake+0x1b0>)
    72d0:	4798      	blx	r3
				return errQUEUE_EMPTY;
    72d2:	2500      	movs	r5, #0
    72d4:	e779      	b.n	71ca <xQueueSemaphoreTake+0x92>
    72d6:	bf00      	nop
    72d8:	00007ff1 	.word	0x00007ff1
    72dc:	000082a1 	.word	0x000082a1
    72e0:	00007e01 	.word	0x00007e01
    72e4:	e000ed04 	.word	0xe000ed04
    72e8:	00006249 	.word	0x00006249
    72ec:	00007f15 	.word	0x00007f15
    72f0:	00006205 	.word	0x00006205
    72f4:	00008011 	.word	0x00008011
    72f8:	000068b1 	.word	0x000068b1
    72fc:	00007b05 	.word	0x00007b05
    7300:	00006761 	.word	0x00006761
    7304:	000079c5 	.word	0x000079c5
    7308:	00007f29 	.word	0x00007f29
    730c:	00007d1d 	.word	0x00007d1d
    7310:	00006725 	.word	0x00006725
    7314:	000081a5 	.word	0x000081a5

00007318 <xQueueTakeMutexRecursive>:
	configASSERT(pxMutex);
    7318:	b188      	cbz	r0, 733e <xQueueTakeMutexRecursive+0x26>
{
    731a:	b570      	push	{r4, r5, r6, lr}
    731c:	4604      	mov	r4, r0
    731e:	460d      	mov	r5, r1
	if (pxMutex->pxMutexHolder
    7320:	6846      	ldr	r6, [r0, #4]
	    == (void *)xTaskGetCurrentTaskHandle()) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    7322:	4b0e      	ldr	r3, [pc, #56]	; (735c <xQueueTakeMutexRecursive+0x44>)
    7324:	4798      	blx	r3
	if (pxMutex->pxMutexHolder
    7326:	4286      	cmp	r6, r0
    7328:	d012      	beq.n	7350 <xQueueTakeMutexRecursive+0x38>
		xReturn = xQueueSemaphoreTake(pxMutex, xTicksToWait);
    732a:	4629      	mov	r1, r5
    732c:	4620      	mov	r0, r4
    732e:	4b0c      	ldr	r3, [pc, #48]	; (7360 <xQueueTakeMutexRecursive+0x48>)
    7330:	4798      	blx	r3
		if (xReturn != pdFAIL) {
    7332:	4602      	mov	r2, r0
    7334:	b180      	cbz	r0, 7358 <xQueueTakeMutexRecursive+0x40>
			(pxMutex->u.uxRecursiveCallCount)++;
    7336:	68e3      	ldr	r3, [r4, #12]
    7338:	3301      	adds	r3, #1
    733a:	60e3      	str	r3, [r4, #12]
	return xReturn;
    733c:	e00c      	b.n	7358 <xQueueTakeMutexRecursive+0x40>
    733e:	f04f 0380 	mov.w	r3, #128	; 0x80
    7342:	f383 8811 	msr	BASEPRI, r3
    7346:	f3bf 8f6f 	isb	sy
    734a:	f3bf 8f4f 	dsb	sy
    734e:	e7fe      	b.n	734e <xQueueTakeMutexRecursive+0x36>
		(pxMutex->u.uxRecursiveCallCount)++;
    7350:	68e3      	ldr	r3, [r4, #12]
    7352:	3301      	adds	r3, #1
    7354:	60e3      	str	r3, [r4, #12]
		xReturn = pdPASS;
    7356:	2201      	movs	r2, #1
}
    7358:	4610      	mov	r0, r2
    735a:	bd70      	pop	{r4, r5, r6, pc}
    735c:	00007fe5 	.word	0x00007fe5
    7360:	00007139 	.word	0x00007139

00007364 <vQueueDelete>:
{
    7364:	b508      	push	{r3, lr}
	configASSERT(pxQueue);
    7366:	b118      	cbz	r0, 7370 <vQueueDelete+0xc>
		if (pxQueue->ucStaticallyAllocated == (uint8_t)pdFALSE) {
    7368:	f890 2046 	ldrb.w	r2, [r0, #70]	; 0x46
    736c:	b14a      	cbz	r2, 7382 <vQueueDelete+0x1e>
    736e:	bd08      	pop	{r3, pc}
    7370:	f04f 0380 	mov.w	r3, #128	; 0x80
    7374:	f383 8811 	msr	BASEPRI, r3
    7378:	f3bf 8f6f 	isb	sy
    737c:	f3bf 8f4f 	dsb	sy
    7380:	e7fe      	b.n	7380 <vQueueDelete+0x1c>
			vPortFree(pxQueue);
    7382:	4b01      	ldr	r3, [pc, #4]	; (7388 <vQueueDelete+0x24>)
    7384:	4798      	blx	r3
}
    7386:	e7f2      	b.n	736e <vQueueDelete+0xa>
    7388:	00006691 	.word	0x00006691

0000738c <vQueueWaitForMessageRestricted>:
{
    738c:	b570      	push	{r4, r5, r6, lr}
    738e:	4604      	mov	r4, r0
    7390:	460d      	mov	r5, r1
    7392:	4616      	mov	r6, r2
	prvLockQueue(pxQueue);
    7394:	4b12      	ldr	r3, [pc, #72]	; (73e0 <vQueueWaitForMessageRestricted+0x54>)
    7396:	4798      	blx	r3
    7398:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    739c:	b25b      	sxtb	r3, r3
    739e:	f1b3 3fff 	cmp.w	r3, #4294967295
    73a2:	d00d      	beq.n	73c0 <vQueueWaitForMessageRestricted+0x34>
    73a4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    73a8:	b25b      	sxtb	r3, r3
    73aa:	f1b3 3fff 	cmp.w	r3, #4294967295
    73ae:	d00b      	beq.n	73c8 <vQueueWaitForMessageRestricted+0x3c>
    73b0:	4b0c      	ldr	r3, [pc, #48]	; (73e4 <vQueueWaitForMessageRestricted+0x58>)
    73b2:	4798      	blx	r3
	if (pxQueue->uxMessagesWaiting == (UBaseType_t)0U) {
    73b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    73b6:	b15b      	cbz	r3, 73d0 <vQueueWaitForMessageRestricted+0x44>
	prvUnlockQueue(pxQueue);
    73b8:	4620      	mov	r0, r4
    73ba:	4b0b      	ldr	r3, [pc, #44]	; (73e8 <vQueueWaitForMessageRestricted+0x5c>)
    73bc:	4798      	blx	r3
    73be:	bd70      	pop	{r4, r5, r6, pc}
	prvLockQueue(pxQueue);
    73c0:	2300      	movs	r3, #0
    73c2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    73c6:	e7ed      	b.n	73a4 <vQueueWaitForMessageRestricted+0x18>
    73c8:	2300      	movs	r3, #0
    73ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    73ce:	e7ef      	b.n	73b0 <vQueueWaitForMessageRestricted+0x24>
		vTaskPlaceOnEventListRestricted(&(pxQueue->xTasksWaitingToReceive), xTicksToWait, xWaitIndefinitely);
    73d0:	4632      	mov	r2, r6
    73d2:	4629      	mov	r1, r5
    73d4:	f104 0024 	add.w	r0, r4, #36	; 0x24
    73d8:	4b04      	ldr	r3, [pc, #16]	; (73ec <vQueueWaitForMessageRestricted+0x60>)
    73da:	4798      	blx	r3
    73dc:	e7ec      	b.n	73b8 <vQueueWaitForMessageRestricted+0x2c>
    73de:	bf00      	nop
    73e0:	00006205 	.word	0x00006205
    73e4:	00006249 	.word	0x00006249
    73e8:	000068b1 	.word	0x000068b1
    73ec:	00007dbd 	.word	0x00007dbd

000073f0 <prvTaskCheckFreeStackSpace>:

#if ((configUSE_TRACE_FACILITY == 1) || (INCLUDE_uxTaskGetStackHighWaterMark == 1))

static uint16_t prvTaskCheckFreeStackSpace(const uint8_t *pucStackByte)
{
	uint32_t ulCount = 0U;
    73f0:	2300      	movs	r3, #0

	while (*pucStackByte == (uint8_t)tskSTACK_FILL_BYTE) {
    73f2:	e001      	b.n	73f8 <prvTaskCheckFreeStackSpace+0x8>
		pucStackByte -= portSTACK_GROWTH;
    73f4:	3001      	adds	r0, #1
		ulCount++;
    73f6:	3301      	adds	r3, #1
	while (*pucStackByte == (uint8_t)tskSTACK_FILL_BYTE) {
    73f8:	7802      	ldrb	r2, [r0, #0]
    73fa:	2aa5      	cmp	r2, #165	; 0xa5
    73fc:	d0fa      	beq.n	73f4 <prvTaskCheckFreeStackSpace+0x4>
	}

	ulCount /= (uint32_t)sizeof(StackType_t); /*lint !e961 Casting is not redundant on smaller architectures. */

	return (uint16_t)ulCount;
}
    73fe:	f3c3 008f 	ubfx	r0, r3, #2, #16
    7402:	4770      	bx	lr

00007404 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime(void)
{
	TCB_t *pxTCB;

	if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    7404:	4b09      	ldr	r3, [pc, #36]	; (742c <prvResetNextTaskUnblockTime+0x28>)
    7406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7408:	681b      	ldr	r3, [r3, #0]
    740a:	b943      	cbnz	r3, 741e <prvResetNextTaskUnblockTime+0x1a>
    740c:	2301      	movs	r3, #1
    740e:	b943      	cbnz	r3, 7422 <prvResetNextTaskUnblockTime+0x1e>
	} else {
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		(pxTCB)              = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    7410:	4b06      	ldr	r3, [pc, #24]	; (742c <prvResetNextTaskUnblockTime+0x28>)
    7412:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    7414:	68d2      	ldr	r2, [r2, #12]
    7416:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE(&((pxTCB)->xStateListItem));
    7418:	6852      	ldr	r2, [r2, #4]
    741a:	62da      	str	r2, [r3, #44]	; 0x2c
    741c:	4770      	bx	lr
	if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    741e:	2300      	movs	r3, #0
    7420:	e7f5      	b.n	740e <prvResetNextTaskUnblockTime+0xa>
		xNextTaskUnblockTime = portMAX_DELAY;
    7422:	f04f 32ff 	mov.w	r2, #4294967295
    7426:	4b01      	ldr	r3, [pc, #4]	; (742c <prvResetNextTaskUnblockTime+0x28>)
    7428:	62da      	str	r2, [r3, #44]	; 0x2c
    742a:	4770      	bx	lr
    742c:	20010a90 	.word	0x20010a90

00007430 <prvInitialiseNewTask>:
{
    7430:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7434:	4681      	mov	r9, r0
    7436:	460d      	mov	r5, r1
    7438:	4617      	mov	r7, r2
    743a:	469a      	mov	sl, r3
    743c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    743e:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
    7442:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		(void)memset(pxNewTCB->pxStack, (int)tskSTACK_FILL_BYTE, (size_t)ulStackDepth * sizeof(StackType_t));
    7444:	0092      	lsls	r2, r2, #2
    7446:	21a5      	movs	r1, #165	; 0xa5
    7448:	6b20      	ldr	r0, [r4, #48]	; 0x30
    744a:	4b1d      	ldr	r3, [pc, #116]	; (74c0 <prvInitialiseNewTask+0x90>)
    744c:	4798      	blx	r3
		pxTopOfStack = pxNewTCB->pxStack + (ulStackDepth - (uint32_t)1);
    744e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    7450:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
    7454:	3a01      	subs	r2, #1
    7456:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		                      & (~(
    745a:	f027 0707 	bic.w	r7, r7, #7
	for (x = (UBaseType_t)0; x < (UBaseType_t)configMAX_TASK_NAME_LEN; x++) {
    745e:	2300      	movs	r3, #0
    7460:	2b17      	cmp	r3, #23
    7462:	d807      	bhi.n	7474 <prvInitialiseNewTask+0x44>
		pxNewTCB->pcTaskName[x] = pcName[x];
    7464:	5ce9      	ldrb	r1, [r5, r3]
    7466:	18e2      	adds	r2, r4, r3
    7468:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if (pcName[x] == 0x00) {
    746c:	5cea      	ldrb	r2, [r5, r3]
    746e:	b10a      	cbz	r2, 7474 <prvInitialiseNewTask+0x44>
	for (x = (UBaseType_t)0; x < (UBaseType_t)configMAX_TASK_NAME_LEN; x++) {
    7470:	3301      	adds	r3, #1
    7472:	e7f5      	b.n	7460 <prvInitialiseNewTask+0x30>
	pxNewTCB->pcTaskName[configMAX_TASK_NAME_LEN - 1] = '\0';
    7474:	2300      	movs	r3, #0
    7476:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
	if (uxPriority >= (UBaseType_t)configMAX_PRIORITIES) {
    747a:	2e04      	cmp	r6, #4
    747c:	d900      	bls.n	7480 <prvInitialiseNewTask+0x50>
		uxPriority = (UBaseType_t)configMAX_PRIORITIES - (UBaseType_t)1U;
    747e:	2604      	movs	r6, #4
	pxNewTCB->uxPriority = uxPriority;
    7480:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
    7482:	6566      	str	r6, [r4, #84]	; 0x54
		pxNewTCB->uxMutexesHeld  = 0;
    7484:	2500      	movs	r5, #0
    7486:	65a5      	str	r5, [r4, #88]	; 0x58
	vListInitialiseItem(&(pxNewTCB->xStateListItem));
    7488:	1d20      	adds	r0, r4, #4
    748a:	f8df b03c 	ldr.w	fp, [pc, #60]	; 74c8 <prvInitialiseNewTask+0x98>
    748e:	47d8      	blx	fp
	vListInitialiseItem(&(pxNewTCB->xEventListItem));
    7490:	f104 0018 	add.w	r0, r4, #24
    7494:	47d8      	blx	fp
	listSET_LIST_ITEM_OWNER(&(pxNewTCB->xStateListItem), pxNewTCB);
    7496:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE(
    7498:	f1c6 0605 	rsb	r6, r6, #5
    749c:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER(&(pxNewTCB->xEventListItem), pxNewTCB);
    749e:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
    74a0:	65e5      	str	r5, [r4, #92]	; 0x5c
		pxNewTCB->ucNotifyState   = taskNOT_WAITING_NOTIFICATION;
    74a2:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack(pxTopOfStack, pxTaskCode, pvParameters);
    74a6:	4652      	mov	r2, sl
    74a8:	4649      	mov	r1, r9
    74aa:	4638      	mov	r0, r7
    74ac:	4b05      	ldr	r3, [pc, #20]	; (74c4 <prvInitialiseNewTask+0x94>)
    74ae:	4798      	blx	r3
    74b0:	6020      	str	r0, [r4, #0]
	if ((void *)pxCreatedTask != NULL) {
    74b2:	f1b8 0f00 	cmp.w	r8, #0
    74b6:	d001      	beq.n	74bc <prvInitialiseNewTask+0x8c>
		*pxCreatedTask = (TaskHandle_t)pxNewTCB;
    74b8:	f8c8 4000 	str.w	r4, [r8]
    74bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    74c0:	000088af 	.word	0x000088af
    74c4:	000061b1 	.word	0x000061b1
    74c8:	000060bb 	.word	0x000060bb

000074cc <prvInitialiseTaskLists>:
{
    74cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (uxPriority = (UBaseType_t)0U; uxPriority < (UBaseType_t)configMAX_PRIORITIES; uxPriority++) {
    74ce:	2400      	movs	r4, #0
    74d0:	e007      	b.n	74e2 <prvInitialiseTaskLists+0x16>
		vListInitialise(&(pxReadyTasksLists[uxPriority]));
    74d2:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    74d6:	0093      	lsls	r3, r2, #2
    74d8:	480e      	ldr	r0, [pc, #56]	; (7514 <prvInitialiseTaskLists+0x48>)
    74da:	4418      	add	r0, r3
    74dc:	4b0e      	ldr	r3, [pc, #56]	; (7518 <prvInitialiseTaskLists+0x4c>)
    74de:	4798      	blx	r3
	for (uxPriority = (UBaseType_t)0U; uxPriority < (UBaseType_t)configMAX_PRIORITIES; uxPriority++) {
    74e0:	3401      	adds	r4, #1
    74e2:	2c04      	cmp	r4, #4
    74e4:	d9f5      	bls.n	74d2 <prvInitialiseTaskLists+0x6>
	vListInitialise(&xDelayedTaskList1);
    74e6:	4c0d      	ldr	r4, [pc, #52]	; (751c <prvInitialiseTaskLists+0x50>)
    74e8:	f104 0794 	add.w	r7, r4, #148	; 0x94
    74ec:	4638      	mov	r0, r7
    74ee:	4d0a      	ldr	r5, [pc, #40]	; (7518 <prvInitialiseTaskLists+0x4c>)
    74f0:	47a8      	blx	r5
	vListInitialise(&xDelayedTaskList2);
    74f2:	f104 06a8 	add.w	r6, r4, #168	; 0xa8
    74f6:	4630      	mov	r0, r6
    74f8:	47a8      	blx	r5
	vListInitialise(&xPendingReadyList);
    74fa:	f104 0014 	add.w	r0, r4, #20
    74fe:	47a8      	blx	r5
		vListInitialise(&xTasksWaitingTermination);
    7500:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    7504:	47a8      	blx	r5
		vListInitialise(&xSuspendedTaskList);
    7506:	4620      	mov	r0, r4
    7508:	47a8      	blx	r5
	pxDelayedTaskList         = &xDelayedTaskList1;
    750a:	62a7      	str	r7, [r4, #40]	; 0x28
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    750c:	f8c4 60d0 	str.w	r6, [r4, #208]	; 0xd0
    7510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7512:	bf00      	nop
    7514:	20010ac0 	.word	0x20010ac0
    7518:	000060a5 	.word	0x000060a5
    751c:	20010a90 	.word	0x20010a90

00007520 <prvAddNewTaskToReadyList>:
{
    7520:	b538      	push	{r3, r4, r5, lr}
    7522:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
    7524:	4b27      	ldr	r3, [pc, #156]	; (75c4 <prvAddNewTaskToReadyList+0xa4>)
    7526:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
    7528:	4b27      	ldr	r3, [pc, #156]	; (75c8 <prvAddNewTaskToReadyList+0xa8>)
    752a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    752e:	3201      	adds	r2, #1
    7530:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		if (pxCurrentTCB == NULL) {
    7534:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    7538:	2b00      	cmp	r3, #0
    753a:	d039      	beq.n	75b0 <prvAddNewTaskToReadyList+0x90>
			if (xSchedulerRunning == pdFALSE) {
    753c:	4b22      	ldr	r3, [pc, #136]	; (75c8 <prvAddNewTaskToReadyList+0xa8>)
    753e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
    7542:	b94b      	cbnz	r3, 7558 <prvAddNewTaskToReadyList+0x38>
				if (pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority) {
    7544:	4b20      	ldr	r3, [pc, #128]	; (75c8 <prvAddNewTaskToReadyList+0xa8>)
    7546:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    754a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    754c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    754e:	429a      	cmp	r2, r3
    7550:	d802      	bhi.n	7558 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
    7552:	4b1d      	ldr	r3, [pc, #116]	; (75c8 <prvAddNewTaskToReadyList+0xa8>)
    7554:	f8c3 50d8 	str.w	r5, [r3, #216]	; 0xd8
		uxTaskNumber++;
    7558:	4c1b      	ldr	r4, [pc, #108]	; (75c8 <prvAddNewTaskToReadyList+0xa8>)
    755a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    755e:	3301      	adds	r3, #1
    7560:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    7564:	64eb      	str	r3, [r5, #76]	; 0x4c
		prvAddTaskToReadyList(pxNewTCB);
    7566:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    7568:	2201      	movs	r2, #1
    756a:	409a      	lsls	r2, r3
    756c:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
    7570:	430a      	orrs	r2, r1
    7572:	f8c4 20e4 	str.w	r2, [r4, #228]	; 0xe4
    7576:	f104 0030 	add.w	r0, r4, #48	; 0x30
    757a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    757e:	009a      	lsls	r2, r3, #2
    7580:	1d29      	adds	r1, r5, #4
    7582:	4410      	add	r0, r2
    7584:	4b11      	ldr	r3, [pc, #68]	; (75cc <prvAddNewTaskToReadyList+0xac>)
    7586:	4798      	blx	r3
	taskEXIT_CRITICAL();
    7588:	4b11      	ldr	r3, [pc, #68]	; (75d0 <prvAddNewTaskToReadyList+0xb0>)
    758a:	4798      	blx	r3
	if (xSchedulerRunning != pdFALSE) {
    758c:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
    7590:	b16b      	cbz	r3, 75ae <prvAddNewTaskToReadyList+0x8e>
		if (pxCurrentTCB->uxPriority < pxNewTCB->uxPriority) {
    7592:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    7596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7598:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    759a:	429a      	cmp	r2, r3
    759c:	d207      	bcs.n	75ae <prvAddNewTaskToReadyList+0x8e>
			taskYIELD_IF_USING_PREEMPTION();
    759e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    75a2:	4b0c      	ldr	r3, [pc, #48]	; (75d4 <prvAddNewTaskToReadyList+0xb4>)
    75a4:	601a      	str	r2, [r3, #0]
    75a6:	f3bf 8f4f 	dsb	sy
    75aa:	f3bf 8f6f 	isb	sy
    75ae:	bd38      	pop	{r3, r4, r5, pc}
			pxCurrentTCB = pxNewTCB;
    75b0:	4b05      	ldr	r3, [pc, #20]	; (75c8 <prvAddNewTaskToReadyList+0xa8>)
    75b2:	f8c3 50d8 	str.w	r5, [r3, #216]	; 0xd8
			if (uxCurrentNumberOfTasks == (UBaseType_t)1) {
    75b6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    75ba:	2b01      	cmp	r3, #1
    75bc:	d1cc      	bne.n	7558 <prvAddNewTaskToReadyList+0x38>
				prvInitialiseTaskLists();
    75be:	4b06      	ldr	r3, [pc, #24]	; (75d8 <prvAddNewTaskToReadyList+0xb8>)
    75c0:	4798      	blx	r3
    75c2:	e7c9      	b.n	7558 <prvAddNewTaskToReadyList+0x38>
    75c4:	00006205 	.word	0x00006205
    75c8:	20010a90 	.word	0x20010a90
    75cc:	000060c1 	.word	0x000060c1
    75d0:	00006249 	.word	0x00006249
    75d4:	e000ed04 	.word	0xe000ed04
    75d8:	000074cd 	.word	0x000074cd

000075dc <prvDeleteTCB>:
{
    75dc:	b538      	push	{r3, r4, r5, lr}
    75de:	4604      	mov	r4, r0
		if (pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB) {
    75e0:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
    75e4:	b163      	cbz	r3, 7600 <prvDeleteTCB+0x24>
		} else if (pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY) {
    75e6:	2b01      	cmp	r3, #1
    75e8:	d010      	beq.n	760c <prvDeleteTCB+0x30>
			configASSERT(pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB);
    75ea:	2b02      	cmp	r3, #2
    75ec:	d011      	beq.n	7612 <prvDeleteTCB+0x36>
    75ee:	f04f 0380 	mov.w	r3, #128	; 0x80
    75f2:	f383 8811 	msr	BASEPRI, r3
    75f6:	f3bf 8f6f 	isb	sy
    75fa:	f3bf 8f4f 	dsb	sy
    75fe:	e7fe      	b.n	75fe <prvDeleteTCB+0x22>
			vPortFree(pxTCB->pxStack);
    7600:	6b00      	ldr	r0, [r0, #48]	; 0x30
    7602:	4d04      	ldr	r5, [pc, #16]	; (7614 <prvDeleteTCB+0x38>)
    7604:	47a8      	blx	r5
			vPortFree(pxTCB);
    7606:	4620      	mov	r0, r4
    7608:	47a8      	blx	r5
    760a:	bd38      	pop	{r3, r4, r5, pc}
			vPortFree(pxTCB);
    760c:	4b01      	ldr	r3, [pc, #4]	; (7614 <prvDeleteTCB+0x38>)
    760e:	4798      	blx	r3
    7610:	bd38      	pop	{r3, r4, r5, pc}
    7612:	bd38      	pop	{r3, r4, r5, pc}
    7614:	00006691 	.word	0x00006691

00007618 <prvCheckTasksWaitingTermination>:
{
    7618:	b538      	push	{r3, r4, r5, lr}
		while (uxDeletedTasksWaitingCleanUp > (UBaseType_t)0U) {
    761a:	e017      	b.n	764c <prvCheckTasksWaitingTermination+0x34>
			taskENTER_CRITICAL();
    761c:	4b0e      	ldr	r3, [pc, #56]	; (7658 <prvCheckTasksWaitingTermination+0x40>)
    761e:	4798      	blx	r3
				pxTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY((&xTasksWaitingTermination));
    7620:	4c0e      	ldr	r4, [pc, #56]	; (765c <prvCheckTasksWaitingTermination+0x44>)
    7622:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
    7626:	68dd      	ldr	r5, [r3, #12]
				(void)uxListRemove(&(pxTCB->xStateListItem));
    7628:	1d28      	adds	r0, r5, #4
    762a:	4b0d      	ldr	r3, [pc, #52]	; (7660 <prvCheckTasksWaitingTermination+0x48>)
    762c:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
    762e:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
    7632:	3b01      	subs	r3, #1
    7634:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
				--uxDeletedTasksWaitingCleanUp;
    7638:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    763c:	3b01      	subs	r3, #1
    763e:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
			taskEXIT_CRITICAL();
    7642:	4b08      	ldr	r3, [pc, #32]	; (7664 <prvCheckTasksWaitingTermination+0x4c>)
    7644:	4798      	blx	r3
			prvDeleteTCB(pxTCB);
    7646:	4628      	mov	r0, r5
    7648:	4b07      	ldr	r3, [pc, #28]	; (7668 <prvCheckTasksWaitingTermination+0x50>)
    764a:	4798      	blx	r3
		while (uxDeletedTasksWaitingCleanUp > (UBaseType_t)0U) {
    764c:	4b03      	ldr	r3, [pc, #12]	; (765c <prvCheckTasksWaitingTermination+0x44>)
    764e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
    7652:	2b00      	cmp	r3, #0
    7654:	d1e2      	bne.n	761c <prvCheckTasksWaitingTermination+0x4>
}
    7656:	bd38      	pop	{r3, r4, r5, pc}
    7658:	00006205 	.word	0x00006205
    765c:	20010a90 	.word	0x20010a90
    7660:	0000610d 	.word	0x0000610d
    7664:	00006249 	.word	0x00006249
    7668:	000075dd 	.word	0x000075dd

0000766c <prvAddCurrentTaskToDelayedList>:

#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList(TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely)
{
    766c:	b570      	push	{r4, r5, r6, lr}
    766e:	4604      	mov	r4, r0
    7670:	460e      	mov	r6, r1
	TickType_t       xTimeToWake;
	const TickType_t xConstTickCount = xTickCount;
    7672:	4b1f      	ldr	r3, [pc, #124]	; (76f0 <prvAddCurrentTaskToDelayedList+0x84>)
    7674:	f8d3 50ec 	ldr.w	r5, [r3, #236]	; 0xec
	}
#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if (uxListRemove(&(pxCurrentTCB->xStateListItem)) == (UBaseType_t)0) {
    7678:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
    767c:	3004      	adds	r0, #4
    767e:	4b1d      	ldr	r3, [pc, #116]	; (76f4 <prvAddCurrentTaskToDelayedList+0x88>)
    7680:	4798      	blx	r3
    7682:	b960      	cbnz	r0, 769e <prvAddCurrentTaskToDelayedList+0x32>
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY(pxCurrentTCB->uxPriority, uxTopReadyPriority);
    7684:	4b1a      	ldr	r3, [pc, #104]	; (76f0 <prvAddCurrentTaskToDelayedList+0x84>)
    7686:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    768a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    768c:	2201      	movs	r2, #1
    768e:	fa02 f101 	lsl.w	r1, r2, r1
    7692:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    7696:	ea22 0201 	bic.w	r2, r2, r1
    769a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		mtCOVERAGE_TEST_MARKER();
	}

#if (INCLUDE_vTaskSuspend == 1)
	{
		if ((xTicksToWait == portMAX_DELAY) && (xCanBlockIndefinitely != pdFALSE)) {
    769e:	f1b4 3fff 	cmp.w	r4, #4294967295
    76a2:	d012      	beq.n	76ca <prvAddCurrentTaskToDelayedList+0x5e>
			vListInsertEnd(&xSuspendedTaskList, &(pxCurrentTCB->xStateListItem));
		} else {
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    76a4:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE(&(pxCurrentTCB->xStateListItem), xTimeToWake);
    76a6:	4b12      	ldr	r3, [pc, #72]	; (76f0 <prvAddCurrentTaskToDelayedList+0x84>)
    76a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    76ac:	605c      	str	r4, [r3, #4]

			if (xTimeToWake < xConstTickCount) {
    76ae:	42a5      	cmp	r5, r4
    76b0:	d814      	bhi.n	76dc <prvAddCurrentTaskToDelayedList+0x70>
				list. */
				vListInsert(pxOverflowDelayedTaskList, &(pxCurrentTCB->xStateListItem));
			} else {
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert(pxDelayedTaskList, &(pxCurrentTCB->xStateListItem));
    76b2:	4d0f      	ldr	r5, [pc, #60]	; (76f0 <prvAddCurrentTaskToDelayedList+0x84>)
    76b4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    76b6:	f8d5 10d8 	ldr.w	r1, [r5, #216]	; 0xd8
    76ba:	3104      	adds	r1, #4
    76bc:	4b0e      	ldr	r3, [pc, #56]	; (76f8 <prvAddCurrentTaskToDelayedList+0x8c>)
    76be:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if (xTimeToWake < xNextTaskUnblockTime) {
    76c0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    76c2:	429c      	cmp	r4, r3
    76c4:	d200      	bcs.n	76c8 <prvAddCurrentTaskToDelayedList+0x5c>
					xNextTaskUnblockTime = xTimeToWake;
    76c6:	62ec      	str	r4, [r5, #44]	; 0x2c
    76c8:	bd70      	pop	{r4, r5, r6, pc}
		if ((xTicksToWait == portMAX_DELAY) && (xCanBlockIndefinitely != pdFALSE)) {
    76ca:	2e00      	cmp	r6, #0
    76cc:	d0ea      	beq.n	76a4 <prvAddCurrentTaskToDelayedList+0x38>
			vListInsertEnd(&xSuspendedTaskList, &(pxCurrentTCB->xStateListItem));
    76ce:	4808      	ldr	r0, [pc, #32]	; (76f0 <prvAddCurrentTaskToDelayedList+0x84>)
    76d0:	f8d0 10d8 	ldr.w	r1, [r0, #216]	; 0xd8
    76d4:	3104      	adds	r1, #4
    76d6:	4b09      	ldr	r3, [pc, #36]	; (76fc <prvAddCurrentTaskToDelayedList+0x90>)
    76d8:	4798      	blx	r3
    76da:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert(pxOverflowDelayedTaskList, &(pxCurrentTCB->xStateListItem));
    76dc:	4b04      	ldr	r3, [pc, #16]	; (76f0 <prvAddCurrentTaskToDelayedList+0x84>)
    76de:	f8d3 00d0 	ldr.w	r0, [r3, #208]	; 0xd0
    76e2:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
    76e6:	3104      	adds	r1, #4
    76e8:	4b03      	ldr	r3, [pc, #12]	; (76f8 <prvAddCurrentTaskToDelayedList+0x8c>)
    76ea:	4798      	blx	r3
    76ec:	bd70      	pop	{r4, r5, r6, pc}
    76ee:	bf00      	nop
    76f0:	20010a90 	.word	0x20010a90
    76f4:	0000610d 	.word	0x0000610d
    76f8:	000060d9 	.word	0x000060d9
    76fc:	000060c1 	.word	0x000060c1

00007700 <prvIdleTask>:
{
    7700:	b508      	push	{r3, lr}
    7702:	e001      	b.n	7708 <prvIdleTask+0x8>
			vApplicationIdleHook();
    7704:	4b08      	ldr	r3, [pc, #32]	; (7728 <prvIdleTask+0x28>)
    7706:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
    7708:	4b08      	ldr	r3, [pc, #32]	; (772c <prvIdleTask+0x2c>)
    770a:	4798      	blx	r3
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[tskIDLE_PRIORITY])) > (UBaseType_t)1) {
    770c:	4b08      	ldr	r3, [pc, #32]	; (7730 <prvIdleTask+0x30>)
    770e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    7710:	2b01      	cmp	r3, #1
    7712:	d9f7      	bls.n	7704 <prvIdleTask+0x4>
				taskYIELD();
    7714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    7718:	4b06      	ldr	r3, [pc, #24]	; (7734 <prvIdleTask+0x34>)
    771a:	601a      	str	r2, [r3, #0]
    771c:	f3bf 8f4f 	dsb	sy
    7720:	f3bf 8f6f 	isb	sy
    7724:	e7ee      	b.n	7704 <prvIdleTask+0x4>
    7726:	bf00      	nop
    7728:	0000530d 	.word	0x0000530d
    772c:	00007619 	.word	0x00007619
    7730:	20010a90 	.word	0x20010a90
    7734:	e000ed04 	.word	0xe000ed04

00007738 <xTaskCreateStatic>:
{
    7738:	b570      	push	{r4, r5, r6, lr}
    773a:	b086      	sub	sp, #24
    773c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    773e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	configASSERT(puxStackBuffer != NULL);
    7740:	b175      	cbz	r5, 7760 <xTaskCreateStatic+0x28>
	configASSERT(pxTaskBuffer != NULL);
    7742:	b1b4      	cbz	r4, 7772 <xTaskCreateStatic+0x3a>
		volatile size_t xSize = sizeof(StaticTask_t);
    7744:	2664      	movs	r6, #100	; 0x64
    7746:	9604      	str	r6, [sp, #16]
		configASSERT(xSize == sizeof(TCB_t));
    7748:	9e04      	ldr	r6, [sp, #16]
    774a:	2e64      	cmp	r6, #100	; 0x64
    774c:	d01a      	beq.n	7784 <xTaskCreateStatic+0x4c>
    774e:	f04f 0380 	mov.w	r3, #128	; 0x80
    7752:	f383 8811 	msr	BASEPRI, r3
    7756:	f3bf 8f6f 	isb	sy
    775a:	f3bf 8f4f 	dsb	sy
    775e:	e7fe      	b.n	775e <xTaskCreateStatic+0x26>
    7760:	f04f 0380 	mov.w	r3, #128	; 0x80
    7764:	f383 8811 	msr	BASEPRI, r3
    7768:	f3bf 8f6f 	isb	sy
    776c:	f3bf 8f4f 	dsb	sy
    7770:	e7fe      	b.n	7770 <xTaskCreateStatic+0x38>
    7772:	f04f 0380 	mov.w	r3, #128	; 0x80
    7776:	f383 8811 	msr	BASEPRI, r3
    777a:	f3bf 8f6f 	isb	sy
    777e:	f3bf 8f4f 	dsb	sy
    7782:	e7fe      	b.n	7782 <xTaskCreateStatic+0x4a>
		pxNewTCB->pxStack = (StackType_t *)puxStackBuffer;
    7784:	6325      	str	r5, [r4, #48]	; 0x30
			pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
    7786:	2502      	movs	r5, #2
    7788:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
		prvInitialiseNewTask(pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL);
    778c:	2500      	movs	r5, #0
    778e:	9503      	str	r5, [sp, #12]
    7790:	9402      	str	r4, [sp, #8]
    7792:	ad05      	add	r5, sp, #20
    7794:	9501      	str	r5, [sp, #4]
    7796:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    7798:	9500      	str	r5, [sp, #0]
    779a:	4d04      	ldr	r5, [pc, #16]	; (77ac <xTaskCreateStatic+0x74>)
    779c:	47a8      	blx	r5
		prvAddNewTaskToReadyList(pxNewTCB);
    779e:	4620      	mov	r0, r4
    77a0:	4b03      	ldr	r3, [pc, #12]	; (77b0 <xTaskCreateStatic+0x78>)
    77a2:	4798      	blx	r3
}
    77a4:	9805      	ldr	r0, [sp, #20]
    77a6:	b006      	add	sp, #24
    77a8:	bd70      	pop	{r4, r5, r6, pc}
    77aa:	bf00      	nop
    77ac:	00007431 	.word	0x00007431
    77b0:	00007521 	.word	0x00007521

000077b4 <xTaskCreate>:
{
    77b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    77b8:	b085      	sub	sp, #20
    77ba:	4606      	mov	r6, r0
    77bc:	460f      	mov	r7, r1
    77be:	4615      	mov	r5, r2
    77c0:	4698      	mov	r8, r3
		pxStack = (StackType_t *)pvPortMalloc(
    77c2:	0090      	lsls	r0, r2, #2
    77c4:	4b15      	ldr	r3, [pc, #84]	; (781c <xTaskCreate+0x68>)
    77c6:	4798      	blx	r3
		if (pxStack != NULL) {
    77c8:	b310      	cbz	r0, 7810 <xTaskCreate+0x5c>
    77ca:	4681      	mov	r9, r0
			pxNewTCB = (TCB_t *)pvPortMalloc(
    77cc:	2064      	movs	r0, #100	; 0x64
    77ce:	4b13      	ldr	r3, [pc, #76]	; (781c <xTaskCreate+0x68>)
    77d0:	4798      	blx	r3
			if (pxNewTCB != NULL) {
    77d2:	4604      	mov	r4, r0
    77d4:	b1c0      	cbz	r0, 7808 <xTaskCreate+0x54>
				pxNewTCB->pxStack = pxStack;
    77d6:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
	if (pxNewTCB != NULL) {
    77da:	b1dc      	cbz	r4, 7814 <xTaskCreate+0x60>
			pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
    77dc:	2300      	movs	r3, #0
    77de:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
		prvInitialiseNewTask(
    77e2:	9303      	str	r3, [sp, #12]
    77e4:	9402      	str	r4, [sp, #8]
    77e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    77e8:	9301      	str	r3, [sp, #4]
    77ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    77ec:	9300      	str	r3, [sp, #0]
    77ee:	4643      	mov	r3, r8
    77f0:	462a      	mov	r2, r5
    77f2:	4639      	mov	r1, r7
    77f4:	4630      	mov	r0, r6
    77f6:	4d0a      	ldr	r5, [pc, #40]	; (7820 <xTaskCreate+0x6c>)
    77f8:	47a8      	blx	r5
		prvAddNewTaskToReadyList(pxNewTCB);
    77fa:	4620      	mov	r0, r4
    77fc:	4b09      	ldr	r3, [pc, #36]	; (7824 <xTaskCreate+0x70>)
    77fe:	4798      	blx	r3
		xReturn = pdPASS;
    7800:	2001      	movs	r0, #1
}
    7802:	b005      	add	sp, #20
    7804:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				vPortFree(pxStack);
    7808:	4648      	mov	r0, r9
    780a:	4b07      	ldr	r3, [pc, #28]	; (7828 <xTaskCreate+0x74>)
    780c:	4798      	blx	r3
    780e:	e7e4      	b.n	77da <xTaskCreate+0x26>
			pxNewTCB = NULL;
    7810:	2400      	movs	r4, #0
    7812:	e7e2      	b.n	77da <xTaskCreate+0x26>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    7814:	f04f 30ff 	mov.w	r0, #4294967295
	return xReturn;
    7818:	e7f3      	b.n	7802 <xTaskCreate+0x4e>
    781a:	bf00      	nop
    781c:	0000655d 	.word	0x0000655d
    7820:	00007431 	.word	0x00007431
    7824:	00007521 	.word	0x00007521
    7828:	00006691 	.word	0x00006691

0000782c <vTaskDelete>:
{
    782c:	b570      	push	{r4, r5, r6, lr}
    782e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
    7830:	4b33      	ldr	r3, [pc, #204]	; (7900 <vTaskDelete+0xd4>)
    7832:	4798      	blx	r3
		pxTCB = prvGetTCBFromHandle(xTaskToDelete);
    7834:	2c00      	cmp	r4, #0
    7836:	d03d      	beq.n	78b4 <vTaskDelete+0x88>
		if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t)0) {
    7838:	1d26      	adds	r6, r4, #4
    783a:	4630      	mov	r0, r6
    783c:	4b31      	ldr	r3, [pc, #196]	; (7904 <vTaskDelete+0xd8>)
    783e:	4798      	blx	r3
    7840:	b988      	cbnz	r0, 7866 <vTaskDelete+0x3a>
			taskRESET_READY_PRIORITY(pxTCB->uxPriority);
    7842:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    7844:	eb02 0382 	add.w	r3, r2, r2, lsl #2
    7848:	0099      	lsls	r1, r3, #2
    784a:	4b2f      	ldr	r3, [pc, #188]	; (7908 <vTaskDelete+0xdc>)
    784c:	440b      	add	r3, r1
    784e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    7850:	b94b      	cbnz	r3, 7866 <vTaskDelete+0x3a>
    7852:	2301      	movs	r3, #1
    7854:	fa03 f202 	lsl.w	r2, r3, r2
    7858:	492b      	ldr	r1, [pc, #172]	; (7908 <vTaskDelete+0xdc>)
    785a:	f8d1 30e4 	ldr.w	r3, [r1, #228]	; 0xe4
    785e:	ea23 0302 	bic.w	r3, r3, r2
    7862:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
		if (listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) != NULL) {
    7866:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7868:	b11b      	cbz	r3, 7872 <vTaskDelete+0x46>
			(void)uxListRemove(&(pxTCB->xEventListItem));
    786a:	f104 0018 	add.w	r0, r4, #24
    786e:	4b25      	ldr	r3, [pc, #148]	; (7904 <vTaskDelete+0xd8>)
    7870:	4798      	blx	r3
		uxTaskNumber++;
    7872:	4b25      	ldr	r3, [pc, #148]	; (7908 <vTaskDelete+0xdc>)
    7874:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    7878:	3201      	adds	r2, #1
    787a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
		if (pxTCB == pxCurrentTCB) {
    787e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    7882:	429c      	cmp	r4, r3
    7884:	d01a      	beq.n	78bc <vTaskDelete+0x90>
			--uxCurrentNumberOfTasks;
    7886:	4a20      	ldr	r2, [pc, #128]	; (7908 <vTaskDelete+0xdc>)
    7888:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
    788c:	3b01      	subs	r3, #1
    788e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
			prvDeleteTCB(pxTCB);
    7892:	4620      	mov	r0, r4
    7894:	4b1d      	ldr	r3, [pc, #116]	; (790c <vTaskDelete+0xe0>)
    7896:	4798      	blx	r3
			prvResetNextTaskUnblockTime();
    7898:	4b1d      	ldr	r3, [pc, #116]	; (7910 <vTaskDelete+0xe4>)
    789a:	4798      	blx	r3
	taskEXIT_CRITICAL();
    789c:	4b1d      	ldr	r3, [pc, #116]	; (7914 <vTaskDelete+0xe8>)
    789e:	4798      	blx	r3
	if (xSchedulerRunning != pdFALSE) {
    78a0:	4b19      	ldr	r3, [pc, #100]	; (7908 <vTaskDelete+0xdc>)
    78a2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
    78a6:	b123      	cbz	r3, 78b2 <vTaskDelete+0x86>
		if (pxTCB == pxCurrentTCB) {
    78a8:	4b17      	ldr	r3, [pc, #92]	; (7908 <vTaskDelete+0xdc>)
    78aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    78ae:	429c      	cmp	r4, r3
    78b0:	d010      	beq.n	78d4 <vTaskDelete+0xa8>
    78b2:	bd70      	pop	{r4, r5, r6, pc}
		pxTCB = prvGetTCBFromHandle(xTaskToDelete);
    78b4:	4b14      	ldr	r3, [pc, #80]	; (7908 <vTaskDelete+0xdc>)
    78b6:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
    78ba:	e7bd      	b.n	7838 <vTaskDelete+0xc>
			vListInsertEnd(&xTasksWaitingTermination, &(pxTCB->xStateListItem));
    78bc:	4d12      	ldr	r5, [pc, #72]	; (7908 <vTaskDelete+0xdc>)
    78be:	4631      	mov	r1, r6
    78c0:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    78c4:	4b14      	ldr	r3, [pc, #80]	; (7918 <vTaskDelete+0xec>)
    78c6:	4798      	blx	r3
			++uxDeletedTasksWaitingCleanUp;
    78c8:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
    78cc:	3301      	adds	r3, #1
    78ce:	f8c5 30e8 	str.w	r3, [r5, #232]	; 0xe8
    78d2:	e7e3      	b.n	789c <vTaskDelete+0x70>
			configASSERT(uxSchedulerSuspended == 0);
    78d4:	4b0c      	ldr	r3, [pc, #48]	; (7908 <vTaskDelete+0xdc>)
    78d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
    78da:	b143      	cbz	r3, 78ee <vTaskDelete+0xc2>
    78dc:	f04f 0380 	mov.w	r3, #128	; 0x80
    78e0:	f383 8811 	msr	BASEPRI, r3
    78e4:	f3bf 8f6f 	isb	sy
    78e8:	f3bf 8f4f 	dsb	sy
    78ec:	e7fe      	b.n	78ec <vTaskDelete+0xc0>
			portYIELD_WITHIN_API();
    78ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    78f2:	4b0a      	ldr	r3, [pc, #40]	; (791c <vTaskDelete+0xf0>)
    78f4:	601a      	str	r2, [r3, #0]
    78f6:	f3bf 8f4f 	dsb	sy
    78fa:	f3bf 8f6f 	isb	sy
}
    78fe:	e7d8      	b.n	78b2 <vTaskDelete+0x86>
    7900:	00006205 	.word	0x00006205
    7904:	0000610d 	.word	0x0000610d
    7908:	20010a90 	.word	0x20010a90
    790c:	000075dd 	.word	0x000075dd
    7910:	00007405 	.word	0x00007405
    7914:	00006249 	.word	0x00006249
    7918:	000060c1 	.word	0x000060c1
    791c:	e000ed04 	.word	0xe000ed04

00007920 <vTaskStartScheduler>:
{
    7920:	b510      	push	{r4, lr}
    7922:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer   = NULL;
    7924:	2400      	movs	r4, #0
    7926:	9405      	str	r4, [sp, #20]
		StackType_t * pxIdleTaskStackBuffer = NULL;
    7928:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory(&pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize);
    792a:	aa07      	add	r2, sp, #28
    792c:	a906      	add	r1, sp, #24
    792e:	a805      	add	r0, sp, #20
    7930:	4b1d      	ldr	r3, [pc, #116]	; (79a8 <vTaskStartScheduler+0x88>)
    7932:	4798      	blx	r3
		    = xTaskCreateStatic(prvIdleTask,
    7934:	9b05      	ldr	r3, [sp, #20]
    7936:	9302      	str	r3, [sp, #8]
    7938:	9b06      	ldr	r3, [sp, #24]
    793a:	9301      	str	r3, [sp, #4]
    793c:	9400      	str	r4, [sp, #0]
    793e:	4623      	mov	r3, r4
    7940:	9a07      	ldr	r2, [sp, #28]
    7942:	491a      	ldr	r1, [pc, #104]	; (79ac <vTaskStartScheduler+0x8c>)
    7944:	481a      	ldr	r0, [pc, #104]	; (79b0 <vTaskStartScheduler+0x90>)
    7946:	4c1b      	ldr	r4, [pc, #108]	; (79b4 <vTaskStartScheduler+0x94>)
    7948:	47a0      	blx	r4
		if (xIdleTaskHandle != NULL) {
    794a:	b148      	cbz	r0, 7960 <vTaskStartScheduler+0x40>
			xReturn = pdPASS;
    794c:	2001      	movs	r0, #1
		if (xReturn == pdPASS) {
    794e:	2801      	cmp	r0, #1
    7950:	d008      	beq.n	7964 <vTaskStartScheduler+0x44>
	if (xReturn == pdPASS) {
    7952:	2801      	cmp	r0, #1
    7954:	d009      	beq.n	796a <vTaskStartScheduler+0x4a>
		configASSERT(xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY);
    7956:	f1b0 3fff 	cmp.w	r0, #4294967295
    795a:	d01b      	beq.n	7994 <vTaskStartScheduler+0x74>
}
    795c:	b008      	add	sp, #32
    795e:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
    7960:	2000      	movs	r0, #0
    7962:	e7f4      	b.n	794e <vTaskStartScheduler+0x2e>
			xReturn = xTimerCreateTimerTask();
    7964:	4b14      	ldr	r3, [pc, #80]	; (79b8 <vTaskStartScheduler+0x98>)
    7966:	4798      	blx	r3
    7968:	e7f3      	b.n	7952 <vTaskStartScheduler+0x32>
    796a:	f04f 0380 	mov.w	r3, #128	; 0x80
    796e:	f383 8811 	msr	BASEPRI, r3
    7972:	f3bf 8f6f 	isb	sy
    7976:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
    797a:	4b10      	ldr	r3, [pc, #64]	; (79bc <vTaskStartScheduler+0x9c>)
    797c:	f04f 32ff 	mov.w	r2, #4294967295
    7980:	62da      	str	r2, [r3, #44]	; 0x2c
		xSchedulerRunning    = pdTRUE;
    7982:	2201      	movs	r2, #1
    7984:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		xTickCount           = (TickType_t)0U;
    7988:	2200      	movs	r2, #0
    798a:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
		if (xPortStartScheduler() != pdFALSE) {
    798e:	4b0c      	ldr	r3, [pc, #48]	; (79c0 <vTaskStartScheduler+0xa0>)
    7990:	4798      	blx	r3
    7992:	e7e3      	b.n	795c <vTaskStartScheduler+0x3c>
    7994:	f04f 0380 	mov.w	r3, #128	; 0x80
    7998:	f383 8811 	msr	BASEPRI, r3
    799c:	f3bf 8f6f 	isb	sy
    79a0:	f3bf 8f4f 	dsb	sy
    79a4:	e7fe      	b.n	79a4 <vTaskStartScheduler+0x84>
    79a6:	bf00      	nop
    79a8:	000052d5 	.word	0x000052d5
    79ac:	0000dec0 	.word	0x0000dec0
    79b0:	00007701 	.word	0x00007701
    79b4:	00007739 	.word	0x00007739
    79b8:	00008385 	.word	0x00008385
    79bc:	20010a90 	.word	0x20010a90
    79c0:	00006339 	.word	0x00006339

000079c4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
    79c4:	4a03      	ldr	r2, [pc, #12]	; (79d4 <vTaskSuspendAll+0x10>)
    79c6:	f8d2 30f0 	ldr.w	r3, [r2, #240]	; 0xf0
    79ca:	3301      	adds	r3, #1
    79cc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    79d0:	4770      	bx	lr
    79d2:	bf00      	nop
    79d4:	20010a90 	.word	0x20010a90

000079d8 <xTaskGetTickCount>:
		xTicks = xTickCount;
    79d8:	4b01      	ldr	r3, [pc, #4]	; (79e0 <xTaskGetTickCount+0x8>)
    79da:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
}
    79de:	4770      	bx	lr
    79e0:	20010a90 	.word	0x20010a90

000079e4 <xTaskIncrementTick>:
{
    79e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    79e8:	4b42      	ldr	r3, [pc, #264]	; (7af4 <xTaskIncrementTick+0x110>)
    79ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
    79ee:	2b00      	cmp	r3, #0
    79f0:	d170      	bne.n	7ad4 <xTaskIncrementTick+0xf0>
		const TickType_t xConstTickCount = xTickCount + (TickType_t)1;
    79f2:	4b40      	ldr	r3, [pc, #256]	; (7af4 <xTaskIncrementTick+0x110>)
    79f4:	f8d3 50ec 	ldr.w	r5, [r3, #236]	; 0xec
    79f8:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
    79fa:	f8c3 50ec 	str.w	r5, [r3, #236]	; 0xec
		if (xConstTickCount
    79fe:	b9cd      	cbnz	r5, 7a34 <xTaskIncrementTick+0x50>
			taskSWITCH_DELAYED_LISTS();
    7a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7a02:	681b      	ldr	r3, [r3, #0]
    7a04:	b143      	cbz	r3, 7a18 <xTaskIncrementTick+0x34>
    7a06:	f04f 0380 	mov.w	r3, #128	; 0x80
    7a0a:	f383 8811 	msr	BASEPRI, r3
    7a0e:	f3bf 8f6f 	isb	sy
    7a12:	f3bf 8f4f 	dsb	sy
    7a16:	e7fe      	b.n	7a16 <xTaskIncrementTick+0x32>
    7a18:	4b36      	ldr	r3, [pc, #216]	; (7af4 <xTaskIncrementTick+0x110>)
    7a1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    7a1c:	f8d3 10d0 	ldr.w	r1, [r3, #208]	; 0xd0
    7a20:	6299      	str	r1, [r3, #40]	; 0x28
    7a22:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    7a26:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
    7a2a:	3201      	adds	r2, #1
    7a2c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    7a30:	4b31      	ldr	r3, [pc, #196]	; (7af8 <xTaskIncrementTick+0x114>)
    7a32:	4798      	blx	r3
		if (xConstTickCount >= xNextTaskUnblockTime) {
    7a34:	4b2f      	ldr	r3, [pc, #188]	; (7af4 <xTaskIncrementTick+0x110>)
    7a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7a38:	429d      	cmp	r5, r3
    7a3a:	d23f      	bcs.n	7abc <xTaskIncrementTick+0xd8>
	BaseType_t xSwitchRequired = pdFALSE;
    7a3c:	2400      	movs	r4, #0
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[pxCurrentTCB->uxPriority])) > (UBaseType_t)1) {
    7a3e:	4a2d      	ldr	r2, [pc, #180]	; (7af4 <xTaskIncrementTick+0x110>)
    7a40:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
    7a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7a46:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7a4a:	0099      	lsls	r1, r3, #2
    7a4c:	440a      	add	r2, r1
    7a4e:	6b13      	ldr	r3, [r2, #48]	; 0x30
    7a50:	2b01      	cmp	r3, #1
    7a52:	d946      	bls.n	7ae2 <xTaskIncrementTick+0xfe>
				xSwitchRequired = pdTRUE;
    7a54:	2401      	movs	r4, #1
    7a56:	e044      	b.n	7ae2 <xTaskIncrementTick+0xfe>
							xSwitchRequired = pdTRUE;
    7a58:	2401      	movs	r4, #1
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    7a5a:	4b26      	ldr	r3, [pc, #152]	; (7af4 <xTaskIncrementTick+0x110>)
    7a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7a5e:	681b      	ldr	r3, [r3, #0]
    7a60:	b373      	cbz	r3, 7ac0 <xTaskIncrementTick+0xdc>
    7a62:	2300      	movs	r3, #0
    7a64:	bb73      	cbnz	r3, 7ac4 <xTaskIncrementTick+0xe0>
					pxTCB      = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    7a66:	4b23      	ldr	r3, [pc, #140]	; (7af4 <xTaskIncrementTick+0x110>)
    7a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7a6a:	68db      	ldr	r3, [r3, #12]
    7a6c:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE(&(pxTCB->xStateListItem));
    7a6e:	6873      	ldr	r3, [r6, #4]
					if (xConstTickCount < xItemValue) {
    7a70:	429d      	cmp	r5, r3
    7a72:	d32c      	bcc.n	7ace <xTaskIncrementTick+0xea>
					(void)uxListRemove(&(pxTCB->xStateListItem));
    7a74:	f106 0804 	add.w	r8, r6, #4
    7a78:	4640      	mov	r0, r8
    7a7a:	4b20      	ldr	r3, [pc, #128]	; (7afc <xTaskIncrementTick+0x118>)
    7a7c:	4798      	blx	r3
					if (listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) != NULL) {
    7a7e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    7a80:	b11b      	cbz	r3, 7a8a <xTaskIncrementTick+0xa6>
						(void)uxListRemove(&(pxTCB->xEventListItem));
    7a82:	f106 0018 	add.w	r0, r6, #24
    7a86:	4b1d      	ldr	r3, [pc, #116]	; (7afc <xTaskIncrementTick+0x118>)
    7a88:	4798      	blx	r3
					prvAddTaskToReadyList(pxTCB);
    7a8a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    7a8c:	2201      	movs	r2, #1
    7a8e:	409a      	lsls	r2, r3
    7a90:	4f18      	ldr	r7, [pc, #96]	; (7af4 <xTaskIncrementTick+0x110>)
    7a92:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
    7a96:	430a      	orrs	r2, r1
    7a98:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
    7a9c:	f107 0030 	add.w	r0, r7, #48	; 0x30
    7aa0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7aa4:	009a      	lsls	r2, r3, #2
    7aa6:	4641      	mov	r1, r8
    7aa8:	4410      	add	r0, r2
    7aaa:	4b15      	ldr	r3, [pc, #84]	; (7b00 <xTaskIncrementTick+0x11c>)
    7aac:	4798      	blx	r3
						if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
    7aae:	6af2      	ldr	r2, [r6, #44]	; 0x2c
    7ab0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
    7ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7ab6:	429a      	cmp	r2, r3
    7ab8:	d2ce      	bcs.n	7a58 <xTaskIncrementTick+0x74>
    7aba:	e7ce      	b.n	7a5a <xTaskIncrementTick+0x76>
    7abc:	2400      	movs	r4, #0
    7abe:	e7cc      	b.n	7a5a <xTaskIncrementTick+0x76>
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    7ac0:	2301      	movs	r3, #1
    7ac2:	e7cf      	b.n	7a64 <xTaskIncrementTick+0x80>
					    = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    7ac4:	f04f 32ff 	mov.w	r2, #4294967295
    7ac8:	4b0a      	ldr	r3, [pc, #40]	; (7af4 <xTaskIncrementTick+0x110>)
    7aca:	62da      	str	r2, [r3, #44]	; 0x2c
					break;
    7acc:	e7b7      	b.n	7a3e <xTaskIncrementTick+0x5a>
						xNextTaskUnblockTime = xItemValue;
    7ace:	4a09      	ldr	r2, [pc, #36]	; (7af4 <xTaskIncrementTick+0x110>)
    7ad0:	62d3      	str	r3, [r2, #44]	; 0x2c
						break;
    7ad2:	e7b4      	b.n	7a3e <xTaskIncrementTick+0x5a>
		++uxPendedTicks;
    7ad4:	4a07      	ldr	r2, [pc, #28]	; (7af4 <xTaskIncrementTick+0x110>)
    7ad6:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    7ada:	3301      	adds	r3, #1
    7adc:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
	BaseType_t xSwitchRequired = pdFALSE;
    7ae0:	2400      	movs	r4, #0
		if (xYieldPending != pdFALSE) {
    7ae2:	4b04      	ldr	r3, [pc, #16]	; (7af4 <xTaskIncrementTick+0x110>)
    7ae4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
    7ae8:	b103      	cbz	r3, 7aec <xTaskIncrementTick+0x108>
			xSwitchRequired = pdTRUE;
    7aea:	2401      	movs	r4, #1
}
    7aec:	4620      	mov	r0, r4
    7aee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7af2:	bf00      	nop
    7af4:	20010a90 	.word	0x20010a90
    7af8:	00007405 	.word	0x00007405
    7afc:	0000610d 	.word	0x0000610d
    7b00:	000060c1 	.word	0x000060c1

00007b04 <xTaskResumeAll>:
{
    7b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT(uxSchedulerSuspended);
    7b06:	4b3a      	ldr	r3, [pc, #232]	; (7bf0 <xTaskResumeAll+0xec>)
    7b08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
    7b0c:	b943      	cbnz	r3, 7b20 <xTaskResumeAll+0x1c>
    7b0e:	f04f 0380 	mov.w	r3, #128	; 0x80
    7b12:	f383 8811 	msr	BASEPRI, r3
    7b16:	f3bf 8f6f 	isb	sy
    7b1a:	f3bf 8f4f 	dsb	sy
    7b1e:	e7fe      	b.n	7b1e <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
    7b20:	4b34      	ldr	r3, [pc, #208]	; (7bf4 <xTaskResumeAll+0xf0>)
    7b22:	4798      	blx	r3
		--uxSchedulerSuspended;
    7b24:	4b32      	ldr	r3, [pc, #200]	; (7bf0 <xTaskResumeAll+0xec>)
    7b26:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    7b2a:	3a01      	subs	r2, #1
    7b2c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
		if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    7b30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
    7b34:	2b00      	cmp	r3, #0
    7b36:	d156      	bne.n	7be6 <xTaskResumeAll+0xe2>
			if (uxCurrentNumberOfTasks > (UBaseType_t)0U) {
    7b38:	4b2d      	ldr	r3, [pc, #180]	; (7bf0 <xTaskResumeAll+0xec>)
    7b3a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    7b3e:	b923      	cbnz	r3, 7b4a <xTaskResumeAll+0x46>
	BaseType_t xAlreadyYielded = pdFALSE;
    7b40:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
    7b42:	4b2d      	ldr	r3, [pc, #180]	; (7bf8 <xTaskResumeAll+0xf4>)
    7b44:	4798      	blx	r3
}
    7b46:	4620      	mov	r0, r4
    7b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7b4a:	2400      	movs	r4, #0
				while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE) {
    7b4c:	4b28      	ldr	r3, [pc, #160]	; (7bf0 <xTaskResumeAll+0xec>)
    7b4e:	695b      	ldr	r3, [r3, #20]
    7b50:	b323      	cbz	r3, 7b9c <xTaskResumeAll+0x98>
					pxTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY((&xPendingReadyList));
    7b52:	4d27      	ldr	r5, [pc, #156]	; (7bf0 <xTaskResumeAll+0xec>)
    7b54:	6a2b      	ldr	r3, [r5, #32]
    7b56:	68dc      	ldr	r4, [r3, #12]
					(void)uxListRemove(&(pxTCB->xEventListItem));
    7b58:	f104 0018 	add.w	r0, r4, #24
    7b5c:	4f27      	ldr	r7, [pc, #156]	; (7bfc <xTaskResumeAll+0xf8>)
    7b5e:	47b8      	blx	r7
					(void)uxListRemove(&(pxTCB->xStateListItem));
    7b60:	1d26      	adds	r6, r4, #4
    7b62:	4630      	mov	r0, r6
    7b64:	47b8      	blx	r7
					prvAddTaskToReadyList(pxTCB);
    7b66:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    7b68:	2201      	movs	r2, #1
    7b6a:	409a      	lsls	r2, r3
    7b6c:	f8d5 10e4 	ldr.w	r1, [r5, #228]	; 0xe4
    7b70:	430a      	orrs	r2, r1
    7b72:	f8c5 20e4 	str.w	r2, [r5, #228]	; 0xe4
    7b76:	f105 0030 	add.w	r0, r5, #48	; 0x30
    7b7a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7b7e:	009a      	lsls	r2, r3, #2
    7b80:	4631      	mov	r1, r6
    7b82:	4410      	add	r0, r2
    7b84:	4b1e      	ldr	r3, [pc, #120]	; (7c00 <xTaskResumeAll+0xfc>)
    7b86:	4798      	blx	r3
					if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
    7b88:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    7b8a:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
    7b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7b90:	429a      	cmp	r2, r3
    7b92:	d3db      	bcc.n	7b4c <xTaskResumeAll+0x48>
						xYieldPending = pdTRUE;
    7b94:	2201      	movs	r2, #1
    7b96:	f8c5 20fc 	str.w	r2, [r5, #252]	; 0xfc
    7b9a:	e7d7      	b.n	7b4c <xTaskResumeAll+0x48>
				if (pxTCB != NULL) {
    7b9c:	b10c      	cbz	r4, 7ba2 <xTaskResumeAll+0x9e>
					prvResetNextTaskUnblockTime();
    7b9e:	4b19      	ldr	r3, [pc, #100]	; (7c04 <xTaskResumeAll+0x100>)
    7ba0:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    7ba2:	4b13      	ldr	r3, [pc, #76]	; (7bf0 <xTaskResumeAll+0xec>)
    7ba4:	f8d3 40f8 	ldr.w	r4, [r3, #248]	; 0xf8
					if (uxPendedCounts > (UBaseType_t)0U) {
    7ba8:	b97c      	cbnz	r4, 7bca <xTaskResumeAll+0xc6>
				if (xYieldPending != pdFALSE) {
    7baa:	4b11      	ldr	r3, [pc, #68]	; (7bf0 <xTaskResumeAll+0xec>)
    7bac:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
    7bb0:	b1db      	cbz	r3, 7bea <xTaskResumeAll+0xe6>
					taskYIELD_IF_USING_PREEMPTION();
    7bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    7bb6:	4b14      	ldr	r3, [pc, #80]	; (7c08 <xTaskResumeAll+0x104>)
    7bb8:	601a      	str	r2, [r3, #0]
    7bba:	f3bf 8f4f 	dsb	sy
    7bbe:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
    7bc2:	2401      	movs	r4, #1
    7bc4:	e7bd      	b.n	7b42 <xTaskResumeAll+0x3e>
						} while (uxPendedCounts > (UBaseType_t)0U);
    7bc6:	3c01      	subs	r4, #1
    7bc8:	d008      	beq.n	7bdc <xTaskResumeAll+0xd8>
							if (xTaskIncrementTick() != pdFALSE) {
    7bca:	4b10      	ldr	r3, [pc, #64]	; (7c0c <xTaskResumeAll+0x108>)
    7bcc:	4798      	blx	r3
    7bce:	2800      	cmp	r0, #0
    7bd0:	d0f9      	beq.n	7bc6 <xTaskResumeAll+0xc2>
								xYieldPending = pdTRUE;
    7bd2:	2201      	movs	r2, #1
    7bd4:	4b06      	ldr	r3, [pc, #24]	; (7bf0 <xTaskResumeAll+0xec>)
    7bd6:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    7bda:	e7f4      	b.n	7bc6 <xTaskResumeAll+0xc2>
						uxPendedTicks = 0;
    7bdc:	2200      	movs	r2, #0
    7bde:	4b04      	ldr	r3, [pc, #16]	; (7bf0 <xTaskResumeAll+0xec>)
    7be0:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    7be4:	e7e1      	b.n	7baa <xTaskResumeAll+0xa6>
	BaseType_t xAlreadyYielded = pdFALSE;
    7be6:	2400      	movs	r4, #0
    7be8:	e7ab      	b.n	7b42 <xTaskResumeAll+0x3e>
    7bea:	2400      	movs	r4, #0
    7bec:	e7a9      	b.n	7b42 <xTaskResumeAll+0x3e>
    7bee:	bf00      	nop
    7bf0:	20010a90 	.word	0x20010a90
    7bf4:	00006205 	.word	0x00006205
    7bf8:	00006249 	.word	0x00006249
    7bfc:	0000610d 	.word	0x0000610d
    7c00:	000060c1 	.word	0x000060c1
    7c04:	00007405 	.word	0x00007405
    7c08:	e000ed04 	.word	0xe000ed04
    7c0c:	000079e5 	.word	0x000079e5

00007c10 <vTaskDelay>:
{
    7c10:	b510      	push	{r4, lr}
	if (xTicksToDelay > (TickType_t)0U) {
    7c12:	b1b0      	cbz	r0, 7c42 <vTaskDelay+0x32>
    7c14:	4604      	mov	r4, r0
		configASSERT(uxSchedulerSuspended == 0);
    7c16:	4b10      	ldr	r3, [pc, #64]	; (7c58 <vTaskDelay+0x48>)
    7c18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
    7c1c:	b143      	cbz	r3, 7c30 <vTaskDelay+0x20>
    7c1e:	f04f 0380 	mov.w	r3, #128	; 0x80
    7c22:	f383 8811 	msr	BASEPRI, r3
    7c26:	f3bf 8f6f 	isb	sy
    7c2a:	f3bf 8f4f 	dsb	sy
    7c2e:	e7fe      	b.n	7c2e <vTaskDelay+0x1e>
		vTaskSuspendAll();
    7c30:	4b0a      	ldr	r3, [pc, #40]	; (7c5c <vTaskDelay+0x4c>)
    7c32:	4798      	blx	r3
			prvAddCurrentTaskToDelayedList(xTicksToDelay, pdFALSE);
    7c34:	2100      	movs	r1, #0
    7c36:	4620      	mov	r0, r4
    7c38:	4b09      	ldr	r3, [pc, #36]	; (7c60 <vTaskDelay+0x50>)
    7c3a:	4798      	blx	r3
		xAlreadyYielded = xTaskResumeAll();
    7c3c:	4b09      	ldr	r3, [pc, #36]	; (7c64 <vTaskDelay+0x54>)
    7c3e:	4798      	blx	r3
    7c40:	e000      	b.n	7c44 <vTaskDelay+0x34>
	BaseType_t xAlreadyYielded = pdFALSE;
    7c42:	2000      	movs	r0, #0
	if (xAlreadyYielded == pdFALSE) {
    7c44:	b938      	cbnz	r0, 7c56 <vTaskDelay+0x46>
		portYIELD_WITHIN_API();
    7c46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    7c4a:	4b07      	ldr	r3, [pc, #28]	; (7c68 <vTaskDelay+0x58>)
    7c4c:	601a      	str	r2, [r3, #0]
    7c4e:	f3bf 8f4f 	dsb	sy
    7c52:	f3bf 8f6f 	isb	sy
    7c56:	bd10      	pop	{r4, pc}
    7c58:	20010a90 	.word	0x20010a90
    7c5c:	000079c5 	.word	0x000079c5
    7c60:	0000766d 	.word	0x0000766d
    7c64:	00007b05 	.word	0x00007b05
    7c68:	e000ed04 	.word	0xe000ed04

00007c6c <vTaskSwitchContext>:
	if (uxSchedulerSuspended != (UBaseType_t)pdFALSE) {
    7c6c:	4b29      	ldr	r3, [pc, #164]	; (7d14 <vTaskSwitchContext+0xa8>)
    7c6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
    7c72:	bb5b      	cbnz	r3, 7ccc <vTaskSwitchContext+0x60>
{
    7c74:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
    7c76:	4b27      	ldr	r3, [pc, #156]	; (7d14 <vTaskSwitchContext+0xa8>)
    7c78:	2200      	movs	r2, #0
    7c7a:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
		taskCHECK_FOR_STACK_OVERFLOW();
    7c7e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    7c82:	6812      	ldr	r2, [r2, #0]
    7c84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    7c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    7c8a:	429a      	cmp	r2, r3
    7c8c:	d807      	bhi.n	7c9e <vTaskSwitchContext+0x32>
    7c8e:	4b21      	ldr	r3, [pc, #132]	; (7d14 <vTaskSwitchContext+0xa8>)
    7c90:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
    7c94:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
    7c98:	3134      	adds	r1, #52	; 0x34
    7c9a:	4b1f      	ldr	r3, [pc, #124]	; (7d18 <vTaskSwitchContext+0xac>)
    7c9c:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
    7c9e:	4a1d      	ldr	r2, [pc, #116]	; (7d14 <vTaskSwitchContext+0xa8>)
    7ca0:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
	__asm volatile("clz %0, %1" : "=r"(ucReturn) : "r"(ulBitmap) : "memory");
    7ca4:	fab3 f383 	clz	r3, r3
    7ca8:	b2db      	uxtb	r3, r3
    7caa:	f1c3 031f 	rsb	r3, r3, #31
    7cae:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    7cb2:	0081      	lsls	r1, r0, #2
    7cb4:	440a      	add	r2, r1
    7cb6:	6b12      	ldr	r2, [r2, #48]	; 0x30
    7cb8:	b96a      	cbnz	r2, 7cd6 <vTaskSwitchContext+0x6a>
	__asm volatile("	mov %0, %1												\n"
    7cba:	f04f 0380 	mov.w	r3, #128	; 0x80
    7cbe:	f383 8811 	msr	BASEPRI, r3
    7cc2:	f3bf 8f6f 	isb	sy
    7cc6:	f3bf 8f4f 	dsb	sy
    7cca:	e7fe      	b.n	7cca <vTaskSwitchContext+0x5e>
		xYieldPending = pdTRUE;
    7ccc:	2201      	movs	r2, #1
    7cce:	4b11      	ldr	r3, [pc, #68]	; (7d14 <vTaskSwitchContext+0xa8>)
    7cd0:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    7cd4:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
    7cd6:	4a0f      	ldr	r2, [pc, #60]	; (7d14 <vTaskSwitchContext+0xa8>)
    7cd8:	0099      	lsls	r1, r3, #2
    7cda:	18cc      	adds	r4, r1, r3
    7cdc:	00a0      	lsls	r0, r4, #2
    7cde:	4410      	add	r0, r2
    7ce0:	6b44      	ldr	r4, [r0, #52]	; 0x34
    7ce2:	6864      	ldr	r4, [r4, #4]
    7ce4:	6344      	str	r4, [r0, #52]	; 0x34
    7ce6:	3230      	adds	r2, #48	; 0x30
    7ce8:	4419      	add	r1, r3
    7cea:	0088      	lsls	r0, r1, #2
    7cec:	4601      	mov	r1, r0
    7cee:	3008      	adds	r0, #8
    7cf0:	4402      	add	r2, r0
    7cf2:	4294      	cmp	r4, r2
    7cf4:	d009      	beq.n	7d0a <vTaskSwitchContext+0x9e>
    7cf6:	4907      	ldr	r1, [pc, #28]	; (7d14 <vTaskSwitchContext+0xa8>)
    7cf8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7cfc:	009a      	lsls	r2, r3, #2
    7cfe:	440a      	add	r2, r1
    7d00:	6b53      	ldr	r3, [r2, #52]	; 0x34
    7d02:	68db      	ldr	r3, [r3, #12]
    7d04:	f8c1 30d8 	str.w	r3, [r1, #216]	; 0xd8
    7d08:	bd10      	pop	{r4, pc}
    7d0a:	6860      	ldr	r0, [r4, #4]
    7d0c:	4a01      	ldr	r2, [pc, #4]	; (7d14 <vTaskSwitchContext+0xa8>)
    7d0e:	440a      	add	r2, r1
    7d10:	6350      	str	r0, [r2, #52]	; 0x34
    7d12:	e7f0      	b.n	7cf6 <vTaskSwitchContext+0x8a>
    7d14:	20010a90 	.word	0x20010a90
    7d18:	00005309 	.word	0x00005309

00007d1c <vTaskPlaceOnEventList>:
	configASSERT(pxEventList);
    7d1c:	b940      	cbnz	r0, 7d30 <vTaskPlaceOnEventList+0x14>
    7d1e:	f04f 0380 	mov.w	r3, #128	; 0x80
    7d22:	f383 8811 	msr	BASEPRI, r3
    7d26:	f3bf 8f6f 	isb	sy
    7d2a:	f3bf 8f4f 	dsb	sy
    7d2e:	e7fe      	b.n	7d2e <vTaskPlaceOnEventList+0x12>
{
    7d30:	b510      	push	{r4, lr}
    7d32:	460c      	mov	r4, r1
	vListInsert(pxEventList, &(pxCurrentTCB->xEventListItem));
    7d34:	4b05      	ldr	r3, [pc, #20]	; (7d4c <vTaskPlaceOnEventList+0x30>)
    7d36:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
    7d3a:	3118      	adds	r1, #24
    7d3c:	4b04      	ldr	r3, [pc, #16]	; (7d50 <vTaskPlaceOnEventList+0x34>)
    7d3e:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList(xTicksToWait, pdTRUE);
    7d40:	2101      	movs	r1, #1
    7d42:	4620      	mov	r0, r4
    7d44:	4b03      	ldr	r3, [pc, #12]	; (7d54 <vTaskPlaceOnEventList+0x38>)
    7d46:	4798      	blx	r3
    7d48:	bd10      	pop	{r4, pc}
    7d4a:	bf00      	nop
    7d4c:	20010a90 	.word	0x20010a90
    7d50:	000060d9 	.word	0x000060d9
    7d54:	0000766d 	.word	0x0000766d

00007d58 <vTaskPlaceOnUnorderedEventList>:
	configASSERT(pxEventList);
    7d58:	b168      	cbz	r0, 7d76 <vTaskPlaceOnUnorderedEventList+0x1e>
    7d5a:	4603      	mov	r3, r0
	configASSERT(uxSchedulerSuspended != 0);
    7d5c:	4814      	ldr	r0, [pc, #80]	; (7db0 <vTaskPlaceOnUnorderedEventList+0x58>)
    7d5e:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
    7d62:	b988      	cbnz	r0, 7d88 <vTaskPlaceOnUnorderedEventList+0x30>
    7d64:	f04f 0380 	mov.w	r3, #128	; 0x80
    7d68:	f383 8811 	msr	BASEPRI, r3
    7d6c:	f3bf 8f6f 	isb	sy
    7d70:	f3bf 8f4f 	dsb	sy
    7d74:	e7fe      	b.n	7d74 <vTaskPlaceOnUnorderedEventList+0x1c>
    7d76:	f04f 0380 	mov.w	r3, #128	; 0x80
    7d7a:	f383 8811 	msr	BASEPRI, r3
    7d7e:	f3bf 8f6f 	isb	sy
    7d82:	f3bf 8f4f 	dsb	sy
    7d86:	e7fe      	b.n	7d86 <vTaskPlaceOnUnorderedEventList+0x2e>
{
    7d88:	b510      	push	{r4, lr}
    7d8a:	4618      	mov	r0, r3
    7d8c:	4614      	mov	r4, r2
    7d8e:	460b      	mov	r3, r1
	listSET_LIST_ITEM_VALUE(&(pxCurrentTCB->xEventListItem), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE);
    7d90:	4a07      	ldr	r2, [pc, #28]	; (7db0 <vTaskPlaceOnUnorderedEventList+0x58>)
    7d92:	f8d2 10d8 	ldr.w	r1, [r2, #216]	; 0xd8
    7d96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    7d9a:	618b      	str	r3, [r1, #24]
	vListInsertEnd(pxEventList, &(pxCurrentTCB->xEventListItem));
    7d9c:	f8d2 10d8 	ldr.w	r1, [r2, #216]	; 0xd8
    7da0:	3118      	adds	r1, #24
    7da2:	4b04      	ldr	r3, [pc, #16]	; (7db4 <vTaskPlaceOnUnorderedEventList+0x5c>)
    7da4:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList(xTicksToWait, pdTRUE);
    7da6:	2101      	movs	r1, #1
    7da8:	4620      	mov	r0, r4
    7daa:	4b03      	ldr	r3, [pc, #12]	; (7db8 <vTaskPlaceOnUnorderedEventList+0x60>)
    7dac:	4798      	blx	r3
    7dae:	bd10      	pop	{r4, pc}
    7db0:	20010a90 	.word	0x20010a90
    7db4:	000060c1 	.word	0x000060c1
    7db8:	0000766d 	.word	0x0000766d

00007dbc <vTaskPlaceOnEventListRestricted>:
{
    7dbc:	b538      	push	{r3, r4, r5, lr}
	configASSERT(pxEventList);
    7dbe:	b178      	cbz	r0, 7de0 <vTaskPlaceOnEventListRestricted+0x24>
    7dc0:	460c      	mov	r4, r1
    7dc2:	4615      	mov	r5, r2
	vListInsertEnd(pxEventList, &(pxCurrentTCB->xEventListItem));
    7dc4:	4a0b      	ldr	r2, [pc, #44]	; (7df4 <vTaskPlaceOnEventListRestricted+0x38>)
    7dc6:	f8d2 10d8 	ldr.w	r1, [r2, #216]	; 0xd8
    7dca:	3118      	adds	r1, #24
    7dcc:	4b0a      	ldr	r3, [pc, #40]	; (7df8 <vTaskPlaceOnEventListRestricted+0x3c>)
    7dce:	4798      	blx	r3
	if (xWaitIndefinitely != pdFALSE) {
    7dd0:	b10d      	cbz	r5, 7dd6 <vTaskPlaceOnEventListRestricted+0x1a>
		xTicksToWait = portMAX_DELAY;
    7dd2:	f04f 34ff 	mov.w	r4, #4294967295
	prvAddCurrentTaskToDelayedList(xTicksToWait, xWaitIndefinitely);
    7dd6:	4629      	mov	r1, r5
    7dd8:	4620      	mov	r0, r4
    7dda:	4b08      	ldr	r3, [pc, #32]	; (7dfc <vTaskPlaceOnEventListRestricted+0x40>)
    7ddc:	4798      	blx	r3
    7dde:	bd38      	pop	{r3, r4, r5, pc}
    7de0:	f04f 0380 	mov.w	r3, #128	; 0x80
    7de4:	f383 8811 	msr	BASEPRI, r3
    7de8:	f3bf 8f6f 	isb	sy
    7dec:	f3bf 8f4f 	dsb	sy
    7df0:	e7fe      	b.n	7df0 <vTaskPlaceOnEventListRestricted+0x34>
    7df2:	bf00      	nop
    7df4:	20010a90 	.word	0x20010a90
    7df8:	000060c1 	.word	0x000060c1
    7dfc:	0000766d 	.word	0x0000766d

00007e00 <xTaskRemoveFromEventList>:
{
    7e00:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxEventList);
    7e02:	68c3      	ldr	r3, [r0, #12]
    7e04:	68dc      	ldr	r4, [r3, #12]
	configASSERT(pxUnblockedTCB);
    7e06:	b34c      	cbz	r4, 7e5c <xTaskRemoveFromEventList+0x5c>
	(void)uxListRemove(&(pxUnblockedTCB->xEventListItem));
    7e08:	f104 0518 	add.w	r5, r4, #24
    7e0c:	4628      	mov	r0, r5
    7e0e:	4b1b      	ldr	r3, [pc, #108]	; (7e7c <xTaskRemoveFromEventList+0x7c>)
    7e10:	4798      	blx	r3
	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    7e12:	4b1b      	ldr	r3, [pc, #108]	; (7e80 <xTaskRemoveFromEventList+0x80>)
    7e14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
    7e18:	bb4b      	cbnz	r3, 7e6e <xTaskRemoveFromEventList+0x6e>
		(void)uxListRemove(&(pxUnblockedTCB->xStateListItem));
    7e1a:	1d25      	adds	r5, r4, #4
    7e1c:	4628      	mov	r0, r5
    7e1e:	4b17      	ldr	r3, [pc, #92]	; (7e7c <xTaskRemoveFromEventList+0x7c>)
    7e20:	4798      	blx	r3
		prvAddTaskToReadyList(pxUnblockedTCB);
    7e22:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    7e24:	2101      	movs	r1, #1
    7e26:	4099      	lsls	r1, r3
    7e28:	4a15      	ldr	r2, [pc, #84]	; (7e80 <xTaskRemoveFromEventList+0x80>)
    7e2a:	f8d2 00e4 	ldr.w	r0, [r2, #228]	; 0xe4
    7e2e:	4301      	orrs	r1, r0
    7e30:	f8c2 10e4 	str.w	r1, [r2, #228]	; 0xe4
    7e34:	3230      	adds	r2, #48	; 0x30
    7e36:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7e3a:	0098      	lsls	r0, r3, #2
    7e3c:	4629      	mov	r1, r5
    7e3e:	4410      	add	r0, r2
    7e40:	4b10      	ldr	r3, [pc, #64]	; (7e84 <xTaskRemoveFromEventList+0x84>)
    7e42:	4798      	blx	r3
	if (pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority) {
    7e44:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    7e46:	4b0e      	ldr	r3, [pc, #56]	; (7e80 <xTaskRemoveFromEventList+0x80>)
    7e48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    7e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7e4e:	429a      	cmp	r2, r3
    7e50:	d912      	bls.n	7e78 <xTaskRemoveFromEventList+0x78>
		xYieldPending = pdTRUE;
    7e52:	2001      	movs	r0, #1
    7e54:	4b0a      	ldr	r3, [pc, #40]	; (7e80 <xTaskRemoveFromEventList+0x80>)
    7e56:	f8c3 00fc 	str.w	r0, [r3, #252]	; 0xfc
    7e5a:	bd38      	pop	{r3, r4, r5, pc}
    7e5c:	f04f 0380 	mov.w	r3, #128	; 0x80
    7e60:	f383 8811 	msr	BASEPRI, r3
    7e64:	f3bf 8f6f 	isb	sy
    7e68:	f3bf 8f4f 	dsb	sy
    7e6c:	e7fe      	b.n	7e6c <xTaskRemoveFromEventList+0x6c>
		vListInsertEnd(&(xPendingReadyList), &(pxUnblockedTCB->xEventListItem));
    7e6e:	4629      	mov	r1, r5
    7e70:	4805      	ldr	r0, [pc, #20]	; (7e88 <xTaskRemoveFromEventList+0x88>)
    7e72:	4b04      	ldr	r3, [pc, #16]	; (7e84 <xTaskRemoveFromEventList+0x84>)
    7e74:	4798      	blx	r3
    7e76:	e7e5      	b.n	7e44 <xTaskRemoveFromEventList+0x44>
		xReturn = pdFALSE;
    7e78:	2000      	movs	r0, #0
}
    7e7a:	bd38      	pop	{r3, r4, r5, pc}
    7e7c:	0000610d 	.word	0x0000610d
    7e80:	20010a90 	.word	0x20010a90
    7e84:	000060c1 	.word	0x000060c1
    7e88:	20010aa4 	.word	0x20010aa4

00007e8c <vTaskRemoveFromUnorderedEventList>:
	configASSERT(uxSchedulerSuspended != pdFALSE);
    7e8c:	4b1e      	ldr	r3, [pc, #120]	; (7f08 <vTaskRemoveFromUnorderedEventList+0x7c>)
    7e8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
    7e92:	b943      	cbnz	r3, 7ea6 <vTaskRemoveFromUnorderedEventList+0x1a>
    7e94:	f04f 0380 	mov.w	r3, #128	; 0x80
    7e98:	f383 8811 	msr	BASEPRI, r3
    7e9c:	f3bf 8f6f 	isb	sy
    7ea0:	f3bf 8f4f 	dsb	sy
    7ea4:	e7fe      	b.n	7ea4 <vTaskRemoveFromUnorderedEventList+0x18>
{
    7ea6:	b570      	push	{r4, r5, r6, lr}
	listSET_LIST_ITEM_VALUE(pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE);
    7ea8:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
    7eac:	6001      	str	r1, [r0, #0]
	pxUnblockedTCB = (TCB_t *)listGET_LIST_ITEM_OWNER(pxEventListItem);
    7eae:	68c4      	ldr	r4, [r0, #12]
	configASSERT(pxUnblockedTCB);
    7eb0:	b304      	cbz	r4, 7ef4 <vTaskRemoveFromUnorderedEventList+0x68>
	(void)uxListRemove(pxEventListItem);
    7eb2:	4d16      	ldr	r5, [pc, #88]	; (7f0c <vTaskRemoveFromUnorderedEventList+0x80>)
    7eb4:	47a8      	blx	r5
	(void)uxListRemove(&(pxUnblockedTCB->xStateListItem));
    7eb6:	1d26      	adds	r6, r4, #4
    7eb8:	4630      	mov	r0, r6
    7eba:	47a8      	blx	r5
	prvAddTaskToReadyList(pxUnblockedTCB);
    7ebc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    7ebe:	2201      	movs	r2, #1
    7ec0:	409a      	lsls	r2, r3
    7ec2:	4d11      	ldr	r5, [pc, #68]	; (7f08 <vTaskRemoveFromUnorderedEventList+0x7c>)
    7ec4:	f8d5 10e4 	ldr.w	r1, [r5, #228]	; 0xe4
    7ec8:	430a      	orrs	r2, r1
    7eca:	f8c5 20e4 	str.w	r2, [r5, #228]	; 0xe4
    7ece:	f105 0030 	add.w	r0, r5, #48	; 0x30
    7ed2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7ed6:	009a      	lsls	r2, r3, #2
    7ed8:	4631      	mov	r1, r6
    7eda:	4410      	add	r0, r2
    7edc:	4b0c      	ldr	r3, [pc, #48]	; (7f10 <vTaskRemoveFromUnorderedEventList+0x84>)
    7ede:	4798      	blx	r3
	if (pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority) {
    7ee0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    7ee2:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
    7ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7ee8:	429a      	cmp	r2, r3
    7eea:	d902      	bls.n	7ef2 <vTaskRemoveFromUnorderedEventList+0x66>
		xYieldPending = pdTRUE;
    7eec:	2201      	movs	r2, #1
    7eee:	f8c5 20fc 	str.w	r2, [r5, #252]	; 0xfc
    7ef2:	bd70      	pop	{r4, r5, r6, pc}
    7ef4:	f04f 0380 	mov.w	r3, #128	; 0x80
    7ef8:	f383 8811 	msr	BASEPRI, r3
    7efc:	f3bf 8f6f 	isb	sy
    7f00:	f3bf 8f4f 	dsb	sy
    7f04:	e7fe      	b.n	7f04 <vTaskRemoveFromUnorderedEventList+0x78>
    7f06:	bf00      	nop
    7f08:	20010a90 	.word	0x20010a90
    7f0c:	0000610d 	.word	0x0000610d
    7f10:	000060c1 	.word	0x000060c1

00007f14 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount  = xNumOfOverflows;
    7f14:	4b03      	ldr	r3, [pc, #12]	; (7f24 <vTaskInternalSetTimeOutState+0x10>)
    7f16:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
    7f1a:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    7f1c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
    7f20:	6043      	str	r3, [r0, #4]
    7f22:	4770      	bx	lr
    7f24:	20010a90 	.word	0x20010a90

00007f28 <xTaskCheckForTimeOut>:
{
    7f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT(pxTimeOut);
    7f2a:	b1f0      	cbz	r0, 7f6a <xTaskCheckForTimeOut+0x42>
    7f2c:	4605      	mov	r5, r0
	configASSERT(pxTicksToWait);
    7f2e:	b329      	cbz	r1, 7f7c <xTaskCheckForTimeOut+0x54>
    7f30:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
    7f32:	4b1c      	ldr	r3, [pc, #112]	; (7fa4 <xTaskCheckForTimeOut+0x7c>)
    7f34:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
    7f36:	4b1c      	ldr	r3, [pc, #112]	; (7fa8 <xTaskCheckForTimeOut+0x80>)
    7f38:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
		const TickType_t xElapsedTime    = xConstTickCount - pxTimeOut->xTimeOnEntering;
    7f3c:	6869      	ldr	r1, [r5, #4]
    7f3e:	1a42      	subs	r2, r0, r1
		    if (*pxTicksToWait == portMAX_DELAY) {
    7f40:	6823      	ldr	r3, [r4, #0]
    7f42:	f1b3 3fff 	cmp.w	r3, #4294967295
    7f46:	d029      	beq.n	7f9c <xTaskCheckForTimeOut+0x74>
		    if ((xNumOfOverflows != pxTimeOut->xOverflowCount)
    7f48:	682f      	ldr	r7, [r5, #0]
    7f4a:	4e17      	ldr	r6, [pc, #92]	; (7fa8 <xTaskCheckForTimeOut+0x80>)
    7f4c:	f8d6 60f4 	ldr.w	r6, [r6, #244]	; 0xf4
    7f50:	42b7      	cmp	r7, r6
    7f52:	d001      	beq.n	7f58 <xTaskCheckForTimeOut+0x30>
		        && (xConstTickCount >= pxTimeOut->xTimeOnEntering)) /*lint !e525 Indentation preferred as is to make
    7f54:	4288      	cmp	r0, r1
    7f56:	d223      	bcs.n	7fa0 <xTaskCheckForTimeOut+0x78>
		} else if (xElapsedTime < *pxTicksToWait) /*lint !e961 Explicit casting is only redundant with some compilers,
    7f58:	429a      	cmp	r2, r3
    7f5a:	d318      	bcc.n	7f8e <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait = 0;
    7f5c:	2300      	movs	r3, #0
    7f5e:	6023      	str	r3, [r4, #0]
			xReturn        = pdTRUE;
    7f60:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
    7f62:	4b12      	ldr	r3, [pc, #72]	; (7fac <xTaskCheckForTimeOut+0x84>)
    7f64:	4798      	blx	r3
}
    7f66:	4620      	mov	r0, r4
    7f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7f6a:	f04f 0380 	mov.w	r3, #128	; 0x80
    7f6e:	f383 8811 	msr	BASEPRI, r3
    7f72:	f3bf 8f6f 	isb	sy
    7f76:	f3bf 8f4f 	dsb	sy
    7f7a:	e7fe      	b.n	7f7a <xTaskCheckForTimeOut+0x52>
    7f7c:	f04f 0380 	mov.w	r3, #128	; 0x80
    7f80:	f383 8811 	msr	BASEPRI, r3
    7f84:	f3bf 8f6f 	isb	sy
    7f88:	f3bf 8f4f 	dsb	sy
    7f8c:	e7fe      	b.n	7f8c <xTaskCheckForTimeOut+0x64>
			*pxTicksToWait -= xElapsedTime;
    7f8e:	1a9b      	subs	r3, r3, r2
    7f90:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState(pxTimeOut);
    7f92:	4628      	mov	r0, r5
    7f94:	4b06      	ldr	r3, [pc, #24]	; (7fb0 <xTaskCheckForTimeOut+0x88>)
    7f96:	4798      	blx	r3
			xReturn = pdFALSE;
    7f98:	2400      	movs	r4, #0
    7f9a:	e7e2      	b.n	7f62 <xTaskCheckForTimeOut+0x3a>
			xReturn = pdFALSE;
    7f9c:	2400      	movs	r4, #0
    7f9e:	e7e0      	b.n	7f62 <xTaskCheckForTimeOut+0x3a>
			xReturn = pdTRUE;
    7fa0:	2401      	movs	r4, #1
    7fa2:	e7de      	b.n	7f62 <xTaskCheckForTimeOut+0x3a>
    7fa4:	00006205 	.word	0x00006205
    7fa8:	20010a90 	.word	0x20010a90
    7fac:	00006249 	.word	0x00006249
    7fb0:	00007f15 	.word	0x00007f15

00007fb4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
    7fb4:	2201      	movs	r2, #1
    7fb6:	4b02      	ldr	r3, [pc, #8]	; (7fc0 <vTaskMissedYield+0xc>)
    7fb8:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    7fbc:	4770      	bx	lr
    7fbe:	bf00      	nop
    7fc0:	20010a90 	.word	0x20010a90

00007fc4 <uxTaskGetStackHighWaterMark>:
{
    7fc4:	b508      	push	{r3, lr}
	pxTCB = prvGetTCBFromHandle(xTask);
    7fc6:	4603      	mov	r3, r0
    7fc8:	b118      	cbz	r0, 7fd2 <uxTaskGetStackHighWaterMark+0xe>
	uxReturn = (UBaseType_t)prvTaskCheckFreeStackSpace(pucEndOfStack);
    7fca:	6b18      	ldr	r0, [r3, #48]	; 0x30
    7fcc:	4b03      	ldr	r3, [pc, #12]	; (7fdc <uxTaskGetStackHighWaterMark+0x18>)
    7fce:	4798      	blx	r3
}
    7fd0:	bd08      	pop	{r3, pc}
	pxTCB = prvGetTCBFromHandle(xTask);
    7fd2:	4b03      	ldr	r3, [pc, #12]	; (7fe0 <uxTaskGetStackHighWaterMark+0x1c>)
    7fd4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    7fd8:	e7f7      	b.n	7fca <uxTaskGetStackHighWaterMark+0x6>
    7fda:	bf00      	nop
    7fdc:	000073f1 	.word	0x000073f1
    7fe0:	20010a90 	.word	0x20010a90

00007fe4 <xTaskGetCurrentTaskHandle>:
	xReturn = pxCurrentTCB;
    7fe4:	4b01      	ldr	r3, [pc, #4]	; (7fec <xTaskGetCurrentTaskHandle+0x8>)
    7fe6:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
}
    7fea:	4770      	bx	lr
    7fec:	20010a90 	.word	0x20010a90

00007ff0 <xTaskGetSchedulerState>:
	if (xSchedulerRunning == pdFALSE) {
    7ff0:	4b06      	ldr	r3, [pc, #24]	; (800c <xTaskGetSchedulerState+0x1c>)
    7ff2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
    7ff6:	b12b      	cbz	r3, 8004 <xTaskGetSchedulerState+0x14>
		if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    7ff8:	4b04      	ldr	r3, [pc, #16]	; (800c <xTaskGetSchedulerState+0x1c>)
    7ffa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
    7ffe:	b91b      	cbnz	r3, 8008 <xTaskGetSchedulerState+0x18>
			xReturn = taskSCHEDULER_RUNNING;
    8000:	2002      	movs	r0, #2
    8002:	4770      	bx	lr
		xReturn = taskSCHEDULER_NOT_STARTED;
    8004:	2001      	movs	r0, #1
    8006:	4770      	bx	lr
			xReturn = taskSCHEDULER_SUSPENDED;
    8008:	2000      	movs	r0, #0
}
    800a:	4770      	bx	lr
    800c:	20010a90 	.word	0x20010a90

00008010 <xTaskPriorityInherit>:
	if (pxMutexHolder != NULL) {
    8010:	2800      	cmp	r0, #0
    8012:	d05d      	beq.n	80d0 <xTaskPriorityInherit+0xc0>
{
    8014:	b538      	push	{r3, r4, r5, lr}
    8016:	4604      	mov	r4, r0
		if (pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority) {
    8018:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    801a:	492e      	ldr	r1, [pc, #184]	; (80d4 <xTaskPriorityInherit+0xc4>)
    801c:	f8d1 10d8 	ldr.w	r1, [r1, #216]	; 0xd8
    8020:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    8022:	428a      	cmp	r2, r1
    8024:	d249      	bcs.n	80ba <xTaskPriorityInherit+0xaa>
			if ((listGET_LIST_ITEM_VALUE(&(pxMutexHolderTCB->xEventListItem)) & taskEVENT_LIST_ITEM_VALUE_IN_USE)
    8026:	6981      	ldr	r1, [r0, #24]
    8028:	2900      	cmp	r1, #0
    802a:	db06      	blt.n	803a <xTaskPriorityInherit+0x2a>
				listSET_LIST_ITEM_VALUE(
    802c:	4929      	ldr	r1, [pc, #164]	; (80d4 <xTaskPriorityInherit+0xc4>)
    802e:	f8d1 10d8 	ldr.w	r1, [r1, #216]	; 0xd8
    8032:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    8034:	f1c1 0105 	rsb	r1, r1, #5
    8038:	6181      	str	r1, [r0, #24]
			if (listIS_CONTAINED_WITHIN(&(pxReadyTasksLists[pxMutexHolderTCB->uxPriority]),
    803a:	6960      	ldr	r0, [r4, #20]
    803c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    8040:	0091      	lsls	r1, r2, #2
    8042:	4a25      	ldr	r2, [pc, #148]	; (80d8 <xTaskPriorityInherit+0xc8>)
    8044:	440a      	add	r2, r1
			    != pdFALSE) {
    8046:	4290      	cmp	r0, r2
    8048:	d008      	beq.n	805c <xTaskPriorityInherit+0x4c>
    804a:	2200      	movs	r2, #0
			if (listIS_CONTAINED_WITHIN(&(pxReadyTasksLists[pxMutexHolderTCB->uxPriority]),
    804c:	b942      	cbnz	r2, 8060 <xTaskPriorityInherit+0x50>
				pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    804e:	4a21      	ldr	r2, [pc, #132]	; (80d4 <xTaskPriorityInherit+0xc4>)
    8050:	f8d2 20d8 	ldr.w	r2, [r2, #216]	; 0xd8
    8054:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    8056:	62e2      	str	r2, [r4, #44]	; 0x2c
			xReturn = pdTRUE;
    8058:	2001      	movs	r0, #1
    805a:	bd38      	pop	{r3, r4, r5, pc}
			    != pdFALSE) {
    805c:	2201      	movs	r2, #1
    805e:	e7f5      	b.n	804c <xTaskPriorityInherit+0x3c>
				if (uxListRemove(&(pxMutexHolderTCB->xStateListItem)) == (UBaseType_t)0) {
    8060:	1d25      	adds	r5, r4, #4
    8062:	4628      	mov	r0, r5
    8064:	4b1d      	ldr	r3, [pc, #116]	; (80dc <xTaskPriorityInherit+0xcc>)
    8066:	4798      	blx	r3
    8068:	b980      	cbnz	r0, 808c <xTaskPriorityInherit+0x7c>
					taskRESET_READY_PRIORITY(pxMutexHolderTCB->uxPriority);
    806a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    806c:	eb02 0382 	add.w	r3, r2, r2, lsl #2
    8070:	0099      	lsls	r1, r3, #2
    8072:	4b18      	ldr	r3, [pc, #96]	; (80d4 <xTaskPriorityInherit+0xc4>)
    8074:	440b      	add	r3, r1
    8076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8078:	b943      	cbnz	r3, 808c <xTaskPriorityInherit+0x7c>
    807a:	2301      	movs	r3, #1
    807c:	4093      	lsls	r3, r2
    807e:	4915      	ldr	r1, [pc, #84]	; (80d4 <xTaskPriorityInherit+0xc4>)
    8080:	f8d1 20e4 	ldr.w	r2, [r1, #228]	; 0xe4
    8084:	ea22 0203 	bic.w	r2, r2, r3
    8088:	f8c1 20e4 	str.w	r2, [r1, #228]	; 0xe4
				pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    808c:	4811      	ldr	r0, [pc, #68]	; (80d4 <xTaskPriorityInherit+0xc4>)
    808e:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
    8092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8094:	62e3      	str	r3, [r4, #44]	; 0x2c
				prvAddTaskToReadyList(pxMutexHolderTCB);
    8096:	2401      	movs	r4, #1
    8098:	fa04 f203 	lsl.w	r2, r4, r3
    809c:	f8d0 10e4 	ldr.w	r1, [r0, #228]	; 0xe4
    80a0:	430a      	orrs	r2, r1
    80a2:	f8c0 20e4 	str.w	r2, [r0, #228]	; 0xe4
    80a6:	3030      	adds	r0, #48	; 0x30
    80a8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    80ac:	009a      	lsls	r2, r3, #2
    80ae:	4629      	mov	r1, r5
    80b0:	4410      	add	r0, r2
    80b2:	4b0b      	ldr	r3, [pc, #44]	; (80e0 <xTaskPriorityInherit+0xd0>)
    80b4:	4798      	blx	r3
			xReturn = pdTRUE;
    80b6:	4620      	mov	r0, r4
    80b8:	bd38      	pop	{r3, r4, r5, pc}
			if (pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority) {
    80ba:	6d42      	ldr	r2, [r0, #84]	; 0x54
    80bc:	4b05      	ldr	r3, [pc, #20]	; (80d4 <xTaskPriorityInherit+0xc4>)
    80be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    80c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    80c4:	429a      	cmp	r2, r3
    80c6:	d201      	bcs.n	80cc <xTaskPriorityInherit+0xbc>
				xReturn = pdTRUE;
    80c8:	2001      	movs	r0, #1
}
    80ca:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t   xReturn          = pdFALSE;
    80cc:	2000      	movs	r0, #0
    80ce:	bd38      	pop	{r3, r4, r5, pc}
    80d0:	2000      	movs	r0, #0
    80d2:	4770      	bx	lr
    80d4:	20010a90 	.word	0x20010a90
    80d8:	20010ac0 	.word	0x20010ac0
    80dc:	0000610d 	.word	0x0000610d
    80e0:	000060c1 	.word	0x000060c1

000080e4 <xTaskPriorityDisinherit>:
	if (pxMutexHolder != NULL) {
    80e4:	2800      	cmp	r0, #0
    80e6:	d051      	beq.n	818c <xTaskPriorityDisinherit+0xa8>
{
    80e8:	b538      	push	{r3, r4, r5, lr}
    80ea:	4604      	mov	r4, r0
		configASSERT(pxTCB == pxCurrentTCB);
    80ec:	4a2a      	ldr	r2, [pc, #168]	; (8198 <xTaskPriorityDisinherit+0xb4>)
    80ee:	f8d2 20d8 	ldr.w	r2, [r2, #216]	; 0xd8
    80f2:	4290      	cmp	r0, r2
    80f4:	d008      	beq.n	8108 <xTaskPriorityDisinherit+0x24>
    80f6:	f04f 0380 	mov.w	r3, #128	; 0x80
    80fa:	f383 8811 	msr	BASEPRI, r3
    80fe:	f3bf 8f6f 	isb	sy
    8102:	f3bf 8f4f 	dsb	sy
    8106:	e7fe      	b.n	8106 <xTaskPriorityDisinherit+0x22>
		configASSERT(pxTCB->uxMutexesHeld);
    8108:	6d82      	ldr	r2, [r0, #88]	; 0x58
    810a:	b942      	cbnz	r2, 811e <xTaskPriorityDisinherit+0x3a>
    810c:	f04f 0380 	mov.w	r3, #128	; 0x80
    8110:	f383 8811 	msr	BASEPRI, r3
    8114:	f3bf 8f6f 	isb	sy
    8118:	f3bf 8f4f 	dsb	sy
    811c:	e7fe      	b.n	811c <xTaskPriorityDisinherit+0x38>
		(pxTCB->uxMutexesHeld)--;
    811e:	3a01      	subs	r2, #1
    8120:	6582      	str	r2, [r0, #88]	; 0x58
		if (pxTCB->uxPriority != pxTCB->uxBasePriority) {
    8122:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    8124:	6d61      	ldr	r1, [r4, #84]	; 0x54
    8126:	4288      	cmp	r0, r1
    8128:	d032      	beq.n	8190 <xTaskPriorityDisinherit+0xac>
			if (pxTCB->uxMutexesHeld == (UBaseType_t)0) {
    812a:	2a00      	cmp	r2, #0
    812c:	d132      	bne.n	8194 <xTaskPriorityDisinherit+0xb0>
				if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t)0) {
    812e:	1d25      	adds	r5, r4, #4
    8130:	4628      	mov	r0, r5
    8132:	4b1a      	ldr	r3, [pc, #104]	; (819c <xTaskPriorityDisinherit+0xb8>)
    8134:	4798      	blx	r3
    8136:	b988      	cbnz	r0, 815c <xTaskPriorityDisinherit+0x78>
					taskRESET_READY_PRIORITY(pxTCB->uxPriority);
    8138:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    813a:	eb02 0382 	add.w	r3, r2, r2, lsl #2
    813e:	0099      	lsls	r1, r3, #2
    8140:	4b15      	ldr	r3, [pc, #84]	; (8198 <xTaskPriorityDisinherit+0xb4>)
    8142:	440b      	add	r3, r1
    8144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8146:	b94b      	cbnz	r3, 815c <xTaskPriorityDisinherit+0x78>
    8148:	2301      	movs	r3, #1
    814a:	fa03 f202 	lsl.w	r2, r3, r2
    814e:	4912      	ldr	r1, [pc, #72]	; (8198 <xTaskPriorityDisinherit+0xb4>)
    8150:	f8d1 30e4 	ldr.w	r3, [r1, #228]	; 0xe4
    8154:	ea23 0302 	bic.w	r3, r3, r2
    8158:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    815c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    815e:	62e3      	str	r3, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE(
    8160:	f1c3 0205 	rsb	r2, r3, #5
    8164:	61a2      	str	r2, [r4, #24]
				prvAddTaskToReadyList(pxTCB);
    8166:	2401      	movs	r4, #1
    8168:	fa04 f103 	lsl.w	r1, r4, r3
    816c:	4a0a      	ldr	r2, [pc, #40]	; (8198 <xTaskPriorityDisinherit+0xb4>)
    816e:	f8d2 00e4 	ldr.w	r0, [r2, #228]	; 0xe4
    8172:	4301      	orrs	r1, r0
    8174:	f8c2 10e4 	str.w	r1, [r2, #228]	; 0xe4
    8178:	3230      	adds	r2, #48	; 0x30
    817a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    817e:	0098      	lsls	r0, r3, #2
    8180:	4629      	mov	r1, r5
    8182:	4410      	add	r0, r2
    8184:	4b06      	ldr	r3, [pc, #24]	; (81a0 <xTaskPriorityDisinherit+0xbc>)
    8186:	4798      	blx	r3
				xReturn = pdTRUE;
    8188:	4620      	mov	r0, r4
    818a:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t   xReturn = pdFALSE;
    818c:	2000      	movs	r0, #0
    818e:	4770      	bx	lr
    8190:	2000      	movs	r0, #0
    8192:	bd38      	pop	{r3, r4, r5, pc}
    8194:	2000      	movs	r0, #0
}
    8196:	bd38      	pop	{r3, r4, r5, pc}
    8198:	20010a90 	.word	0x20010a90
    819c:	0000610d 	.word	0x0000610d
    81a0:	000060c1 	.word	0x000060c1

000081a4 <vTaskPriorityDisinheritAfterTimeout>:
	if (pxMutexHolder != NULL) {
    81a4:	2800      	cmp	r0, #0
    81a6:	d061      	beq.n	826c <vTaskPriorityDisinheritAfterTimeout+0xc8>
{
    81a8:	b538      	push	{r3, r4, r5, lr}
    81aa:	4604      	mov	r4, r0
		configASSERT(pxTCB->uxMutexesHeld);
    81ac:	6d80      	ldr	r0, [r0, #88]	; 0x58
    81ae:	b940      	cbnz	r0, 81c2 <vTaskPriorityDisinheritAfterTimeout+0x1e>
    81b0:	f04f 0380 	mov.w	r3, #128	; 0x80
    81b4:	f383 8811 	msr	BASEPRI, r3
    81b8:	f3bf 8f6f 	isb	sy
    81bc:	f3bf 8f4f 	dsb	sy
    81c0:	e7fe      	b.n	81c0 <vTaskPriorityDisinheritAfterTimeout+0x1c>
		if (pxTCB->uxBasePriority < uxHighestPriorityWaitingTask) {
    81c2:	6d62      	ldr	r2, [r4, #84]	; 0x54
    81c4:	428a      	cmp	r2, r1
    81c6:	d200      	bcs.n	81ca <vTaskPriorityDisinheritAfterTimeout+0x26>
			uxPriorityToUse = uxHighestPriorityWaitingTask;
    81c8:	460a      	mov	r2, r1
		if (pxTCB->uxPriority != uxPriorityToUse) {
    81ca:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    81cc:	428a      	cmp	r2, r1
    81ce:	d001      	beq.n	81d4 <vTaskPriorityDisinheritAfterTimeout+0x30>
			if (pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld) {
    81d0:	2801      	cmp	r0, #1
    81d2:	d000      	beq.n	81d6 <vTaskPriorityDisinheritAfterTimeout+0x32>
    81d4:	bd38      	pop	{r3, r4, r5, pc}
				configASSERT(pxTCB != pxCurrentTCB);
    81d6:	4826      	ldr	r0, [pc, #152]	; (8270 <vTaskPriorityDisinheritAfterTimeout+0xcc>)
    81d8:	f8d0 00d8 	ldr.w	r0, [r0, #216]	; 0xd8
    81dc:	4284      	cmp	r4, r0
    81de:	d108      	bne.n	81f2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
    81e0:	f04f 0380 	mov.w	r3, #128	; 0x80
    81e4:	f383 8811 	msr	BASEPRI, r3
    81e8:	f3bf 8f6f 	isb	sy
    81ec:	f3bf 8f4f 	dsb	sy
    81f0:	e7fe      	b.n	81f0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
				pxTCB->uxPriority     = uxPriorityToUse;
    81f2:	62e2      	str	r2, [r4, #44]	; 0x2c
				if ((listGET_LIST_ITEM_VALUE(&(pxTCB->xEventListItem)) & taskEVENT_LIST_ITEM_VALUE_IN_USE) == 0UL) {
    81f4:	69a0      	ldr	r0, [r4, #24]
    81f6:	2800      	cmp	r0, #0
    81f8:	db02      	blt.n	8200 <vTaskPriorityDisinheritAfterTimeout+0x5c>
					listSET_LIST_ITEM_VALUE(&(pxTCB->xEventListItem),
    81fa:	f1c2 0205 	rsb	r2, r2, #5
    81fe:	61a2      	str	r2, [r4, #24]
				if (listIS_CONTAINED_WITHIN(&(pxReadyTasksLists[uxPriorityUsedOnEntry]), &(pxTCB->xStateListItem))
    8200:	6963      	ldr	r3, [r4, #20]
    8202:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    8206:	0088      	lsls	r0, r1, #2
    8208:	4a1a      	ldr	r2, [pc, #104]	; (8274 <vTaskPriorityDisinheritAfterTimeout+0xd0>)
    820a:	4402      	add	r2, r0
				    != pdFALSE) {
    820c:	4293      	cmp	r3, r2
    820e:	d12b      	bne.n	8268 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    8210:	2201      	movs	r2, #1
				if (listIS_CONTAINED_WITHIN(&(pxReadyTasksLists[uxPriorityUsedOnEntry]), &(pxTCB->xStateListItem))
    8212:	2a00      	cmp	r2, #0
    8214:	d0de      	beq.n	81d4 <vTaskPriorityDisinheritAfterTimeout+0x30>
					if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t)0) {
    8216:	1d25      	adds	r5, r4, #4
    8218:	4628      	mov	r0, r5
    821a:	4b17      	ldr	r3, [pc, #92]	; (8278 <vTaskPriorityDisinheritAfterTimeout+0xd4>)
    821c:	4798      	blx	r3
    821e:	b988      	cbnz	r0, 8244 <vTaskPriorityDisinheritAfterTimeout+0xa0>
						taskRESET_READY_PRIORITY(pxTCB->uxPriority);
    8220:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    8222:	eb02 0382 	add.w	r3, r2, r2, lsl #2
    8226:	0099      	lsls	r1, r3, #2
    8228:	4b11      	ldr	r3, [pc, #68]	; (8270 <vTaskPriorityDisinheritAfterTimeout+0xcc>)
    822a:	440b      	add	r3, r1
    822c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    822e:	b94b      	cbnz	r3, 8244 <vTaskPriorityDisinheritAfterTimeout+0xa0>
    8230:	2301      	movs	r3, #1
    8232:	fa03 f202 	lsl.w	r2, r3, r2
    8236:	490e      	ldr	r1, [pc, #56]	; (8270 <vTaskPriorityDisinheritAfterTimeout+0xcc>)
    8238:	f8d1 30e4 	ldr.w	r3, [r1, #228]	; 0xe4
    823c:	ea23 0302 	bic.w	r3, r3, r2
    8240:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
					prvAddTaskToReadyList(pxTCB);
    8244:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    8246:	2101      	movs	r1, #1
    8248:	4099      	lsls	r1, r3
    824a:	4a09      	ldr	r2, [pc, #36]	; (8270 <vTaskPriorityDisinheritAfterTimeout+0xcc>)
    824c:	f8d2 00e4 	ldr.w	r0, [r2, #228]	; 0xe4
    8250:	4301      	orrs	r1, r0
    8252:	f8c2 10e4 	str.w	r1, [r2, #228]	; 0xe4
    8256:	3230      	adds	r2, #48	; 0x30
    8258:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    825c:	0098      	lsls	r0, r3, #2
    825e:	4629      	mov	r1, r5
    8260:	4410      	add	r0, r2
    8262:	4b06      	ldr	r3, [pc, #24]	; (827c <vTaskPriorityDisinheritAfterTimeout+0xd8>)
    8264:	4798      	blx	r3
}
    8266:	e7b5      	b.n	81d4 <vTaskPriorityDisinheritAfterTimeout+0x30>
				    != pdFALSE) {
    8268:	2200      	movs	r2, #0
    826a:	e7d2      	b.n	8212 <vTaskPriorityDisinheritAfterTimeout+0x6e>
    826c:	4770      	bx	lr
    826e:	bf00      	nop
    8270:	20010a90 	.word	0x20010a90
    8274:	20010ac0 	.word	0x20010ac0
    8278:	0000610d 	.word	0x0000610d
    827c:	000060c1 	.word	0x000060c1

00008280 <uxTaskResetEventItemValue>:
	uxReturn = listGET_LIST_ITEM_VALUE(&(pxCurrentTCB->xEventListItem));
    8280:	4b06      	ldr	r3, [pc, #24]	; (829c <uxTaskResetEventItemValue+0x1c>)
    8282:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    8286:	6990      	ldr	r0, [r2, #24]
	listSET_LIST_ITEM_VALUE(
    8288:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    828c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    8290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8292:	f1c3 0305 	rsb	r3, r3, #5
    8296:	6193      	str	r3, [r2, #24]
}
    8298:	4770      	bx	lr
    829a:	bf00      	nop
    829c:	20010a90 	.word	0x20010a90

000082a0 <pvTaskIncrementMutexHeldCount>:
	if (pxCurrentTCB != NULL) {
    82a0:	4b06      	ldr	r3, [pc, #24]	; (82bc <pvTaskIncrementMutexHeldCount+0x1c>)
    82a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    82a6:	b12b      	cbz	r3, 82b4 <pvTaskIncrementMutexHeldCount+0x14>
		(pxCurrentTCB->uxMutexesHeld)++;
    82a8:	4b04      	ldr	r3, [pc, #16]	; (82bc <pvTaskIncrementMutexHeldCount+0x1c>)
    82aa:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    82ae:	6d93      	ldr	r3, [r2, #88]	; 0x58
    82b0:	3301      	adds	r3, #1
    82b2:	6593      	str	r3, [r2, #88]	; 0x58
	return pxCurrentTCB;
    82b4:	4b01      	ldr	r3, [pc, #4]	; (82bc <pvTaskIncrementMutexHeldCount+0x1c>)
    82b6:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
}
    82ba:	4770      	bx	lr
    82bc:	20010a90 	.word	0x20010a90

000082c0 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY(pxCurrentTimerList);
    82c0:	4b06      	ldr	r3, [pc, #24]	; (82dc <prvGetNextExpireTime+0x1c>)
    82c2:	681a      	ldr	r2, [r3, #0]
    82c4:	6813      	ldr	r3, [r2, #0]
    82c6:	fab3 f383 	clz	r3, r3
    82ca:	095b      	lsrs	r3, r3, #5
    82cc:	6003      	str	r3, [r0, #0]
	if (*pxListWasEmpty == pdFALSE) {
    82ce:	b913      	cbnz	r3, 82d6 <prvGetNextExpireTime+0x16>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
    82d0:	68d3      	ldr	r3, [r2, #12]
    82d2:	6818      	ldr	r0, [r3, #0]
    82d4:	4770      	bx	lr
	} else {
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = (TickType_t)0U;
    82d6:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
    82d8:	4770      	bx	lr
    82da:	bf00      	nop
    82dc:	20010b90 	.word	0x20010b90

000082e0 <prvInsertTimerInActiveList>:
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList(Timer_t *const pxTimer, const TickType_t xNextExpiryTime,
                                             const TickType_t xTimeNow, const TickType_t xCommandTime)
{
    82e0:	b508      	push	{r3, lr}
	BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xNextExpiryTime);
    82e2:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
    82e4:	6100      	str	r0, [r0, #16]

	if (xNextExpiryTime <= xTimeNow) {
    82e6:	4291      	cmp	r1, r2
    82e8:	d80c      	bhi.n	8304 <prvInsertTimerInActiveList+0x24>
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if (((TickType_t)(xTimeNow - xCommandTime))
    82ea:	1ad2      	subs	r2, r2, r3
		    >= pxTimer->xTimerPeriodInTicks) /*lint !e961 MISRA exception as the casts are only redundant for some
    82ec:	6983      	ldr	r3, [r0, #24]
		if (((TickType_t)(xTimeNow - xCommandTime))
    82ee:	429a      	cmp	r2, r3
    82f0:	d301      	bcc.n	82f6 <prvInsertTimerInActiveList+0x16>
		                                        ports. */
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    82f2:	2001      	movs	r0, #1
    82f4:	bd08      	pop	{r3, pc}
		} else {
			vListInsert(pxOverflowTimerList, &(pxTimer->xTimerListItem));
    82f6:	1d01      	adds	r1, r0, #4
    82f8:	4b09      	ldr	r3, [pc, #36]	; (8320 <prvInsertTimerInActiveList+0x40>)
    82fa:	6858      	ldr	r0, [r3, #4]
    82fc:	4b09      	ldr	r3, [pc, #36]	; (8324 <prvInsertTimerInActiveList+0x44>)
    82fe:	4798      	blx	r3
	BaseType_t xProcessTimerNow = pdFALSE;
    8300:	2000      	movs	r0, #0
    8302:	bd08      	pop	{r3, pc}
		}
	} else {
		if ((xTimeNow < xCommandTime) && (xNextExpiryTime >= xCommandTime)) {
    8304:	429a      	cmp	r2, r3
    8306:	d201      	bcs.n	830c <prvInsertTimerInActiveList+0x2c>
    8308:	4299      	cmp	r1, r3
    830a:	d206      	bcs.n	831a <prvInsertTimerInActiveList+0x3a>
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		} else {
			vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
    830c:	1d01      	adds	r1, r0, #4
    830e:	4b04      	ldr	r3, [pc, #16]	; (8320 <prvInsertTimerInActiveList+0x40>)
    8310:	6818      	ldr	r0, [r3, #0]
    8312:	4b04      	ldr	r3, [pc, #16]	; (8324 <prvInsertTimerInActiveList+0x44>)
    8314:	4798      	blx	r3
	BaseType_t xProcessTimerNow = pdFALSE;
    8316:	2000      	movs	r0, #0
    8318:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
    831a:	2001      	movs	r0, #1
		}
	}

	return xProcessTimerNow;
}
    831c:	bd08      	pop	{r3, pc}
    831e:	bf00      	nop
    8320:	20010b90 	.word	0x20010b90
    8324:	000060d9 	.word	0x000060d9

00008328 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue(void)
{
    8328:	b5f0      	push	{r4, r5, r6, r7, lr}
    832a:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    832c:	4b10      	ldr	r3, [pc, #64]	; (8370 <prvCheckForValidListAndQueue+0x48>)
    832e:	4798      	blx	r3
	{
		if (xTimerQueue == NULL) {
    8330:	4b10      	ldr	r3, [pc, #64]	; (8374 <prvCheckForValidListAndQueue+0x4c>)
    8332:	689b      	ldr	r3, [r3, #8]
    8334:	b11b      	cbz	r3, 833e <prvCheckForValidListAndQueue+0x16>
#endif /* configQUEUE_REGISTRY_SIZE */
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    8336:	4b10      	ldr	r3, [pc, #64]	; (8378 <prvCheckForValidListAndQueue+0x50>)
    8338:	4798      	blx	r3
}
    833a:	b003      	add	sp, #12
    833c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			vListInitialise(&xActiveTimerList1);
    833e:	4c0d      	ldr	r4, [pc, #52]	; (8374 <prvCheckForValidListAndQueue+0x4c>)
    8340:	f104 060c 	add.w	r6, r4, #12
    8344:	4630      	mov	r0, r6
    8346:	4f0d      	ldr	r7, [pc, #52]	; (837c <prvCheckForValidListAndQueue+0x54>)
    8348:	47b8      	blx	r7
			vListInitialise(&xActiveTimerList2);
    834a:	f104 0520 	add.w	r5, r4, #32
    834e:	4628      	mov	r0, r5
    8350:	47b8      	blx	r7
			pxCurrentTimerList  = &xActiveTimerList1;
    8352:	6026      	str	r6, [r4, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    8354:	6065      	str	r5, [r4, #4]
				xTimerQueue = xQueueCreateStatic((UBaseType_t)configTIMER_QUEUE_LENGTH,
    8356:	2300      	movs	r3, #0
    8358:	9300      	str	r3, [sp, #0]
    835a:	f104 0334 	add.w	r3, r4, #52	; 0x34
    835e:	f104 0288 	add.w	r2, r4, #136	; 0x88
    8362:	2110      	movs	r1, #16
    8364:	2005      	movs	r0, #5
    8366:	4d06      	ldr	r5, [pc, #24]	; (8380 <prvCheckForValidListAndQueue+0x58>)
    8368:	47a8      	blx	r5
    836a:	60a0      	str	r0, [r4, #8]
    836c:	e7e3      	b.n	8336 <prvCheckForValidListAndQueue+0xe>
    836e:	bf00      	nop
    8370:	00006205 	.word	0x00006205
    8374:	20010b90 	.word	0x20010b90
    8378:	00006249 	.word	0x00006249
    837c:	000060a5 	.word	0x000060a5
    8380:	00006a05 	.word	0x00006a05

00008384 <xTimerCreateTimerTask>:
{
    8384:	b510      	push	{r4, lr}
    8386:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
    8388:	4b15      	ldr	r3, [pc, #84]	; (83e0 <xTimerCreateTimerTask+0x5c>)
    838a:	4798      	blx	r3
	if (xTimerQueue != NULL) {
    838c:	4b15      	ldr	r3, [pc, #84]	; (83e4 <xTimerCreateTimerTask+0x60>)
    838e:	689b      	ldr	r3, [r3, #8]
    8390:	b313      	cbz	r3, 83d8 <xTimerCreateTimerTask+0x54>
			StaticTask_t *pxTimerTaskTCBBuffer   = NULL;
    8392:	2400      	movs	r4, #0
    8394:	9405      	str	r4, [sp, #20]
			StackType_t * pxTimerTaskStackBuffer = NULL;
    8396:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory(&pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize);
    8398:	aa07      	add	r2, sp, #28
    839a:	a906      	add	r1, sp, #24
    839c:	a805      	add	r0, sp, #20
    839e:	4b12      	ldr	r3, [pc, #72]	; (83e8 <xTimerCreateTimerTask+0x64>)
    83a0:	4798      	blx	r3
			xTimerTaskHandle = xTaskCreateStatic(prvTimerTask,
    83a2:	9b05      	ldr	r3, [sp, #20]
    83a4:	9302      	str	r3, [sp, #8]
    83a6:	9b06      	ldr	r3, [sp, #24]
    83a8:	9301      	str	r3, [sp, #4]
    83aa:	2304      	movs	r3, #4
    83ac:	9300      	str	r3, [sp, #0]
    83ae:	4623      	mov	r3, r4
    83b0:	9a07      	ldr	r2, [sp, #28]
    83b2:	490e      	ldr	r1, [pc, #56]	; (83ec <xTimerCreateTimerTask+0x68>)
    83b4:	480e      	ldr	r0, [pc, #56]	; (83f0 <xTimerCreateTimerTask+0x6c>)
    83b6:	4c0f      	ldr	r4, [pc, #60]	; (83f4 <xTimerCreateTimerTask+0x70>)
    83b8:	47a0      	blx	r4
    83ba:	4b0a      	ldr	r3, [pc, #40]	; (83e4 <xTimerCreateTimerTask+0x60>)
    83bc:	f8c3 00d8 	str.w	r0, [r3, #216]	; 0xd8
			if (xTimerTaskHandle != NULL) {
    83c0:	b100      	cbz	r0, 83c4 <xTimerCreateTimerTask+0x40>
				xReturn = pdPASS;
    83c2:	2001      	movs	r0, #1
	configASSERT(xReturn);
    83c4:	b950      	cbnz	r0, 83dc <xTimerCreateTimerTask+0x58>
    83c6:	f04f 0380 	mov.w	r3, #128	; 0x80
    83ca:	f383 8811 	msr	BASEPRI, r3
    83ce:	f3bf 8f6f 	isb	sy
    83d2:	f3bf 8f4f 	dsb	sy
    83d6:	e7fe      	b.n	83d6 <xTimerCreateTimerTask+0x52>
	BaseType_t xReturn = pdFAIL;
    83d8:	2000      	movs	r0, #0
    83da:	e7f3      	b.n	83c4 <xTimerCreateTimerTask+0x40>
}
    83dc:	b008      	add	sp, #32
    83de:	bd10      	pop	{r4, pc}
    83e0:	00008329 	.word	0x00008329
    83e4:	20010b90 	.word	0x20010b90
    83e8:	000052e9 	.word	0x000052e9
    83ec:	0000ded8 	.word	0x0000ded8
    83f0:	00008741 	.word	0x00008741
    83f4:	00007739 	.word	0x00007739

000083f8 <xTimerGenericCommand>:
	configASSERT(xTimer);
    83f8:	b1c0      	cbz	r0, 842c <xTimerGenericCommand+0x34>
{
    83fa:	b530      	push	{r4, r5, lr}
    83fc:	b085      	sub	sp, #20
    83fe:	4615      	mov	r5, r2
    8400:	4604      	mov	r4, r0
	if (xTimerQueue != NULL) {
    8402:	4a17      	ldr	r2, [pc, #92]	; (8460 <xTimerGenericCommand+0x68>)
    8404:	6890      	ldr	r0, [r2, #8]
    8406:	b340      	cbz	r0, 845a <xTimerGenericCommand+0x62>
    8408:	461a      	mov	r2, r3
		xMessage.xMessageID                       = xCommandID;
    840a:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    840c:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer       = (Timer_t *)xTimer;
    840e:	9402      	str	r4, [sp, #8]
		if (xCommandID < tmrFIRST_FROM_ISR_COMMAND) {
    8410:	2905      	cmp	r1, #5
    8412:	dc1c      	bgt.n	844e <xTimerGenericCommand+0x56>
			if (xTaskGetSchedulerState() == taskSCHEDULER_RUNNING) {
    8414:	4b13      	ldr	r3, [pc, #76]	; (8464 <xTimerGenericCommand+0x6c>)
    8416:	4798      	blx	r3
    8418:	2802      	cmp	r0, #2
    841a:	d010      	beq.n	843e <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack(xTimerQueue, &xMessage, tmrNO_DELAY);
    841c:	2300      	movs	r3, #0
    841e:	461a      	mov	r2, r3
    8420:	4669      	mov	r1, sp
    8422:	480f      	ldr	r0, [pc, #60]	; (8460 <xTimerGenericCommand+0x68>)
    8424:	6880      	ldr	r0, [r0, #8]
    8426:	4c10      	ldr	r4, [pc, #64]	; (8468 <xTimerGenericCommand+0x70>)
    8428:	47a0      	blx	r4
    842a:	e014      	b.n	8456 <xTimerGenericCommand+0x5e>
    842c:	f04f 0380 	mov.w	r3, #128	; 0x80
    8430:	f383 8811 	msr	BASEPRI, r3
    8434:	f3bf 8f6f 	isb	sy
    8438:	f3bf 8f4f 	dsb	sy
    843c:	e7fe      	b.n	843c <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack(xTimerQueue, &xMessage, xTicksToWait);
    843e:	2300      	movs	r3, #0
    8440:	9a08      	ldr	r2, [sp, #32]
    8442:	4669      	mov	r1, sp
    8444:	4806      	ldr	r0, [pc, #24]	; (8460 <xTimerGenericCommand+0x68>)
    8446:	6880      	ldr	r0, [r0, #8]
    8448:	4c07      	ldr	r4, [pc, #28]	; (8468 <xTimerGenericCommand+0x70>)
    844a:	47a0      	blx	r4
    844c:	e003      	b.n	8456 <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR(xTimerQueue, &xMessage, pxHigherPriorityTaskWoken);
    844e:	2300      	movs	r3, #0
    8450:	4669      	mov	r1, sp
    8452:	4c06      	ldr	r4, [pc, #24]	; (846c <xTimerGenericCommand+0x74>)
    8454:	47a0      	blx	r4
}
    8456:	b005      	add	sp, #20
    8458:	bd30      	pop	{r4, r5, pc}
	BaseType_t          xReturn = pdFAIL;
    845a:	2000      	movs	r0, #0
	return xReturn;
    845c:	e7fb      	b.n	8456 <xTimerGenericCommand+0x5e>
    845e:	bf00      	nop
    8460:	20010b90 	.word	0x20010b90
    8464:	00007ff1 	.word	0x00007ff1
    8468:	00006b45 	.word	0x00006b45
    846c:	00006db1 	.word	0x00006db1

00008470 <prvSwitchTimerLists>:
	while (listLIST_IS_EMPTY(pxCurrentTimerList) == pdFALSE) {
    8470:	4b20      	ldr	r3, [pc, #128]	; (84f4 <prvSwitchTimerLists+0x84>)
    8472:	681b      	ldr	r3, [r3, #0]
    8474:	681a      	ldr	r2, [r3, #0]
    8476:	2a00      	cmp	r2, #0
    8478:	d037      	beq.n	84ea <prvSwitchTimerLists+0x7a>
{
    847a:	b570      	push	{r4, r5, r6, lr}
    847c:	b082      	sub	sp, #8
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
    847e:	68db      	ldr	r3, [r3, #12]
    8480:	681e      	ldr	r6, [r3, #0]
		pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(pxCurrentTimerList);
    8482:	68dc      	ldr	r4, [r3, #12]
		(void)uxListRemove(&(pxTimer->xTimerListItem));
    8484:	1d25      	adds	r5, r4, #4
    8486:	4628      	mov	r0, r5
    8488:	4b1b      	ldr	r3, [pc, #108]	; (84f8 <prvSwitchTimerLists+0x88>)
    848a:	4798      	blx	r3
		pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    848c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    848e:	4620      	mov	r0, r4
    8490:	4798      	blx	r3
		if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    8492:	69e3      	ldr	r3, [r4, #28]
    8494:	2b01      	cmp	r3, #1
    8496:	d00a      	beq.n	84ae <prvSwitchTimerLists+0x3e>
	while (listLIST_IS_EMPTY(pxCurrentTimerList) == pdFALSE) {
    8498:	4b16      	ldr	r3, [pc, #88]	; (84f4 <prvSwitchTimerLists+0x84>)
    849a:	681b      	ldr	r3, [r3, #0]
    849c:	681a      	ldr	r2, [r3, #0]
    849e:	2a00      	cmp	r2, #0
    84a0:	d1ed      	bne.n	847e <prvSwitchTimerLists+0xe>
	pxCurrentTimerList  = pxOverflowTimerList;
    84a2:	4a14      	ldr	r2, [pc, #80]	; (84f4 <prvSwitchTimerLists+0x84>)
    84a4:	6851      	ldr	r1, [r2, #4]
    84a6:	6011      	str	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
    84a8:	6053      	str	r3, [r2, #4]
}
    84aa:	b002      	add	sp, #8
    84ac:	bd70      	pop	{r4, r5, r6, pc}
			xReloadTime = (xNextExpireTime + pxTimer->xTimerPeriodInTicks);
    84ae:	69a3      	ldr	r3, [r4, #24]
    84b0:	4433      	add	r3, r6
			if (xReloadTime > xNextExpireTime) {
    84b2:	429e      	cmp	r6, r3
    84b4:	d207      	bcs.n	84c6 <prvSwitchTimerLists+0x56>
				listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xReloadTime);
    84b6:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
    84b8:	6124      	str	r4, [r4, #16]
				vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
    84ba:	4629      	mov	r1, r5
    84bc:	4b0d      	ldr	r3, [pc, #52]	; (84f4 <prvSwitchTimerLists+0x84>)
    84be:	6818      	ldr	r0, [r3, #0]
    84c0:	4b0e      	ldr	r3, [pc, #56]	; (84fc <prvSwitchTimerLists+0x8c>)
    84c2:	4798      	blx	r3
    84c4:	e7e8      	b.n	8498 <prvSwitchTimerLists+0x28>
				    = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
    84c6:	2100      	movs	r1, #0
    84c8:	9100      	str	r1, [sp, #0]
    84ca:	460b      	mov	r3, r1
    84cc:	4632      	mov	r2, r6
    84ce:	4620      	mov	r0, r4
    84d0:	4c0b      	ldr	r4, [pc, #44]	; (8500 <prvSwitchTimerLists+0x90>)
    84d2:	47a0      	blx	r4
				configASSERT(xResult);
    84d4:	2800      	cmp	r0, #0
    84d6:	d1df      	bne.n	8498 <prvSwitchTimerLists+0x28>
    84d8:	f04f 0380 	mov.w	r3, #128	; 0x80
    84dc:	f383 8811 	msr	BASEPRI, r3
    84e0:	f3bf 8f6f 	isb	sy
    84e4:	f3bf 8f4f 	dsb	sy
    84e8:	e7fe      	b.n	84e8 <prvSwitchTimerLists+0x78>
	pxCurrentTimerList  = pxOverflowTimerList;
    84ea:	4a02      	ldr	r2, [pc, #8]	; (84f4 <prvSwitchTimerLists+0x84>)
    84ec:	6851      	ldr	r1, [r2, #4]
    84ee:	6011      	str	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
    84f0:	6053      	str	r3, [r2, #4]
    84f2:	4770      	bx	lr
    84f4:	20010b90 	.word	0x20010b90
    84f8:	0000610d 	.word	0x0000610d
    84fc:	000060d9 	.word	0x000060d9
    8500:	000083f9 	.word	0x000083f9

00008504 <prvSampleTimeNow>:
{
    8504:	b538      	push	{r3, r4, r5, lr}
    8506:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
    8508:	4b09      	ldr	r3, [pc, #36]	; (8530 <prvSampleTimeNow+0x2c>)
    850a:	4798      	blx	r3
    850c:	4604      	mov	r4, r0
	if (xTimeNow < xLastTime) {
    850e:	4b09      	ldr	r3, [pc, #36]	; (8534 <prvSampleTimeNow+0x30>)
    8510:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
    8514:	4298      	cmp	r0, r3
    8516:	d306      	bcc.n	8526 <prvSampleTimeNow+0x22>
		*pxTimerListsWereSwitched = pdFALSE;
    8518:	2300      	movs	r3, #0
    851a:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
    851c:	4b05      	ldr	r3, [pc, #20]	; (8534 <prvSampleTimeNow+0x30>)
    851e:	f8c3 40dc 	str.w	r4, [r3, #220]	; 0xdc
}
    8522:	4620      	mov	r0, r4
    8524:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
    8526:	4b04      	ldr	r3, [pc, #16]	; (8538 <prvSampleTimeNow+0x34>)
    8528:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
    852a:	2301      	movs	r3, #1
    852c:	602b      	str	r3, [r5, #0]
    852e:	e7f5      	b.n	851c <prvSampleTimeNow+0x18>
    8530:	000079d9 	.word	0x000079d9
    8534:	20010b90 	.word	0x20010b90
    8538:	00008471 	.word	0x00008471

0000853c <prvProcessExpiredTimer>:
{
    853c:	b570      	push	{r4, r5, r6, lr}
    853e:	b082      	sub	sp, #8
    8540:	4605      	mov	r5, r0
    8542:	460e      	mov	r6, r1
	Timer_t *const pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(pxCurrentTimerList);
    8544:	4b14      	ldr	r3, [pc, #80]	; (8598 <prvProcessExpiredTimer+0x5c>)
    8546:	681b      	ldr	r3, [r3, #0]
    8548:	68db      	ldr	r3, [r3, #12]
    854a:	68dc      	ldr	r4, [r3, #12]
	(void)uxListRemove(&(pxTimer->xTimerListItem));
    854c:	1d20      	adds	r0, r4, #4
    854e:	4b13      	ldr	r3, [pc, #76]	; (859c <prvProcessExpiredTimer+0x60>)
    8550:	4798      	blx	r3
	if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    8552:	69e3      	ldr	r3, [r4, #28]
    8554:	2b01      	cmp	r3, #1
    8556:	d004      	beq.n	8562 <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    8558:	6a63      	ldr	r3, [r4, #36]	; 0x24
    855a:	4620      	mov	r0, r4
    855c:	4798      	blx	r3
}
    855e:	b002      	add	sp, #8
    8560:	bd70      	pop	{r4, r5, r6, pc}
		        pxTimer, (xNextExpireTime + pxTimer->xTimerPeriodInTicks), xTimeNow, xNextExpireTime)
    8562:	69a1      	ldr	r1, [r4, #24]
		if (prvInsertTimerInActiveList(
    8564:	462b      	mov	r3, r5
    8566:	4632      	mov	r2, r6
    8568:	4429      	add	r1, r5
    856a:	4620      	mov	r0, r4
    856c:	4e0c      	ldr	r6, [pc, #48]	; (85a0 <prvProcessExpiredTimer+0x64>)
    856e:	47b0      	blx	r6
    8570:	2800      	cmp	r0, #0
    8572:	d0f1      	beq.n	8558 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
    8574:	2100      	movs	r1, #0
    8576:	9100      	str	r1, [sp, #0]
    8578:	460b      	mov	r3, r1
    857a:	462a      	mov	r2, r5
    857c:	4620      	mov	r0, r4
    857e:	4d09      	ldr	r5, [pc, #36]	; (85a4 <prvProcessExpiredTimer+0x68>)
    8580:	47a8      	blx	r5
			configASSERT(xResult);
    8582:	2800      	cmp	r0, #0
    8584:	d1e8      	bne.n	8558 <prvProcessExpiredTimer+0x1c>
    8586:	f04f 0380 	mov.w	r3, #128	; 0x80
    858a:	f383 8811 	msr	BASEPRI, r3
    858e:	f3bf 8f6f 	isb	sy
    8592:	f3bf 8f4f 	dsb	sy
    8596:	e7fe      	b.n	8596 <prvProcessExpiredTimer+0x5a>
    8598:	20010b90 	.word	0x20010b90
    859c:	0000610d 	.word	0x0000610d
    85a0:	000082e1 	.word	0x000082e1
    85a4:	000083f9 	.word	0x000083f9

000085a8 <prvProcessTimerOrBlockTask>:
{
    85a8:	b570      	push	{r4, r5, r6, lr}
    85aa:	b082      	sub	sp, #8
    85ac:	4606      	mov	r6, r0
    85ae:	460c      	mov	r4, r1
	vTaskSuspendAll();
    85b0:	4b17      	ldr	r3, [pc, #92]	; (8610 <prvProcessTimerOrBlockTask+0x68>)
    85b2:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    85b4:	a801      	add	r0, sp, #4
    85b6:	4b17      	ldr	r3, [pc, #92]	; (8614 <prvProcessTimerOrBlockTask+0x6c>)
    85b8:	4798      	blx	r3
		if (xTimerListsWereSwitched == pdFALSE) {
    85ba:	9b01      	ldr	r3, [sp, #4]
    85bc:	bb23      	cbnz	r3, 8608 <prvProcessTimerOrBlockTask+0x60>
    85be:	4605      	mov	r5, r0
			if ((xListWasEmpty == pdFALSE) && (xNextExpireTime <= xTimeNow)) {
    85c0:	b90c      	cbnz	r4, 85c6 <prvProcessTimerOrBlockTask+0x1e>
    85c2:	42b0      	cmp	r0, r6
    85c4:	d219      	bcs.n	85fa <prvProcessTimerOrBlockTask+0x52>
				if (xListWasEmpty != pdFALSE) {
    85c6:	b12c      	cbz	r4, 85d4 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY(pxOverflowTimerList);
    85c8:	4b13      	ldr	r3, [pc, #76]	; (8618 <prvProcessTimerOrBlockTask+0x70>)
    85ca:	685b      	ldr	r3, [r3, #4]
    85cc:	681c      	ldr	r4, [r3, #0]
    85ce:	fab4 f484 	clz	r4, r4
    85d2:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted(xTimerQueue, (xNextExpireTime - xTimeNow), xListWasEmpty);
    85d4:	4622      	mov	r2, r4
    85d6:	1b71      	subs	r1, r6, r5
    85d8:	4b0f      	ldr	r3, [pc, #60]	; (8618 <prvProcessTimerOrBlockTask+0x70>)
    85da:	6898      	ldr	r0, [r3, #8]
    85dc:	4b0f      	ldr	r3, [pc, #60]	; (861c <prvProcessTimerOrBlockTask+0x74>)
    85de:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    85e0:	4b0f      	ldr	r3, [pc, #60]	; (8620 <prvProcessTimerOrBlockTask+0x78>)
    85e2:	4798      	blx	r3
    85e4:	b938      	cbnz	r0, 85f6 <prvProcessTimerOrBlockTask+0x4e>
					portYIELD_WITHIN_API();
    85e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    85ea:	4b0e      	ldr	r3, [pc, #56]	; (8624 <prvProcessTimerOrBlockTask+0x7c>)
    85ec:	601a      	str	r2, [r3, #0]
    85ee:	f3bf 8f4f 	dsb	sy
    85f2:	f3bf 8f6f 	isb	sy
}
    85f6:	b002      	add	sp, #8
    85f8:	bd70      	pop	{r4, r5, r6, pc}
				(void)xTaskResumeAll();
    85fa:	4b09      	ldr	r3, [pc, #36]	; (8620 <prvProcessTimerOrBlockTask+0x78>)
    85fc:	4798      	blx	r3
				prvProcessExpiredTimer(xNextExpireTime, xTimeNow);
    85fe:	4629      	mov	r1, r5
    8600:	4630      	mov	r0, r6
    8602:	4b09      	ldr	r3, [pc, #36]	; (8628 <prvProcessTimerOrBlockTask+0x80>)
    8604:	4798      	blx	r3
    8606:	e7f6      	b.n	85f6 <prvProcessTimerOrBlockTask+0x4e>
			(void)xTaskResumeAll();
    8608:	4b05      	ldr	r3, [pc, #20]	; (8620 <prvProcessTimerOrBlockTask+0x78>)
    860a:	4798      	blx	r3
}
    860c:	e7f3      	b.n	85f6 <prvProcessTimerOrBlockTask+0x4e>
    860e:	bf00      	nop
    8610:	000079c5 	.word	0x000079c5
    8614:	00008505 	.word	0x00008505
    8618:	20010b90 	.word	0x20010b90
    861c:	0000738d 	.word	0x0000738d
    8620:	00007b05 	.word	0x00007b05
    8624:	e000ed04 	.word	0xe000ed04
    8628:	0000853d 	.word	0x0000853d

0000862c <prvProcessReceivedCommands>:
{
    862c:	b530      	push	{r4, r5, lr}
    862e:	b089      	sub	sp, #36	; 0x24
	while (xQueueReceive(xTimerQueue, &xMessage, tmrNO_DELAY)
    8630:	e002      	b.n	8638 <prvProcessReceivedCommands+0xc>
		if (xMessage.xMessageID >= (BaseType_t)0) {
    8632:	9b04      	ldr	r3, [sp, #16]
    8634:	2b00      	cmp	r3, #0
    8636:	da0f      	bge.n	8658 <prvProcessReceivedCommands+0x2c>
	while (xQueueReceive(xTimerQueue, &xMessage, tmrNO_DELAY)
    8638:	2200      	movs	r2, #0
    863a:	a904      	add	r1, sp, #16
    863c:	4b39      	ldr	r3, [pc, #228]	; (8724 <prvProcessReceivedCommands+0xf8>)
    863e:	6898      	ldr	r0, [r3, #8]
    8640:	4b39      	ldr	r3, [pc, #228]	; (8728 <prvProcessReceivedCommands+0xfc>)
    8642:	4798      	blx	r3
    8644:	2800      	cmp	r0, #0
    8646:	d06a      	beq.n	871e <prvProcessReceivedCommands+0xf2>
			if (xMessage.xMessageID < (BaseType_t)0) {
    8648:	9b04      	ldr	r3, [sp, #16]
    864a:	2b00      	cmp	r3, #0
    864c:	daf1      	bge.n	8632 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction(pxCallback->pvParameter1, pxCallback->ulParameter2);
    864e:	9907      	ldr	r1, [sp, #28]
    8650:	9806      	ldr	r0, [sp, #24]
    8652:	9b05      	ldr	r3, [sp, #20]
    8654:	4798      	blx	r3
    8656:	e7ec      	b.n	8632 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    8658:	9c06      	ldr	r4, [sp, #24]
			if (listIS_CONTAINED_WITHIN(NULL, &(pxTimer->xTimerListItem))
    865a:	6963      	ldr	r3, [r4, #20]
    865c:	b113      	cbz	r3, 8664 <prvProcessReceivedCommands+0x38>
				(void)uxListRemove(&(pxTimer->xTimerListItem));
    865e:	1d20      	adds	r0, r4, #4
    8660:	4b32      	ldr	r3, [pc, #200]	; (872c <prvProcessReceivedCommands+0x100>)
    8662:	4798      	blx	r3
			xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    8664:	a803      	add	r0, sp, #12
    8666:	4b32      	ldr	r3, [pc, #200]	; (8730 <prvProcessReceivedCommands+0x104>)
    8668:	4798      	blx	r3
			switch (xMessage.xMessageID) {
    866a:	9b04      	ldr	r3, [sp, #16]
    866c:	2b09      	cmp	r3, #9
    866e:	d8e3      	bhi.n	8638 <prvProcessReceivedCommands+0xc>
    8670:	a201      	add	r2, pc, #4	; (adr r2, 8678 <prvProcessReceivedCommands+0x4c>)
    8672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    8676:	bf00      	nop
    8678:	000086a1 	.word	0x000086a1
    867c:	000086a1 	.word	0x000086a1
    8680:	000086a1 	.word	0x000086a1
    8684:	00008639 	.word	0x00008639
    8688:	000086e9 	.word	0x000086e9
    868c:	0000870f 	.word	0x0000870f
    8690:	000086a1 	.word	0x000086a1
    8694:	000086a1 	.word	0x000086a1
    8698:	00008639 	.word	0x00008639
    869c:	000086e9 	.word	0x000086e9
				                               xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks,
    86a0:	9905      	ldr	r1, [sp, #20]
    86a2:	69a5      	ldr	r5, [r4, #24]
				if (prvInsertTimerInActiveList(pxTimer,
    86a4:	460b      	mov	r3, r1
    86a6:	4602      	mov	r2, r0
    86a8:	4429      	add	r1, r5
    86aa:	4620      	mov	r0, r4
    86ac:	4d21      	ldr	r5, [pc, #132]	; (8734 <prvProcessReceivedCommands+0x108>)
    86ae:	47a8      	blx	r5
    86b0:	2800      	cmp	r0, #0
    86b2:	d0c1      	beq.n	8638 <prvProcessReceivedCommands+0xc>
					pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    86b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    86b6:	4620      	mov	r0, r4
    86b8:	4798      	blx	r3
					if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    86ba:	69e3      	ldr	r3, [r4, #28]
    86bc:	2b01      	cmp	r3, #1
    86be:	d1bb      	bne.n	8638 <prvProcessReceivedCommands+0xc>
						                                   + pxTimer->xTimerPeriodInTicks,
    86c0:	69a2      	ldr	r2, [r4, #24]
						xResult = xTimerGenericCommand(pxTimer,
    86c2:	2100      	movs	r1, #0
    86c4:	9100      	str	r1, [sp, #0]
    86c6:	460b      	mov	r3, r1
    86c8:	9805      	ldr	r0, [sp, #20]
    86ca:	4402      	add	r2, r0
    86cc:	4620      	mov	r0, r4
    86ce:	4c1a      	ldr	r4, [pc, #104]	; (8738 <prvProcessReceivedCommands+0x10c>)
    86d0:	47a0      	blx	r4
						configASSERT(xResult);
    86d2:	2800      	cmp	r0, #0
    86d4:	d1b0      	bne.n	8638 <prvProcessReceivedCommands+0xc>
    86d6:	f04f 0380 	mov.w	r3, #128	; 0x80
    86da:	f383 8811 	msr	BASEPRI, r3
    86de:	f3bf 8f6f 	isb	sy
    86e2:	f3bf 8f4f 	dsb	sy
    86e6:	e7fe      	b.n	86e6 <prvProcessReceivedCommands+0xba>
				pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    86e8:	9905      	ldr	r1, [sp, #20]
    86ea:	61a1      	str	r1, [r4, #24]
				configASSERT((pxTimer->xTimerPeriodInTicks > 0));
    86ec:	b131      	cbz	r1, 86fc <prvProcessReceivedCommands+0xd0>
				(void)prvInsertTimerInActiveList(
    86ee:	4603      	mov	r3, r0
    86f0:	4602      	mov	r2, r0
    86f2:	4401      	add	r1, r0
    86f4:	4620      	mov	r0, r4
    86f6:	4c0f      	ldr	r4, [pc, #60]	; (8734 <prvProcessReceivedCommands+0x108>)
    86f8:	47a0      	blx	r4
				break;
    86fa:	e79d      	b.n	8638 <prvProcessReceivedCommands+0xc>
    86fc:	f04f 0380 	mov.w	r3, #128	; 0x80
    8700:	f383 8811 	msr	BASEPRI, r3
    8704:	f3bf 8f6f 	isb	sy
    8708:	f3bf 8f4f 	dsb	sy
    870c:	e7fe      	b.n	870c <prvProcessReceivedCommands+0xe0>
				if (pxTimer->ucStaticallyAllocated == (uint8_t)pdFALSE) {
    870e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    8712:	2b00      	cmp	r3, #0
    8714:	d190      	bne.n	8638 <prvProcessReceivedCommands+0xc>
					vPortFree(pxTimer);
    8716:	4620      	mov	r0, r4
    8718:	4b08      	ldr	r3, [pc, #32]	; (873c <prvProcessReceivedCommands+0x110>)
    871a:	4798      	blx	r3
    871c:	e78c      	b.n	8638 <prvProcessReceivedCommands+0xc>
}
    871e:	b009      	add	sp, #36	; 0x24
    8720:	bd30      	pop	{r4, r5, pc}
    8722:	bf00      	nop
    8724:	20010b90 	.word	0x20010b90
    8728:	00006fad 	.word	0x00006fad
    872c:	0000610d 	.word	0x0000610d
    8730:	00008505 	.word	0x00008505
    8734:	000082e1 	.word	0x000082e1
    8738:	000083f9 	.word	0x000083f9
    873c:	00006691 	.word	0x00006691

00008740 <prvTimerTask>:
{
    8740:	b500      	push	{lr}
    8742:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime(&xListWasEmpty);
    8744:	a801      	add	r0, sp, #4
    8746:	4b04      	ldr	r3, [pc, #16]	; (8758 <prvTimerTask+0x18>)
    8748:	4798      	blx	r3
		prvProcessTimerOrBlockTask(xNextExpireTime, xListWasEmpty);
    874a:	9901      	ldr	r1, [sp, #4]
    874c:	4b03      	ldr	r3, [pc, #12]	; (875c <prvTimerTask+0x1c>)
    874e:	4798      	blx	r3
		prvProcessReceivedCommands();
    8750:	4b03      	ldr	r3, [pc, #12]	; (8760 <prvTimerTask+0x20>)
    8752:	4798      	blx	r3
    8754:	e7f6      	b.n	8744 <prvTimerTask+0x4>
    8756:	bf00      	nop
    8758:	000082c1 	.word	0x000082c1
    875c:	000085a9 	.word	0x000085a9
    8760:	0000862d 	.word	0x0000862d

00008764 <xTimerPendFunctionCallFromISR>:

#if (INCLUDE_xTimerPendFunctionCall == 1)

BaseType_t xTimerPendFunctionCallFromISR(PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2,
                                         BaseType_t *pxHigherPriorityTaskWoken)
{
    8764:	b510      	push	{r4, lr}
    8766:	b084      	sub	sp, #16
    8768:	461c      	mov	r4, r3
	DaemonTaskMessage_t xMessage;
	BaseType_t          xReturn;

	/* Complete the message with the function parameters and post it to the
	daemon task. */
	xMessage.xMessageID                               = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
    876a:	f06f 0301 	mvn.w	r3, #1
    876e:	9300      	str	r3, [sp, #0]
	xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
    8770:	9001      	str	r0, [sp, #4]
	xMessage.u.xCallbackParameters.pvParameter1       = pvParameter1;
    8772:	9102      	str	r1, [sp, #8]
	xMessage.u.xCallbackParameters.ulParameter2       = ulParameter2;
    8774:	9203      	str	r2, [sp, #12]

	xReturn = xQueueSendFromISR(xTimerQueue, &xMessage, pxHigherPriorityTaskWoken);
    8776:	2300      	movs	r3, #0
    8778:	4622      	mov	r2, r4
    877a:	4669      	mov	r1, sp
    877c:	4802      	ldr	r0, [pc, #8]	; (8788 <xTimerPendFunctionCallFromISR+0x24>)
    877e:	6880      	ldr	r0, [r0, #8]
    8780:	4c02      	ldr	r4, [pc, #8]	; (878c <xTimerPendFunctionCallFromISR+0x28>)
    8782:	47a0      	blx	r4

	tracePEND_FUNC_CALL_FROM_ISR(xFunctionToPend, pvParameter1, ulParameter2, xReturn);

	return xReturn;
}
    8784:	b004      	add	sp, #16
    8786:	bd10      	pop	{r4, pc}
    8788:	20010b90 	.word	0x20010b90
    878c:	00006db1 	.word	0x00006db1

00008790 <bsearch>:
    8790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8794:	4681      	mov	r9, r0
    8796:	468a      	mov	sl, r1
    8798:	461e      	mov	r6, r3
    879a:	4615      	mov	r5, r2
    879c:	b91a      	cbnz	r2, 87a6 <bsearch+0x16>
    879e:	2700      	movs	r7, #0
    87a0:	4638      	mov	r0, r7
    87a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    87a6:	2b00      	cmp	r3, #0
    87a8:	d0f9      	beq.n	879e <bsearch+0xe>
    87aa:	f04f 0800 	mov.w	r8, #0
    87ae:	45a8      	cmp	r8, r5
    87b0:	d2f5      	bcs.n	879e <bsearch+0xe>
    87b2:	eb08 0405 	add.w	r4, r8, r5
    87b6:	0864      	lsrs	r4, r4, #1
    87b8:	fb04 a706 	mla	r7, r4, r6, sl
    87bc:	4639      	mov	r1, r7
    87be:	4648      	mov	r0, r9
    87c0:	9b08      	ldr	r3, [sp, #32]
    87c2:	4798      	blx	r3
    87c4:	2800      	cmp	r0, #0
    87c6:	db03      	blt.n	87d0 <bsearch+0x40>
    87c8:	d0ea      	beq.n	87a0 <bsearch+0x10>
    87ca:	f104 0801 	add.w	r8, r4, #1
    87ce:	462c      	mov	r4, r5
    87d0:	4625      	mov	r5, r4
    87d2:	e7ec      	b.n	87ae <bsearch+0x1e>

000087d4 <__libc_init_array>:
    87d4:	b570      	push	{r4, r5, r6, lr}
    87d6:	4e0d      	ldr	r6, [pc, #52]	; (880c <__libc_init_array+0x38>)
    87d8:	4c0d      	ldr	r4, [pc, #52]	; (8810 <__libc_init_array+0x3c>)
    87da:	1ba4      	subs	r4, r4, r6
    87dc:	10a4      	asrs	r4, r4, #2
    87de:	2500      	movs	r5, #0
    87e0:	42a5      	cmp	r5, r4
    87e2:	d109      	bne.n	87f8 <__libc_init_array+0x24>
    87e4:	4e0b      	ldr	r6, [pc, #44]	; (8814 <__libc_init_array+0x40>)
    87e6:	4c0c      	ldr	r4, [pc, #48]	; (8818 <__libc_init_array+0x44>)
    87e8:	f005 fc4e 	bl	e088 <_init>
    87ec:	1ba4      	subs	r4, r4, r6
    87ee:	10a4      	asrs	r4, r4, #2
    87f0:	2500      	movs	r5, #0
    87f2:	42a5      	cmp	r5, r4
    87f4:	d105      	bne.n	8802 <__libc_init_array+0x2e>
    87f6:	bd70      	pop	{r4, r5, r6, pc}
    87f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    87fc:	4798      	blx	r3
    87fe:	3501      	adds	r5, #1
    8800:	e7ee      	b.n	87e0 <__libc_init_array+0xc>
    8802:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    8806:	4798      	blx	r3
    8808:	3501      	adds	r5, #1
    880a:	e7f2      	b.n	87f2 <__libc_init_array+0x1e>
    880c:	0000e094 	.word	0x0000e094
    8810:	0000e094 	.word	0x0000e094
    8814:	0000e094 	.word	0x0000e094
    8818:	0000e098 	.word	0x0000e098

0000881c <__locale_ctype_ptr_l>:
    881c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
    8820:	4770      	bx	lr
	...

00008824 <__locale_ctype_ptr>:
    8824:	4b04      	ldr	r3, [pc, #16]	; (8838 <__locale_ctype_ptr+0x14>)
    8826:	4a05      	ldr	r2, [pc, #20]	; (883c <__locale_ctype_ptr+0x18>)
    8828:	681b      	ldr	r3, [r3, #0]
    882a:	6a1b      	ldr	r3, [r3, #32]
    882c:	2b00      	cmp	r3, #0
    882e:	bf08      	it	eq
    8830:	4613      	moveq	r3, r2
    8832:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
    8836:	4770      	bx	lr
    8838:	200000d4 	.word	0x200000d4
    883c:	20000138 	.word	0x20000138

00008840 <__ascii_mbtowc>:
    8840:	b082      	sub	sp, #8
    8842:	b901      	cbnz	r1, 8846 <__ascii_mbtowc+0x6>
    8844:	a901      	add	r1, sp, #4
    8846:	b142      	cbz	r2, 885a <__ascii_mbtowc+0x1a>
    8848:	b14b      	cbz	r3, 885e <__ascii_mbtowc+0x1e>
    884a:	7813      	ldrb	r3, [r2, #0]
    884c:	600b      	str	r3, [r1, #0]
    884e:	7812      	ldrb	r2, [r2, #0]
    8850:	1c10      	adds	r0, r2, #0
    8852:	bf18      	it	ne
    8854:	2001      	movne	r0, #1
    8856:	b002      	add	sp, #8
    8858:	4770      	bx	lr
    885a:	4610      	mov	r0, r2
    885c:	e7fb      	b.n	8856 <__ascii_mbtowc+0x16>
    885e:	f06f 0001 	mvn.w	r0, #1
    8862:	e7f8      	b.n	8856 <__ascii_mbtowc+0x16>

00008864 <memcpy>:
    8864:	b510      	push	{r4, lr}
    8866:	1e43      	subs	r3, r0, #1
    8868:	440a      	add	r2, r1
    886a:	4291      	cmp	r1, r2
    886c:	d100      	bne.n	8870 <memcpy+0xc>
    886e:	bd10      	pop	{r4, pc}
    8870:	f811 4b01 	ldrb.w	r4, [r1], #1
    8874:	f803 4f01 	strb.w	r4, [r3, #1]!
    8878:	e7f7      	b.n	886a <memcpy+0x6>

0000887a <memmove>:
    887a:	4288      	cmp	r0, r1
    887c:	b510      	push	{r4, lr}
    887e:	eb01 0302 	add.w	r3, r1, r2
    8882:	d803      	bhi.n	888c <memmove+0x12>
    8884:	1e42      	subs	r2, r0, #1
    8886:	4299      	cmp	r1, r3
    8888:	d10c      	bne.n	88a4 <memmove+0x2a>
    888a:	bd10      	pop	{r4, pc}
    888c:	4298      	cmp	r0, r3
    888e:	d2f9      	bcs.n	8884 <memmove+0xa>
    8890:	1881      	adds	r1, r0, r2
    8892:	1ad2      	subs	r2, r2, r3
    8894:	42d3      	cmn	r3, r2
    8896:	d100      	bne.n	889a <memmove+0x20>
    8898:	bd10      	pop	{r4, pc}
    889a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    889e:	f801 4d01 	strb.w	r4, [r1, #-1]!
    88a2:	e7f7      	b.n	8894 <memmove+0x1a>
    88a4:	f811 4b01 	ldrb.w	r4, [r1], #1
    88a8:	f802 4f01 	strb.w	r4, [r2, #1]!
    88ac:	e7eb      	b.n	8886 <memmove+0xc>

000088ae <memset>:
    88ae:	4402      	add	r2, r0
    88b0:	4603      	mov	r3, r0
    88b2:	4293      	cmp	r3, r2
    88b4:	d100      	bne.n	88b8 <memset+0xa>
    88b6:	4770      	bx	lr
    88b8:	f803 1b01 	strb.w	r1, [r3], #1
    88bc:	e7f9      	b.n	88b2 <memset+0x4>

000088be <_printf_common>:
    88be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    88c2:	4691      	mov	r9, r2
    88c4:	461f      	mov	r7, r3
    88c6:	688a      	ldr	r2, [r1, #8]
    88c8:	690b      	ldr	r3, [r1, #16]
    88ca:	f8dd 8020 	ldr.w	r8, [sp, #32]
    88ce:	4293      	cmp	r3, r2
    88d0:	bfb8      	it	lt
    88d2:	4613      	movlt	r3, r2
    88d4:	f8c9 3000 	str.w	r3, [r9]
    88d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    88dc:	4606      	mov	r6, r0
    88de:	460c      	mov	r4, r1
    88e0:	b112      	cbz	r2, 88e8 <_printf_common+0x2a>
    88e2:	3301      	adds	r3, #1
    88e4:	f8c9 3000 	str.w	r3, [r9]
    88e8:	6823      	ldr	r3, [r4, #0]
    88ea:	0699      	lsls	r1, r3, #26
    88ec:	bf42      	ittt	mi
    88ee:	f8d9 3000 	ldrmi.w	r3, [r9]
    88f2:	3302      	addmi	r3, #2
    88f4:	f8c9 3000 	strmi.w	r3, [r9]
    88f8:	6825      	ldr	r5, [r4, #0]
    88fa:	f015 0506 	ands.w	r5, r5, #6
    88fe:	d107      	bne.n	8910 <_printf_common+0x52>
    8900:	f104 0a19 	add.w	sl, r4, #25
    8904:	68e3      	ldr	r3, [r4, #12]
    8906:	f8d9 2000 	ldr.w	r2, [r9]
    890a:	1a9b      	subs	r3, r3, r2
    890c:	429d      	cmp	r5, r3
    890e:	db29      	blt.n	8964 <_printf_common+0xa6>
    8910:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    8914:	6822      	ldr	r2, [r4, #0]
    8916:	3300      	adds	r3, #0
    8918:	bf18      	it	ne
    891a:	2301      	movne	r3, #1
    891c:	0692      	lsls	r2, r2, #26
    891e:	d42e      	bmi.n	897e <_printf_common+0xc0>
    8920:	f104 0243 	add.w	r2, r4, #67	; 0x43
    8924:	4639      	mov	r1, r7
    8926:	4630      	mov	r0, r6
    8928:	47c0      	blx	r8
    892a:	3001      	adds	r0, #1
    892c:	d021      	beq.n	8972 <_printf_common+0xb4>
    892e:	6823      	ldr	r3, [r4, #0]
    8930:	68e5      	ldr	r5, [r4, #12]
    8932:	f8d9 2000 	ldr.w	r2, [r9]
    8936:	f003 0306 	and.w	r3, r3, #6
    893a:	2b04      	cmp	r3, #4
    893c:	bf08      	it	eq
    893e:	1aad      	subeq	r5, r5, r2
    8940:	68a3      	ldr	r3, [r4, #8]
    8942:	6922      	ldr	r2, [r4, #16]
    8944:	bf0c      	ite	eq
    8946:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    894a:	2500      	movne	r5, #0
    894c:	4293      	cmp	r3, r2
    894e:	bfc4      	itt	gt
    8950:	1a9b      	subgt	r3, r3, r2
    8952:	18ed      	addgt	r5, r5, r3
    8954:	f04f 0900 	mov.w	r9, #0
    8958:	341a      	adds	r4, #26
    895a:	454d      	cmp	r5, r9
    895c:	d11b      	bne.n	8996 <_printf_common+0xd8>
    895e:	2000      	movs	r0, #0
    8960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8964:	2301      	movs	r3, #1
    8966:	4652      	mov	r2, sl
    8968:	4639      	mov	r1, r7
    896a:	4630      	mov	r0, r6
    896c:	47c0      	blx	r8
    896e:	3001      	adds	r0, #1
    8970:	d103      	bne.n	897a <_printf_common+0xbc>
    8972:	f04f 30ff 	mov.w	r0, #4294967295
    8976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    897a:	3501      	adds	r5, #1
    897c:	e7c2      	b.n	8904 <_printf_common+0x46>
    897e:	18e1      	adds	r1, r4, r3
    8980:	1c5a      	adds	r2, r3, #1
    8982:	2030      	movs	r0, #48	; 0x30
    8984:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    8988:	4422      	add	r2, r4
    898a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    898e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    8992:	3302      	adds	r3, #2
    8994:	e7c4      	b.n	8920 <_printf_common+0x62>
    8996:	2301      	movs	r3, #1
    8998:	4622      	mov	r2, r4
    899a:	4639      	mov	r1, r7
    899c:	4630      	mov	r0, r6
    899e:	47c0      	blx	r8
    89a0:	3001      	adds	r0, #1
    89a2:	d0e6      	beq.n	8972 <_printf_common+0xb4>
    89a4:	f109 0901 	add.w	r9, r9, #1
    89a8:	e7d7      	b.n	895a <_printf_common+0x9c>
	...

000089ac <_printf_i>:
    89ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    89b0:	4617      	mov	r7, r2
    89b2:	7e0a      	ldrb	r2, [r1, #24]
    89b4:	b085      	sub	sp, #20
    89b6:	2a6e      	cmp	r2, #110	; 0x6e
    89b8:	4698      	mov	r8, r3
    89ba:	4606      	mov	r6, r0
    89bc:	460c      	mov	r4, r1
    89be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    89c0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    89c4:	f000 80bc 	beq.w	8b40 <_printf_i+0x194>
    89c8:	d81a      	bhi.n	8a00 <_printf_i+0x54>
    89ca:	2a63      	cmp	r2, #99	; 0x63
    89cc:	d02e      	beq.n	8a2c <_printf_i+0x80>
    89ce:	d80a      	bhi.n	89e6 <_printf_i+0x3a>
    89d0:	2a00      	cmp	r2, #0
    89d2:	f000 80c8 	beq.w	8b66 <_printf_i+0x1ba>
    89d6:	2a58      	cmp	r2, #88	; 0x58
    89d8:	f000 808a 	beq.w	8af0 <_printf_i+0x144>
    89dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
    89e0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    89e4:	e02a      	b.n	8a3c <_printf_i+0x90>
    89e6:	2a64      	cmp	r2, #100	; 0x64
    89e8:	d001      	beq.n	89ee <_printf_i+0x42>
    89ea:	2a69      	cmp	r2, #105	; 0x69
    89ec:	d1f6      	bne.n	89dc <_printf_i+0x30>
    89ee:	6821      	ldr	r1, [r4, #0]
    89f0:	681a      	ldr	r2, [r3, #0]
    89f2:	f011 0f80 	tst.w	r1, #128	; 0x80
    89f6:	d023      	beq.n	8a40 <_printf_i+0x94>
    89f8:	1d11      	adds	r1, r2, #4
    89fa:	6019      	str	r1, [r3, #0]
    89fc:	6813      	ldr	r3, [r2, #0]
    89fe:	e027      	b.n	8a50 <_printf_i+0xa4>
    8a00:	2a73      	cmp	r2, #115	; 0x73
    8a02:	f000 80b4 	beq.w	8b6e <_printf_i+0x1c2>
    8a06:	d808      	bhi.n	8a1a <_printf_i+0x6e>
    8a08:	2a6f      	cmp	r2, #111	; 0x6f
    8a0a:	d02a      	beq.n	8a62 <_printf_i+0xb6>
    8a0c:	2a70      	cmp	r2, #112	; 0x70
    8a0e:	d1e5      	bne.n	89dc <_printf_i+0x30>
    8a10:	680a      	ldr	r2, [r1, #0]
    8a12:	f042 0220 	orr.w	r2, r2, #32
    8a16:	600a      	str	r2, [r1, #0]
    8a18:	e003      	b.n	8a22 <_printf_i+0x76>
    8a1a:	2a75      	cmp	r2, #117	; 0x75
    8a1c:	d021      	beq.n	8a62 <_printf_i+0xb6>
    8a1e:	2a78      	cmp	r2, #120	; 0x78
    8a20:	d1dc      	bne.n	89dc <_printf_i+0x30>
    8a22:	2278      	movs	r2, #120	; 0x78
    8a24:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    8a28:	496e      	ldr	r1, [pc, #440]	; (8be4 <_printf_i+0x238>)
    8a2a:	e064      	b.n	8af6 <_printf_i+0x14a>
    8a2c:	681a      	ldr	r2, [r3, #0]
    8a2e:	f101 0542 	add.w	r5, r1, #66	; 0x42
    8a32:	1d11      	adds	r1, r2, #4
    8a34:	6019      	str	r1, [r3, #0]
    8a36:	6813      	ldr	r3, [r2, #0]
    8a38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    8a3c:	2301      	movs	r3, #1
    8a3e:	e0a3      	b.n	8b88 <_printf_i+0x1dc>
    8a40:	f011 0f40 	tst.w	r1, #64	; 0x40
    8a44:	f102 0104 	add.w	r1, r2, #4
    8a48:	6019      	str	r1, [r3, #0]
    8a4a:	d0d7      	beq.n	89fc <_printf_i+0x50>
    8a4c:	f9b2 3000 	ldrsh.w	r3, [r2]
    8a50:	2b00      	cmp	r3, #0
    8a52:	da03      	bge.n	8a5c <_printf_i+0xb0>
    8a54:	222d      	movs	r2, #45	; 0x2d
    8a56:	425b      	negs	r3, r3
    8a58:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    8a5c:	4962      	ldr	r1, [pc, #392]	; (8be8 <_printf_i+0x23c>)
    8a5e:	220a      	movs	r2, #10
    8a60:	e017      	b.n	8a92 <_printf_i+0xe6>
    8a62:	6820      	ldr	r0, [r4, #0]
    8a64:	6819      	ldr	r1, [r3, #0]
    8a66:	f010 0f80 	tst.w	r0, #128	; 0x80
    8a6a:	d003      	beq.n	8a74 <_printf_i+0xc8>
    8a6c:	1d08      	adds	r0, r1, #4
    8a6e:	6018      	str	r0, [r3, #0]
    8a70:	680b      	ldr	r3, [r1, #0]
    8a72:	e006      	b.n	8a82 <_printf_i+0xd6>
    8a74:	f010 0f40 	tst.w	r0, #64	; 0x40
    8a78:	f101 0004 	add.w	r0, r1, #4
    8a7c:	6018      	str	r0, [r3, #0]
    8a7e:	d0f7      	beq.n	8a70 <_printf_i+0xc4>
    8a80:	880b      	ldrh	r3, [r1, #0]
    8a82:	4959      	ldr	r1, [pc, #356]	; (8be8 <_printf_i+0x23c>)
    8a84:	2a6f      	cmp	r2, #111	; 0x6f
    8a86:	bf14      	ite	ne
    8a88:	220a      	movne	r2, #10
    8a8a:	2208      	moveq	r2, #8
    8a8c:	2000      	movs	r0, #0
    8a8e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    8a92:	6865      	ldr	r5, [r4, #4]
    8a94:	60a5      	str	r5, [r4, #8]
    8a96:	2d00      	cmp	r5, #0
    8a98:	f2c0 809c 	blt.w	8bd4 <_printf_i+0x228>
    8a9c:	6820      	ldr	r0, [r4, #0]
    8a9e:	f020 0004 	bic.w	r0, r0, #4
    8aa2:	6020      	str	r0, [r4, #0]
    8aa4:	2b00      	cmp	r3, #0
    8aa6:	d13f      	bne.n	8b28 <_printf_i+0x17c>
    8aa8:	2d00      	cmp	r5, #0
    8aaa:	f040 8095 	bne.w	8bd8 <_printf_i+0x22c>
    8aae:	4675      	mov	r5, lr
    8ab0:	2a08      	cmp	r2, #8
    8ab2:	d10b      	bne.n	8acc <_printf_i+0x120>
    8ab4:	6823      	ldr	r3, [r4, #0]
    8ab6:	07da      	lsls	r2, r3, #31
    8ab8:	d508      	bpl.n	8acc <_printf_i+0x120>
    8aba:	6923      	ldr	r3, [r4, #16]
    8abc:	6862      	ldr	r2, [r4, #4]
    8abe:	429a      	cmp	r2, r3
    8ac0:	bfde      	ittt	le
    8ac2:	2330      	movle	r3, #48	; 0x30
    8ac4:	f805 3c01 	strble.w	r3, [r5, #-1]
    8ac8:	f105 35ff 	addle.w	r5, r5, #4294967295
    8acc:	ebae 0305 	sub.w	r3, lr, r5
    8ad0:	6123      	str	r3, [r4, #16]
    8ad2:	f8cd 8000 	str.w	r8, [sp]
    8ad6:	463b      	mov	r3, r7
    8ad8:	aa03      	add	r2, sp, #12
    8ada:	4621      	mov	r1, r4
    8adc:	4630      	mov	r0, r6
    8ade:	f7ff feee 	bl	88be <_printf_common>
    8ae2:	3001      	adds	r0, #1
    8ae4:	d155      	bne.n	8b92 <_printf_i+0x1e6>
    8ae6:	f04f 30ff 	mov.w	r0, #4294967295
    8aea:	b005      	add	sp, #20
    8aec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    8af0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    8af4:	493c      	ldr	r1, [pc, #240]	; (8be8 <_printf_i+0x23c>)
    8af6:	6822      	ldr	r2, [r4, #0]
    8af8:	6818      	ldr	r0, [r3, #0]
    8afa:	f012 0f80 	tst.w	r2, #128	; 0x80
    8afe:	f100 0504 	add.w	r5, r0, #4
    8b02:	601d      	str	r5, [r3, #0]
    8b04:	d001      	beq.n	8b0a <_printf_i+0x15e>
    8b06:	6803      	ldr	r3, [r0, #0]
    8b08:	e002      	b.n	8b10 <_printf_i+0x164>
    8b0a:	0655      	lsls	r5, r2, #25
    8b0c:	d5fb      	bpl.n	8b06 <_printf_i+0x15a>
    8b0e:	8803      	ldrh	r3, [r0, #0]
    8b10:	07d0      	lsls	r0, r2, #31
    8b12:	bf44      	itt	mi
    8b14:	f042 0220 	orrmi.w	r2, r2, #32
    8b18:	6022      	strmi	r2, [r4, #0]
    8b1a:	b91b      	cbnz	r3, 8b24 <_printf_i+0x178>
    8b1c:	6822      	ldr	r2, [r4, #0]
    8b1e:	f022 0220 	bic.w	r2, r2, #32
    8b22:	6022      	str	r2, [r4, #0]
    8b24:	2210      	movs	r2, #16
    8b26:	e7b1      	b.n	8a8c <_printf_i+0xe0>
    8b28:	4675      	mov	r5, lr
    8b2a:	fbb3 f0f2 	udiv	r0, r3, r2
    8b2e:	fb02 3310 	mls	r3, r2, r0, r3
    8b32:	5ccb      	ldrb	r3, [r1, r3]
    8b34:	f805 3d01 	strb.w	r3, [r5, #-1]!
    8b38:	4603      	mov	r3, r0
    8b3a:	2800      	cmp	r0, #0
    8b3c:	d1f5      	bne.n	8b2a <_printf_i+0x17e>
    8b3e:	e7b7      	b.n	8ab0 <_printf_i+0x104>
    8b40:	6808      	ldr	r0, [r1, #0]
    8b42:	681a      	ldr	r2, [r3, #0]
    8b44:	6949      	ldr	r1, [r1, #20]
    8b46:	f010 0f80 	tst.w	r0, #128	; 0x80
    8b4a:	d004      	beq.n	8b56 <_printf_i+0x1aa>
    8b4c:	1d10      	adds	r0, r2, #4
    8b4e:	6018      	str	r0, [r3, #0]
    8b50:	6813      	ldr	r3, [r2, #0]
    8b52:	6019      	str	r1, [r3, #0]
    8b54:	e007      	b.n	8b66 <_printf_i+0x1ba>
    8b56:	f010 0f40 	tst.w	r0, #64	; 0x40
    8b5a:	f102 0004 	add.w	r0, r2, #4
    8b5e:	6018      	str	r0, [r3, #0]
    8b60:	6813      	ldr	r3, [r2, #0]
    8b62:	d0f6      	beq.n	8b52 <_printf_i+0x1a6>
    8b64:	8019      	strh	r1, [r3, #0]
    8b66:	2300      	movs	r3, #0
    8b68:	6123      	str	r3, [r4, #16]
    8b6a:	4675      	mov	r5, lr
    8b6c:	e7b1      	b.n	8ad2 <_printf_i+0x126>
    8b6e:	681a      	ldr	r2, [r3, #0]
    8b70:	1d11      	adds	r1, r2, #4
    8b72:	6019      	str	r1, [r3, #0]
    8b74:	6815      	ldr	r5, [r2, #0]
    8b76:	6862      	ldr	r2, [r4, #4]
    8b78:	2100      	movs	r1, #0
    8b7a:	4628      	mov	r0, r5
    8b7c:	f000 fc80 	bl	9480 <memchr>
    8b80:	b108      	cbz	r0, 8b86 <_printf_i+0x1da>
    8b82:	1b40      	subs	r0, r0, r5
    8b84:	6060      	str	r0, [r4, #4]
    8b86:	6863      	ldr	r3, [r4, #4]
    8b88:	6123      	str	r3, [r4, #16]
    8b8a:	2300      	movs	r3, #0
    8b8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    8b90:	e79f      	b.n	8ad2 <_printf_i+0x126>
    8b92:	6923      	ldr	r3, [r4, #16]
    8b94:	462a      	mov	r2, r5
    8b96:	4639      	mov	r1, r7
    8b98:	4630      	mov	r0, r6
    8b9a:	47c0      	blx	r8
    8b9c:	3001      	adds	r0, #1
    8b9e:	d0a2      	beq.n	8ae6 <_printf_i+0x13a>
    8ba0:	6823      	ldr	r3, [r4, #0]
    8ba2:	079b      	lsls	r3, r3, #30
    8ba4:	d507      	bpl.n	8bb6 <_printf_i+0x20a>
    8ba6:	2500      	movs	r5, #0
    8ba8:	f104 0919 	add.w	r9, r4, #25
    8bac:	68e3      	ldr	r3, [r4, #12]
    8bae:	9a03      	ldr	r2, [sp, #12]
    8bb0:	1a9b      	subs	r3, r3, r2
    8bb2:	429d      	cmp	r5, r3
    8bb4:	db05      	blt.n	8bc2 <_printf_i+0x216>
    8bb6:	68e0      	ldr	r0, [r4, #12]
    8bb8:	9b03      	ldr	r3, [sp, #12]
    8bba:	4298      	cmp	r0, r3
    8bbc:	bfb8      	it	lt
    8bbe:	4618      	movlt	r0, r3
    8bc0:	e793      	b.n	8aea <_printf_i+0x13e>
    8bc2:	2301      	movs	r3, #1
    8bc4:	464a      	mov	r2, r9
    8bc6:	4639      	mov	r1, r7
    8bc8:	4630      	mov	r0, r6
    8bca:	47c0      	blx	r8
    8bcc:	3001      	adds	r0, #1
    8bce:	d08a      	beq.n	8ae6 <_printf_i+0x13a>
    8bd0:	3501      	adds	r5, #1
    8bd2:	e7eb      	b.n	8bac <_printf_i+0x200>
    8bd4:	2b00      	cmp	r3, #0
    8bd6:	d1a7      	bne.n	8b28 <_printf_i+0x17c>
    8bd8:	780b      	ldrb	r3, [r1, #0]
    8bda:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    8bde:	f104 0542 	add.w	r5, r4, #66	; 0x42
    8be2:	e765      	b.n	8ab0 <_printf_i+0x104>
    8be4:	0000deff 	.word	0x0000deff
    8be8:	0000deee 	.word	0x0000deee

00008bec <setbuf>:
    8bec:	2900      	cmp	r1, #0
    8bee:	f44f 6380 	mov.w	r3, #1024	; 0x400
    8bf2:	bf0c      	ite	eq
    8bf4:	2202      	moveq	r2, #2
    8bf6:	2200      	movne	r2, #0
    8bf8:	f000 b800 	b.w	8bfc <setvbuf>

00008bfc <setvbuf>:
    8bfc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    8c00:	461d      	mov	r5, r3
    8c02:	4b51      	ldr	r3, [pc, #324]	; (8d48 <setvbuf+0x14c>)
    8c04:	681e      	ldr	r6, [r3, #0]
    8c06:	4604      	mov	r4, r0
    8c08:	460f      	mov	r7, r1
    8c0a:	4690      	mov	r8, r2
    8c0c:	b126      	cbz	r6, 8c18 <setvbuf+0x1c>
    8c0e:	69b3      	ldr	r3, [r6, #24]
    8c10:	b913      	cbnz	r3, 8c18 <setvbuf+0x1c>
    8c12:	4630      	mov	r0, r6
    8c14:	f000 fb7c 	bl	9310 <__sinit>
    8c18:	4b4c      	ldr	r3, [pc, #304]	; (8d4c <setvbuf+0x150>)
    8c1a:	429c      	cmp	r4, r3
    8c1c:	d152      	bne.n	8cc4 <setvbuf+0xc8>
    8c1e:	6874      	ldr	r4, [r6, #4]
    8c20:	f1b8 0f02 	cmp.w	r8, #2
    8c24:	d006      	beq.n	8c34 <setvbuf+0x38>
    8c26:	f1b8 0f01 	cmp.w	r8, #1
    8c2a:	f200 8089 	bhi.w	8d40 <setvbuf+0x144>
    8c2e:	2d00      	cmp	r5, #0
    8c30:	f2c0 8086 	blt.w	8d40 <setvbuf+0x144>
    8c34:	4621      	mov	r1, r4
    8c36:	4630      	mov	r0, r6
    8c38:	f000 fb00 	bl	923c <_fflush_r>
    8c3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    8c3e:	b141      	cbz	r1, 8c52 <setvbuf+0x56>
    8c40:	f104 0344 	add.w	r3, r4, #68	; 0x44
    8c44:	4299      	cmp	r1, r3
    8c46:	d002      	beq.n	8c4e <setvbuf+0x52>
    8c48:	4630      	mov	r0, r6
    8c4a:	f000 fc69 	bl	9520 <_free_r>
    8c4e:	2300      	movs	r3, #0
    8c50:	6363      	str	r3, [r4, #52]	; 0x34
    8c52:	2300      	movs	r3, #0
    8c54:	61a3      	str	r3, [r4, #24]
    8c56:	6063      	str	r3, [r4, #4]
    8c58:	89a3      	ldrh	r3, [r4, #12]
    8c5a:	061b      	lsls	r3, r3, #24
    8c5c:	d503      	bpl.n	8c66 <setvbuf+0x6a>
    8c5e:	6921      	ldr	r1, [r4, #16]
    8c60:	4630      	mov	r0, r6
    8c62:	f000 fc5d 	bl	9520 <_free_r>
    8c66:	89a3      	ldrh	r3, [r4, #12]
    8c68:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
    8c6c:	f023 0303 	bic.w	r3, r3, #3
    8c70:	f1b8 0f02 	cmp.w	r8, #2
    8c74:	81a3      	strh	r3, [r4, #12]
    8c76:	d05d      	beq.n	8d34 <setvbuf+0x138>
    8c78:	ab01      	add	r3, sp, #4
    8c7a:	466a      	mov	r2, sp
    8c7c:	4621      	mov	r1, r4
    8c7e:	4630      	mov	r0, r6
    8c80:	f000 fbd0 	bl	9424 <__swhatbuf_r>
    8c84:	89a3      	ldrh	r3, [r4, #12]
    8c86:	4318      	orrs	r0, r3
    8c88:	81a0      	strh	r0, [r4, #12]
    8c8a:	bb2d      	cbnz	r5, 8cd8 <setvbuf+0xdc>
    8c8c:	9d00      	ldr	r5, [sp, #0]
    8c8e:	4628      	mov	r0, r5
    8c90:	f000 fbec 	bl	946c <malloc>
    8c94:	4607      	mov	r7, r0
    8c96:	2800      	cmp	r0, #0
    8c98:	d14e      	bne.n	8d38 <setvbuf+0x13c>
    8c9a:	f8dd 9000 	ldr.w	r9, [sp]
    8c9e:	45a9      	cmp	r9, r5
    8ca0:	d13c      	bne.n	8d1c <setvbuf+0x120>
    8ca2:	f04f 30ff 	mov.w	r0, #4294967295
    8ca6:	89a3      	ldrh	r3, [r4, #12]
    8ca8:	f043 0302 	orr.w	r3, r3, #2
    8cac:	81a3      	strh	r3, [r4, #12]
    8cae:	2300      	movs	r3, #0
    8cb0:	60a3      	str	r3, [r4, #8]
    8cb2:	f104 0347 	add.w	r3, r4, #71	; 0x47
    8cb6:	6023      	str	r3, [r4, #0]
    8cb8:	6123      	str	r3, [r4, #16]
    8cba:	2301      	movs	r3, #1
    8cbc:	6163      	str	r3, [r4, #20]
    8cbe:	b003      	add	sp, #12
    8cc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    8cc4:	4b22      	ldr	r3, [pc, #136]	; (8d50 <setvbuf+0x154>)
    8cc6:	429c      	cmp	r4, r3
    8cc8:	d101      	bne.n	8cce <setvbuf+0xd2>
    8cca:	68b4      	ldr	r4, [r6, #8]
    8ccc:	e7a8      	b.n	8c20 <setvbuf+0x24>
    8cce:	4b21      	ldr	r3, [pc, #132]	; (8d54 <setvbuf+0x158>)
    8cd0:	429c      	cmp	r4, r3
    8cd2:	bf08      	it	eq
    8cd4:	68f4      	ldreq	r4, [r6, #12]
    8cd6:	e7a3      	b.n	8c20 <setvbuf+0x24>
    8cd8:	2f00      	cmp	r7, #0
    8cda:	d0d8      	beq.n	8c8e <setvbuf+0x92>
    8cdc:	69b3      	ldr	r3, [r6, #24]
    8cde:	b913      	cbnz	r3, 8ce6 <setvbuf+0xea>
    8ce0:	4630      	mov	r0, r6
    8ce2:	f000 fb15 	bl	9310 <__sinit>
    8ce6:	f1b8 0f01 	cmp.w	r8, #1
    8cea:	bf08      	it	eq
    8cec:	89a3      	ldrheq	r3, [r4, #12]
    8cee:	6027      	str	r7, [r4, #0]
    8cf0:	bf04      	itt	eq
    8cf2:	f043 0301 	orreq.w	r3, r3, #1
    8cf6:	81a3      	strheq	r3, [r4, #12]
    8cf8:	89a3      	ldrh	r3, [r4, #12]
    8cfa:	6127      	str	r7, [r4, #16]
    8cfc:	f013 0008 	ands.w	r0, r3, #8
    8d00:	6165      	str	r5, [r4, #20]
    8d02:	d01b      	beq.n	8d3c <setvbuf+0x140>
    8d04:	f013 0001 	ands.w	r0, r3, #1
    8d08:	bf18      	it	ne
    8d0a:	426d      	negne	r5, r5
    8d0c:	f04f 0300 	mov.w	r3, #0
    8d10:	bf1d      	ittte	ne
    8d12:	60a3      	strne	r3, [r4, #8]
    8d14:	61a5      	strne	r5, [r4, #24]
    8d16:	4618      	movne	r0, r3
    8d18:	60a5      	streq	r5, [r4, #8]
    8d1a:	e7d0      	b.n	8cbe <setvbuf+0xc2>
    8d1c:	4648      	mov	r0, r9
    8d1e:	f000 fba5 	bl	946c <malloc>
    8d22:	4607      	mov	r7, r0
    8d24:	2800      	cmp	r0, #0
    8d26:	d0bc      	beq.n	8ca2 <setvbuf+0xa6>
    8d28:	89a3      	ldrh	r3, [r4, #12]
    8d2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    8d2e:	81a3      	strh	r3, [r4, #12]
    8d30:	464d      	mov	r5, r9
    8d32:	e7d3      	b.n	8cdc <setvbuf+0xe0>
    8d34:	2000      	movs	r0, #0
    8d36:	e7b6      	b.n	8ca6 <setvbuf+0xaa>
    8d38:	46a9      	mov	r9, r5
    8d3a:	e7f5      	b.n	8d28 <setvbuf+0x12c>
    8d3c:	60a0      	str	r0, [r4, #8]
    8d3e:	e7be      	b.n	8cbe <setvbuf+0xc2>
    8d40:	f04f 30ff 	mov.w	r0, #4294967295
    8d44:	e7bb      	b.n	8cbe <setvbuf+0xc2>
    8d46:	bf00      	nop
    8d48:	200000d4 	.word	0x200000d4
    8d4c:	0000e034 	.word	0x0000e034
    8d50:	0000e054 	.word	0x0000e054
    8d54:	0000e014 	.word	0x0000e014

00008d58 <sniprintf>:
    8d58:	b40c      	push	{r2, r3}
    8d5a:	b530      	push	{r4, r5, lr}
    8d5c:	4b17      	ldr	r3, [pc, #92]	; (8dbc <sniprintf+0x64>)
    8d5e:	1e0c      	subs	r4, r1, #0
    8d60:	b09d      	sub	sp, #116	; 0x74
    8d62:	681d      	ldr	r5, [r3, #0]
    8d64:	da08      	bge.n	8d78 <sniprintf+0x20>
    8d66:	238b      	movs	r3, #139	; 0x8b
    8d68:	602b      	str	r3, [r5, #0]
    8d6a:	f04f 30ff 	mov.w	r0, #4294967295
    8d6e:	b01d      	add	sp, #116	; 0x74
    8d70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    8d74:	b002      	add	sp, #8
    8d76:	4770      	bx	lr
    8d78:	f44f 7302 	mov.w	r3, #520	; 0x208
    8d7c:	f8ad 3014 	strh.w	r3, [sp, #20]
    8d80:	bf14      	ite	ne
    8d82:	f104 33ff 	addne.w	r3, r4, #4294967295
    8d86:	4623      	moveq	r3, r4
    8d88:	9304      	str	r3, [sp, #16]
    8d8a:	9307      	str	r3, [sp, #28]
    8d8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    8d90:	9002      	str	r0, [sp, #8]
    8d92:	9006      	str	r0, [sp, #24]
    8d94:	f8ad 3016 	strh.w	r3, [sp, #22]
    8d98:	9a20      	ldr	r2, [sp, #128]	; 0x80
    8d9a:	ab21      	add	r3, sp, #132	; 0x84
    8d9c:	a902      	add	r1, sp, #8
    8d9e:	4628      	mov	r0, r5
    8da0:	9301      	str	r3, [sp, #4]
    8da2:	f000 fceb 	bl	977c <_svfiprintf_r>
    8da6:	1c43      	adds	r3, r0, #1
    8da8:	bfbc      	itt	lt
    8daa:	238b      	movlt	r3, #139	; 0x8b
    8dac:	602b      	strlt	r3, [r5, #0]
    8dae:	2c00      	cmp	r4, #0
    8db0:	d0dd      	beq.n	8d6e <sniprintf+0x16>
    8db2:	9b02      	ldr	r3, [sp, #8]
    8db4:	2200      	movs	r2, #0
    8db6:	701a      	strb	r2, [r3, #0]
    8db8:	e7d9      	b.n	8d6e <sniprintf+0x16>
    8dba:	bf00      	nop
    8dbc:	200000d4 	.word	0x200000d4

00008dc0 <strchr>:
    8dc0:	b2c9      	uxtb	r1, r1
    8dc2:	4603      	mov	r3, r0
    8dc4:	f810 2b01 	ldrb.w	r2, [r0], #1
    8dc8:	b11a      	cbz	r2, 8dd2 <strchr+0x12>
    8dca:	4291      	cmp	r1, r2
    8dcc:	d1f9      	bne.n	8dc2 <strchr+0x2>
    8dce:	4618      	mov	r0, r3
    8dd0:	4770      	bx	lr
    8dd2:	2900      	cmp	r1, #0
    8dd4:	bf0c      	ite	eq
    8dd6:	4618      	moveq	r0, r3
    8dd8:	2000      	movne	r0, #0
    8dda:	4770      	bx	lr

00008ddc <strcmp>:
    8ddc:	f810 2b01 	ldrb.w	r2, [r0], #1
    8de0:	f811 3b01 	ldrb.w	r3, [r1], #1
    8de4:	2a01      	cmp	r2, #1
    8de6:	bf28      	it	cs
    8de8:	429a      	cmpcs	r2, r3
    8dea:	d0f7      	beq.n	8ddc <strcmp>
    8dec:	1ad0      	subs	r0, r2, r3
    8dee:	4770      	bx	lr

00008df0 <strlen>:
    8df0:	4603      	mov	r3, r0
    8df2:	f813 2b01 	ldrb.w	r2, [r3], #1
    8df6:	2a00      	cmp	r2, #0
    8df8:	d1fb      	bne.n	8df2 <strlen+0x2>
    8dfa:	1a18      	subs	r0, r3, r0
    8dfc:	3801      	subs	r0, #1
    8dfe:	4770      	bx	lr

00008e00 <strncmp>:
    8e00:	b510      	push	{r4, lr}
    8e02:	b16a      	cbz	r2, 8e20 <strncmp+0x20>
    8e04:	3901      	subs	r1, #1
    8e06:	1884      	adds	r4, r0, r2
    8e08:	f810 3b01 	ldrb.w	r3, [r0], #1
    8e0c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    8e10:	4293      	cmp	r3, r2
    8e12:	d103      	bne.n	8e1c <strncmp+0x1c>
    8e14:	42a0      	cmp	r0, r4
    8e16:	d001      	beq.n	8e1c <strncmp+0x1c>
    8e18:	2b00      	cmp	r3, #0
    8e1a:	d1f5      	bne.n	8e08 <strncmp+0x8>
    8e1c:	1a98      	subs	r0, r3, r2
    8e1e:	bd10      	pop	{r4, pc}
    8e20:	4610      	mov	r0, r2
    8e22:	bd10      	pop	{r4, pc}

00008e24 <strncpy>:
    8e24:	b570      	push	{r4, r5, r6, lr}
    8e26:	4604      	mov	r4, r0
    8e28:	b902      	cbnz	r2, 8e2c <strncpy+0x8>
    8e2a:	bd70      	pop	{r4, r5, r6, pc}
    8e2c:	4623      	mov	r3, r4
    8e2e:	f811 5b01 	ldrb.w	r5, [r1], #1
    8e32:	f803 5b01 	strb.w	r5, [r3], #1
    8e36:	1e56      	subs	r6, r2, #1
    8e38:	b91d      	cbnz	r5, 8e42 <strncpy+0x1e>
    8e3a:	4414      	add	r4, r2
    8e3c:	42a3      	cmp	r3, r4
    8e3e:	d103      	bne.n	8e48 <strncpy+0x24>
    8e40:	bd70      	pop	{r4, r5, r6, pc}
    8e42:	461c      	mov	r4, r3
    8e44:	4632      	mov	r2, r6
    8e46:	e7ef      	b.n	8e28 <strncpy+0x4>
    8e48:	f803 5b01 	strb.w	r5, [r3], #1
    8e4c:	e7f6      	b.n	8e3c <strncpy+0x18>

00008e4e <strnlen>:
    8e4e:	b510      	push	{r4, lr}
    8e50:	4603      	mov	r3, r0
    8e52:	4401      	add	r1, r0
    8e54:	428b      	cmp	r3, r1
    8e56:	d002      	beq.n	8e5e <strnlen+0x10>
    8e58:	781a      	ldrb	r2, [r3, #0]
    8e5a:	1c5c      	adds	r4, r3, #1
    8e5c:	b90a      	cbnz	r2, 8e62 <strnlen+0x14>
    8e5e:	1a18      	subs	r0, r3, r0
    8e60:	bd10      	pop	{r4, pc}
    8e62:	4623      	mov	r3, r4
    8e64:	e7f6      	b.n	8e54 <strnlen+0x6>

00008e66 <strrchr>:
    8e66:	b538      	push	{r3, r4, r5, lr}
    8e68:	4603      	mov	r3, r0
    8e6a:	460d      	mov	r5, r1
    8e6c:	b151      	cbz	r1, 8e84 <strrchr+0x1e>
    8e6e:	2400      	movs	r4, #0
    8e70:	4629      	mov	r1, r5
    8e72:	4618      	mov	r0, r3
    8e74:	f7ff ffa4 	bl	8dc0 <strchr>
    8e78:	b908      	cbnz	r0, 8e7e <strrchr+0x18>
    8e7a:	4620      	mov	r0, r4
    8e7c:	bd38      	pop	{r3, r4, r5, pc}
    8e7e:	1c43      	adds	r3, r0, #1
    8e80:	4604      	mov	r4, r0
    8e82:	e7f5      	b.n	8e70 <strrchr+0xa>
    8e84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8e88:	f7ff bf9a 	b.w	8dc0 <strchr>

00008e8c <strstr>:
    8e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8e8e:	7803      	ldrb	r3, [r0, #0]
    8e90:	b133      	cbz	r3, 8ea0 <strstr+0x14>
    8e92:	4603      	mov	r3, r0
    8e94:	4618      	mov	r0, r3
    8e96:	1c5e      	adds	r6, r3, #1
    8e98:	781b      	ldrb	r3, [r3, #0]
    8e9a:	b933      	cbnz	r3, 8eaa <strstr+0x1e>
    8e9c:	4618      	mov	r0, r3
    8e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8ea0:	780b      	ldrb	r3, [r1, #0]
    8ea2:	2b00      	cmp	r3, #0
    8ea4:	bf18      	it	ne
    8ea6:	2000      	movne	r0, #0
    8ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8eaa:	1e4d      	subs	r5, r1, #1
    8eac:	1e44      	subs	r4, r0, #1
    8eae:	f815 2f01 	ldrb.w	r2, [r5, #1]!
    8eb2:	2a00      	cmp	r2, #0
    8eb4:	d0f3      	beq.n	8e9e <strstr+0x12>
    8eb6:	f814 7f01 	ldrb.w	r7, [r4, #1]!
    8eba:	4297      	cmp	r7, r2
    8ebc:	4633      	mov	r3, r6
    8ebe:	d0f6      	beq.n	8eae <strstr+0x22>
    8ec0:	e7e8      	b.n	8e94 <strstr+0x8>
	...

00008ec4 <strtok>:
    8ec4:	4b13      	ldr	r3, [pc, #76]	; (8f14 <strtok+0x50>)
    8ec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8eca:	681d      	ldr	r5, [r3, #0]
    8ecc:	6dac      	ldr	r4, [r5, #88]	; 0x58
    8ece:	4606      	mov	r6, r0
    8ed0:	460f      	mov	r7, r1
    8ed2:	b9b4      	cbnz	r4, 8f02 <strtok+0x3e>
    8ed4:	2050      	movs	r0, #80	; 0x50
    8ed6:	f000 fac9 	bl	946c <malloc>
    8eda:	65a8      	str	r0, [r5, #88]	; 0x58
    8edc:	6004      	str	r4, [r0, #0]
    8ede:	6044      	str	r4, [r0, #4]
    8ee0:	6084      	str	r4, [r0, #8]
    8ee2:	60c4      	str	r4, [r0, #12]
    8ee4:	6104      	str	r4, [r0, #16]
    8ee6:	6144      	str	r4, [r0, #20]
    8ee8:	6184      	str	r4, [r0, #24]
    8eea:	6284      	str	r4, [r0, #40]	; 0x28
    8eec:	62c4      	str	r4, [r0, #44]	; 0x2c
    8eee:	6304      	str	r4, [r0, #48]	; 0x30
    8ef0:	6344      	str	r4, [r0, #52]	; 0x34
    8ef2:	6384      	str	r4, [r0, #56]	; 0x38
    8ef4:	63c4      	str	r4, [r0, #60]	; 0x3c
    8ef6:	6404      	str	r4, [r0, #64]	; 0x40
    8ef8:	6444      	str	r4, [r0, #68]	; 0x44
    8efa:	6484      	str	r4, [r0, #72]	; 0x48
    8efc:	64c4      	str	r4, [r0, #76]	; 0x4c
    8efe:	7704      	strb	r4, [r0, #28]
    8f00:	6244      	str	r4, [r0, #36]	; 0x24
    8f02:	6daa      	ldr	r2, [r5, #88]	; 0x58
    8f04:	4639      	mov	r1, r7
    8f06:	4630      	mov	r0, r6
    8f08:	2301      	movs	r3, #1
    8f0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8f0e:	f000 b803 	b.w	8f18 <__strtok_r>
    8f12:	bf00      	nop
    8f14:	200000d4 	.word	0x200000d4

00008f18 <__strtok_r>:
    8f18:	b5f0      	push	{r4, r5, r6, r7, lr}
    8f1a:	b918      	cbnz	r0, 8f24 <__strtok_r+0xc>
    8f1c:	6810      	ldr	r0, [r2, #0]
    8f1e:	b908      	cbnz	r0, 8f24 <__strtok_r+0xc>
    8f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8f22:	4620      	mov	r0, r4
    8f24:	4604      	mov	r4, r0
    8f26:	460f      	mov	r7, r1
    8f28:	f814 5b01 	ldrb.w	r5, [r4], #1
    8f2c:	f817 6b01 	ldrb.w	r6, [r7], #1
    8f30:	b91e      	cbnz	r6, 8f3a <__strtok_r+0x22>
    8f32:	b965      	cbnz	r5, 8f4e <__strtok_r+0x36>
    8f34:	6015      	str	r5, [r2, #0]
    8f36:	4628      	mov	r0, r5
    8f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8f3a:	42b5      	cmp	r5, r6
    8f3c:	d1f6      	bne.n	8f2c <__strtok_r+0x14>
    8f3e:	2b00      	cmp	r3, #0
    8f40:	d1ef      	bne.n	8f22 <__strtok_r+0xa>
    8f42:	6014      	str	r4, [r2, #0]
    8f44:	7003      	strb	r3, [r0, #0]
    8f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8f48:	461c      	mov	r4, r3
    8f4a:	e00c      	b.n	8f66 <__strtok_r+0x4e>
    8f4c:	b915      	cbnz	r5, 8f54 <__strtok_r+0x3c>
    8f4e:	f814 3b01 	ldrb.w	r3, [r4], #1
    8f52:	460e      	mov	r6, r1
    8f54:	f816 5b01 	ldrb.w	r5, [r6], #1
    8f58:	42ab      	cmp	r3, r5
    8f5a:	d1f7      	bne.n	8f4c <__strtok_r+0x34>
    8f5c:	2b00      	cmp	r3, #0
    8f5e:	d0f3      	beq.n	8f48 <__strtok_r+0x30>
    8f60:	2300      	movs	r3, #0
    8f62:	f804 3c01 	strb.w	r3, [r4, #-1]
    8f66:	6014      	str	r4, [r2, #0]
    8f68:	bdf0      	pop	{r4, r5, r6, r7, pc}

00008f6a <strtok_r>:
    8f6a:	2301      	movs	r3, #1
    8f6c:	f7ff bfd4 	b.w	8f18 <__strtok_r>

00008f70 <_strtol_l.isra.0>:
    8f70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8f74:	4680      	mov	r8, r0
    8f76:	4689      	mov	r9, r1
    8f78:	4692      	mov	sl, r2
    8f7a:	461f      	mov	r7, r3
    8f7c:	468b      	mov	fp, r1
    8f7e:	465d      	mov	r5, fp
    8f80:	980a      	ldr	r0, [sp, #40]	; 0x28
    8f82:	f815 4b01 	ldrb.w	r4, [r5], #1
    8f86:	f7ff fc49 	bl	881c <__locale_ctype_ptr_l>
    8f8a:	4420      	add	r0, r4
    8f8c:	7846      	ldrb	r6, [r0, #1]
    8f8e:	f016 0608 	ands.w	r6, r6, #8
    8f92:	d10b      	bne.n	8fac <_strtol_l.isra.0+0x3c>
    8f94:	2c2d      	cmp	r4, #45	; 0x2d
    8f96:	d10b      	bne.n	8fb0 <_strtol_l.isra.0+0x40>
    8f98:	782c      	ldrb	r4, [r5, #0]
    8f9a:	2601      	movs	r6, #1
    8f9c:	f10b 0502 	add.w	r5, fp, #2
    8fa0:	b167      	cbz	r7, 8fbc <_strtol_l.isra.0+0x4c>
    8fa2:	2f10      	cmp	r7, #16
    8fa4:	d114      	bne.n	8fd0 <_strtol_l.isra.0+0x60>
    8fa6:	2c30      	cmp	r4, #48	; 0x30
    8fa8:	d00a      	beq.n	8fc0 <_strtol_l.isra.0+0x50>
    8faa:	e011      	b.n	8fd0 <_strtol_l.isra.0+0x60>
    8fac:	46ab      	mov	fp, r5
    8fae:	e7e6      	b.n	8f7e <_strtol_l.isra.0+0xe>
    8fb0:	2c2b      	cmp	r4, #43	; 0x2b
    8fb2:	bf04      	itt	eq
    8fb4:	782c      	ldrbeq	r4, [r5, #0]
    8fb6:	f10b 0502 	addeq.w	r5, fp, #2
    8fba:	e7f1      	b.n	8fa0 <_strtol_l.isra.0+0x30>
    8fbc:	2c30      	cmp	r4, #48	; 0x30
    8fbe:	d127      	bne.n	9010 <_strtol_l.isra.0+0xa0>
    8fc0:	782b      	ldrb	r3, [r5, #0]
    8fc2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    8fc6:	2b58      	cmp	r3, #88	; 0x58
    8fc8:	d14b      	bne.n	9062 <_strtol_l.isra.0+0xf2>
    8fca:	786c      	ldrb	r4, [r5, #1]
    8fcc:	2710      	movs	r7, #16
    8fce:	3502      	adds	r5, #2
    8fd0:	2e00      	cmp	r6, #0
    8fd2:	bf0c      	ite	eq
    8fd4:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
    8fd8:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
    8fdc:	2200      	movs	r2, #0
    8fde:	fbb1 fef7 	udiv	lr, r1, r7
    8fe2:	4610      	mov	r0, r2
    8fe4:	fb07 1c1e 	mls	ip, r7, lr, r1
    8fe8:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    8fec:	2b09      	cmp	r3, #9
    8fee:	d811      	bhi.n	9014 <_strtol_l.isra.0+0xa4>
    8ff0:	461c      	mov	r4, r3
    8ff2:	42a7      	cmp	r7, r4
    8ff4:	dd1d      	ble.n	9032 <_strtol_l.isra.0+0xc2>
    8ff6:	1c53      	adds	r3, r2, #1
    8ff8:	d007      	beq.n	900a <_strtol_l.isra.0+0x9a>
    8ffa:	4586      	cmp	lr, r0
    8ffc:	d316      	bcc.n	902c <_strtol_l.isra.0+0xbc>
    8ffe:	d101      	bne.n	9004 <_strtol_l.isra.0+0x94>
    9000:	45a4      	cmp	ip, r4
    9002:	db13      	blt.n	902c <_strtol_l.isra.0+0xbc>
    9004:	fb00 4007 	mla	r0, r0, r7, r4
    9008:	2201      	movs	r2, #1
    900a:	f815 4b01 	ldrb.w	r4, [r5], #1
    900e:	e7eb      	b.n	8fe8 <_strtol_l.isra.0+0x78>
    9010:	270a      	movs	r7, #10
    9012:	e7dd      	b.n	8fd0 <_strtol_l.isra.0+0x60>
    9014:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
    9018:	2b19      	cmp	r3, #25
    901a:	d801      	bhi.n	9020 <_strtol_l.isra.0+0xb0>
    901c:	3c37      	subs	r4, #55	; 0x37
    901e:	e7e8      	b.n	8ff2 <_strtol_l.isra.0+0x82>
    9020:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
    9024:	2b19      	cmp	r3, #25
    9026:	d804      	bhi.n	9032 <_strtol_l.isra.0+0xc2>
    9028:	3c57      	subs	r4, #87	; 0x57
    902a:	e7e2      	b.n	8ff2 <_strtol_l.isra.0+0x82>
    902c:	f04f 32ff 	mov.w	r2, #4294967295
    9030:	e7eb      	b.n	900a <_strtol_l.isra.0+0x9a>
    9032:	1c53      	adds	r3, r2, #1
    9034:	d108      	bne.n	9048 <_strtol_l.isra.0+0xd8>
    9036:	2322      	movs	r3, #34	; 0x22
    9038:	f8c8 3000 	str.w	r3, [r8]
    903c:	4608      	mov	r0, r1
    903e:	f1ba 0f00 	cmp.w	sl, #0
    9042:	d107      	bne.n	9054 <_strtol_l.isra.0+0xe4>
    9044:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9048:	b106      	cbz	r6, 904c <_strtol_l.isra.0+0xdc>
    904a:	4240      	negs	r0, r0
    904c:	f1ba 0f00 	cmp.w	sl, #0
    9050:	d00c      	beq.n	906c <_strtol_l.isra.0+0xfc>
    9052:	b122      	cbz	r2, 905e <_strtol_l.isra.0+0xee>
    9054:	3d01      	subs	r5, #1
    9056:	f8ca 5000 	str.w	r5, [sl]
    905a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    905e:	464d      	mov	r5, r9
    9060:	e7f9      	b.n	9056 <_strtol_l.isra.0+0xe6>
    9062:	2430      	movs	r4, #48	; 0x30
    9064:	2f00      	cmp	r7, #0
    9066:	d1b3      	bne.n	8fd0 <_strtol_l.isra.0+0x60>
    9068:	2708      	movs	r7, #8
    906a:	e7b1      	b.n	8fd0 <_strtol_l.isra.0+0x60>
    906c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00009070 <strtol>:
    9070:	4b08      	ldr	r3, [pc, #32]	; (9094 <strtol+0x24>)
    9072:	b537      	push	{r0, r1, r2, r4, r5, lr}
    9074:	681c      	ldr	r4, [r3, #0]
    9076:	4d08      	ldr	r5, [pc, #32]	; (9098 <strtol+0x28>)
    9078:	6a23      	ldr	r3, [r4, #32]
    907a:	2b00      	cmp	r3, #0
    907c:	bf08      	it	eq
    907e:	462b      	moveq	r3, r5
    9080:	9300      	str	r3, [sp, #0]
    9082:	4613      	mov	r3, r2
    9084:	460a      	mov	r2, r1
    9086:	4601      	mov	r1, r0
    9088:	4620      	mov	r0, r4
    908a:	f7ff ff71 	bl	8f70 <_strtol_l.isra.0>
    908e:	b003      	add	sp, #12
    9090:	bd30      	pop	{r4, r5, pc}
    9092:	bf00      	nop
    9094:	200000d4 	.word	0x200000d4
    9098:	20000138 	.word	0x20000138

0000909c <_vsniprintf_r>:
    909c:	b530      	push	{r4, r5, lr}
    909e:	1e14      	subs	r4, r2, #0
    90a0:	4605      	mov	r5, r0
    90a2:	b09b      	sub	sp, #108	; 0x6c
    90a4:	4618      	mov	r0, r3
    90a6:	da05      	bge.n	90b4 <_vsniprintf_r+0x18>
    90a8:	238b      	movs	r3, #139	; 0x8b
    90aa:	602b      	str	r3, [r5, #0]
    90ac:	f04f 30ff 	mov.w	r0, #4294967295
    90b0:	b01b      	add	sp, #108	; 0x6c
    90b2:	bd30      	pop	{r4, r5, pc}
    90b4:	f44f 7302 	mov.w	r3, #520	; 0x208
    90b8:	f8ad 300c 	strh.w	r3, [sp, #12]
    90bc:	bf14      	ite	ne
    90be:	f104 33ff 	addne.w	r3, r4, #4294967295
    90c2:	4623      	moveq	r3, r4
    90c4:	9302      	str	r3, [sp, #8]
    90c6:	9305      	str	r3, [sp, #20]
    90c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    90cc:	9100      	str	r1, [sp, #0]
    90ce:	9104      	str	r1, [sp, #16]
    90d0:	f8ad 300e 	strh.w	r3, [sp, #14]
    90d4:	4602      	mov	r2, r0
    90d6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    90d8:	4669      	mov	r1, sp
    90da:	4628      	mov	r0, r5
    90dc:	f000 fb4e 	bl	977c <_svfiprintf_r>
    90e0:	1c43      	adds	r3, r0, #1
    90e2:	bfbc      	itt	lt
    90e4:	238b      	movlt	r3, #139	; 0x8b
    90e6:	602b      	strlt	r3, [r5, #0]
    90e8:	2c00      	cmp	r4, #0
    90ea:	d0e1      	beq.n	90b0 <_vsniprintf_r+0x14>
    90ec:	9b00      	ldr	r3, [sp, #0]
    90ee:	2200      	movs	r2, #0
    90f0:	701a      	strb	r2, [r3, #0]
    90f2:	e7dd      	b.n	90b0 <_vsniprintf_r+0x14>

000090f4 <vsniprintf>:
    90f4:	b507      	push	{r0, r1, r2, lr}
    90f6:	9300      	str	r3, [sp, #0]
    90f8:	4613      	mov	r3, r2
    90fa:	460a      	mov	r2, r1
    90fc:	4601      	mov	r1, r0
    90fe:	4803      	ldr	r0, [pc, #12]	; (910c <vsniprintf+0x18>)
    9100:	6800      	ldr	r0, [r0, #0]
    9102:	f7ff ffcb 	bl	909c <_vsniprintf_r>
    9106:	b003      	add	sp, #12
    9108:	f85d fb04 	ldr.w	pc, [sp], #4
    910c:	200000d4 	.word	0x200000d4

00009110 <__ascii_wctomb>:
    9110:	b149      	cbz	r1, 9126 <__ascii_wctomb+0x16>
    9112:	2aff      	cmp	r2, #255	; 0xff
    9114:	bf85      	ittet	hi
    9116:	238a      	movhi	r3, #138	; 0x8a
    9118:	6003      	strhi	r3, [r0, #0]
    911a:	700a      	strbls	r2, [r1, #0]
    911c:	f04f 30ff 	movhi.w	r0, #4294967295
    9120:	bf98      	it	ls
    9122:	2001      	movls	r0, #1
    9124:	4770      	bx	lr
    9126:	4608      	mov	r0, r1
    9128:	4770      	bx	lr
	...

0000912c <__sflush_r>:
    912c:	898a      	ldrh	r2, [r1, #12]
    912e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9132:	4605      	mov	r5, r0
    9134:	0710      	lsls	r0, r2, #28
    9136:	460c      	mov	r4, r1
    9138:	d45a      	bmi.n	91f0 <__sflush_r+0xc4>
    913a:	684b      	ldr	r3, [r1, #4]
    913c:	2b00      	cmp	r3, #0
    913e:	dc05      	bgt.n	914c <__sflush_r+0x20>
    9140:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    9142:	2b00      	cmp	r3, #0
    9144:	dc02      	bgt.n	914c <__sflush_r+0x20>
    9146:	2000      	movs	r0, #0
    9148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    914c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    914e:	2e00      	cmp	r6, #0
    9150:	d0f9      	beq.n	9146 <__sflush_r+0x1a>
    9152:	2300      	movs	r3, #0
    9154:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    9158:	682f      	ldr	r7, [r5, #0]
    915a:	602b      	str	r3, [r5, #0]
    915c:	d033      	beq.n	91c6 <__sflush_r+0x9a>
    915e:	6d60      	ldr	r0, [r4, #84]	; 0x54
    9160:	89a3      	ldrh	r3, [r4, #12]
    9162:	075a      	lsls	r2, r3, #29
    9164:	d505      	bpl.n	9172 <__sflush_r+0x46>
    9166:	6863      	ldr	r3, [r4, #4]
    9168:	1ac0      	subs	r0, r0, r3
    916a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    916c:	b10b      	cbz	r3, 9172 <__sflush_r+0x46>
    916e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    9170:	1ac0      	subs	r0, r0, r3
    9172:	2300      	movs	r3, #0
    9174:	4602      	mov	r2, r0
    9176:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    9178:	6a21      	ldr	r1, [r4, #32]
    917a:	4628      	mov	r0, r5
    917c:	47b0      	blx	r6
    917e:	1c43      	adds	r3, r0, #1
    9180:	89a3      	ldrh	r3, [r4, #12]
    9182:	d106      	bne.n	9192 <__sflush_r+0x66>
    9184:	6829      	ldr	r1, [r5, #0]
    9186:	291d      	cmp	r1, #29
    9188:	d84b      	bhi.n	9222 <__sflush_r+0xf6>
    918a:	4a2b      	ldr	r2, [pc, #172]	; (9238 <__sflush_r+0x10c>)
    918c:	40ca      	lsrs	r2, r1
    918e:	07d6      	lsls	r6, r2, #31
    9190:	d547      	bpl.n	9222 <__sflush_r+0xf6>
    9192:	2200      	movs	r2, #0
    9194:	6062      	str	r2, [r4, #4]
    9196:	04d9      	lsls	r1, r3, #19
    9198:	6922      	ldr	r2, [r4, #16]
    919a:	6022      	str	r2, [r4, #0]
    919c:	d504      	bpl.n	91a8 <__sflush_r+0x7c>
    919e:	1c42      	adds	r2, r0, #1
    91a0:	d101      	bne.n	91a6 <__sflush_r+0x7a>
    91a2:	682b      	ldr	r3, [r5, #0]
    91a4:	b903      	cbnz	r3, 91a8 <__sflush_r+0x7c>
    91a6:	6560      	str	r0, [r4, #84]	; 0x54
    91a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    91aa:	602f      	str	r7, [r5, #0]
    91ac:	2900      	cmp	r1, #0
    91ae:	d0ca      	beq.n	9146 <__sflush_r+0x1a>
    91b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
    91b4:	4299      	cmp	r1, r3
    91b6:	d002      	beq.n	91be <__sflush_r+0x92>
    91b8:	4628      	mov	r0, r5
    91ba:	f000 f9b1 	bl	9520 <_free_r>
    91be:	2000      	movs	r0, #0
    91c0:	6360      	str	r0, [r4, #52]	; 0x34
    91c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    91c6:	6a21      	ldr	r1, [r4, #32]
    91c8:	2301      	movs	r3, #1
    91ca:	4628      	mov	r0, r5
    91cc:	47b0      	blx	r6
    91ce:	1c41      	adds	r1, r0, #1
    91d0:	d1c6      	bne.n	9160 <__sflush_r+0x34>
    91d2:	682b      	ldr	r3, [r5, #0]
    91d4:	2b00      	cmp	r3, #0
    91d6:	d0c3      	beq.n	9160 <__sflush_r+0x34>
    91d8:	2b1d      	cmp	r3, #29
    91da:	d001      	beq.n	91e0 <__sflush_r+0xb4>
    91dc:	2b16      	cmp	r3, #22
    91de:	d101      	bne.n	91e4 <__sflush_r+0xb8>
    91e0:	602f      	str	r7, [r5, #0]
    91e2:	e7b0      	b.n	9146 <__sflush_r+0x1a>
    91e4:	89a3      	ldrh	r3, [r4, #12]
    91e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    91ea:	81a3      	strh	r3, [r4, #12]
    91ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    91f0:	690f      	ldr	r7, [r1, #16]
    91f2:	2f00      	cmp	r7, #0
    91f4:	d0a7      	beq.n	9146 <__sflush_r+0x1a>
    91f6:	0793      	lsls	r3, r2, #30
    91f8:	680e      	ldr	r6, [r1, #0]
    91fa:	bf08      	it	eq
    91fc:	694b      	ldreq	r3, [r1, #20]
    91fe:	600f      	str	r7, [r1, #0]
    9200:	bf18      	it	ne
    9202:	2300      	movne	r3, #0
    9204:	eba6 0807 	sub.w	r8, r6, r7
    9208:	608b      	str	r3, [r1, #8]
    920a:	f1b8 0f00 	cmp.w	r8, #0
    920e:	dd9a      	ble.n	9146 <__sflush_r+0x1a>
    9210:	4643      	mov	r3, r8
    9212:	463a      	mov	r2, r7
    9214:	6a21      	ldr	r1, [r4, #32]
    9216:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    9218:	4628      	mov	r0, r5
    921a:	47b0      	blx	r6
    921c:	2800      	cmp	r0, #0
    921e:	dc07      	bgt.n	9230 <__sflush_r+0x104>
    9220:	89a3      	ldrh	r3, [r4, #12]
    9222:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9226:	81a3      	strh	r3, [r4, #12]
    9228:	f04f 30ff 	mov.w	r0, #4294967295
    922c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9230:	4407      	add	r7, r0
    9232:	eba8 0800 	sub.w	r8, r8, r0
    9236:	e7e8      	b.n	920a <__sflush_r+0xde>
    9238:	20400001 	.word	0x20400001

0000923c <_fflush_r>:
    923c:	b538      	push	{r3, r4, r5, lr}
    923e:	690b      	ldr	r3, [r1, #16]
    9240:	4605      	mov	r5, r0
    9242:	460c      	mov	r4, r1
    9244:	b1db      	cbz	r3, 927e <_fflush_r+0x42>
    9246:	b118      	cbz	r0, 9250 <_fflush_r+0x14>
    9248:	6983      	ldr	r3, [r0, #24]
    924a:	b90b      	cbnz	r3, 9250 <_fflush_r+0x14>
    924c:	f000 f860 	bl	9310 <__sinit>
    9250:	4b0c      	ldr	r3, [pc, #48]	; (9284 <_fflush_r+0x48>)
    9252:	429c      	cmp	r4, r3
    9254:	d109      	bne.n	926a <_fflush_r+0x2e>
    9256:	686c      	ldr	r4, [r5, #4]
    9258:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    925c:	b17b      	cbz	r3, 927e <_fflush_r+0x42>
    925e:	4621      	mov	r1, r4
    9260:	4628      	mov	r0, r5
    9262:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9266:	f7ff bf61 	b.w	912c <__sflush_r>
    926a:	4b07      	ldr	r3, [pc, #28]	; (9288 <_fflush_r+0x4c>)
    926c:	429c      	cmp	r4, r3
    926e:	d101      	bne.n	9274 <_fflush_r+0x38>
    9270:	68ac      	ldr	r4, [r5, #8]
    9272:	e7f1      	b.n	9258 <_fflush_r+0x1c>
    9274:	4b05      	ldr	r3, [pc, #20]	; (928c <_fflush_r+0x50>)
    9276:	429c      	cmp	r4, r3
    9278:	bf08      	it	eq
    927a:	68ec      	ldreq	r4, [r5, #12]
    927c:	e7ec      	b.n	9258 <_fflush_r+0x1c>
    927e:	2000      	movs	r0, #0
    9280:	bd38      	pop	{r3, r4, r5, pc}
    9282:	bf00      	nop
    9284:	0000e034 	.word	0x0000e034
    9288:	0000e054 	.word	0x0000e054
    928c:	0000e014 	.word	0x0000e014

00009290 <_cleanup_r>:
    9290:	4901      	ldr	r1, [pc, #4]	; (9298 <_cleanup_r+0x8>)
    9292:	f000 b8a9 	b.w	93e8 <_fwalk_reent>
    9296:	bf00      	nop
    9298:	0000923d 	.word	0x0000923d

0000929c <std.isra.0>:
    929c:	2300      	movs	r3, #0
    929e:	b510      	push	{r4, lr}
    92a0:	4604      	mov	r4, r0
    92a2:	6003      	str	r3, [r0, #0]
    92a4:	6043      	str	r3, [r0, #4]
    92a6:	6083      	str	r3, [r0, #8]
    92a8:	8181      	strh	r1, [r0, #12]
    92aa:	6643      	str	r3, [r0, #100]	; 0x64
    92ac:	81c2      	strh	r2, [r0, #14]
    92ae:	6103      	str	r3, [r0, #16]
    92b0:	6143      	str	r3, [r0, #20]
    92b2:	6183      	str	r3, [r0, #24]
    92b4:	4619      	mov	r1, r3
    92b6:	2208      	movs	r2, #8
    92b8:	305c      	adds	r0, #92	; 0x5c
    92ba:	f7ff faf8 	bl	88ae <memset>
    92be:	4b05      	ldr	r3, [pc, #20]	; (92d4 <std.isra.0+0x38>)
    92c0:	6263      	str	r3, [r4, #36]	; 0x24
    92c2:	4b05      	ldr	r3, [pc, #20]	; (92d8 <std.isra.0+0x3c>)
    92c4:	62a3      	str	r3, [r4, #40]	; 0x28
    92c6:	4b05      	ldr	r3, [pc, #20]	; (92dc <std.isra.0+0x40>)
    92c8:	62e3      	str	r3, [r4, #44]	; 0x2c
    92ca:	4b05      	ldr	r3, [pc, #20]	; (92e0 <std.isra.0+0x44>)
    92cc:	6224      	str	r4, [r4, #32]
    92ce:	6323      	str	r3, [r4, #48]	; 0x30
    92d0:	bd10      	pop	{r4, pc}
    92d2:	bf00      	nop
    92d4:	00009985 	.word	0x00009985
    92d8:	000099a7 	.word	0x000099a7
    92dc:	000099df 	.word	0x000099df
    92e0:	00009a03 	.word	0x00009a03

000092e4 <__sfmoreglue>:
    92e4:	b570      	push	{r4, r5, r6, lr}
    92e6:	1e4a      	subs	r2, r1, #1
    92e8:	2568      	movs	r5, #104	; 0x68
    92ea:	4355      	muls	r5, r2
    92ec:	460e      	mov	r6, r1
    92ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
    92f2:	f000 f963 	bl	95bc <_malloc_r>
    92f6:	4604      	mov	r4, r0
    92f8:	b140      	cbz	r0, 930c <__sfmoreglue+0x28>
    92fa:	2100      	movs	r1, #0
    92fc:	e880 0042 	stmia.w	r0, {r1, r6}
    9300:	300c      	adds	r0, #12
    9302:	60a0      	str	r0, [r4, #8]
    9304:	f105 0268 	add.w	r2, r5, #104	; 0x68
    9308:	f7ff fad1 	bl	88ae <memset>
    930c:	4620      	mov	r0, r4
    930e:	bd70      	pop	{r4, r5, r6, pc}

00009310 <__sinit>:
    9310:	6983      	ldr	r3, [r0, #24]
    9312:	b510      	push	{r4, lr}
    9314:	4604      	mov	r4, r0
    9316:	bb33      	cbnz	r3, 9366 <__sinit+0x56>
    9318:	6483      	str	r3, [r0, #72]	; 0x48
    931a:	64c3      	str	r3, [r0, #76]	; 0x4c
    931c:	6503      	str	r3, [r0, #80]	; 0x50
    931e:	4b12      	ldr	r3, [pc, #72]	; (9368 <__sinit+0x58>)
    9320:	4a12      	ldr	r2, [pc, #72]	; (936c <__sinit+0x5c>)
    9322:	681b      	ldr	r3, [r3, #0]
    9324:	6282      	str	r2, [r0, #40]	; 0x28
    9326:	4298      	cmp	r0, r3
    9328:	bf04      	itt	eq
    932a:	2301      	moveq	r3, #1
    932c:	6183      	streq	r3, [r0, #24]
    932e:	f000 f81f 	bl	9370 <__sfp>
    9332:	6060      	str	r0, [r4, #4]
    9334:	4620      	mov	r0, r4
    9336:	f000 f81b 	bl	9370 <__sfp>
    933a:	60a0      	str	r0, [r4, #8]
    933c:	4620      	mov	r0, r4
    933e:	f000 f817 	bl	9370 <__sfp>
    9342:	2200      	movs	r2, #0
    9344:	60e0      	str	r0, [r4, #12]
    9346:	2104      	movs	r1, #4
    9348:	6860      	ldr	r0, [r4, #4]
    934a:	f7ff ffa7 	bl	929c <std.isra.0>
    934e:	2201      	movs	r2, #1
    9350:	2109      	movs	r1, #9
    9352:	68a0      	ldr	r0, [r4, #8]
    9354:	f7ff ffa2 	bl	929c <std.isra.0>
    9358:	2202      	movs	r2, #2
    935a:	2112      	movs	r1, #18
    935c:	68e0      	ldr	r0, [r4, #12]
    935e:	f7ff ff9d 	bl	929c <std.isra.0>
    9362:	2301      	movs	r3, #1
    9364:	61a3      	str	r3, [r4, #24]
    9366:	bd10      	pop	{r4, pc}
    9368:	0000dee0 	.word	0x0000dee0
    936c:	00009291 	.word	0x00009291

00009370 <__sfp>:
    9370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9372:	4b1c      	ldr	r3, [pc, #112]	; (93e4 <__sfp+0x74>)
    9374:	681e      	ldr	r6, [r3, #0]
    9376:	69b3      	ldr	r3, [r6, #24]
    9378:	4607      	mov	r7, r0
    937a:	b913      	cbnz	r3, 9382 <__sfp+0x12>
    937c:	4630      	mov	r0, r6
    937e:	f7ff ffc7 	bl	9310 <__sinit>
    9382:	3648      	adds	r6, #72	; 0x48
    9384:	68b4      	ldr	r4, [r6, #8]
    9386:	6873      	ldr	r3, [r6, #4]
    9388:	3b01      	subs	r3, #1
    938a:	d503      	bpl.n	9394 <__sfp+0x24>
    938c:	6833      	ldr	r3, [r6, #0]
    938e:	b133      	cbz	r3, 939e <__sfp+0x2e>
    9390:	6836      	ldr	r6, [r6, #0]
    9392:	e7f7      	b.n	9384 <__sfp+0x14>
    9394:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    9398:	b16d      	cbz	r5, 93b6 <__sfp+0x46>
    939a:	3468      	adds	r4, #104	; 0x68
    939c:	e7f4      	b.n	9388 <__sfp+0x18>
    939e:	2104      	movs	r1, #4
    93a0:	4638      	mov	r0, r7
    93a2:	f7ff ff9f 	bl	92e4 <__sfmoreglue>
    93a6:	6030      	str	r0, [r6, #0]
    93a8:	2800      	cmp	r0, #0
    93aa:	d1f1      	bne.n	9390 <__sfp+0x20>
    93ac:	230c      	movs	r3, #12
    93ae:	603b      	str	r3, [r7, #0]
    93b0:	4604      	mov	r4, r0
    93b2:	4620      	mov	r0, r4
    93b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    93b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    93ba:	81e3      	strh	r3, [r4, #14]
    93bc:	2301      	movs	r3, #1
    93be:	81a3      	strh	r3, [r4, #12]
    93c0:	6665      	str	r5, [r4, #100]	; 0x64
    93c2:	6025      	str	r5, [r4, #0]
    93c4:	60a5      	str	r5, [r4, #8]
    93c6:	6065      	str	r5, [r4, #4]
    93c8:	6125      	str	r5, [r4, #16]
    93ca:	6165      	str	r5, [r4, #20]
    93cc:	61a5      	str	r5, [r4, #24]
    93ce:	2208      	movs	r2, #8
    93d0:	4629      	mov	r1, r5
    93d2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    93d6:	f7ff fa6a 	bl	88ae <memset>
    93da:	6365      	str	r5, [r4, #52]	; 0x34
    93dc:	63a5      	str	r5, [r4, #56]	; 0x38
    93de:	64a5      	str	r5, [r4, #72]	; 0x48
    93e0:	64e5      	str	r5, [r4, #76]	; 0x4c
    93e2:	e7e6      	b.n	93b2 <__sfp+0x42>
    93e4:	0000dee0 	.word	0x0000dee0

000093e8 <_fwalk_reent>:
    93e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    93ec:	4680      	mov	r8, r0
    93ee:	4689      	mov	r9, r1
    93f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
    93f4:	2600      	movs	r6, #0
    93f6:	b914      	cbnz	r4, 93fe <_fwalk_reent+0x16>
    93f8:	4630      	mov	r0, r6
    93fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    93fe:	68a5      	ldr	r5, [r4, #8]
    9400:	6867      	ldr	r7, [r4, #4]
    9402:	3f01      	subs	r7, #1
    9404:	d501      	bpl.n	940a <_fwalk_reent+0x22>
    9406:	6824      	ldr	r4, [r4, #0]
    9408:	e7f5      	b.n	93f6 <_fwalk_reent+0xe>
    940a:	89ab      	ldrh	r3, [r5, #12]
    940c:	2b01      	cmp	r3, #1
    940e:	d907      	bls.n	9420 <_fwalk_reent+0x38>
    9410:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    9414:	3301      	adds	r3, #1
    9416:	d003      	beq.n	9420 <_fwalk_reent+0x38>
    9418:	4629      	mov	r1, r5
    941a:	4640      	mov	r0, r8
    941c:	47c8      	blx	r9
    941e:	4306      	orrs	r6, r0
    9420:	3568      	adds	r5, #104	; 0x68
    9422:	e7ee      	b.n	9402 <_fwalk_reent+0x1a>

00009424 <__swhatbuf_r>:
    9424:	b570      	push	{r4, r5, r6, lr}
    9426:	460e      	mov	r6, r1
    9428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    942c:	2900      	cmp	r1, #0
    942e:	b090      	sub	sp, #64	; 0x40
    9430:	4614      	mov	r4, r2
    9432:	461d      	mov	r5, r3
    9434:	da07      	bge.n	9446 <__swhatbuf_r+0x22>
    9436:	2300      	movs	r3, #0
    9438:	602b      	str	r3, [r5, #0]
    943a:	89b3      	ldrh	r3, [r6, #12]
    943c:	061a      	lsls	r2, r3, #24
    943e:	d410      	bmi.n	9462 <__swhatbuf_r+0x3e>
    9440:	f44f 6380 	mov.w	r3, #1024	; 0x400
    9444:	e00e      	b.n	9464 <__swhatbuf_r+0x40>
    9446:	aa01      	add	r2, sp, #4
    9448:	f000 fb02 	bl	9a50 <_fstat_r>
    944c:	2800      	cmp	r0, #0
    944e:	dbf2      	blt.n	9436 <__swhatbuf_r+0x12>
    9450:	9a02      	ldr	r2, [sp, #8]
    9452:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    9456:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    945a:	425a      	negs	r2, r3
    945c:	415a      	adcs	r2, r3
    945e:	602a      	str	r2, [r5, #0]
    9460:	e7ee      	b.n	9440 <__swhatbuf_r+0x1c>
    9462:	2340      	movs	r3, #64	; 0x40
    9464:	2000      	movs	r0, #0
    9466:	6023      	str	r3, [r4, #0]
    9468:	b010      	add	sp, #64	; 0x40
    946a:	bd70      	pop	{r4, r5, r6, pc}

0000946c <malloc>:
    946c:	4b02      	ldr	r3, [pc, #8]	; (9478 <malloc+0xc>)
    946e:	4601      	mov	r1, r0
    9470:	6818      	ldr	r0, [r3, #0]
    9472:	f000 b8a3 	b.w	95bc <_malloc_r>
    9476:	bf00      	nop
    9478:	200000d4 	.word	0x200000d4
    947c:	00000000 	.word	0x00000000

00009480 <memchr>:
    9480:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    9484:	2a10      	cmp	r2, #16
    9486:	db2b      	blt.n	94e0 <memchr+0x60>
    9488:	f010 0f07 	tst.w	r0, #7
    948c:	d008      	beq.n	94a0 <memchr+0x20>
    948e:	f810 3b01 	ldrb.w	r3, [r0], #1
    9492:	3a01      	subs	r2, #1
    9494:	428b      	cmp	r3, r1
    9496:	d02d      	beq.n	94f4 <memchr+0x74>
    9498:	f010 0f07 	tst.w	r0, #7
    949c:	b342      	cbz	r2, 94f0 <memchr+0x70>
    949e:	d1f6      	bne.n	948e <memchr+0xe>
    94a0:	b4f0      	push	{r4, r5, r6, r7}
    94a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    94a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    94aa:	f022 0407 	bic.w	r4, r2, #7
    94ae:	f07f 0700 	mvns.w	r7, #0
    94b2:	2300      	movs	r3, #0
    94b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    94b8:	3c08      	subs	r4, #8
    94ba:	ea85 0501 	eor.w	r5, r5, r1
    94be:	ea86 0601 	eor.w	r6, r6, r1
    94c2:	fa85 f547 	uadd8	r5, r5, r7
    94c6:	faa3 f587 	sel	r5, r3, r7
    94ca:	fa86 f647 	uadd8	r6, r6, r7
    94ce:	faa5 f687 	sel	r6, r5, r7
    94d2:	b98e      	cbnz	r6, 94f8 <memchr+0x78>
    94d4:	d1ee      	bne.n	94b4 <memchr+0x34>
    94d6:	bcf0      	pop	{r4, r5, r6, r7}
    94d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    94dc:	f002 0207 	and.w	r2, r2, #7
    94e0:	b132      	cbz	r2, 94f0 <memchr+0x70>
    94e2:	f810 3b01 	ldrb.w	r3, [r0], #1
    94e6:	3a01      	subs	r2, #1
    94e8:	ea83 0301 	eor.w	r3, r3, r1
    94ec:	b113      	cbz	r3, 94f4 <memchr+0x74>
    94ee:	d1f8      	bne.n	94e2 <memchr+0x62>
    94f0:	2000      	movs	r0, #0
    94f2:	4770      	bx	lr
    94f4:	3801      	subs	r0, #1
    94f6:	4770      	bx	lr
    94f8:	2d00      	cmp	r5, #0
    94fa:	bf06      	itte	eq
    94fc:	4635      	moveq	r5, r6
    94fe:	3803      	subeq	r0, #3
    9500:	3807      	subne	r0, #7
    9502:	f015 0f01 	tst.w	r5, #1
    9506:	d107      	bne.n	9518 <memchr+0x98>
    9508:	3001      	adds	r0, #1
    950a:	f415 7f80 	tst.w	r5, #256	; 0x100
    950e:	bf02      	ittt	eq
    9510:	3001      	addeq	r0, #1
    9512:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    9516:	3001      	addeq	r0, #1
    9518:	bcf0      	pop	{r4, r5, r6, r7}
    951a:	3801      	subs	r0, #1
    951c:	4770      	bx	lr
    951e:	bf00      	nop

00009520 <_free_r>:
    9520:	b538      	push	{r3, r4, r5, lr}
    9522:	4605      	mov	r5, r0
    9524:	2900      	cmp	r1, #0
    9526:	d045      	beq.n	95b4 <_free_r+0x94>
    9528:	f851 3c04 	ldr.w	r3, [r1, #-4]
    952c:	1f0c      	subs	r4, r1, #4
    952e:	2b00      	cmp	r3, #0
    9530:	bfb8      	it	lt
    9532:	18e4      	addlt	r4, r4, r3
    9534:	f000 fab0 	bl	9a98 <__malloc_lock>
    9538:	4a1f      	ldr	r2, [pc, #124]	; (95b8 <_free_r+0x98>)
    953a:	6813      	ldr	r3, [r2, #0]
    953c:	4610      	mov	r0, r2
    953e:	b933      	cbnz	r3, 954e <_free_r+0x2e>
    9540:	6063      	str	r3, [r4, #4]
    9542:	6014      	str	r4, [r2, #0]
    9544:	4628      	mov	r0, r5
    9546:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    954a:	f000 baa6 	b.w	9a9a <__malloc_unlock>
    954e:	42a3      	cmp	r3, r4
    9550:	d90c      	bls.n	956c <_free_r+0x4c>
    9552:	6821      	ldr	r1, [r4, #0]
    9554:	1862      	adds	r2, r4, r1
    9556:	4293      	cmp	r3, r2
    9558:	bf04      	itt	eq
    955a:	681a      	ldreq	r2, [r3, #0]
    955c:	685b      	ldreq	r3, [r3, #4]
    955e:	6063      	str	r3, [r4, #4]
    9560:	bf04      	itt	eq
    9562:	1852      	addeq	r2, r2, r1
    9564:	6022      	streq	r2, [r4, #0]
    9566:	6004      	str	r4, [r0, #0]
    9568:	e7ec      	b.n	9544 <_free_r+0x24>
    956a:	4613      	mov	r3, r2
    956c:	685a      	ldr	r2, [r3, #4]
    956e:	b10a      	cbz	r2, 9574 <_free_r+0x54>
    9570:	42a2      	cmp	r2, r4
    9572:	d9fa      	bls.n	956a <_free_r+0x4a>
    9574:	6819      	ldr	r1, [r3, #0]
    9576:	1858      	adds	r0, r3, r1
    9578:	42a0      	cmp	r0, r4
    957a:	d10b      	bne.n	9594 <_free_r+0x74>
    957c:	6820      	ldr	r0, [r4, #0]
    957e:	4401      	add	r1, r0
    9580:	1858      	adds	r0, r3, r1
    9582:	4282      	cmp	r2, r0
    9584:	6019      	str	r1, [r3, #0]
    9586:	d1dd      	bne.n	9544 <_free_r+0x24>
    9588:	6810      	ldr	r0, [r2, #0]
    958a:	6852      	ldr	r2, [r2, #4]
    958c:	605a      	str	r2, [r3, #4]
    958e:	4401      	add	r1, r0
    9590:	6019      	str	r1, [r3, #0]
    9592:	e7d7      	b.n	9544 <_free_r+0x24>
    9594:	d902      	bls.n	959c <_free_r+0x7c>
    9596:	230c      	movs	r3, #12
    9598:	602b      	str	r3, [r5, #0]
    959a:	e7d3      	b.n	9544 <_free_r+0x24>
    959c:	6820      	ldr	r0, [r4, #0]
    959e:	1821      	adds	r1, r4, r0
    95a0:	428a      	cmp	r2, r1
    95a2:	bf04      	itt	eq
    95a4:	6811      	ldreq	r1, [r2, #0]
    95a6:	6852      	ldreq	r2, [r2, #4]
    95a8:	6062      	str	r2, [r4, #4]
    95aa:	bf04      	itt	eq
    95ac:	1809      	addeq	r1, r1, r0
    95ae:	6021      	streq	r1, [r4, #0]
    95b0:	605c      	str	r4, [r3, #4]
    95b2:	e7c7      	b.n	9544 <_free_r+0x24>
    95b4:	bd38      	pop	{r3, r4, r5, pc}
    95b6:	bf00      	nop
    95b8:	20010c70 	.word	0x20010c70

000095bc <_malloc_r>:
    95bc:	b570      	push	{r4, r5, r6, lr}
    95be:	1ccd      	adds	r5, r1, #3
    95c0:	f025 0503 	bic.w	r5, r5, #3
    95c4:	3508      	adds	r5, #8
    95c6:	2d0c      	cmp	r5, #12
    95c8:	bf38      	it	cc
    95ca:	250c      	movcc	r5, #12
    95cc:	2d00      	cmp	r5, #0
    95ce:	4606      	mov	r6, r0
    95d0:	db01      	blt.n	95d6 <_malloc_r+0x1a>
    95d2:	42a9      	cmp	r1, r5
    95d4:	d903      	bls.n	95de <_malloc_r+0x22>
    95d6:	230c      	movs	r3, #12
    95d8:	6033      	str	r3, [r6, #0]
    95da:	2000      	movs	r0, #0
    95dc:	bd70      	pop	{r4, r5, r6, pc}
    95de:	f000 fa5b 	bl	9a98 <__malloc_lock>
    95e2:	4a23      	ldr	r2, [pc, #140]	; (9670 <_malloc_r+0xb4>)
    95e4:	6814      	ldr	r4, [r2, #0]
    95e6:	4621      	mov	r1, r4
    95e8:	b991      	cbnz	r1, 9610 <_malloc_r+0x54>
    95ea:	4c22      	ldr	r4, [pc, #136]	; (9674 <_malloc_r+0xb8>)
    95ec:	6823      	ldr	r3, [r4, #0]
    95ee:	b91b      	cbnz	r3, 95f8 <_malloc_r+0x3c>
    95f0:	4630      	mov	r0, r6
    95f2:	f000 f9b7 	bl	9964 <_sbrk_r>
    95f6:	6020      	str	r0, [r4, #0]
    95f8:	4629      	mov	r1, r5
    95fa:	4630      	mov	r0, r6
    95fc:	f000 f9b2 	bl	9964 <_sbrk_r>
    9600:	1c43      	adds	r3, r0, #1
    9602:	d126      	bne.n	9652 <_malloc_r+0x96>
    9604:	230c      	movs	r3, #12
    9606:	6033      	str	r3, [r6, #0]
    9608:	4630      	mov	r0, r6
    960a:	f000 fa46 	bl	9a9a <__malloc_unlock>
    960e:	e7e4      	b.n	95da <_malloc_r+0x1e>
    9610:	680b      	ldr	r3, [r1, #0]
    9612:	1b5b      	subs	r3, r3, r5
    9614:	d41a      	bmi.n	964c <_malloc_r+0x90>
    9616:	2b0b      	cmp	r3, #11
    9618:	d90f      	bls.n	963a <_malloc_r+0x7e>
    961a:	600b      	str	r3, [r1, #0]
    961c:	50cd      	str	r5, [r1, r3]
    961e:	18cc      	adds	r4, r1, r3
    9620:	4630      	mov	r0, r6
    9622:	f000 fa3a 	bl	9a9a <__malloc_unlock>
    9626:	f104 000b 	add.w	r0, r4, #11
    962a:	1d23      	adds	r3, r4, #4
    962c:	f020 0007 	bic.w	r0, r0, #7
    9630:	1ac3      	subs	r3, r0, r3
    9632:	d01b      	beq.n	966c <_malloc_r+0xb0>
    9634:	425a      	negs	r2, r3
    9636:	50e2      	str	r2, [r4, r3]
    9638:	bd70      	pop	{r4, r5, r6, pc}
    963a:	428c      	cmp	r4, r1
    963c:	bf0d      	iteet	eq
    963e:	6863      	ldreq	r3, [r4, #4]
    9640:	684b      	ldrne	r3, [r1, #4]
    9642:	6063      	strne	r3, [r4, #4]
    9644:	6013      	streq	r3, [r2, #0]
    9646:	bf18      	it	ne
    9648:	460c      	movne	r4, r1
    964a:	e7e9      	b.n	9620 <_malloc_r+0x64>
    964c:	460c      	mov	r4, r1
    964e:	6849      	ldr	r1, [r1, #4]
    9650:	e7ca      	b.n	95e8 <_malloc_r+0x2c>
    9652:	1cc4      	adds	r4, r0, #3
    9654:	f024 0403 	bic.w	r4, r4, #3
    9658:	42a0      	cmp	r0, r4
    965a:	d005      	beq.n	9668 <_malloc_r+0xac>
    965c:	1a21      	subs	r1, r4, r0
    965e:	4630      	mov	r0, r6
    9660:	f000 f980 	bl	9964 <_sbrk_r>
    9664:	3001      	adds	r0, #1
    9666:	d0cd      	beq.n	9604 <_malloc_r+0x48>
    9668:	6025      	str	r5, [r4, #0]
    966a:	e7d9      	b.n	9620 <_malloc_r+0x64>
    966c:	bd70      	pop	{r4, r5, r6, pc}
    966e:	bf00      	nop
    9670:	20010c70 	.word	0x20010c70
    9674:	20010c74 	.word	0x20010c74

00009678 <_realloc_r>:
    9678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    967a:	4607      	mov	r7, r0
    967c:	4614      	mov	r4, r2
    967e:	460e      	mov	r6, r1
    9680:	b921      	cbnz	r1, 968c <_realloc_r+0x14>
    9682:	4611      	mov	r1, r2
    9684:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9688:	f7ff bf98 	b.w	95bc <_malloc_r>
    968c:	b922      	cbnz	r2, 9698 <_realloc_r+0x20>
    968e:	f7ff ff47 	bl	9520 <_free_r>
    9692:	4625      	mov	r5, r4
    9694:	4628      	mov	r0, r5
    9696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9698:	f000 fa00 	bl	9a9c <_malloc_usable_size_r>
    969c:	4284      	cmp	r4, r0
    969e:	d90f      	bls.n	96c0 <_realloc_r+0x48>
    96a0:	4621      	mov	r1, r4
    96a2:	4638      	mov	r0, r7
    96a4:	f7ff ff8a 	bl	95bc <_malloc_r>
    96a8:	4605      	mov	r5, r0
    96aa:	2800      	cmp	r0, #0
    96ac:	d0f2      	beq.n	9694 <_realloc_r+0x1c>
    96ae:	4631      	mov	r1, r6
    96b0:	4622      	mov	r2, r4
    96b2:	f7ff f8d7 	bl	8864 <memcpy>
    96b6:	4631      	mov	r1, r6
    96b8:	4638      	mov	r0, r7
    96ba:	f7ff ff31 	bl	9520 <_free_r>
    96be:	e7e9      	b.n	9694 <_realloc_r+0x1c>
    96c0:	4635      	mov	r5, r6
    96c2:	e7e7      	b.n	9694 <_realloc_r+0x1c>

000096c4 <__ssputs_r>:
    96c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    96c8:	688e      	ldr	r6, [r1, #8]
    96ca:	429e      	cmp	r6, r3
    96cc:	4682      	mov	sl, r0
    96ce:	460c      	mov	r4, r1
    96d0:	4691      	mov	r9, r2
    96d2:	4698      	mov	r8, r3
    96d4:	d835      	bhi.n	9742 <__ssputs_r+0x7e>
    96d6:	898a      	ldrh	r2, [r1, #12]
    96d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
    96dc:	d031      	beq.n	9742 <__ssputs_r+0x7e>
    96de:	6825      	ldr	r5, [r4, #0]
    96e0:	6909      	ldr	r1, [r1, #16]
    96e2:	1a6f      	subs	r7, r5, r1
    96e4:	6965      	ldr	r5, [r4, #20]
    96e6:	2302      	movs	r3, #2
    96e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    96ec:	fb95 f5f3 	sdiv	r5, r5, r3
    96f0:	f108 0301 	add.w	r3, r8, #1
    96f4:	443b      	add	r3, r7
    96f6:	429d      	cmp	r5, r3
    96f8:	bf38      	it	cc
    96fa:	461d      	movcc	r5, r3
    96fc:	0553      	lsls	r3, r2, #21
    96fe:	d531      	bpl.n	9764 <__ssputs_r+0xa0>
    9700:	4629      	mov	r1, r5
    9702:	f7ff ff5b 	bl	95bc <_malloc_r>
    9706:	4606      	mov	r6, r0
    9708:	b950      	cbnz	r0, 9720 <__ssputs_r+0x5c>
    970a:	230c      	movs	r3, #12
    970c:	f8ca 3000 	str.w	r3, [sl]
    9710:	89a3      	ldrh	r3, [r4, #12]
    9712:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9716:	81a3      	strh	r3, [r4, #12]
    9718:	f04f 30ff 	mov.w	r0, #4294967295
    971c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9720:	463a      	mov	r2, r7
    9722:	6921      	ldr	r1, [r4, #16]
    9724:	f7ff f89e 	bl	8864 <memcpy>
    9728:	89a3      	ldrh	r3, [r4, #12]
    972a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    972e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    9732:	81a3      	strh	r3, [r4, #12]
    9734:	6126      	str	r6, [r4, #16]
    9736:	6165      	str	r5, [r4, #20]
    9738:	443e      	add	r6, r7
    973a:	1bed      	subs	r5, r5, r7
    973c:	6026      	str	r6, [r4, #0]
    973e:	60a5      	str	r5, [r4, #8]
    9740:	4646      	mov	r6, r8
    9742:	4546      	cmp	r6, r8
    9744:	bf28      	it	cs
    9746:	4646      	movcs	r6, r8
    9748:	4632      	mov	r2, r6
    974a:	4649      	mov	r1, r9
    974c:	6820      	ldr	r0, [r4, #0]
    974e:	f7ff f894 	bl	887a <memmove>
    9752:	68a3      	ldr	r3, [r4, #8]
    9754:	1b9b      	subs	r3, r3, r6
    9756:	60a3      	str	r3, [r4, #8]
    9758:	6823      	ldr	r3, [r4, #0]
    975a:	441e      	add	r6, r3
    975c:	6026      	str	r6, [r4, #0]
    975e:	2000      	movs	r0, #0
    9760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9764:	462a      	mov	r2, r5
    9766:	f7ff ff87 	bl	9678 <_realloc_r>
    976a:	4606      	mov	r6, r0
    976c:	2800      	cmp	r0, #0
    976e:	d1e1      	bne.n	9734 <__ssputs_r+0x70>
    9770:	6921      	ldr	r1, [r4, #16]
    9772:	4650      	mov	r0, sl
    9774:	f7ff fed4 	bl	9520 <_free_r>
    9778:	e7c7      	b.n	970a <__ssputs_r+0x46>
	...

0000977c <_svfiprintf_r>:
    977c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9780:	b09d      	sub	sp, #116	; 0x74
    9782:	4680      	mov	r8, r0
    9784:	9303      	str	r3, [sp, #12]
    9786:	898b      	ldrh	r3, [r1, #12]
    9788:	061c      	lsls	r4, r3, #24
    978a:	460d      	mov	r5, r1
    978c:	4616      	mov	r6, r2
    978e:	d50f      	bpl.n	97b0 <_svfiprintf_r+0x34>
    9790:	690b      	ldr	r3, [r1, #16]
    9792:	b96b      	cbnz	r3, 97b0 <_svfiprintf_r+0x34>
    9794:	2140      	movs	r1, #64	; 0x40
    9796:	f7ff ff11 	bl	95bc <_malloc_r>
    979a:	6028      	str	r0, [r5, #0]
    979c:	6128      	str	r0, [r5, #16]
    979e:	b928      	cbnz	r0, 97ac <_svfiprintf_r+0x30>
    97a0:	230c      	movs	r3, #12
    97a2:	f8c8 3000 	str.w	r3, [r8]
    97a6:	f04f 30ff 	mov.w	r0, #4294967295
    97aa:	e0c5      	b.n	9938 <_svfiprintf_r+0x1bc>
    97ac:	2340      	movs	r3, #64	; 0x40
    97ae:	616b      	str	r3, [r5, #20]
    97b0:	2300      	movs	r3, #0
    97b2:	9309      	str	r3, [sp, #36]	; 0x24
    97b4:	2320      	movs	r3, #32
    97b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    97ba:	2330      	movs	r3, #48	; 0x30
    97bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    97c0:	f04f 0b01 	mov.w	fp, #1
    97c4:	4637      	mov	r7, r6
    97c6:	463c      	mov	r4, r7
    97c8:	f814 3b01 	ldrb.w	r3, [r4], #1
    97cc:	2b00      	cmp	r3, #0
    97ce:	d13c      	bne.n	984a <_svfiprintf_r+0xce>
    97d0:	ebb7 0a06 	subs.w	sl, r7, r6
    97d4:	d00b      	beq.n	97ee <_svfiprintf_r+0x72>
    97d6:	4653      	mov	r3, sl
    97d8:	4632      	mov	r2, r6
    97da:	4629      	mov	r1, r5
    97dc:	4640      	mov	r0, r8
    97de:	f7ff ff71 	bl	96c4 <__ssputs_r>
    97e2:	3001      	adds	r0, #1
    97e4:	f000 80a3 	beq.w	992e <_svfiprintf_r+0x1b2>
    97e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    97ea:	4453      	add	r3, sl
    97ec:	9309      	str	r3, [sp, #36]	; 0x24
    97ee:	783b      	ldrb	r3, [r7, #0]
    97f0:	2b00      	cmp	r3, #0
    97f2:	f000 809c 	beq.w	992e <_svfiprintf_r+0x1b2>
    97f6:	2300      	movs	r3, #0
    97f8:	f04f 32ff 	mov.w	r2, #4294967295
    97fc:	9304      	str	r3, [sp, #16]
    97fe:	9307      	str	r3, [sp, #28]
    9800:	9205      	str	r2, [sp, #20]
    9802:	9306      	str	r3, [sp, #24]
    9804:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    9808:	931a      	str	r3, [sp, #104]	; 0x68
    980a:	2205      	movs	r2, #5
    980c:	7821      	ldrb	r1, [r4, #0]
    980e:	4850      	ldr	r0, [pc, #320]	; (9950 <_svfiprintf_r+0x1d4>)
    9810:	f7ff fe36 	bl	9480 <memchr>
    9814:	1c67      	adds	r7, r4, #1
    9816:	9b04      	ldr	r3, [sp, #16]
    9818:	b9d8      	cbnz	r0, 9852 <_svfiprintf_r+0xd6>
    981a:	06d9      	lsls	r1, r3, #27
    981c:	bf44      	itt	mi
    981e:	2220      	movmi	r2, #32
    9820:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    9824:	071a      	lsls	r2, r3, #28
    9826:	bf44      	itt	mi
    9828:	222b      	movmi	r2, #43	; 0x2b
    982a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    982e:	7822      	ldrb	r2, [r4, #0]
    9830:	2a2a      	cmp	r2, #42	; 0x2a
    9832:	d016      	beq.n	9862 <_svfiprintf_r+0xe6>
    9834:	9a07      	ldr	r2, [sp, #28]
    9836:	2100      	movs	r1, #0
    9838:	200a      	movs	r0, #10
    983a:	4627      	mov	r7, r4
    983c:	3401      	adds	r4, #1
    983e:	783b      	ldrb	r3, [r7, #0]
    9840:	3b30      	subs	r3, #48	; 0x30
    9842:	2b09      	cmp	r3, #9
    9844:	d951      	bls.n	98ea <_svfiprintf_r+0x16e>
    9846:	b1c9      	cbz	r1, 987c <_svfiprintf_r+0x100>
    9848:	e011      	b.n	986e <_svfiprintf_r+0xf2>
    984a:	2b25      	cmp	r3, #37	; 0x25
    984c:	d0c0      	beq.n	97d0 <_svfiprintf_r+0x54>
    984e:	4627      	mov	r7, r4
    9850:	e7b9      	b.n	97c6 <_svfiprintf_r+0x4a>
    9852:	4a3f      	ldr	r2, [pc, #252]	; (9950 <_svfiprintf_r+0x1d4>)
    9854:	1a80      	subs	r0, r0, r2
    9856:	fa0b f000 	lsl.w	r0, fp, r0
    985a:	4318      	orrs	r0, r3
    985c:	9004      	str	r0, [sp, #16]
    985e:	463c      	mov	r4, r7
    9860:	e7d3      	b.n	980a <_svfiprintf_r+0x8e>
    9862:	9a03      	ldr	r2, [sp, #12]
    9864:	1d11      	adds	r1, r2, #4
    9866:	6812      	ldr	r2, [r2, #0]
    9868:	9103      	str	r1, [sp, #12]
    986a:	2a00      	cmp	r2, #0
    986c:	db01      	blt.n	9872 <_svfiprintf_r+0xf6>
    986e:	9207      	str	r2, [sp, #28]
    9870:	e004      	b.n	987c <_svfiprintf_r+0x100>
    9872:	4252      	negs	r2, r2
    9874:	f043 0302 	orr.w	r3, r3, #2
    9878:	9207      	str	r2, [sp, #28]
    987a:	9304      	str	r3, [sp, #16]
    987c:	783b      	ldrb	r3, [r7, #0]
    987e:	2b2e      	cmp	r3, #46	; 0x2e
    9880:	d10e      	bne.n	98a0 <_svfiprintf_r+0x124>
    9882:	787b      	ldrb	r3, [r7, #1]
    9884:	2b2a      	cmp	r3, #42	; 0x2a
    9886:	f107 0101 	add.w	r1, r7, #1
    988a:	d132      	bne.n	98f2 <_svfiprintf_r+0x176>
    988c:	9b03      	ldr	r3, [sp, #12]
    988e:	1d1a      	adds	r2, r3, #4
    9890:	681b      	ldr	r3, [r3, #0]
    9892:	9203      	str	r2, [sp, #12]
    9894:	2b00      	cmp	r3, #0
    9896:	bfb8      	it	lt
    9898:	f04f 33ff 	movlt.w	r3, #4294967295
    989c:	3702      	adds	r7, #2
    989e:	9305      	str	r3, [sp, #20]
    98a0:	4c2c      	ldr	r4, [pc, #176]	; (9954 <_svfiprintf_r+0x1d8>)
    98a2:	7839      	ldrb	r1, [r7, #0]
    98a4:	2203      	movs	r2, #3
    98a6:	4620      	mov	r0, r4
    98a8:	f7ff fdea 	bl	9480 <memchr>
    98ac:	b138      	cbz	r0, 98be <_svfiprintf_r+0x142>
    98ae:	2340      	movs	r3, #64	; 0x40
    98b0:	1b00      	subs	r0, r0, r4
    98b2:	fa03 f000 	lsl.w	r0, r3, r0
    98b6:	9b04      	ldr	r3, [sp, #16]
    98b8:	4303      	orrs	r3, r0
    98ba:	9304      	str	r3, [sp, #16]
    98bc:	3701      	adds	r7, #1
    98be:	7839      	ldrb	r1, [r7, #0]
    98c0:	4825      	ldr	r0, [pc, #148]	; (9958 <_svfiprintf_r+0x1dc>)
    98c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    98c6:	2206      	movs	r2, #6
    98c8:	1c7e      	adds	r6, r7, #1
    98ca:	f7ff fdd9 	bl	9480 <memchr>
    98ce:	2800      	cmp	r0, #0
    98d0:	d035      	beq.n	993e <_svfiprintf_r+0x1c2>
    98d2:	4b22      	ldr	r3, [pc, #136]	; (995c <_svfiprintf_r+0x1e0>)
    98d4:	b9fb      	cbnz	r3, 9916 <_svfiprintf_r+0x19a>
    98d6:	9b03      	ldr	r3, [sp, #12]
    98d8:	3307      	adds	r3, #7
    98da:	f023 0307 	bic.w	r3, r3, #7
    98de:	3308      	adds	r3, #8
    98e0:	9303      	str	r3, [sp, #12]
    98e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    98e4:	444b      	add	r3, r9
    98e6:	9309      	str	r3, [sp, #36]	; 0x24
    98e8:	e76c      	b.n	97c4 <_svfiprintf_r+0x48>
    98ea:	fb00 3202 	mla	r2, r0, r2, r3
    98ee:	2101      	movs	r1, #1
    98f0:	e7a3      	b.n	983a <_svfiprintf_r+0xbe>
    98f2:	2300      	movs	r3, #0
    98f4:	9305      	str	r3, [sp, #20]
    98f6:	4618      	mov	r0, r3
    98f8:	240a      	movs	r4, #10
    98fa:	460f      	mov	r7, r1
    98fc:	3101      	adds	r1, #1
    98fe:	783a      	ldrb	r2, [r7, #0]
    9900:	3a30      	subs	r2, #48	; 0x30
    9902:	2a09      	cmp	r2, #9
    9904:	d903      	bls.n	990e <_svfiprintf_r+0x192>
    9906:	2b00      	cmp	r3, #0
    9908:	d0ca      	beq.n	98a0 <_svfiprintf_r+0x124>
    990a:	9005      	str	r0, [sp, #20]
    990c:	e7c8      	b.n	98a0 <_svfiprintf_r+0x124>
    990e:	fb04 2000 	mla	r0, r4, r0, r2
    9912:	2301      	movs	r3, #1
    9914:	e7f1      	b.n	98fa <_svfiprintf_r+0x17e>
    9916:	ab03      	add	r3, sp, #12
    9918:	9300      	str	r3, [sp, #0]
    991a:	462a      	mov	r2, r5
    991c:	4b10      	ldr	r3, [pc, #64]	; (9960 <_svfiprintf_r+0x1e4>)
    991e:	a904      	add	r1, sp, #16
    9920:	4640      	mov	r0, r8
    9922:	f3af 8000 	nop.w
    9926:	f1b0 3fff 	cmp.w	r0, #4294967295
    992a:	4681      	mov	r9, r0
    992c:	d1d9      	bne.n	98e2 <_svfiprintf_r+0x166>
    992e:	89ab      	ldrh	r3, [r5, #12]
    9930:	065b      	lsls	r3, r3, #25
    9932:	f53f af38 	bmi.w	97a6 <_svfiprintf_r+0x2a>
    9936:	9809      	ldr	r0, [sp, #36]	; 0x24
    9938:	b01d      	add	sp, #116	; 0x74
    993a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    993e:	ab03      	add	r3, sp, #12
    9940:	9300      	str	r3, [sp, #0]
    9942:	462a      	mov	r2, r5
    9944:	4b06      	ldr	r3, [pc, #24]	; (9960 <_svfiprintf_r+0x1e4>)
    9946:	a904      	add	r1, sp, #16
    9948:	4640      	mov	r0, r8
    994a:	f7ff f82f 	bl	89ac <_printf_i>
    994e:	e7ea      	b.n	9926 <_svfiprintf_r+0x1aa>
    9950:	0000e074 	.word	0x0000e074
    9954:	0000e07a 	.word	0x0000e07a
    9958:	0000e07e 	.word	0x0000e07e
    995c:	00000000 	.word	0x00000000
    9960:	000096c5 	.word	0x000096c5

00009964 <_sbrk_r>:
    9964:	b538      	push	{r3, r4, r5, lr}
    9966:	4c06      	ldr	r4, [pc, #24]	; (9980 <_sbrk_r+0x1c>)
    9968:	2300      	movs	r3, #0
    996a:	4605      	mov	r5, r0
    996c:	4608      	mov	r0, r1
    996e:	6023      	str	r3, [r4, #0]
    9970:	f7f7 f808 	bl	984 <_sbrk>
    9974:	1c43      	adds	r3, r0, #1
    9976:	d102      	bne.n	997e <_sbrk_r+0x1a>
    9978:	6823      	ldr	r3, [r4, #0]
    997a:	b103      	cbz	r3, 997e <_sbrk_r+0x1a>
    997c:	602b      	str	r3, [r5, #0]
    997e:	bd38      	pop	{r3, r4, r5, pc}
    9980:	20010d40 	.word	0x20010d40

00009984 <__sread>:
    9984:	b510      	push	{r4, lr}
    9986:	460c      	mov	r4, r1
    9988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    998c:	f000 f890 	bl	9ab0 <_read_r>
    9990:	2800      	cmp	r0, #0
    9992:	bfab      	itete	ge
    9994:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    9996:	89a3      	ldrhlt	r3, [r4, #12]
    9998:	181b      	addge	r3, r3, r0
    999a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    999e:	bfac      	ite	ge
    99a0:	6563      	strge	r3, [r4, #84]	; 0x54
    99a2:	81a3      	strhlt	r3, [r4, #12]
    99a4:	bd10      	pop	{r4, pc}

000099a6 <__swrite>:
    99a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    99aa:	461f      	mov	r7, r3
    99ac:	898b      	ldrh	r3, [r1, #12]
    99ae:	05db      	lsls	r3, r3, #23
    99b0:	4605      	mov	r5, r0
    99b2:	460c      	mov	r4, r1
    99b4:	4616      	mov	r6, r2
    99b6:	d505      	bpl.n	99c4 <__swrite+0x1e>
    99b8:	2302      	movs	r3, #2
    99ba:	2200      	movs	r2, #0
    99bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    99c0:	f000 f858 	bl	9a74 <_lseek_r>
    99c4:	89a3      	ldrh	r3, [r4, #12]
    99c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    99ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    99ce:	81a3      	strh	r3, [r4, #12]
    99d0:	4632      	mov	r2, r6
    99d2:	463b      	mov	r3, r7
    99d4:	4628      	mov	r0, r5
    99d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    99da:	f000 b817 	b.w	9a0c <_write_r>

000099de <__sseek>:
    99de:	b510      	push	{r4, lr}
    99e0:	460c      	mov	r4, r1
    99e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    99e6:	f000 f845 	bl	9a74 <_lseek_r>
    99ea:	1c43      	adds	r3, r0, #1
    99ec:	89a3      	ldrh	r3, [r4, #12]
    99ee:	bf15      	itete	ne
    99f0:	6560      	strne	r0, [r4, #84]	; 0x54
    99f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    99f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    99fa:	81a3      	strheq	r3, [r4, #12]
    99fc:	bf18      	it	ne
    99fe:	81a3      	strhne	r3, [r4, #12]
    9a00:	bd10      	pop	{r4, pc}

00009a02 <__sclose>:
    9a02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    9a06:	f000 b813 	b.w	9a30 <_close_r>
	...

00009a0c <_write_r>:
    9a0c:	b538      	push	{r3, r4, r5, lr}
    9a0e:	4c07      	ldr	r4, [pc, #28]	; (9a2c <_write_r+0x20>)
    9a10:	4605      	mov	r5, r0
    9a12:	4608      	mov	r0, r1
    9a14:	4611      	mov	r1, r2
    9a16:	2200      	movs	r2, #0
    9a18:	6022      	str	r2, [r4, #0]
    9a1a:	461a      	mov	r2, r3
    9a1c:	f7fc f914 	bl	5c48 <_write>
    9a20:	1c43      	adds	r3, r0, #1
    9a22:	d102      	bne.n	9a2a <_write_r+0x1e>
    9a24:	6823      	ldr	r3, [r4, #0]
    9a26:	b103      	cbz	r3, 9a2a <_write_r+0x1e>
    9a28:	602b      	str	r3, [r5, #0]
    9a2a:	bd38      	pop	{r3, r4, r5, pc}
    9a2c:	20010d40 	.word	0x20010d40

00009a30 <_close_r>:
    9a30:	b538      	push	{r3, r4, r5, lr}
    9a32:	4c06      	ldr	r4, [pc, #24]	; (9a4c <_close_r+0x1c>)
    9a34:	2300      	movs	r3, #0
    9a36:	4605      	mov	r5, r0
    9a38:	4608      	mov	r0, r1
    9a3a:	6023      	str	r3, [r4, #0]
    9a3c:	f7f6 ffb4 	bl	9a8 <_close>
    9a40:	1c43      	adds	r3, r0, #1
    9a42:	d102      	bne.n	9a4a <_close_r+0x1a>
    9a44:	6823      	ldr	r3, [r4, #0]
    9a46:	b103      	cbz	r3, 9a4a <_close_r+0x1a>
    9a48:	602b      	str	r3, [r5, #0]
    9a4a:	bd38      	pop	{r3, r4, r5, pc}
    9a4c:	20010d40 	.word	0x20010d40

00009a50 <_fstat_r>:
    9a50:	b538      	push	{r3, r4, r5, lr}
    9a52:	4c07      	ldr	r4, [pc, #28]	; (9a70 <_fstat_r+0x20>)
    9a54:	2300      	movs	r3, #0
    9a56:	4605      	mov	r5, r0
    9a58:	4608      	mov	r0, r1
    9a5a:	4611      	mov	r1, r2
    9a5c:	6023      	str	r3, [r4, #0]
    9a5e:	f7f6 ffa6 	bl	9ae <_fstat>
    9a62:	1c43      	adds	r3, r0, #1
    9a64:	d102      	bne.n	9a6c <_fstat_r+0x1c>
    9a66:	6823      	ldr	r3, [r4, #0]
    9a68:	b103      	cbz	r3, 9a6c <_fstat_r+0x1c>
    9a6a:	602b      	str	r3, [r5, #0]
    9a6c:	bd38      	pop	{r3, r4, r5, pc}
    9a6e:	bf00      	nop
    9a70:	20010d40 	.word	0x20010d40

00009a74 <_lseek_r>:
    9a74:	b538      	push	{r3, r4, r5, lr}
    9a76:	4c07      	ldr	r4, [pc, #28]	; (9a94 <_lseek_r+0x20>)
    9a78:	4605      	mov	r5, r0
    9a7a:	4608      	mov	r0, r1
    9a7c:	4611      	mov	r1, r2
    9a7e:	2200      	movs	r2, #0
    9a80:	6022      	str	r2, [r4, #0]
    9a82:	461a      	mov	r2, r3
    9a84:	f7f6 ff98 	bl	9b8 <_lseek>
    9a88:	1c43      	adds	r3, r0, #1
    9a8a:	d102      	bne.n	9a92 <_lseek_r+0x1e>
    9a8c:	6823      	ldr	r3, [r4, #0]
    9a8e:	b103      	cbz	r3, 9a92 <_lseek_r+0x1e>
    9a90:	602b      	str	r3, [r5, #0]
    9a92:	bd38      	pop	{r3, r4, r5, pc}
    9a94:	20010d40 	.word	0x20010d40

00009a98 <__malloc_lock>:
    9a98:	4770      	bx	lr

00009a9a <__malloc_unlock>:
    9a9a:	4770      	bx	lr

00009a9c <_malloc_usable_size_r>:
    9a9c:	f851 0c04 	ldr.w	r0, [r1, #-4]
    9aa0:	2800      	cmp	r0, #0
    9aa2:	f1a0 0004 	sub.w	r0, r0, #4
    9aa6:	bfbc      	itt	lt
    9aa8:	580b      	ldrlt	r3, [r1, r0]
    9aaa:	18c0      	addlt	r0, r0, r3
    9aac:	4770      	bx	lr
	...

00009ab0 <_read_r>:
    9ab0:	b538      	push	{r3, r4, r5, lr}
    9ab2:	4c07      	ldr	r4, [pc, #28]	; (9ad0 <_read_r+0x20>)
    9ab4:	4605      	mov	r5, r0
    9ab6:	4608      	mov	r0, r1
    9ab8:	4611      	mov	r1, r2
    9aba:	2200      	movs	r2, #0
    9abc:	6022      	str	r2, [r4, #0]
    9abe:	461a      	mov	r2, r3
    9ac0:	f7fc f8b0 	bl	5c24 <_read>
    9ac4:	1c43      	adds	r3, r0, #1
    9ac6:	d102      	bne.n	9ace <_read_r+0x1e>
    9ac8:	6823      	ldr	r3, [r4, #0]
    9aca:	b103      	cbz	r3, 9ace <_read_r+0x1e>
    9acc:	602b      	str	r3, [r5, #0]
    9ace:	bd38      	pop	{r3, r4, r5, pc}
    9ad0:	20010d40 	.word	0x20010d40
    9ad4:	682f2e2e 	.word	0x682f2e2e
    9ad8:	732f6c61 	.word	0x732f6c61
    9adc:	682f6372 	.word	0x682f6372
    9ae0:	695f6c61 	.word	0x695f6c61
    9ae4:	00632e6f 	.word	0x00632e6f
    9ae8:	682f2e2e 	.word	0x682f2e2e
    9aec:	732f6c61 	.word	0x732f6c61
    9af0:	682f6372 	.word	0x682f6372
    9af4:	755f6c61 	.word	0x755f6c61
    9af8:	74726173 	.word	0x74726173
    9afc:	2e736f5f 	.word	0x2e736f5f
    9b00:	00000063 	.word	0x00000063
    9b04:	682f2e2e 	.word	0x682f2e2e
    9b08:	752f6c61 	.word	0x752f6c61
    9b0c:	736c6974 	.word	0x736c6974
    9b10:	6372732f 	.word	0x6372732f
    9b14:	6974752f 	.word	0x6974752f
    9b18:	725f736c 	.word	0x725f736c
    9b1c:	62676e69 	.word	0x62676e69
    9b20:	65666675 	.word	0x65666675
    9b24:	00632e72 	.word	0x00632e72
    9b28:	40003000 	.word	0x40003000
    9b2c:	40003400 	.word	0x40003400
    9b30:	41012000 	.word	0x41012000
    9b34:	41014000 	.word	0x41014000
    9b38:	43000000 	.word	0x43000000
    9b3c:	43000400 	.word	0x43000400
    9b40:	43000800 	.word	0x43000800
    9b44:	43000c00 	.word	0x43000c00

00009b48 <_usarts>:
    9b48:	00000001 40100004 00030000 00700002     .......@......p.
    9b58:	0000d8ad 00000000 00000002 40100004     ...............@
    9b68:	00030000 00700002 0000fcb9 00000000     ......p.........

00009b78 <_i2cms>:
	...

00009b90 <_i2css>:
	...

00009ba0 <sercomspi_regs>:
	...
    9bb4:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    9bc4:	65735f6c 6d6f6372 0000632e 30455441     l_sercom.c..ATE0
    9bd4:	00000000 44265441 00000030 492b5441     ....AT&D0...AT+I
    9be4:	323d4346 0000322c 512b5441 43435255     FC=2,2..AT+QURCC
    9bf4:	223d4746 70637275 2274726f 6175222c     FG="urcport","ua
    9c04:	22317472 00000000 512b5441 3d474643     rt1"....AT+QCFG=
    9c14:	6e616222 662c2264 3030342c 31653061     "band",f,400a0e1
    9c24:	2c663938 31653061 00663938 512b5441     89f,a0e189f.AT+Q
    9c34:	3d474643 73776e22 6d6e6163 2265646f     CFG="nwscanmode"
    9c44:	312c302c 00000000 512b5441 3d474643     ,0,1....AT+QCFG=
    9c54:	746f6922 6f6d706f 2c226564 00312c32     "iotopmode",2,1.
    9c64:	512b5441 3d474643 73776e22 736e6163     AT+QCFG="nwscans
    9c74:	2c227165 312c3230 00000000 432b5441     eq",02,1....AT+C
    9c84:	3d4e5546 00000031 432b5441 3d53504f     FUN=1...AT+COPS=
    9c94:	00322c33 432b5441 3d474552 00000032     3,2.AT+CREG=2...
    9ca4:	432b5441 47455247 0000323d 432b5441     AT+CGREG=2..AT+C
    9cb4:	47455245 0000323d 432b5441 3d525a54     EREG=2..AT+CTZR=
    9cc4:	00000031 4d524f4e 50204c41 5245574f     1...NORMAL POWER
    9cd4:	574f4420 0000004e 204d5350 45574f50      DOWN...PSM POWE
    9ce4:	4f442052 00004e57 00594452 00004b4f     R DOWN..RDY.OK..
    9cf4:	4e4e4f43 00544345 444e4553 004b4f20     CONNECT.SEND OK.
    9d04:	0000003e 4f525245 00000052 59535542     >...ERROR...BUSY
    9d14:	00000000 43204f4e 49525241 00005245     ....NO CARRIER..
    9d24:	41204f4e 4557534e 00000052 44204f4e     NO ANSWER...NO D
    9d34:	544c4149 00454e4f 524f4241 00444554     IALTONE.ABORTED.
    9d44:	534d432b 52524520 0000524f 454d432b     +CMS ERROR..+CME
    9d54:	52524520 0000524f 444e4553 49414620      ERROR..SEND FAI
    9d64:	0000004c 00000000                       L.......

00009d6c <__FUNCTION__.8759>:
    9d6c:	6c65435f 616c756c 65525f72 75467663     _Cellular_RecvFu
    9d7c:	6547636e 74615274 6f697250 79746972     ncGetRatPriority
    9d8c:	00000000                                ....

00009d90 <__FUNCTION__.8560>:
    9d90:	7261705f 70486573 006e6d6c              _parseHplmn.

00009d9c <__FUNCTION__.8670>:
    9d9c:	6c697562 636f5364 4374656b 656e6e6f     buildSocketConne
    9dac:	00007463                                ct..

00009db0 <__FUNCTION__.8699>:
    9db0:	73726170 73705165 6f4d736d 00006564     parseQpsmsMode..

00009dc0 <__FUNCTION__.8706>:
    9dc0:	73726170 73705165 6152736d 00000075     parseQpsmsRau...

00009dd0 <__FUNCTION__.8713>:
    9dd0:	73726170 73705165 6452736d 6d695479     parseQpsmsRdyTim
    9de0:	00007265                                er..

00009de4 <__FUNCTION__.8720>:
    9de4:	73726170 73705165 6154736d 00000075     parseQpsmsTau...

00009df4 <__FUNCTION__.8727>:
    9df4:	73726170 73705165 6341736d 65766974     parseQpsmsActive
    9e04:	656d6954 00000000                       Time....

00009e0c <__FUNCTION__.8775>:
    9e0c:	6c65435f 616c756c 65525f72 75467663     _Cellular_RecvFu
    9e1c:	6547636e 6d735074 74746553 73676e69     ncGetPsmSettings
    9e2c:	00000000                                ....

00009e30 <__FUNCTION__.8608>:
    9e30:	73726170 6e645065 74617453 6f437375     parsePdnStatusCo
    9e40:	7865746e 00644974                       ntextId.

00009e48 <__FUNCTION__.8615>:
    9e48:	73726170 6e645065 74617453 6f437375     parsePdnStatusCo
    9e58:	7865746e 61745374 00006574              ntextState..

00009e64 <__FUNCTION__.8622>:
    9e64:	73726170 6e645065 74617453 6f437375     parsePdnStatusCo
    9e74:	7865746e 70795474 00000065              ntextType...

00009e80 <__FUNCTION__.8502>:
    9e80:	7261705f 69536573 6c616e67 6c617551     _parseSignalQual
    9e90:	00797469                                ity.

00009e94 <__FUNCTION__.8514>:
    9e94:	6c65435f 616c756c 65525f72 75467663     _Cellular_RecvFu
    9ea4:	6547636e 67695374 496c616e 006f666e     ncGetSignalInfo.

00009eb4 <__FUNCTION__.8883>:
    9eb4:	6b636f73 65537465 6144646e 72506174     socketSendDataPr
    9ec4:	78696665 00000000                       efix....

00009ecc <__FUNCTION__.8589>:
    9ecc:	7465675f 4c6d6953 536b636f 65746174     _getSimLockState
    9edc:	00000000                                ....

00009ee0 <__FUNCTION__.8601>:
    9ee0:	6c65435f 616c756c 65525f72 75467663     _Cellular_RecvFu
    9ef0:	6547636e 6d695374 6b636f4c 74617453     ncGetSimLockStat
    9f00:	00007375                                us..

00009f04 <__FUNCTION__.8553>:
    9f04:	6568635f 72436b63 65526d73 74536461     _checkCrsmReadSt
    9f14:	73757461 00000000                       atus....

00009f1c <__FUNCTION__.8548>:
    9f1c:	6568635f 72436b63 654d6d73 79726f6d     _checkCrsmMemory
    9f2c:	74617453 00007375                       Status..

00009f34 <__FUNCTION__.8572>:
    9f34:	6c65435f 616c756c 65525f72 75467663     _Cellular_RecvFu
    9f44:	6547636e 6c704874 00006e6d              ncGetHplmn..

00009f50 <__FUNCTION__.8805>:
    9f50:	726f7473 63634165 4d737365 4165646f     storeAccessModeA
    9f60:	6441646e 73657264 00000073              ndAddress...

00009f6c <__FUNCTION__.8543>:
    9f6c:	6c65435f 616c756c 65525f72 75467663     _Cellular_RecvFu
    9f7c:	6547636e 736d4974 00000069              ncGetImsi...

00009f88 <__FUNCTION__.8533>:
    9f88:	6c65435f 616c756c 65525f72 75467663     _Cellular_RecvFu
    9f98:	6547636e 63634974 00006469              ncGetIccid..

00009fa4 <__FUNCTION__.8797>:
    9fa4:	6b636f73 65527465 61447663 72506174     socketRecvDataPr
    9fb4:	78696665 00000000                       efix....

00009fbc <__FUNCTION__.8679>:
    9fbc:	44746567 46617461 526d6f72 00707365     getDataFromResp.

00009fcc <__FUNCTION__.8692>:
    9fcc:	6c65435f 616c756c 65525f72 75467663     _Cellular_RecvFu
    9fdc:	6144636e 00006174                       ncData..

00009fe4 <__FUNCTION__.8634>:
    9fe4:	50746567 74536e64 73757461 73726150     getPdnStatusPars
    9ff4:	6b6f5465 00006e65                       eToken..

00009ffc <__FUNCTION__.8644>:
    9ffc:	50746567 74536e64 73757461 73726150     getPdnStatusPars
    a00c:	6e694c65 00000065                       eLine...

0000a014 <__FUNCTION__.8660>:
    a014:	6c65435f 616c756c 65525f72 75467663     _Cellular_RecvFu
    a024:	6547636e 6e645074 74617453 00007375     ncGetPdnStatus..

0000a034 <__FUNCTION__.8584>:
    a034:	6c65435f 616c756c 65525f72 75467663     _Cellular_RecvFu
    a044:	6547636e 6d695374 64726143 74617453     ncGetSimCardStat
    a054:	00007375                                us..

0000a058 <__FUNCTION__.8860>:
    a058:	6c6c6543 72616c75 7465535f 00736e44     Cellular_SetDns.

0000a068 <__FUNCTION__.8869>:
    a068:	6c6c6543 72616c75 7465475f 536d7350     Cellular_GetPsmS
    a078:	69747465 0073676e                       ettings.

0000a080 <__FUNCTION__.8894>:
    a080:	6c6c6543 72616c75 7465535f 536d7350     Cellular_SetPsmS
    a090:	69747465 0073676e                       ettings.

0000a098 <__FUNCTION__.8904>:
    a098:	6c6c6543 72616c75 6165445f 76697463     Cellular_Deactiv
    a0a8:	50657461 00006e64                       atePdn..

0000a0b0 <__FUNCTION__.8914>:
    a0b0:	6c6c6543 72616c75 7463415f 74617669     Cellular_Activat
    a0c0:	6e645065 00000000                       ePdn....

0000a0c8 <__FUNCTION__.8925>:
    a0c8:	6c6c6543 72616c75 7465535f 436e6450     Cellular_SetPdnC
    a0d8:	69666e6f 00000067                       onfig...

0000a0e0 <__FUNCTION__.8950>:
    a0e0:	6c6c6543 72616c75 636f535f 5274656b     Cellular_SocketR
    a0f0:	00766365                                ecv.

0000a0f4 <__FUNCTION__.8965>:
    a0f4:	6c6c6543 72616c75 636f535f 5374656b     Cellular_SocketS
    a104:	00646e65                                end.

0000a108 <__FUNCTION__.8975>:
    a108:	6c6c6543 72616c75 636f535f 4374656b     Cellular_SocketC
    a118:	65736f6c 00000000                       lose....

0000a120 <__FUNCTION__.8987>:
    a120:	6c6c6543 72616c75 636f535f 4374656b     Cellular_SocketC
    a130:	656e6e6f 00007463                       onnect..

0000a138 <__FUNCTION__.9000>:
    a138:	6c6c6543 72616c75 7465475f 536e6450     Cellular_GetPdnS
    a148:	75746174 00000073                       tatus...

0000a150 <__FUNCTION__.9043>:
    a150:	6c6c6543 72616c75 7465475f 74736f48     Cellular_GetHost
    a160:	614e7942 0000656d 00003130 00003230     ByName..01..02..
    a170:	00003330 6c6c6563 72616c75 616c705f     03..cellular_pla
    a180:	726f6674 0000006d 5252455b 205d524f     tform...[ERROR] 
    a190:	5d73255b 73255b20 5d64253a 00000020     [%s] [%s:%d] ...
    a1a0:	52746547 72507461 69726f69 203a7974     GetRatPriority: 
    a1b0:	61766e49 2064696c 746e6f63 00747865     Invalid context.
    a1c0:	52746547 72507461 69726f69 203a7974     GetRatPriority: 
    a1d0:	61766e49 2064696c 61726170 0000006d     Invalid param...
    a1e0:	75706e49 61502074 656d6172 20726574     Input Parameter 
    a1f0:	4c4c554e 00000000 46464646 00004646     NULL....FFFFFF..
    a200:	7261705f 70486573 3a6e6d6c 72724520     _parseHplmn: Err
    a210:	6920726f 7250206e 7365636f 676e6973     or in Processing
    a220:	4c504820 203a4e4d 61766e49 2064696c      HPLMN: Invalid 
    a230:	656b6f54 7325206e 00000000 25632522     Token %s...."%c%
    a240:	25632563 25632563 25632563 63252263     c%c%c%c%c%c%c"%c
    a250:	00000000 00006325 6c697562 636f5364     ....%c..buildSoc
    a260:	4374656b 656e6e6f 203a7463 61766e49     ketConnect: Inva
    a270:	2064696c 6d6d6f63 20646e61 66667562     lid command buff
    a280:	00007265 20504455 56524553 00454349     er..UDP SERVICE.
    a290:	512b5441 45504f49 00003d4e 64257325     AT+QIOPEN=..%s%d
    a2a0:	646c252c 7325222c 25222c22 252c2273     ,%ld,"%s","%s",%
    a2b0:	64252c64 0064252c 512b5441 43444e49     d,%d,%d.AT+QINDC
    a2c0:	223d4746 22717363 0075252c 6f727245     FG="csq",%u.Erro
    a2d0:	6e692072 6f727020 73736563 20676e69     r in processing 
    a2e0:	65646f6d 6f54202e 206e656b 00007325     mode. Token %s..
    a2f0:	6f727245 6e692072 6f727020 73736563     Error in process
    a300:	20676e69 69726550 6369646f 6f725020     ing Periodic Pro
    a310:	73736563 20676e69 20554152 756c6176     cessing RAU valu
    a320:	54202e65 6e656b6f 00732520 6f727245     e. Token %s.Erro
    a330:	6e692072 6f727020 73736563 20676e69     r in processing 
    a340:	69726550 6369646f 6f725020 73736563     Periodic Process
    a350:	20676e69 53525047 61655220 54207964     ing GPRS Ready T
    a360:	72656d69 6c617620 202e6575 656b6f54     imer value. Toke
    a370:	7325206e 00000000 6f727245 6e692072     n %s....Error in
    a380:	6f727020 73736563 20676e69 69726550      processing Peri
    a390:	6369646f 55415420 6c617620 76206575     odic TAU value v
    a3a0:	65756c61 6f54202e 206e656b 00007325     alue. Token %s..
    a3b0:	6f727245 6e692072 6f727020 73736563     Error in process
    a3c0:	20676e69 69726550 6369646f 6f725020     ing Periodic Pro
    a3d0:	73736563 20676e69 69746341 74206576     cessing Active t
    a3e0:	20656d69 756c6176 54202e65 6e656b6f     ime value. Token
    a3f0:	00732520 50746547 65536d73 6e697474      %s.GetPsmSettin
    a400:	203a7367 61766e49 2064696c 746e6f63     gs: Invalid cont
    a410:	00747865 50746547 65536d73 6e697474     ext.GetPsmSettin
    a420:	203a7367 61766e49 2064696c 61726170     gs: Invalid para
    a430:	0000006d 6f727245 6e692072 6f725020     m...Error in Pro
    a440:	73736563 20676e69 746e6f43 20747865     cessing Context 
    a450:	202e6449 656b6f54 7325206e 00000000     Id. Token %s....
    a460:	6f727245 6e692072 6f727020 73736563     Error in process
    a470:	20676e69 204e4450 74617453 42207375     ing PDN Status B
    a480:	65666675 74732072 2e657461 6b6f5420     uffer state. Tok
    a490:	25206e65 00000073 6f727245 6e692072     en %s...Error in
    a4a0:	6f727020 73736563 20676e69 204e4450      processing PDN 
    a4b0:	74617453 75422065 72656666 61745320     State Buffer Sta
    a4c0:	2e737574 6b6f5420 25206e65 00000073     tus. Token %s...
    a4d0:	7261705f 69536573 6c616e67 6c617551     _parseSignalQual
    a4e0:	3a797469 766e4920 64696c61 706e4920     ity: Invalid Inp
    a4f0:	50207475 6d617261 72657465 00000073     ut Parameters...
    a500:	004d5347 2d544143 0000314d 2d544143     GSM.CAT-M1..CAT-
    a510:	0031424e 7261705f 69536573 6c616e67     NB1._parseSignal
    a520:	6c617551 3a797469 72724520 6920726f     Quality: Error i
    a530:	7270206e 7365636f 676e6973 53535220     n processing RSS
    a540:	54202e49 6e656b6f 00732520 7261705f     I. Token %s._par
    a550:	69536573 6c616e67 6c617551 3a797469     seSignalQuality:
    a560:	72724520 6920726f 7270206e 7365636f      Error in proces
    a570:	676e6973 52535220 54202e50 6e656b6f     sing RSRP. Token
    a580:	00732520 7261705f 69536573 6c616e67      %s._parseSignal
    a590:	6c617551 3a797469 72724520 6920726f     Quality: Error i
    a5a0:	7270206e 7365636f 676e6973 4e495320     n processing SIN
    a5b0:	70202e52 656b6f54 7325206e 00000000     R. pToken %s....
    a5c0:	7261705f 69536573 6c616e67 6c617551     _parseSignalQual
    a5d0:	3a797469 72724520 6920726f 7270206e     ity: Error in pr
    a5e0:	7365636f 676e6973 52535220 54202e51     ocessing RSRQ. T
    a5f0:	6e656b6f 00732520 53746547 616e6769     oken %s.GetSigna
    a600:	666e496c 49203a6f 7475706e 6e694c20     lInfo: Input Lin
    a610:	61702065 64657373 20736920 4c4c554e     e passed is NULL
    a620:	00000000 6b636f73 65537465 6144646e     ....socketSendDa
    a630:	72506174 78696665 4c70203a 20656e69     taPrefix: pLine 
    a640:	69207369 6c61766e 6f206469 42702072     is invalid or pB
    a650:	73657479 64616552 20736920 61766e69     ytesRead is inva
    a660:	0064696c 6b636f73 65537465 6144646e     lid.socketSendDa
    a670:	72506174 78696665 4370203a 626c6c61     taPrefix: pCallb
    a680:	436b6361 65746e6f 69207478 6f6e2073     ackContext is no
    a690:	554e2074 00004c4c 0000203e 44414552     t NULL..> ..READ
    a6a0:	00000059 204d4953 004e4950 204d4953     Y...SIM PIN.SIM 
    a6b0:	004b5550 204d4953 324e4950 00000000     PUK.SIM PIN2....
    a6c0:	204d4953 324b5550 00000000 4e2d4850     SIM PUK2....PH-N
    a6d0:	50205445 00004e49 4e2d4850 50205445     ET PIN..PH-NET P
    a6e0:	00004b55 4e2d4850 55535445 49502042     UK..PH-NETSUB PI
    a6f0:	0000004e 4e2d4850 55535445 55502042     N...PH-NETSUB PU
    a700:	0000004b 532d4850 49502050 0000004e     K...PH-SP PIN...
    a710:	532d4850 55502050 0000004b 432d4850     PH-SP PUK...PH-C
    a720:	2050524f 004e4950 432d4850 2050524f     ORP PIN.PH-CORP 
    a730:	004b5550 6e6b6e55 206e776f 204d4953     PUK.Unknown SIM 
    a740:	6b636f4c 61745320 25206574 00000073     Lock State %s...
    a750:	74654720 4d495320 636f6c20 7453206b      Get SIM lock St
    a760:	3a657461 73655220 736e6f70 61642065     ate: Response da
    a770:	69206174 6e692073 696c6176 00000064     ta is invalid...
    a780:	20746547 204d4953 6b636f6c 61745320     Get SIM lock Sta
    a790:	203a6574 75706e49 61642074 69206174     te: Input data i
    a7a0:	6e692073 696c6176 00000064 00343431     s invalid...144.
    a7b0:	00353431 00363431 6568635f 72436b63     145.146._checkCr
    a7c0:	65526d73 74536461 73757461 7245203a     smReadStatus: Er
    a7d0:	20726f72 50206e69 65636f72 6e697373     ror in Processin
    a7e0:	50482067 3a4e4d4c 53524320 6552204d     g HPLMN: CRSM Re
    a7f0:	45206461 726f7272 00000000 00003436     ad Error....64..
    a800:	6568635f 72436b63 654d6d73 79726f6d     _checkCrsmMemory
    a810:	74617453 203a7375 6f727245 6e692072     Status: Error in
    a820:	6f725020 73736563 20676e69 4d4c5048      Processing HPLM
    a830:	43203a4e 204d5352 6f6d654d 45207972     N: CRSM Memory E
    a840:	726f7272 00000000 48746547 6e6d6c70     rror....GetHplmn
    a850:	6552203a 6e6f7073 69206573 6e692073     : Response is in
    a860:	696c6176 00002064 726f7473 63634165     valid ..storeAcc
    a870:	4d737365 4165646f 6441646e 73657264     essModeAndAddres
    a880:	49203a73 6c61766e 73206469 656b636f     s: Invalid socke
    a890:	64612074 73657264 00000073 726f7473     t address...stor
    a8a0:	63634165 4d737365 4165646f 6441646e     eAccessModeAndAd
    a8b0:	73657264 62202c73 73206461 656b636f     dress, bad socke
    a8c0:	74732074 20657461 00006425 726f7473     t state %d..stor
    a8d0:	63634165 4d737365 4165646f 6441646e     eAccessModeAndAd
    a8e0:	73657264 41202c73 73656363 6f6d2073     dress, Access mo
    a8f0:	6e206564 7320746f 6f707075 64657472     de not supported
    a900:	00642520 49746567 3a69736d 73655220      %d.getImsi: Res
    a910:	736e6f70 6e692065 766e6920 64696c61     ponse in invalid
    a920:	00000000 49746567 64696363 6552203a     ....getIccid: Re
    a930:	6e6f7073 69206573 6e69206e 696c6176     sponse in invali
    a940:	00002064 5249512b 00003a44 61746144     d ..+QIRD:..Data
    a950:	73657220 736e6f70 65722065 76696563      response receiv
    a960:	77206465 20687469 6e6f7277 69732067     ed with wrong si
    a970:	0000657a 61746144 20736920 6e727574     ze..Data is turn
    a980:	65746163 72202c64 69656365 20646576     cated, received 
    a990:	61746164 6e656c20 20687467 202c6425     data length %d, 
    a9a0:	2074756f 66667562 73207265 20657a69     out buffer size 
    a9b0:	00006425 65636552 20657669 61746144     %d..Receive Data
    a9c0:	6144203a 70206174 746e696f 4e207265     : Data pointer N
    a9d0:	004c4c55 65636552 20657669 61746144     ULL.Receive Data
    a9e0:	6e49203a 6d726574 61696465 72206574     : Intermediate r
    a9f0:	6f707365 2065736e 74706d65 00000079     esponse empty...
    aa00:	65636552 20657669 61746144 6e69203a     Receive Data: in
    aa10:	696c6176 6f632064 7865746e 00000074     valid context...
    aa20:	65636552 20657669 61746144 6572203a     Receive Data: re
    aa30:	6e6f7073 69206573 6e692073 696c6176     sponse is invali
    aa40:	00000064 65636552 20657669 61746144     d...Receive Data
    aa50:	6142203a 61702064 006d6172 6f727245     : Bad param.Erro
    aa60:	6e692072 74614420 654c2061 6874676e     r in Data Length
    aa70:	6f725020 73736563 3a676e69 206f4e20      Processing: No 
    aa80:	696c6176 69642064 20746967 6e756f66     valid digit foun
    aa90:	54202e64 6e656b6f 00732520 6e6b6e55     d. Token %s.Unkn
    aaa0:	206e776f 436e6470 65746e6f 79547478     own pdnContextTy
    aab0:	25206570 00000064 6e6b6e55 206e776f     pe %d...Unknown 
    aac0:	656b6f74 6e69206e 74656720 536e6450     token in getPdnS
    aad0:	75746174 72615073 6f546573 206e656b     tatusParseToken 
    aae0:	25207325 00000064 464e495b 5b205d4f     %s %d...[INFO] [
    aaf0:	205d7325 3a73255b 205d6425 00000000     %s] [%s:%d] ....
    ab00:	50746567 74536e64 73757461 73726150     getPdnStatusPars
    ab10:	6b6f5465 25206e65 6e692073 20786564     eToken %s index 
    ab20:	66206425 656c6961 00000064 50746547     %d failed...GetP
    ab30:	74536e64 73757461 6e69203a 696c6176     dnStatus: invali
    ab40:	6f632064 7865746e 00000074 50746547     d context...GetP
    ab50:	74536e64 73757461 6552203a 6e6f7073     dnStatus: Respon
    ab60:	69206573 6e692073 696c6176 00000064     se is invalid...
    ab70:	50746547 74536e64 73757461 4450203a     GetPdnStatus: PD
    ab80:	7453204e 73757461 64616220 72617020     N Status bad par
    ab90:	74656d61 00737265 50746547 74536e64     ameters.GetPdnSt
    aba0:	73757461 6f6e203a 74636120 74617669     atus: no activat
    abb0:	50206465 00004e44 50746567 74536e64     ed PDN..getPdnSt
    abc0:	73757461 73726150 6e694c65 61702065     atusParseLine pa
    abd0:	20657372 66207325 656c6961 00000064     rse %s failed...
    abe0:	53746547 74536d69 73757461 6572203a     GetSimStatus: re
    abf0:	6e6f7073 69206573 6e692073 696c6176     sponse is invali
    ac00:	00000064 0000003a 512b5441 3d474643     d...:...AT+QCFG=
    ac10:	73776e22 736e6163 2c227165 00000000     "nwscanseq",....
    ac20:	512b5441 3d474643 73776e22 736e6163     AT+QCFG="nwscans
    ac30:	00227165 4643512b 00000047 6c6c6543     eq".+QCFG...Cell
    ac40:	72616c75 7465535f 3a736e44 766e4920     ular_SetDns: Inv
    ac50:	64696c61 72617020 74656d61 00007265     alid parameter..
    ac60:	512b5441 534e4449 3d474643 00000000     AT+QIDNSCFG=....
    ac70:	64257325 7325222c 00000022 6c6c6543     %s%d,"%s"...Cell
    ac80:	72616c75 7465535f 3a736e44 756f6320     ular_SetDns: cou
    ac90:	276e646c 65732074 68742074 4e442065     ldn't set the DN
    aca0:	63202c53 7542646d 73253a66 6b50202c     S, cmdBuf:%s, Pk
    acb0:	74655274 6425203a 00000000 512b5441     tRet: %d....AT+Q
    acc0:	534d5350 0000003f 5350512b 0000534d     PSMS?...+QPSMS..
    acd0:	6c6c6543 72616c75 7465475f 536d7350     Cellular_GetPsmS
    ace0:	69747465 3a73676e 756f6320 276e646c     ettings: couldn'
    acf0:	65722074 65697274 50206576 73204d53     t retrieve PSM s
    ad00:	69747465 0073676e 512b5441 534d5350     ettings.AT+QPSMS
    ad10:	2c64253d 00000000 6c6c6543 72616c75     =%d,....Cellular
    ad20:	7465535f 536d7350 69747465 3a73676e     _SetPsmSettings:
    ad30:	756f6320 276e646c 65732074 53502074      couldn't set PS
    ad40:	6573204d 6e697474 00007367 512b5441     M settings..AT+Q
    ad50:	41454449 003d5443 64257325 00000000     IDEACT=.%s%d....
    ad60:	6c6c6543 72616c75 6165445f 76697463     Cellular_Deactiv
    ad70:	50657461 203a6e64 276e6163 65642074     atePdn: can't de
    ad80:	69746361 65746176 4e445020 6d63202c     activate PDN, cm
    ad90:	66754264 2c73253a 746b5020 3a746552     dBuf:%s, PktRet:
    ada0:	00642520 512b5441 54434149 0000003d      %d.AT+QIACT=...
    adb0:	6c6c6543 72616c75 7463415f 74617669     Cellular_Activat
    adc0:	6e645065 6163203a 2074276e 69746361     ePdn: can't acti
    add0:	65746176 4e445020 6d63202c 66754264     vate PDN, cmdBuf
    ade0:	2c73253a 746b5020 3a746552 00642520     :%s, PktRet: %d.
    adf0:	6c6c6543 72616c75 4354415f 616d6d6f     Cellular_ATComma
    ae00:	6152646e 49203a77 7475706e 72617020     ndRaw: Input par
    ae10:	74656d61 69207265 554e2073 00004c4c     ameter is NULL..
    ae20:	512b5441 47534349 00003d50 64257325     AT+QICSGP=..%s%d
    ae30:	2c64252c 22732522 7325222c 25222c22     ,%d,"%s","%s","%
    ae40:	252c2273 00000064 6c6c6543 72616c75     s",%d...Cellular
    ae50:	7465535f 436e6450 69666e6f 63203a67     _SetPdnConfig: c
    ae60:	74276e61 74657320 4e445020 6d63202c     an't set PDN, cm
    ae70:	66754264 2c73253a 746b5020 3a746552     dBuf:%s, PktRet:
    ae80:	00642520 512b5441 00515343 5343512b      %d.AT+QCSQ.+QCS
    ae90:	00000051 5249512b 00000044 6c65435f     Q...+QIRD..._Cel
    aea0:	616c756c 65525f72 61447663 203a6174     lular_RecvData: 
    aeb0:	20646142 75706e69 61502074 006d6172     Bad input Param.
    aec0:	512b5441 3d445249 00000000 6c257325     AT+QIRD=....%s%l
    aed0:	6c252c64 00000064 6c65435f 616c756c     d,%ld..._Cellula
    aee0:	65525f72 61447663 203a6174 61746144     r_RecvData: Data
    aef0:	63655220 65766965 69616620 70202c6c      Receive fail, p
    af00:	7453746b 73757461 6425203a 00000000     ktStatus: %d....
    af10:	6c6c6543 72616c75 636f535f 5374656b     Cellular_SocketS
    af20:	3a646e65 766e4920 64696c61 72617020     end: Invalid par
    af30:	74656d61 00007265 512b5441 4e455349     ameter..AT+QISEN
    af40:	00003d44 6c6c6543 72616c75 636f535f     D=..Cellular_Soc
    af50:	5374656b 3a646e65 74614420 65732061     ketSend: Data se
    af60:	6620646e 2c6c6961 746b5020 3a746552     nd fail, PktRet:
    af70:	00642520 512b5441 4f4c4349 003d4553      %d.AT+QICLOSE=.
    af80:	6c257325 00000064 6c6c6543 72616c75     %s%ld...Cellular
    af90:	636f535f 4374656b 65736f6c 6f53203a     _SocketClose: So
    afa0:	74656b63 6f6c6320 66206573 656c6961     cket close faile
    afb0:	63202c64 7542646d 73253a66 6b50202c     d, cmdBuf:%s, Pk
    afc0:	74655274 6425203a 00000000 6c6c6543     tRet: %d....Cell
    afd0:	72616c75 636f535f 4374656b 656e6e6f     ular_SocketConne
    afe0:	203a7463 61766e49 2064696c 6b636f73     ct: Invalid sock
    aff0:	61207465 65726464 00007373 6c6c6543     et address..Cell
    b000:	72616c75 636f535f 4374656b 656e6e6f     ular_SocketConne
    b010:	203a7463 6b636f53 63207465 656e6e6f     ct: Socket conne
    b020:	66207463 656c6961 63202c64 7542646d     ct failed, cmdBu
    b030:	73253a66 6b50202c 74655274 6425203a     f:%s, PktRet: %d
    b040:	00000000 512b5441 54434149 0000003f     ....AT+QIACT?...
    b050:	4149512b 00005443 5241575b 5b205d4e     +QIACT..[WARN] [
    b060:	205d7325 3a73255b 205d6425 00000000     %s] [%s:%d] ....
    b070:	6c65435f 616c756c 65475f72 6e645074     _Cellular_GetPdn
    b080:	74617453 203a7375 20646142 75706e69     Status: Bad inpu
    b090:	61502074 656d6172 20726574 00000000     t Parameter ....
    b0a0:	512b5441 534d4953 3f544154 00000000     AT+QSIMSTAT?....
    b0b0:	4953512b 4154534d 00000054 432b5441     +QSIMSTAT...AT+C
    b0c0:	3f4e4950 00000000 4950432b 0000004e     PIN?....+CPIN...
    b0d0:	512b5441 44494343 00000000 4343512b     AT+QCCID....+QCC
    b0e0:	00004449 432b5441 00494d49 432b5441     ID..AT+CIMI.AT+C
    b0f0:	3d4d5352 2c363731 31353832 2c302c34     RSM=176,28514,0,
    b100:	00302c30 5352432b 0000004d 512b5441     0,0.+CRSM...AT+Q
    b110:	534e4449 3d504947 222c7525 00227325     IDNSGIP=%u,"%s".
    b120:	6c6c6543 72616c75 7465475f 74736f48     Cellular_GetHost
    b130:	614e7942 203a656d 6c756f63 74276e64     ByName: couldn't
    b140:	73657220 65766c6f 736f6820 616e2074      resolve host na
    b150:	0000656d                                me..

0000b154 <__FUNCTION__.8271>:
    b154:	666e695f 446d726f 52617461 79646165     _informDataReady
    b164:	70556f54 4c726570 72657961 00000000     ToUpperLayer....

0000b174 <__FUNCTION__.8341>:
    b174:	6c65435f 616c756c 72505f72 7365636f     _Cellular_Proces
    b184:	646f4d73 64526d65 00000079              sModemRdy...

0000b190 <__FUNCTION__.8336>:
    b190:	6c65435f 616c756c 72505f72 7365636f     _Cellular_Proces
    b1a0:	6d735073 65776f50 776f4472 0000006e     sPsmPowerDown...

0000b1b0 <__FUNCTION__.8331>:
    b1b0:	6c65435f 616c756c 72505f72 7365636f     _Cellular_Proces
    b1c0:	776f5073 6f447265 00006e77              sPowerDown..

0000b1cc <__FUNCTION__.8234>:
    b1cc:	7261705f 6f536573 74656b63 6e65704f     _parseSocketOpen
    b1dc:	7478654e 006b6f54                       NextTok.

0000b1e4 <__FUNCTION__.8283>:
    b1e4:	7261705f 6f536573 74656b63 52637255     _parseSocketUrcR
    b1f4:	00766365                                ecv.

0000b1f8 <__FUNCTION__.8295>:
    b1f8:	7261705f 6f536573 74656b63 43637255     _parseSocketUrcC
    b208:	65736f6c 00000064                       losed...

0000b210 <__FUNCTION__.8306>:
    b210:	7261705f 6f536573 74656b63 41637255     _parseSocketUrcA
    b220:	00007463                                ct..

0000b224 <__FUNCTION__.8246>:
    b224:	6c65435f 616c756c 72505f72 7365636f     _Cellular_Proces
    b234:	636f5373 4f74656b 006e6570              sSocketOpen.

0000b240 <__FUNCTION__.8351>:
    b240:	6c65435f 616c756c 61505f72 53657372     _Cellular_ParseS
    b250:	74736d69 00007461 6c6c6543 72616c75     imstat..Cellular
    b260:	0062694c 7261705f 6f536573 74656b63     Lib._parseSocket
    b270:	3a637255 74614420 65722061 20796461     Urc: Data ready 
    b280:	6c6c6163 6b636162 746f6e20 74657320     callback not set
    b290:	00002121 6c65435f 616c756c 72505f72     !!.._Cellular_Pr
    b2a0:	7365636f 646f4d73 64526d65 43203a79     ocessModemRdy: C
    b2b0:	65746e6f 6e207478 7320746f 00007465     ontext not set..
    b2c0:	6c65435f 616c756c 72505f72 7365636f     _Cellular_Proces
    b2d0:	776f5073 6f447265 203a6e77 746e6f43     sPowerDown: Cont
    b2e0:	20747865 20746f6e 00746573 7261705f     ext not set._par
    b2f0:	6f536573 74656b63 6e65704f 6f53203a     seSocketOpen: So
    b300:	74656b63 65706f20 6166206e 64656c69     cket open failed
    b310:	6f63202c 25206e6e 73202c64 75746174     , conn %d, statu
    b320:	64252073 00000000 7261705f 6f536573     s %d...._parseSo
    b330:	74656b63 6e65704f 6f53203a 74656b63     cketOpen: Socket
    b340:	65706f20 6163206e 61626c6c 66206b63      open callback f
    b350:	6320726f 206e6e6f 69206425 6f6e2073     or conn %d is no
    b360:	65732074 00212174 6f727245 6e692072     t set!!.Error in
    b370:	6f727020 73736563 20676e69 6b636f53      processing Sock
    b380:	65646e49 54202e78 6e656b6f 00732520     Index. Token %s.
    b390:	6f727245 6e692072 6f727020 73736563     Error in process
    b3a0:	20676e69 6b636f53 49207465 7865646e     ing Socket Index
    b3b0:	6f54202e 206e656b 00007325 7261705f     . Token %s.._par
    b3c0:	6f536573 74656b63 3a637255 636f5320     seSocketUrc: Soc
    b3d0:	2074656b 736f6c63 61632065 61626c6c     ket close callba
    b3e0:	6e206b63 7320746f 21217465 00000000     ck not set!!....
    b3f0:	6f727245 6e692072 6f727020 73736563     Error in process
    b400:	20676e69 746e6f43 20747865 202e6449     ing Context Id. 
    b410:	656b6f54 7325206e 00000000 76636572     Token %s....recv
    b420:	00000000 736f6c63 00006465 64706470     ....closed..pdpd
    b430:	74636165 00000000 67736e64 00007069     eact....dnsgip..
    b440:	6f727245 72702072 7365636f 676e6973     Error processing
    b450:	206e6920 6b636f53 69207465 7865646e      in Socket index
    b460:	6f74202e 206e656b 00007325 00717363     . token %s..csq.
    b470:	6c65435f 616c756c 72505f72 7365636f     _Cellular_Proces
    b480:	69735173 6174736d 6e492074 20747570     sQsimstat Input 
    b490:	61746164 20736920 61766e69 2064696c     data is invalid 
    b4a0:	00007325 6f727245 6e692072 6f727020     %s..Error in pro
    b4b0:	73736563 20676e69 204d4953 74617473     cessing SIM stat
    b4c0:	74202e65 6e656b6f 00732520 45524543     e. token %s.CERE
    b4d0:	00000047 45524743 00000047 47455243     G...CGREG...CREG
    b4e0:	00000000 444e4951 00000000 504f4951     ....QIND....QIOP
    b4f0:	00004e45 52554951 00000043 4d495351     EN..QIURC...QSIM
    b500:	54415453 00000000                       STAT....

0000b508 <__FUNCTION__.8839>:
    b508:	7465675f 4c6d6953 536b636f 65746174     _getSimLockState
    b518:	00000000                                ....

0000b51c <__FUNCTION__.8861>:
    b51c:	6568635f 72436b63 65526d73 74536461     _checkCrsmReadSt
    b52c:	73757461 00000000                       atus....

0000b534 <__FUNCTION__.8856>:
    b534:	6568635f 72436b63 654d6d73 79726f6d     _checkCrsmMemory
    b544:	74617453 00007375                       Status..

0000b54c <__FUNCTION__.8630>:
    b54c:	73726170 64694565 6f547872 006e656b     parseEidrxToken.

0000b55c <__FUNCTION__.8643>:
    b55c:	73726170 64694565 694c7872 0000656e     parseEidrxLine..

0000b56c <__FUNCTION__.8659>:
    b56c:	6c65435f 616c756c 65525f72 75467663     _Cellular_RecvFu
    b57c:	6547636e 64694574 65537872 6e697474     ncGetEidrxSettin
    b58c:	00007367                                gs..

0000b590 <__FUNCTION__.8567>:
    b590:	7261705f 6f436573 65527370 646f4d67     _parseCopsRegMod
    b5a0:	6b6f5465 00006e65                       eToken..

0000b5a8 <__FUNCTION__.8575>:
    b5a8:	7261705f 6f436573 654e7370 726f7774     _parseCopsNetwor
    b5b8:	6d614e6b 726f4665 5474616d 6e656b6f     kNameFormatToken
    b5c8:	00000000                                ....

0000b5cc <__FUNCTION__.8590>:
    b5cc:	7261705f 6f436573 61527370 6b6f5474     _parseCopsRatTok
    b5dc:	00006e65                                en..

0000b5e0 <__FUNCTION__.8945>:
    b5e0:	73726170 73704365 6f4d736d 00006564     parseCpsmsMode..

0000b5f0 <__FUNCTION__.8687>:
    b5f0:	73726170 34335465 69543231 5672656d     parseT3412TimerV
    b600:	65756c61 00000000                       alue....

0000b608 <__FUNCTION__.8706>:
    b608:	73726170 33335465 69543432 5672656d     parseT3324TimerV
    b618:	65756c61 00000000                       alue....

0000b620 <__FUNCTION__.8959>:
    b620:	73726170 74654765 546d7350 6e656b6f     parseGetPsmToken
    b630:	00000000                                ....

0000b634 <__FUNCTION__.8972>:
    b634:	6c65435f 616c756c 65525f72 75467663     _Cellular_RecvFu
    b644:	6547636e 6d735074 74746553 73676e69     ncGetPsmSettings
    b654:	00000000                                ....

0000b658 <__FUNCTION__.8851>:
    b658:	6c65435f 616c756c 65525f72 75467663     _Cellular_RecvFu
    b668:	6547636e 6d695374 6b636f4c 74617453     ncGetSimLockStat
    b678:	00007375                                us..

0000b67c <__FUNCTION__.8620>:
    b67c:	6c65435f 616c756c 65525f72 75467663     _Cellular_RecvFu
    b68c:	7049636e 72646441 00737365              ncIpAddress.

0000b698 <__FUNCTION__.8582>:
    b698:	7261705f 6f436573 654e7370 726f7774     _parseCopsNetwor
    b6a8:	6d614e6b 6b6f5465 00006e65              kNameToken..

0000b6b4 <__FUNCTION__.8609>:
    b6b4:	6c65435f 616c756c 65525f72 75467663     _Cellular_RecvFu
    b6c4:	7055636e 65746164 4d63634d 0000636e     ncUpdateMccMnc..

0000b6d4 <__FUNCTION__.8900>:
    b6d4:	6c65435f 616c756c 65525f72 75467663     _Cellular_RecvFu
    b6e4:	6547636e 736d4974 00000069              ncGetImsi...

0000b6f0 <__FUNCTION__.8890>:
    b6f0:	6c65435f 616c756c 65525f72 75467663     _Cellular_RecvFu
    b700:	6547636e 63634974 00006469              ncGetIccid..

0000b70c <__FUNCTION__.8517>:
    b70c:	6c65435f 616c756c 65525f72 75467663     _Cellular_RecvFu
    b71c:	6547636e 656d4974 00000069              ncGetImei...

0000b728 <__FUNCTION__.8468>:
    b728:	7261705f 65596573 6f4d7261 4468746e     _parseYearMonthD
    b738:	6e497961 4b4c4343 70736552 65736e6f     ayInCCLKResponse
    b748:	00000000                                ....

0000b74c <__FUNCTION__.8478>:
    b74c:	7261705f 69546573 6e49656d 4b4c4343     _parseTimeInCCLK
    b75c:	70736552 65736e6f 00000000              Response....

0000b768 <__FUNCTION__.8459>:
    b768:	7261705f 69546573 6f5a656d 6e49656e     _parseTimeZoneIn
    b778:	4b4c4343 70736552 65736e6f 00000000     CCLKResponse....

0000b788 <__FUNCTION__.8497>:
    b788:	6c65435f 616c756c 65525f72 75467663     _Cellular_RecvFu
    b798:	6547636e 74654e74 6b726f77 656d6954     ncGetNetworkTime
    b7a8:	00000000                                ....

0000b7ac <__FUNCTION__.8537>:
    b7ac:	6c65435f 616c756c 65525f72 75467663     _Cellular_RecvFu
    b7bc:	6547636e 6e614d74 63616675 65727574     ncGetManufacture
    b7cc:	00006449                                Id..

0000b7d0 <__FUNCTION__.8527>:
    b7d0:	6c65435f 616c756c 65525f72 75467663     _Cellular_RecvFu
    b7e0:	6547636e 646f4d74 64496c65 00000000     ncGetModelId....

0000b7f0 <__FUNCTION__.8507>:
    b7f0:	6c65435f 616c756c 65525f72 75467663     _Cellular_RecvFu
    b800:	6547636e 72694674 7261776d 72655665     ncGetFirmwareVer
    b810:	6e6f6973 00000000                       sion....

0000b818 <__FUNCTION__.8868>:
    b818:	7261705f 70486573 006e6d6c              _parseHplmn.

0000b824 <__FUNCTION__.8880>:
    b824:	6c65435f 616c756c 65525f72 75467663     _Cellular_RecvFu
    b834:	6547636e 6c704874 00006e6d              ncGetHplmn..

0000b840 <__FUNCTION__.8721>:
    b840:	6c6c6543 72616c75 6d6f435f 476e6f6d     Cellular_CommonG
    b850:	69457465 53787264 69747465 0073676e     etEidrxSettings.

0000b860 <__FUNCTION__.8731>:
    b860:	6c6c6543 72616c75 6d6f435f 536e6f6d     Cellular_CommonS
    b870:	69457465 53787264 69747465 0073676e     etEidrxSettings.

0000b880 <__FUNCTION__.8753>:
    b880:	6c6c6543 72616c75 6d6f435f 476e6f6d     Cellular_CommonG
    b890:	65527465 74736967 64657265 7774654e     etRegisteredNetw
    b8a0:	006b726f                                ork.

0000b8a4 <__FUNCTION__.8770>:
    b8a4:	6c6c6543 72616c75 6d6f435f 476e6f6d     Cellular_CommonG
    b8b4:	654e7465 726f7774 6d69546b 00000065     etNetworkTime...

0000b8c4 <__FUNCTION__.8782>:
    b8c4:	6c6c6543 72616c75 6d6f435f 476e6f6d     Cellular_CommonG
    b8d4:	6f4d7465 496d6564 006f666e              etModemInfo.

0000b8e0 <__FUNCTION__.8794>:
    b8e0:	6c6c6543 72616c75 6d6f435f 476e6f6d     Cellular_CommonG
    b8f0:	50497465 72646441 00737365              etIPAddress.

0000b8fc <__FUNCTION__.8761>:
    b8fc:	6c6c6543 72616c75 6d6f435f 476e6f6d     Cellular_CommonG
    b90c:	65537465 63697672 61745365 00737574     etServiceStatus.

0000b91c <__FUNCTION__.8548>:
    b91c:	6c65435f 616c756c 65525f72 75467663     _Cellular_RecvFu
    b92c:	6547636e 74654e74 6b726f77 00676552     ncGetNetworkReg.

0000b93c <__FUNCTION__.8829>:
    b93c:	6c6c6543 72616c75 6d6f435f 536e6f6d     Cellular_CommonS
    b94c:	64507465 6e6f436e 00676966              etPdnConfig.

0000b958 <__FUNCTION__.8909>:
    b958:	6c6c6543 72616c75 6d6f435f 476e6f6d     Cellular_CommonG
    b968:	69537465 7261436d 636f4c64 6174536b     etSimCardLockSta
    b978:	00737574                                tus.

0000b97c <__FUNCTION__.8920>:
    b97c:	6c6c6543 72616c75 6d6f435f 476e6f6d     Cellular_CommonG
    b98c:	69537465 7261436d 666e4964 0000006f     etSimCardInfo...

0000b99c <__FUNCTION__.8938>:
    b99c:	6c6c6543 72616c75 6d6f435f 536e6f6d     Cellular_CommonS
    b9ac:	73507465 7465536d 676e6974 00000073     etPsmSettings...

0000b9bc <__FUNCTION__.8984>:
    b9bc:	6c6c6543 72616c75 6d6f435f 476e6f6d     Cellular_CommonG
    b9cc:	73507465 7465536d 676e6974 00000073     etPsmSettings...
    b9dc:	432b5441 3f53504f 00000000 504f432b     AT+COPS?....+COP
    b9ec:	00000053 6f727245 6e692072 6f727020     S...Error in pro
    b9fc:	73736563 20676e69 20544152 756c6176     cessing RAT valu
    ba0c:	54202e65 6e656b6f 00732520 6f727245     e. Token %s.Erro
    ba1c:	6e692072 6f727020 73736563 20676e69     r in processing 
    ba2c:	75716552 65747365 64452064 76207872     Requested Edrx v
    ba3c:	65756c61 6f54202e 206e656b 00007325     alue. Token %s..
    ba4c:	6e6b6e55 206e776f 61726150 6574656d     Unknown Paramete
    ba5c:	6f502072 69746973 69206e6f 5441206e     r Position in AT
    ba6c:	4445432b 20535852 70736552 65736e6f     +CEDRXS Response
    ba7c:	00000000 73726170 64694565 6f547872     ....parseEidrxTo
    ba8c:	206e656b 69207325 7865646e 20642520     ken %s index %d 
    ba9c:	6c696166 00006465 45746547 78726469     failed..GetEidrx
    baac:	6150203a 6e697372 72452067 20726f72     : Parsing Error 
    babc:	6f636e65 65746e75 2c646572 43746120     encountered, atC
    bacc:	5365726f 75746174 25203a73 00000064     oreStatus: %d...
    badc:	45746547 78726469 74746553 73676e69     GetEidrxSettings
    baec:	6e49203a 696c6176 6f632064 7865746e     : Invalid contex
    bafc:	00000074 45746547 78726469 74746553     t...GetEidrxSett
    bb0c:	73676e69 6552203a 6e6f7073 69206573     ings: Response i
    bb1c:	6e692073 696c6176 00000064 45746547     s invalid...GetE
    bb2c:	78726469 74746553 73676e69 4470203a     idrxSettings: pD
    bb3c:	20617461 69207369 6c61766e 6f206469     ata is invalid o
    bb4c:	61642072 654c6174 7369206e 6f727720     r dataLen is wro
    bb5c:	0000676e 4445432b 3a535852 00003020     ng..+CEDRXS: 0..
    bb6c:	4445432b 3a535852 00000000 7261705f     +CEDRXS:...._par
    bb7c:	6f436573 65527370 646f4d67 49203a65     seCopsRegMode: I
    bb8c:	7475706e 72615020 74656d61 4e207265     nput Parameter N
    bb9c:	004c4c55 7261705f 6f436573 65527370     ULL._parseCopsRe
    bbac:	646f4d67 45203a65 726f7272 206e6920     gMode: Error in 
    bbbc:	636f7270 69737365 4e20676e 6f777465     processing Netwo
    bbcc:	52206b72 73696765 74617274 206e6f69     rk Registration 
    bbdc:	65646f6d 6f54202e 206e656b 00007325     mode. Token %s..
    bbec:	7261705f 6f436573 654e7370 726f7774     _parseCopsNetwor
    bbfc:	6d614e6b 726f4665 3a74616d 706e4920     kNameFormat: Inp
    bc0c:	50207475 6d617261 72657465 4c554e20     ut Parameter NUL
    bc1c:	0000004c 7261705f 6f436573 654e7370     L..._parseCopsNe
    bc2c:	726f7774 6d614e6b 726f4665 3a74616d     tworkNameFormat:
    bc3c:	72724520 6920726f 7270206e 7365636f      Error in proces
    bc4c:	676e6973 74654e20 6b726f77 67655220     sing Network Reg
    bc5c:	72747369 6f697461 6f6d206e 202e6564     istration mode. 
    bc6c:	656b6f54 7325206e 00000000 7261705f     Token %s...._par
    bc7c:	6f436573 654e7370 726f7774 6d614e6b     seCopsNetworkNam
    bc8c:	49203a65 7475706e 72615020 74656d61     e: Input Paramet
    bc9c:	4e207265 004c4c55 7261705f 6f436573     er NULL._parseCo
    bcac:	654e7370 726f7774 6d614e6b 45203a65     psNetworkName: E
    bcbc:	726f7272 206e6920 636f7270 69737365     rror in processi
    bccc:	5220676e 202e5441 656b6f54 7325206e     ng RAT. Token %s
    bcdc:	00000000 61766e49 2064696c 31343354     ....Invalid T341
    bcec:	69742032 2072656d 74696e75 646e6920     2 timer unit ind
    bcfc:	00007865 61766e49 2064696c 32333354     ex..Invalid T332
    bd0c:	69742034 2072656d 74696e75 646e6920     4 timer unit ind
    bd1c:	00007865 6e6b6e55 206e776f 61726150     ex..Unknown Para
    bd2c:	6574656d 6f502072 69746973 69206e6f     meter Position i
    bd3c:	5441206e 5350512b 5220534d 6f707365     n AT+QPSMS Respo
    bd4c:	0065736e 50746547 65536d73 6e697474     nse.GetPsmSettin
    bd5c:	203a7367 6e6f4370 74786574 20736920     gs: pContext is 
    bd6c:	61766e69 0064696c 50746547 65536d73     invalid.GetPsmSe
    bd7c:	6e697474 203a7367 70736552 65736e6f     ttings: Response
    bd8c:	20736920 61766e69 0064696c 50746547      is invalid.GetP
    bd9c:	65536d73 6e697474 203a7367 74614470     smSettings: pDat
    bdac:	73692061 766e6920 64696c61 20726f20     a is invalid or 
    bdbc:	61746164 206e654c 77207369 676e6f72     dataLen is wrong
    bdcc:	00000000 73726170 74654765 546d7350     ....parseGetPsmT
    bddc:	6e656b6f 20732520 65646e69 64252078     oken %s index %d
    bdec:	69616620 0064656c 6c65435f 616c756c      failed._Cellula
    bdfc:	65525f72 75467663 6547636e 6d695374     r_RecvFuncGetSim
    be0c:	6b636f4c 74617453 203a7375 6e6f4370     LockStatus: pCon
    be1c:	74786574 20736920 61766e69 0064696c     text is invalid.
    be2c:	6c65435f 616c756c 65525f72 75467663     _Cellular_RecvFu
    be3c:	6547636e 6d695374 6b636f4c 74617453     ncGetSimLockStat
    be4c:	203a7375 70736552 65736e6f 61447020     us: Response pDa
    be5c:	69206174 6e692073 696c6176 00000064     ta is invalid...
    be6c:	6c65435f 616c756c 65525f72 75467663     _Cellular_RecvFu
    be7c:	6547636e 6d695374 6b636f4c 74617453     ncGetSimLockStat
    be8c:	203a7375 74614470 73692061 766e6920     us: pData is inv
    be9c:	64696c61 20726f20 61746164 206e654c     alid or dataLen 
    beac:	77207369 676e6f72 00000000 76636552     is wrong....Recv
    bebc:	20504920 72646461 3a737365 766e4920      IP address: Inv
    becc:	64696c61 6e6f6320 74786574 00000000     alid context....
    bedc:	76636552 20504920 72646461 3a737365     Recv IP address:
    beec:	73657220 736e6f70 73692065 766e6920      response is inv
    befc:	64696c61 00000000 76636552 20504920     alid....Recv IP 
    bf0c:	72646461 3a737365 61447020 69206174     address: pData i
    bf1c:	6e692073 696c6176 726f2064 74616420     s invalid or dat
    bf2c:	6e654c61 20736920 6e6f7277 00000067     aLen is wrong...
    bf3c:	2c302c30 00302c30 7261705f 6f436573     0,0,0,0._parseCo
    bf4c:	654e7370 726f7774 6d614e6b 45203a65     psNetworkName: E
    bf5c:	726f7272 206e6920 636f7270 69737365     rror in processi
    bf6c:	4e20676e 6f777465 4d206b72 4d204343     ng Network MCC M
    bf7c:	203a434e 676e654c 6e206874 5620746f     NC: Length not V
    bf8c:	64696c61 00000000 6f727245 6e692072     alid....Error in
    bf9c:	6f727020 73736563 20676e69 7265704f      processing Oper
    bfac:	726f7461 6d614e20 46203a65 616d726f     ator Name: Forma
    bfbc:	6e552074 776f6e6b 0000006e 61647055     t Unknown...Upda
    bfcc:	634d6574 636e4d63 6552203a 6e6f7073     teMccMnc: Respon
    bfdc:	69206573 6e692073 696c6176 00000064     se is invalid...
    bfec:	61647055 634d6574 636e4d63 4470203a     UpdateMccMnc: pD
    bffc:	20617461 69207369 6c61766e 6f206469     ata is invalid o
    c00c:	61642072 654c6174 7369206e 6f727720     r dataLen is wro
    c01c:	0000676e 4f525245 43203a52 2053504f     ng..ERROR: COPS 
    c02c:	00007325 49746567 3a69736d 6f437020     %s..getImsi: pCo
    c03c:	7865746e 73692074 766e6920 64696c61     ntext is invalid
    c04c:	00000000 49746567 3a69736d 73655220     ....getImsi: Res
    c05c:	736e6f70 73692065 766e6920 64696c61     ponse is invalid
    c06c:	00000000 49746567 3a69736d 61447020     ....getImsi: pDa
    c07c:	69206174 6e692073 696c6176 726f2064     ta is invalid or
    c08c:	74616420 6e654c61 20736920 6e6f7277      dataLen is wron
    c09c:	00000067 49746567 64696363 4370203a     g...getIccid: pC
    c0ac:	65746e6f 69207478 6e692073 696c6176     ontext is invali
    c0bc:	00000064 49746567 64696363 6552203a     d...getIccid: Re
    c0cc:	6e6f7073 69206573 6e692073 696c6176     sponse is invali
    c0dc:	00000064 49746567 64696363 4470203a     d...getIccid: pD
    c0ec:	20617461 69207369 6c61766e 6f206469     ata is invalid o
    c0fc:	61642072 654c6174 7369206e 6f727720     r dataLen is wro
    c10c:	0000676e 49746547 3a69656d 6f437020     ng..GetImei: pCo
    c11c:	7865746e 73692074 766e6920 64696c61     ntext is invalid
    c12c:	00000000 49746547 3a69656d 73655220     ....GetImei: Res
    c13c:	736e6f70 73692065 766e6920 64696c61     ponse is invalid
    c14c:	00000000 49746547 3a69656d 61447020     ....GetImei: pDa
    c15c:	69206174 6e692073 696c6176 726f2064     ta is invalid or
    c16c:	74616420 6e654c61 20736920 6e6f7277      dataLen is wron
    c17c:	00000067 6f727245 6e692072 6f725020     g...Error in Pro
    c18c:	73736563 20676e69 72616559 6f54202e     cessing Year. To
    c19c:	206e656b 00007325 0000002f 6f727245     ken %s../...Erro
    c1ac:	6e692072 6f725020 73736563 20676e69     r in Processing 
    c1bc:	746e6f6d 54202e68 6e656b6f 00732520     month. Token %s.
    c1cc:	0000002c 6f727245 6e692072 6f725020     ,...Error in Pro
    c1dc:	73736563 20676e69 2e796144 6b6f7420     cessing Day. tok
    c1ec:	25206e65 00000073 6f727245 6e692072     en %s...Error in
    c1fc:	6f725020 73736563 20676e69 72756f48      Processing Hour
    c20c:	6f74202e 206e656b 00007325 6f727245     . token %s..Erro
    c21c:	6e692072 6f725020 73736563 20676e69     r in Processing 
    c22c:	756e696d 202e6574 656b6f54 7325206e     minute. Token %s
    c23c:	00000000 0000002b 0000002d 6f727245     ....+...-...Erro
    c24c:	6e692072 6f725020 73736563 20676e69     r in Processing 
    c25c:	6f636553 202e646e 656b6f54 7325206e     Second. Token %s
    c26c:	00000000 6f727245 6e692072 6f725020     ....Error in Pro
    c27c:	73736563 20676e69 656d6954 656e6f5a     cessing TimeZone
    c28c:	666e4920 616d726f 6e6f6974 6f54202e      Information. To
    c29c:	206e656b 00007325 4e746547 6f777465     ken %s..GetNetwo
    c2ac:	69546b72 203a656d 6e6f4370 74786574     rkTime: pContext
    c2bc:	20736920 61766e69 0064696c 4e746547      is invalid.GetN
    c2cc:	6f777465 69546b72 203a656d 70736552     etworkTime: Resp
    c2dc:	65736e6f 20736920 61766e69 0064696c     onse is invalid.
    c2ec:	4e746547 6f777465 69546b72 203a656d     GetNetworkTime: 
    c2fc:	74614470 73692061 766e6920 64696c61     pData is invalid
    c30c:	20726f20 61746164 206e654c 77207369      or dataLen is w
    c31c:	676e6f72 00000000 4d746547 66756e61     rong....GetManuf
    c32c:	75746361 64496572 4370203a 65746e6f     actureId: pConte
    c33c:	69207478 6e692073 696c6176 00000064     xt is invalid...
    c34c:	4d746547 66756e61 75746361 64496572     GetManufactureId
    c35c:	6552203a 6e6f7073 69206573 6e692073     : Response is in
    c36c:	696c6176 00000064 4d746547 66756e61     valid...GetManuf
    c37c:	75746361 64496572 4470203a 20617461     actureId: pData 
    c38c:	69207369 6c61766e 6f206469 61642072     is invalid or da
    c39c:	654c6174 7369206e 6f727720 0000676e     taLen is wrong..
    c3ac:	4d746547 6c65646f 203a6449 6e6f4370     GetModelId: pCon
    c3bc:	74786574 20736920 61766e69 0064696c     text is invalid.
    c3cc:	4d746547 6c65646f 203a6449 70736552     GetModelId: Resp
    c3dc:	65736e6f 20736920 61766e69 0064696c     onse is invalid.
    c3ec:	4d746547 6c65646f 203a6449 74614470     GetModelId: pDat
    c3fc:	73692061 766e6920 64696c61 20726f20     a is invalid or 
    c40c:	61746164 206e654c 77207369 676e6f72     dataLen is wrong
    c41c:	00000000 46746547 776d7269 56657261     ....GetFirmwareV
    c42c:	69737265 203a6e6f 6e6f4370 74786574     ersion: pContext
    c43c:	20736920 61766e69 0064696c 46746547      is invalid.GetF
    c44c:	776d7269 56657261 69737265 203a6e6f     irmwareVersion: 
    c45c:	70736552 65736e6f 20736920 61766e69     Response is inva
    c46c:	0064696c 46746547 776d7269 56657261     lid.GetFirmwareV
    c47c:	69737265 203a6e6f 74614470 73692061     ersion: pData is
    c48c:	766e6920 64696c61 20726f20 61746164      invalid or data
    c49c:	206e654c 77207369 676e6f72 00000000     Len is wrong....
    c4ac:	7261705f 70486573 3a6e6d6c 6f547020     _parseHplmn: pTo
    c4bc:	206e656b 4e207369 204c4c55 7020726f     ken is NULL or p
    c4cc:	61746144 20736920 4c4c554e 00000000     Data is NULL....
    c4dc:	7261705f 70486573 3a6e6d6c 72724520     _parseHplmn: Err
    c4ec:	6920726f 7270206e 7365636f 676e6973     or in processing
    c4fc:	4c504820 69204e4d 6c61766e 74206469      HPLMN invalid t
    c50c:	6e656b6f 00732520 48746547 6e6d6c70     oken %s.GetHplmn
    c51c:	4370203a 65746e6f 69207478 6e692073     : pContext is in
    c52c:	696c6176 00000064 48746547 6e6d6c70     valid...GetHplmn
    c53c:	6552203a 6e6f7073 69206573 6e692073     : Response is in
    c54c:	696c6176 00000064 48746547 6e6d6c70     valid...GetHplmn
    c55c:	4470203a 20617461 69207369 6c61766e     : pData is inval
    c56c:	6f206469 61642072 654c6174 7369206e     id or dataLen is
    c57c:	6f727720 0000676e 432b5441 58524445      wrong..AT+CEDRX
    c58c:	00003f53 4445432b 00535852 6c65435f     S?..+CEDRXS._Cel
    c59c:	616c756c 68435f72 4c6b6365 61726269     lular_CheckLibra
    c5ac:	74537972 73757461 69616620 0064656c     ryStatus failed.
    c5bc:	6c6c6543 72616c75 6d6f435f 476e6f6d     Cellular_CommonG
    c5cc:	69457465 53787264 69747465 2073676e     etEidrxSettings 
    c5dc:	6142203a 61702064 656d6172 00726574     : Bad parameter.
    c5ec:	6c6c6543 72616c75 7465475f 72646945     Cellular_GetEidr
    c5fc:	74655378 676e6974 63203a73 646c756f     xSettings: could
    c60c:	2074276e 72746572 65766569 64694520     n't retrieve Eid
    c61c:	73207872 69747465 0073676e 6c6c6543     rx settings.Cell
    c62c:	72616c75 6d6f435f 536e6f6d 69457465     ular_CommonSetEi
    c63c:	53787264 69747465 2073676e 6142203a     drxSettings : Ba
    c64c:	61702064 656d6172 00726574 432b5441     d parameter.AT+C
    c65c:	58524445 00003d53 64257325 2c64252c     EDRXS=..%s%d,%d,
    c66c:	25632522 25632563 00002263 6c65435f     "%c%c%c%c".._Cel
    c67c:	616c756c 65535f72 64694574 65537872     lular_SetEidrxSe
    c68c:	6e697474 203a7367 6c756f63 74276e64     ttings: couldn't
    c69c:	74657320 64694520 73207872 69747465      set Eidrx setti
    c6ac:	0073676e 432b5441 3d4e5546 00000034     ngs.AT+CFUN=4...
    c6bc:	6c6c6543 72616c75 6d6f435f 476e6f6d     Cellular_CommonG
    c6cc:	65527465 74736967 64657265 7774654e     etRegisteredNetw
    c6dc:	206b726f 6142203a 61702064 656d6172     ork : Bad parame
    c6ec:	00726574 432b5441 3f4b4c43 00000000     ter.AT+CCLK?....
    c6fc:	4c43432b 0000004b 6c6c6543 72616c75     +CCLK...Cellular
    c70c:	6d6f435f 476e6f6d 654e7465 726f7774     _CommonGetNetwor
    c71c:	6d69546b 203a2065 20646142 61726170     kTime : Bad para
    c72c:	6574656d 00000072 6c6c6543 72616c75     meter...Cellular
    c73c:	7465475f 7774654e 546b726f 3a656d69     _GetNetworkTime:
    c74c:	756f6320 276e646c 65722074 65697274      couldn't retrie
    c75c:	4e206576 6f777465 54206b72 00656d69     ve Network Time.
    c76c:	432b5441 00524d47 432b5441 004e5347     AT+CGMR.AT+CGSN.
    c77c:	432b5441 004d4d47 432b5441 00494d47     AT+CGMM.AT+CGMI.
    c78c:	6c6c6543 72616c75 6d6f435f 476e6f6d     Cellular_CommonG
    c79c:	6f4d7465 496d6564 206f666e 6142203a     etModemInfo : Ba
    c7ac:	61702064 656d6172 00726574 5047432b     d parameter.+CGP
    c7bc:	52444441 00000000 6c65435f 616c756c     ADDR...._Cellula
    c7cc:	65475f72 41504974 65726464 203a7373     r_GetIPAddress: 
    c7dc:	66754270 20726566 69207369 6c61766e     pBuffer is inval
    c7ec:	6f206469 75622072 72656666 676e654c     id or bufferLeng
    c7fc:	69206874 72772073 00676e6f 432b5441     th is wrong.AT+C
    c80c:	44415047 003d5244 6c65435f 616c756c     GPADDR=._Cellula
    c81c:	65475f72 41504974 65726464 203a7373     r_GetIPAddress: 
    c82c:	6c756f63 74276e64 74657220 76656972     couldn't retriev
    c83c:	68742065 50492065 6d63202c 66754264     e the IP, cmdBuf
    c84c:	2c73253a 746b7020 74617453 203a7375     :%s, pktStatus: 
    c85c:	00006425 4552432b 00000047 432b5441     %d..+CREG...AT+C
    c86c:	3f474552 00000000 5247432b 00004745     REG?....+CGREG..
    c87c:	432b5441 47455247 0000003f 5245432b     AT+CGREG?...+CER
    c88c:	00004745 432b5441 47455245 0000003f     EG..AT+CEREG?...
    c89c:	6c6c6543 72616c75 6d6f435f 476e6f6d     Cellular_CommonG
    c8ac:	65537465 63697672 61745365 20737574     etServiceStatus 
    c8bc:	6142203a 61702064 656d6172 00726574     : Bad parameter.
    c8cc:	6c65435f 616c756c 65525f72 75467663     _Cellular_RecvFu
    c8dc:	6547636e 72735074 203a6765 70736572     ncGetPsreg: resp
    c8ec:	65736e6f 20736920 61766e69 0064696c     onse is invalid.
    c8fc:	6c65435f 616c756c 65525f72 75467663     _Cellular_RecvFu
    c90c:	6547636e 72735074 203a6765 61447070     ncGetPsreg: ppDa
    c91c:	69206174 6e692073 696c6176 726f2064     ta is invalid or
    c92c:	74616420 6e654c61 20736920 6e6f7277      dataLen is wron
    c93c:	00000067 6c6c6543 72616c75 6d6f435f     g...Cellular_Com
    c94c:	536e6f6d 64507465 6e6f436e 3a676966     monSetPdnConfig:
    c95c:	706e4920 70207475 6d617261 72657465      Input parameter
    c96c:	20736920 4c4c554e 00000000 00005049      is NULL....IP..
    c97c:	36565049 00000000 6c6c6543 72616c75     IPV6....Cellular
    c98c:	6d6f435f 536e6f6d 64507465 6e6f436e     _CommonSetPdnCon
    c99c:	3a676966 766e4920 64696c61 6e647020     fig: Invalid pdn
    c9ac:	6e6f6320 74786574 70797420 64252065      context type %d
    c9bc:	00000000 432b5441 4f434447 003d544e     ....AT+CGDCONT=.
    c9cc:	64257325 7325222c 25222c22 00002273     %s%d,"%s","%s"..
    c9dc:	6c6c6543 72616c75 6d6f435f 536e6f6d     Cellular_CommonS
    c9ec:	64507465 6e6f436e 3a676966 6e616320     etPdnConfig: can
    c9fc:	73207427 50207465 202c4e44 42646d63     't set PDN, cmdB
    ca0c:	253a6675 50202c73 6552746b 25203a74     uf:%s, PktRet: %
    ca1c:	00000064 34565049 00003656 6c6c6543     d...IPV4V6..Cell
    ca2c:	72616c75 6d6f435f 476e6f6d 69537465     ular_CommonGetSi
    ca3c:	7261436d 636f4c64 6174536b 20737574     mCardLockStatus 
    ca4c:	6142203a 61702064 656d6572 00726574     : Bad paremeter.
    ca5c:	432b5441 00444943 4943432b 00000044     AT+CCID.+CCID...
    ca6c:	6c6c6543 72616c75 6d6f435f 476e6f6d     Cellular_CommonG
    ca7c:	69537465 7261436d 666e4964 203a206f     etSimCardInfo : 
    ca8c:	20646142 65726170 6574656d 00000072     Bad paremeter...
    ca9c:	6c6c6543 72616c75 6d6f435f 536e6f6d     Cellular_CommonS
    caac:	73507465 7465536d 676e6974 203a2073     etPsmSettings : 
    cabc:	20646142 61726170 6574656d 00000072     Bad parameter...
    cacc:	432b5441 534d5350 2c64253d 00000000     AT+CPSMS=%d,....
    cadc:	432b5441 534d5350 0000003f 5350432b     AT+CPSMS?...+CPS
    caec:	0000534d 6c6c6543 72616c75 6d6f435f     MS..Cellular_Com
    cafc:	476e6f6d 73507465 7465536d 676e6974     monGetPsmSetting
    cb0c:	203a2073 20646142 61726170 6574656d     s : Bad paramete
    cb1c:	00000072                                r...

0000cb20 <__FUNCTION__.8361>:
    cb20:	7261705f 65436573 64496c6c 65526e49     _parseCellIdInRe
    cb30:	61745367 00737574                       gStatus.

0000cb38 <__FUNCTION__.8369>:
    cb38:	7261705f 61526573 666e4974 526e496f     _parseRatInfoInR
    cb48:	74536765 73757461 00000000              egStatus....

0000cb54 <__FUNCTION__.8426>:
    cb54:	6c65435f 616c756c 65525f72 65764567     _Cellular_RegEve
    cb64:	7453746e 73757461 00000000 6f727245     ntStatus....Erro
    cb74:	6e692072 6f727020 73736563 20676e69     r in processing 
    cb84:	6c6c6543 2e644920 6b6f5420 25206e65     Cell Id. Token %
    cb94:	00000073 6f727245 6e692072 6f727020     s...Error in pro
    cba4:	73736563 20676e69 2e544152 6b6f5420     cessing RAT. Tok
    cbb4:	25206e65 00000073 6c65435f 616c756c     en %s..._Cellula
    cbc4:	65525f72 65764567 7453746e 73757461     r_RegEventStatus
    cbd4:	75203a20 6f6e6b6e 72206e77 74206765      : unknown reg t
    cbe4:	20657079 00000000 00464646              ype ....FFF.

0000cbf0 <gsmSignalBarsTable.8273>:
    cbf0:	029e0198 04b003a7 00000500              ............

0000cbfc <lteCATMSignalBarsTable.8274>:
    cbfc:	0297018d 04ab03a1 00000500              ............

0000cc08 <lteNBIotSignalBarsTable.8275>:
    cc08:	0297018d 04ab03a1 00000500              ............

0000cc14 <__FUNCTION__.8285>:
    cc14:	63656863 696e496b 72615074 74656d61     checkInitParamet
    cc24:	00007265                                er..

0000cc28 <__FUNCTION__.8294>:
    cc28:	6c65435f 616c756c 68435f72 4c6b6365     _Cellular_CheckL
    cc38:	61726269 74537972 73757461 00000000     ibraryStatus....

0000cc48 <__FUNCTION__.8307>:
    cc48:	6c65435f 616c756c 72545f72 6c736e61     _Cellular_Transl
    cc58:	50657461 7453746b 73757461 00000000     atePktStatus....

0000cc68 <__FUNCTION__.8240>:
    cc68:	4f62696c 006e6570                       libOpen.

0000cc70 <__FUNCTION__.8321>:
    cc70:	6c65435f 616c756c 72545f72 6c736e61     _Cellular_Transl
    cc80:	41657461 726f4374 61745365 00737574     ateAtCoreStatus.

0000cc90 <__FUNCTION__.8336>:
    cc90:	6c65435f 616c756c 72435f72 65746165     _Cellular_Create
    cca0:	6b636f53 61447465 00006174              SocketData..

0000ccac <__FUNCTION__.8343>:
    ccac:	6c65435f 616c756c 65525f72 65766f6d     _Cellular_Remove
    ccbc:	6b636f53 61447465 00006174              SocketData..

0000ccc8 <__FUNCTION__.8352>:
    ccc8:	6c65435f 616c756c 73495f72 696c6156     _Cellular_IsVali
    ccd8:	636f5364 0074656b                       dSocket.

0000cce0 <__FUNCTION__.8357>:
    cce0:	6c65435f 616c756c 73495f72 696c6156     _Cellular_IsVali
    ccf0:	6e645064 00000000                       dPdn....

0000ccf8 <rxqualValueToBerTable.8370>:
    ccf8:	001c000e 00710039 01c500e2 07120389     ....9.q.........

0000cd08 <__FUNCTION__.8414>:
    cd08:	6c65435f 616c756c 65475f72 636f5374     _Cellular_GetSoc
    cd18:	4474656b 00617461                       ketData.

0000cd20 <__FUNCTION__.8426>:
    cd20:	6c65435f 616c756c 694c5f72 696e4962     _Cellular_LibIni
    cd30:	00000074 61766e49 2064696c 6c6c6543     t...Invalid Cell
    cd40:	72616c75 646e6148 2072656c 6e696f70     ularHandler poin
    cd50:	2e726574 00000000 206c6c41 20656874     ter.....All the 
    cd60:	636e7566 6e6f6974 6e692073 65687420     functions in the
    cd70:	6c654320 616c756c 6d6f4372 746e496d      CellularCommInt
    cd80:	61667265 73206563 6c756f68 65622064     erface should be
    cd90:	6c617620 002e6469 206c6c41 20656874      valid..All the 
    cda0:	656b6f74 6174206e 73656c62 206e6920     token tables in 
    cdb0:	20656874 6c6c6543 72616c75 656b6f54     the CellularToke
    cdc0:	6261546e 7320656c 6c756f68 65622064     nTable should be
    cdd0:	6c617620 002e6469 6c6c6543 72616c75      valid..Cellular
    cde0:	62694c20 646e6920 74616369 61206465      Lib indicated a
    cdf0:	69616620 6572756c 5d64255b 5d64255b      failure[%d][%d]
    ce00:	00000000 6c65435f 616c756c 72545f72     ...._Cellular_Tr
    ce10:	6c736e61 50657461 7453746b 73757461     anslatePktStatus
    ce20:	7453203a 73757461 00642520 69746b70     : Status %d.pkti
    ce30:	6166206f 64656c69 206f7420 74696e69     o failed to init
    ce40:	696c6169 0000657a 6c65435f 616c756c     ialize.._Cellula
    ce50:	72545f72 6c736e61 41657461 726f4374     r_TranslateAtCor
    ce60:	61745365 3a737574 61745320 20737574     eStatus: Status 
    ce70:	00006425 6c65435f 616c756c 72435f72     %d.._Cellular_Cr
    ce80:	65746165 6b636f53 202c7465 2074754f     eateSocket, Out 
    ce90:	6d20666f 726f6d65 00000079 6c65435f     of memory..._Cel
    cea0:	616c756c 72435f72 65746165 6b636f53     lular_CreateSock
    ceb0:	202c7465 66206f4e 20656572 6b636f73     et, No free sock
    cec0:	73207465 73746f6c 65726120 61766120     et slots are ava
    ced0:	62616c69 0000656c 6c65435f 616c756c     ilable.._Cellula
    cee0:	65525f72 65766f6d 6b636f53 202c7465     r_RemoveSocket, 
    cef0:	6b636f73 69207465 6f632073 63656e6e     socket is connec
    cf00:	676e6974 61747320 5b206574 005d7525     ting state [%u].
    cf10:	6c65435f 616c756c 73495f72 696c6156     _Cellular_IsVali
    cf20:	636f5364 2c74656b 766e6920 64696c61     dSocket, invalid
    cf30:	636f7320 2074656b 646e6168 2520656c      socket handle %
    cf40:	00000075 6c65435f 616c756c 73495f72     u..._Cellular_Is
    cf50:	696c6156 6e645064 6f43203a 7865746e     ValidPdn: Contex
    cf60:	20644974 2074756f 7220666f 65676e61     tId out of range
    cf70:	00642520 6c65435f 616c756c 65475f72      %d._Cellular_Ge
    cf80:	636f5374 4474656b 2c617461 766e6920     tSocketData, inv
    cf90:	64696c61 636f7320 2074656b 646e6168     alid socket hand
    cfa0:	2520656c 00000075 6c65435f 616c756c     le %u..._Cellula
    cfb0:	6f435f72 6e6f6d6d 74696e49 65686320     r_CommonInit che
    cfc0:	6e496b63 61507469 656d6172 20726574     ckInitParameter 
    cfd0:	6c696166 00006465 6c6c6543 72616c75     failed..Cellular
    cfe0:	746e6f43 5f747865 6c612074 61636f6c     Context_t alloca
    cff0:	6e6f6974 69616620 0064656c 6c756f43     tion failed.Coul
    d000:	6f6e2064 72632074 65746165 6c654320     d not create Cel
    d010:	616c756c 62694c72 61747320 20737574     lularLib status 
    d020:	6574756d 00000078 6c756f43 6f6e2064     mutex...Could no
    d030:	72632074 65746165 4c454320 414c554c     t create CELLULA
    d040:	54412052 74614420 756d2061 20786574     R AT Data mutex 
    d050:	00000000 6c756f43 6f6e2064 72632074     ....Could not cr
    d060:	65746165 4c454320 414c554c 6b502052     eate CELLULAR Pk
    d070:	65522074 756d2071 20786574 00000000     t Req mutex ....
    d080:	6c756f43 6f6e2064 72632074 65746165     Could not create
    d090:	4c454320 414c554c 6b502052 65522074      CELLULAR Pkt Re
    d0a0:	6d207073 78657475 00000020              sp mutex ...

0000d0ac <__FUNCTION__.8220>:
    d0ac:	6e6f635f 74726576 51646e41 65756575     _convertAndQueue
    d0bc:	70736552 6b636150 00007465              RespPacket..

0000d0c8 <__FUNCTION__.8294>:
    d0c8:	5074615f 65737261 48746547 6c646e61     _atParseGetHandl
    d0d8:	00007265                                er..

0000d0dc <__FUNCTION__.8228>:
    d0dc:	50637275 65737261 656b6f54 0000006e     urcParseToken...

0000d0ec <__FUNCTION__.8236>:
    d0ec:	6f72705f 73736563 50637255 656b6361     _processUrcPacke
    d0fc:	00000074                                t...

0000d100 <__FUNCTION__.8245>:
    d100:	6c65435f 616c756c 74415f72 52646d63     _Cellular_AtcmdR
    d110:	65757165 69547473 756f656d 74695774     equestTimeoutWit
    d120:	6c614368 6361626c 7761526b 00000000     hCallbackRaw....

0000d130 <__FUNCTION__.8256>:
    d130:	6c65435f 616c756c 61445f72 65536174     _Cellular_DataSe
    d140:	6957646e 69546874 756f656d 6c654474     ndWithTimeoutDel
    d150:	61527961 00000077                       ayRaw...

0000d158 <__FUNCTION__.8308>:
    d158:	6c65435f 616c756c 61485f72 656c646e     _Cellular_Handle
    d168:	6b636150 00007465                       Packet..

0000d170 <__FUNCTION__.8315>:
    d170:	6c65435f 616c756c 6b505f72 6e614874     _Cellular_PktHan
    d180:	72656c64 6374415f 6552646d 73657571     dler_AtcmdReques
    d190:	74695774 6c614368 6361626c 0000006b     tWithCallback...

0000d1a0 <__FUNCTION__.8324>:
    d1a0:	6c65435f 616c756c 69545f72 756f656d     _Cellular_Timeou
    d1b0:	63744174 6144646d 65526174 65527663     tAtcmdDataRecvRe
    d1c0:	73657571 74695774 6c614368 6361626c     questWithCallbac
    d1d0:	0000006b                                k...

0000d1d4 <__FUNCTION__.8336>:
    d1d4:	6c65435f 616c756c 74415f72 44646d63     _Cellular_AtcmdD
    d1e4:	53617461 00646e65                       ataSend.

0000d1ec <__FUNCTION__.8354>:
    d1ec:	6c65435f 616c756c 69545f72 756f656d     _Cellular_Timeou
    d1fc:	63744174 6144646d 65536174 7553646e     tAtcmdDataSendSu
    d20c:	73656363 6b6f5473 00006e65              ccessToken..

0000d218 <__FUNCTION__.8368>:
    d218:	6c65435f 616c756c 74415f72 73726150     _Cellular_AtPars
    d228:	696e4965 00000074 6e6f635f 74726576     eInit..._convert
    d238:	51646e41 65756575 70736552 6b636150     AndQueueRespPack
    d248:	203a7465 72205441 6f707365 2065736e     et: AT response 
    d258:	746e6f63 736e6961 72726520 0000726f     contains error..
    d268:	6e6f635f 74726576 51646e41 65756575     _convertAndQueue
    d278:	70736552 6b636150 203a7465 20746f47     RespPacket: Got 
    d288:	65722061 6e6f7073 77206573 206e6568     a response when 
    d298:	20656874 70736552 69205120 75662073     the Resp Q is fu
    d2a8:	21216c6c 00000000 55206f4e 43204352     ll!!....No URC C
    d2b8:	626c6c61 206b6361 636e7566 61766120     allback func ava
    d2c8:	25206c69 00000073 6c65435f 616c756c     il %s..._Cellula
    d2d8:	74415f72 73726150 203a2065 75706e69     r_AtParse : inpu
    d2e8:	74732074 676e6972 72726520 202c726f     t string error, 
    d2f8:	72617473 69772074 22206874 6220222b     start with "+" b
    d308:	6e207475 6f74206f 206e656b 00007325     ut no token %s..
    d318:	6c756f43 74276e64 6c6c6120 7461636f     Couldn't allocat
    d328:	656d2065 79726f6d 20666f20 20756c25     e memory of %lu 
    d338:	20726f66 00637275 5f544b50 54415453     for urc.PKT_STAT
    d348:	425f5355 525f4441 45555145 202c5453     US_BAD_REQUEST, 
    d358:	6c6c756e 20544120 61726170 0000006d     null AT param...
    d368:	276e6143 65732074 7220646e 70207165     Can't send req p
    d378:	656b6361 00000074 5f746b70 76636572     acket...pkt_recv
    d388:	61747320 3d737574 202c6425 6f727265      status=%d, erro
    d398:	6e692072 20544120 20646d63 72207325     r in AT cmd %s r
    d3a8:	00707365 5f746b70 76636572 61747320     esp.pkt_recv sta
    d3b8:	3d737574 202c6425 63205441 2520646d     tus=%d, AT cmd %
    d3c8:	69742073 2064656d 0074756f 6c65435f     s timed out._Cel
    d3d8:	616c756c 61445f72 65536174 6957646e     lular_DataSendWi
    d3e8:	69546874 756f656d 6c654474 61527961     thTimeoutDelayRa
    d3f8:	6e202c77 206c6c75 75706e69 00000074     w, null input...
    d408:	6c65435f 616c756c 61445f72 65536174     _Cellular_DataSe
    d418:	6957646e 69546874 756f656d 6c654474     ndWithTimeoutDel
    d428:	61527961 69202c77 6d6f636e 74656c70     ayRaw, incomplet
    d438:	61642065 74206174 736e6172 00726566     e data transfer.
    d448:	6c65435f 616c756c 61445f72 65536174     _Cellular_DataSe
    d458:	6957646e 69546874 756f656d 6c654474     ndWithTimeoutDel
    d468:	61527961 69202c77 6d6f636e 74656c70     ayRaw, incomplet
    d478:	6e652065 74617064 6e726574 61727420     e endpattern tra
    d488:	6566736e 00000072 5f746b70 76636572     nsfer...pkt_recv
    d498:	61747320 3d737574 202c6425 6f727265      status=%d, erro
    d4a8:	6e692072 6e657320 676e6964 74616420     r in sending dat
    d4b8:	00000061 5f746b70 76636572 61747320     a...pkt_recv sta
    d4c8:	3d737574 202c6425 61746164 6e657320     tus=%d, data sen
    d4d8:	676e6964 6d697420 6f206465 00007475     ding timed out..
    d4e8:	6c65435f 616c756c 61485f72 656c646e     _Cellular_Handle
    d4f8:	6b636150 43207465 626c6c61 206b6361     Packet Callback 
    d508:	65707974 64252820 72652029 00726f72     type (%d) error.
    d518:	6c65435f 616c756c 69545f72 756f656d     _Cellular_Timeou
    d528:	63744174 6552646d 73657571 74695774     tAtcmdRequestWit
    d538:	6c614368 6361626c 203a206b 61766e49     hCallback : Inva
    d548:	2064696c 6c6c6563 72616c75 6e6f6320     lid cellular con
    d558:	74786574 00000000 6c65435f 616c756c     text...._Cellula
    d568:	69545f72 756f656d 63744174 6144646d     r_TimeoutAtcmdDa
    d578:	65526174 65527663 73657571 74695774     taRecvRequestWit
    d588:	6c614368 6361626c 203a206b 61766e49     hCallback : Inva
    d598:	2064696c 6c6c6563 72616c75 6e6f6320     lid cellular con
    d5a8:	74786574 00000000 6c65435f 616c756c     text...._Cellula
    d5b8:	69545f72 756f656d 63744174 6144646d     r_TimeoutAtcmdDa
    d5c8:	65536174 6552646e 73657571 74695774     taSendRequestWit
    d5d8:	6c614368 6361626c 203a206b 61766e49     hCallback : Inva
    d5e8:	2064696c 6c6c6563 72616c75 6e6f6320     lid cellular con
    d5f8:	74786574 00000000 6c65435f 616c756c     text...._Cellula
    d608:	69545f72 756f656d 63744174 6144646d     r_TimeoutAtcmdDa
    d618:	65536174 7553646e 73656363 6b6f5473     taSendSuccessTok
    d628:	3a206e65 766e4920 64696c61 6c656320     en : Invalid cel
    d638:	616c756c 6f632072 7865746e 00000074     lular context...
    d648:	61507441 46657372 206c6961 20726f66     AtParseFail for 
    d658:	3a756c25 20642520 25207325 00000073     %lu: %d %s %s...
    d668:	61507441 46657372 206c6961 20435255     AtParseFail URC 
    d678:	656b6f74 6174206e 20656c62 6e207369     token table is n
    d688:	7320746f 6574726f 00000064              ot sorted...

0000d694 <__FUNCTION__.8394>:
    d694:	6572705f 636f7270 4c737365 00656e69     _preprocessLine.

0000d6a4 <__FUNCTION__.8355>:
    d6a4:	6c65435f 616c756c 65525f72 694c6461     _Cellular_ReadLi
    d6b4:	0000656e                                ne..

0000d6b8 <__FUNCTION__.8277>:
    d6b8:	6f72705f 73736563 65746e49 64656d72     _processIntermed
    d6c8:	65746169 70736552 65736e6f 00000000     iateResponse....

0000d6d8 <__FUNCTION__.8312>:
    d6d8:	6c65435f 616c756c 72505f72 7365636f     _Cellular_Proces
    d6e8:	6e694c73 00000065                       sLine...

0000d6f0 <__FUNCTION__.8373>:
    d6f0:	6e61685f 4d656c64 79546773 00006570     _handleMsgType..

0000d700 <__FUNCTION__.8448>:
    d700:	746b705f 65526f69 68546461 64616572     _pktioReadThread
    d710:	00000000                                ....

0000d714 <__FUNCTION__.8459>:
    d714:	6c65435f 616c756c 6b505f72 496f6974     _Cellular_PktioI
    d724:	0074696e                                nit.

0000d728 <__FUNCTION__.8470>:
    d728:	6c65435f 616c756c 6b505f72 536f6974     _Cellular_PktioS
    d738:	41646e65 646d4374 00000000              endAtCmd....

0000d744 <__FUNCTION__.8477>:
    d744:	6c65435f 616c756c 6b505f72 536f6974     _Cellular_PktioS
    d754:	44646e65 00617461 44746b70 53617461     endData.pktDataS
    d764:	50646e65 69666572 20424378 75746572     endPrefixCB retu
    d774:	20736e72 6f727265 64252072 00000000     rns error %d....
    d784:	44746b70 50617461 69666572 20424378     pktDataPrefixCB 
    d794:	75746572 20736e72 6f727265 64252072     returns error %d
    d7a4:	00000000 65206f4e 7974706d 61707320     ....No empty spa
    d7b4:	66206563 206d6f72 6d6d6f63 20666920     ce from comm if 
    d7c4:	68206f74 6c646e61 6e692065 696d6f63     to handle incomi
    d7d4:	6420676e 2c617461 73657220 61207465     ng data, reset a
    d7e4:	70206c6c 6d617261 72657465 726f6620     ll parameter for
    d7f4:	78656e20 6e692074 696d6f63 6420676e      next incoming d
    d804:	2e617461 00000000 4c4c4543 52414c55     ata.....CELLULAR
    d814:	5f54415f 505f4f57 49464552 54412058     _AT_WO_PREFIX AT
    d824:	6f727020 73736563 52524520 203a524f      process ERROR: 
    d834:	202c7325 74617473 203a7375 00206425     %s, status: %d .
    d844:	4c4c4543 52414c55 5f54415f 48544957     CELLULAR_AT_WITH
    d854:	4552505f 20584946 70205441 65636f72     _PREFIX AT proce
    d864:	45207373 524f5252 7325203a 7473202c     ss ERROR: %s, st
    d874:	73757461 6425203a 00000020 65646f4d     atus: %d ...Mode
    d884:	6572206d 6e727574 52524520 203a524f     m return ERROR: 
    d894:	656e696c 2c732520 646d6320 25203a20     line %s, cmd : %
    d8a4:	72202c73 50707365 69666572 73252078     s, respPrefix %s
    d8b4:	7473202c 73757461 6425203a 00000000     , status: %d....
    d8c4:	636f7270 4c737365 20656e69 4f525245     processLine ERRO
    d8d4:	63202c52 6e61656c 20676e69 20217075     R, cleaning up! 
    d8e4:	72727543 20746e65 6d6d6f63 20646e61     Current command 
    d8f4:	00007325 76636572 67734d64 65707954     %s..recvdMsgType
    d904:	20736920 555f5441 4645444e 44454e49      is AT_UNDEFINED
    d914:	726f6620 73654d20 65676173 7325203a      for Message: %s
    d924:	6d63202c 73252064 00000000 6d6d6f43     , cmd %s....Comm
    d934:	726f7020 706f2074 66206e65 656c6961      port open faile
    d944:	00000064 276e6143 72632074 65746165     d...Can't create
    d954:	65766520 6720746e 70756f72 00000000      event group....
    d964:	64616552 74207265 61657268 62612064     Reader thread ab
    d974:	6574726f 00000064 276e6143 72632074     orted...Can't cr
    d984:	65746165 61657220 20726564 65726874     eate reader thre
    d994:	00006461 6c65435f 616c756c 6b505f72     ad.._Cellular_Pk
    d9a4:	536f6974 41646e65 646d4374 69203a20     tioSendAtCmd : i
    d9b4:	6c61766e 63206469 756c6c65 2072616c     nvalid cellular 
    d9c4:	746e6f63 00747865 6c65435f 616c756c     context._Cellula
    d9d4:	6b505f72 536f6974 41646e65 646d4374     r_PktioSendAtCmd
    d9e4:	69203a20 6c61766e 63206469 206d6d6f      : invalid comm 
    d9f4:	65746e69 63616672 61682065 656c646e     interface handle
    da04:	00000000 6c65435f 616c756c 6b505f72     ...._Cellular_Pk
    da14:	536f6974 41646e65 646d4374 69203a20     tioSendAtCmd : i
    da24:	6c61766e 70206469 6d437441 00000064     nvalid pAtCmd...
    da34:	6c65435f 616c756c 6b505f72 536f6974     _Cellular_PktioS
    da44:	44646e65 20617461 6e69203a 696c6176     endData : invali
    da54:	65632064 6c756c6c 63207261 65746e6f     d cellular conte
    da64:	00007478 6c65435f 616c756c 6b505f72     xt.._Cellular_Pk
    da74:	536f6974 44646e65 20617461 6e69203a     tioSendData : in
    da84:	696c6176 6f632064 69206d6d 7265746e     valid comm inter
    da94:	65636166 6e616820 00656c64 6c65435f     face handle._Cel
    daa4:	616c756c 6b505f72 536f6974 44646e65     lular_PktioSendD
    dab4:	20617461 6e69203a 696c6176 44702064     ata : invalid pD
    dac4:	00617461                                ata.

0000dac8 <__FUNCTION__.81184>:
    dac8:	6c6c6543 72616c75 6f6d6544 6b736154     CellularDemoTask
    dad8:	00000000 6c6c6543 72616c75 69616620     ....Cellular fai
    dae8:	2064656c 69206f74 6974696e 7a696c61     led to initializ
    daf8:	00002e65 6c65435b 616c756c 6d654472     e...[CellularDem
    db08:	7361546f 202c5d6b 63617453 25203a6b     oTask], Stack: %
    db18:	0000756c 6c6c6543 00000000              lu..Cell....

0000db24 <__FUNCTION__.6930>:
    db24:	74616c50 6d726f66 6572435f 44657461     Platform_CreateD
    db34:	63617465 54646568 61657268 00000064     etachedThread...
    db44:	6c6c6543 72616c75 7268545f 00646165     Cellular_Thread.
    db54:	6c696146 74206465 7263206f 65746165     Failed to create
    db64:	72687420 2e646165 00000000 2e2e0001      thread.........
    db74:	736e692e 20747265 65726568 002e2e2e     .insert here....
	...

0000dbf8 <__FUNCTION__.7577>:
    dbf8:	75746573 6c654370 616c756c 00000072     setupCellular...
    dc08:	203e3e3e 6c654320 616c756c 49532072     >>>  Cellular SI
    dc18:	6b6f204d 20207961 0d3c3c3c 0000000a     M okay  <<<.....
    dc28:	203e3e3e 6c654320 616c756c 49532072     >>>  Cellular SI
    dc38:	6163204d 73206472 65746174 2c642520     M card state %d,
    dc48:	636f4c20 7453206b 20657461 3c206425      Lock State %d <
    dc58:	0a0d3c3c 00000000 203e3e3e 6c654320     <<......>>>  Cel
    dc68:	616c756c 49532072 6166204d 72756c69     lular SIM failur
    dc78:	3c202065 0a0d3c3c 00000000 203e3e3e     e  <<<......>>> 
    dc88:	6c654320 616c756c 6f6d2072 656c7564      Cellular module
    dc98:	67657220 65747369 20646572 3c3c3c20      registered  <<<
    dca8:	00000a0d 203e3e3e 6c654320 616c756c     ....>>>  Cellula
    dcb8:	65472072 72655374 65636976 74617453     r GetServiceStat
    dcc8:	66207375 656c6961 64252064 7370202c     us failed %d, ps
    dcd8:	67657220 72747369 6f697461 7473206e      registration st
    dce8:	73757461 20642520 3c3c3c20 00000a0d     atus %d  <<<....
    dcf8:	203e3e3e 6c654320 616c756c 6f6d2072     >>>  Cellular mo
    dd08:	656c7564 6e616320 62207427 65722065     dule can't be re
    dd18:	74736967 64657265 3c3c2020 000a0d3c     gistered  <<<...
    dd28:	203e3e3e 6c654320 616c756c 6f6d2072     >>>  Cellular mo
    dd38:	656c7564 67657220 65747369 2c646572     dule registered,
    dd48:	20504920 72646461 20737365 20207325      IP address %s  
    dd58:	0d3c3c3c 0000000a                       <<<.....

0000dd60 <__FUNCTION__.81849>:
    dd60:	7672705f 6d6d6f43 66746e49 65636552     _prvCommIntfRece
    dd70:	00657669                                ive.

0000dd74 <__FUNCTION__.81837>:
    dd74:	7672705f 6d6d6f43 66746e49 646e6553     _prvCommIntfSend
    dd84:	00000000                                ....

0000dd88 <__FUNCTION__.81827>:
    dd88:	7672705f 6d6d6f43 66746e49 6e65704f     _prvCommIntfOpen
    dd98:	00000000 6c6c6543 72616c75 61657220     ....Cellular rea
    dda8:	6f632064 69206d6d 7265746e 65636166     d comm interface
    ddb8:	20736920 20746f6e 6e65706f 62206465      is not opened b
    ddc8:	726f6665 00002e65 6c6c6543 72616c75     efore...Cellular
    ddd8:	61655220 6c694664 61662065 25206c69      ReadFile fail %
    dde8:	00000064 6c6c6543 72616c75 6e657320     d...Cellular sen
    ddf8:	6f632064 69206d6d 7265746e 65636166     d comm interface
    de08:	20736920 20746f6e 6e65706f 62206465      is not opened b
    de18:	726f6665 00002e65 6c6c6543 72616c75     efore...Cellular
    de28:	69725720 66206574 206c6961 00006425      Write fail %d..
    de38:	6c6c6543 72616c75 6d6f6320 6e69206d     Cellular comm in
    de48:	66726574 20656361 6e65706f 61206465     terface opened a
    de58:	6165726c 00007964 4e524157 00000000     lready..WARN....
    de68:	4f464e49 00000000 55424544 00000047     INFO....DEBUG...
    de78:	5d73255b 00000020 67676f4c 00676e69     [%s] ...Logging.
    de88:	742f2e2e 64726968 74726170 54522f79     ../thirdparty/RT
    de98:	662f534f 72656572 2f736f74 65657246     OS/freertos/Free
    dea8:	534f5452 2e303156 2f302e30 736f7472     RTOSV10.0.0/rtos
    deb8:	726f705f 00632e74 454c4449 00000000     _port.c.IDLE....
    dec8:	09632509 25097525 75250975 00000a0d     .%c.%u.%u.%u....
    ded8:	20726d54 00637653                       Tmr Svc.

0000dee0 <_global_impure_ptr>:
    dee0:	200000d8 4f500043 00584953 3130002e     ... C.POSIX...01
    def0:	35343332 39383736 44434241 30004645     23456789ABCDEF.0
    df00:	34333231 38373635 63626139 00666564     123456789abcdef.

0000df10 <_ctype_>:
    df10:	20202000 20202020 28282020 20282828     .         ((((( 
    df20:	20202020 20202020 20202020 20202020                     
    df30:	10108820 10101010 10101010 10101010      ...............
    df40:	04040410 04040404 10040404 10101010     ................
    df50:	41411010 41414141 01010101 01010101     ..AAAAAA........
    df60:	01010101 01010101 01010101 10101010     ................
    df70:	42421010 42424242 02020202 02020202     ..BBBBBB........
    df80:	02020202 02020202 02020202 10101010     ................
    df90:	00000020 00000000 00000000 00000000      ...............
	...

0000e014 <__sf_fake_stderr>:
	...

0000e034 <__sf_fake_stdin>:
	...

0000e054 <__sf_fake_stdout>:
	...
    e074:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    e084:	00000000                                ....

0000e088 <_init>:
    e088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e08a:	bf00      	nop
    e08c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    e08e:	bc08      	pop	{r3}
    e090:	469e      	mov	lr, r3
    e092:	4770      	bx	lr

0000e094 <__init_array_start>:
    e094:	00000289 	.word	0x00000289

0000e098 <_fini>:
    e098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e09a:	bf00      	nop
    e09c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    e09e:	bc08      	pop	{r3}
    e0a0:	469e      	mov	lr, r3
    e0a2:	4770      	bx	lr

0000e0a4 <__fini_array_start>:
    e0a4:	00000265 	.word	0x00000265
